/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var __publicField = (obj, key, value) => __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);

// node_modules/.pnpm/feather-icons@4.29.2/node_modules/feather-icons/dist/feather.js
var require_feather = __commonJS({
  "node_modules/.pnpm/feather-icons@4.29.2/node_modules/feather-icons/dist/feather.js"(exports, module2) {
    (function webpackUniversalModuleDefinition(root, factory) {
      if (typeof exports === "object" && typeof module2 === "object")
        module2.exports = factory();
      else if (typeof define === "function" && define.amd)
        define([], factory);
      else if (typeof exports === "object")
        exports["feather"] = factory();
      else
        root["feather"] = factory();
    })(typeof self !== "undefined" ? self : exports, function() {
      return (
        /******/
        function(modules) {
          var installedModules = {};
          function __webpack_require__(moduleId) {
            if (installedModules[moduleId]) {
              return installedModules[moduleId].exports;
            }
            var module3 = installedModules[moduleId] = {
              /******/
              i: moduleId,
              /******/
              l: false,
              /******/
              exports: {}
              /******/
            };
            modules[moduleId].call(module3.exports, module3, module3.exports, __webpack_require__);
            module3.l = true;
            return module3.exports;
          }
          __webpack_require__.m = modules;
          __webpack_require__.c = installedModules;
          __webpack_require__.d = function(exports2, name, getter) {
            if (!__webpack_require__.o(exports2, name)) {
              Object.defineProperty(exports2, name, {
                /******/
                configurable: false,
                /******/
                enumerable: true,
                /******/
                get: getter
                /******/
              });
            }
          };
          __webpack_require__.r = function(exports2) {
            Object.defineProperty(exports2, "__esModule", { value: true });
          };
          __webpack_require__.n = function(module3) {
            var getter = module3 && module3.__esModule ? (
              /******/
              function getDefault() {
                return module3["default"];
              }
            ) : (
              /******/
              function getModuleExports() {
                return module3;
              }
            );
            __webpack_require__.d(getter, "a", getter);
            return getter;
          };
          __webpack_require__.o = function(object, property) {
            return Object.prototype.hasOwnProperty.call(object, property);
          };
          __webpack_require__.p = "";
          return __webpack_require__(__webpack_require__.s = 0);
        }({
          /***/
          "./dist/icons.json": (
            /*!*************************!*\
              !*** ./dist/icons.json ***!
              \*************************/
            /*! exports provided: activity, airplay, alert-circle, alert-octagon, alert-triangle, align-center, align-justify, align-left, align-right, anchor, aperture, archive, arrow-down-circle, arrow-down-left, arrow-down-right, arrow-down, arrow-left-circle, arrow-left, arrow-right-circle, arrow-right, arrow-up-circle, arrow-up-left, arrow-up-right, arrow-up, at-sign, award, bar-chart-2, bar-chart, battery-charging, battery, bell-off, bell, bluetooth, bold, book-open, book, bookmark, box, briefcase, calendar, camera-off, camera, cast, check-circle, check-square, check, chevron-down, chevron-left, chevron-right, chevron-up, chevrons-down, chevrons-left, chevrons-right, chevrons-up, chrome, circle, clipboard, clock, cloud-drizzle, cloud-lightning, cloud-off, cloud-rain, cloud-snow, cloud, code, codepen, codesandbox, coffee, columns, command, compass, copy, corner-down-left, corner-down-right, corner-left-down, corner-left-up, corner-right-down, corner-right-up, corner-up-left, corner-up-right, cpu, credit-card, crop, crosshair, database, delete, disc, divide-circle, divide-square, divide, dollar-sign, download-cloud, download, dribbble, droplet, edit-2, edit-3, edit, external-link, eye-off, eye, facebook, fast-forward, feather, figma, file-minus, file-plus, file-text, file, film, filter, flag, folder-minus, folder-plus, folder, framer, frown, gift, git-branch, git-commit, git-merge, git-pull-request, github, gitlab, globe, grid, hard-drive, hash, headphones, heart, help-circle, hexagon, home, image, inbox, info, instagram, italic, key, layers, layout, life-buoy, link-2, link, linkedin, list, loader, lock, log-in, log-out, mail, map-pin, map, maximize-2, maximize, meh, menu, message-circle, message-square, mic-off, mic, minimize-2, minimize, minus-circle, minus-square, minus, monitor, moon, more-horizontal, more-vertical, mouse-pointer, move, music, navigation-2, navigation, octagon, package, paperclip, pause-circle, pause, pen-tool, percent, phone-call, phone-forwarded, phone-incoming, phone-missed, phone-off, phone-outgoing, phone, pie-chart, play-circle, play, plus-circle, plus-square, plus, pocket, power, printer, radio, refresh-ccw, refresh-cw, repeat, rewind, rotate-ccw, rotate-cw, rss, save, scissors, search, send, server, settings, share-2, share, shield-off, shield, shopping-bag, shopping-cart, shuffle, sidebar, skip-back, skip-forward, slack, slash, sliders, smartphone, smile, speaker, square, star, stop-circle, sun, sunrise, sunset, table, tablet, tag, target, terminal, thermometer, thumbs-down, thumbs-up, toggle-left, toggle-right, tool, trash-2, trash, trello, trending-down, trending-up, triangle, truck, tv, twitch, twitter, type, umbrella, underline, unlock, upload-cloud, upload, user-check, user-minus, user-plus, user-x, user, users, video-off, video, voicemail, volume-1, volume-2, volume-x, volume, watch, wifi-off, wifi, wind, x-circle, x-octagon, x-square, x, youtube, zap-off, zap, zoom-in, zoom-out, default */
            /***/
            function(module3) {
              module3.exports = { "activity": '<polyline points="22 12 18 12 15 21 9 3 6 12 2 12"></polyline>', "airplay": '<path d="M5 17H4a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h16a2 2 0 0 1 2 2v10a2 2 0 0 1-2 2h-1"></path><polygon points="12 15 17 21 7 21 12 15"></polygon>', "alert-circle": '<circle cx="12" cy="12" r="10"></circle><line x1="12" y1="8" x2="12" y2="12"></line><line x1="12" y1="16" x2="12.01" y2="16"></line>', "alert-octagon": '<polygon points="7.86 2 16.14 2 22 7.86 22 16.14 16.14 22 7.86 22 2 16.14 2 7.86 7.86 2"></polygon><line x1="12" y1="8" x2="12" y2="12"></line><line x1="12" y1="16" x2="12.01" y2="16"></line>', "alert-triangle": '<path d="M10.29 3.86L1.82 18a2 2 0 0 0 1.71 3h16.94a2 2 0 0 0 1.71-3L13.71 3.86a2 2 0 0 0-3.42 0z"></path><line x1="12" y1="9" x2="12" y2="13"></line><line x1="12" y1="17" x2="12.01" y2="17"></line>', "align-center": '<line x1="18" y1="10" x2="6" y2="10"></line><line x1="21" y1="6" x2="3" y2="6"></line><line x1="21" y1="14" x2="3" y2="14"></line><line x1="18" y1="18" x2="6" y2="18"></line>', "align-justify": '<line x1="21" y1="10" x2="3" y2="10"></line><line x1="21" y1="6" x2="3" y2="6"></line><line x1="21" y1="14" x2="3" y2="14"></line><line x1="21" y1="18" x2="3" y2="18"></line>', "align-left": '<line x1="17" y1="10" x2="3" y2="10"></line><line x1="21" y1="6" x2="3" y2="6"></line><line x1="21" y1="14" x2="3" y2="14"></line><line x1="17" y1="18" x2="3" y2="18"></line>', "align-right": '<line x1="21" y1="10" x2="7" y2="10"></line><line x1="21" y1="6" x2="3" y2="6"></line><line x1="21" y1="14" x2="3" y2="14"></line><line x1="21" y1="18" x2="7" y2="18"></line>', "anchor": '<circle cx="12" cy="5" r="3"></circle><line x1="12" y1="22" x2="12" y2="8"></line><path d="M5 12H2a10 10 0 0 0 20 0h-3"></path>', "aperture": '<circle cx="12" cy="12" r="10"></circle><line x1="14.31" y1="8" x2="20.05" y2="17.94"></line><line x1="9.69" y1="8" x2="21.17" y2="8"></line><line x1="7.38" y1="12" x2="13.12" y2="2.06"></line><line x1="9.69" y1="16" x2="3.95" y2="6.06"></line><line x1="14.31" y1="16" x2="2.83" y2="16"></line><line x1="16.62" y1="12" x2="10.88" y2="21.94"></line>', "archive": '<polyline points="21 8 21 21 3 21 3 8"></polyline><rect x="1" y="3" width="22" height="5"></rect><line x1="10" y1="12" x2="14" y2="12"></line>', "arrow-down-circle": '<circle cx="12" cy="12" r="10"></circle><polyline points="8 12 12 16 16 12"></polyline><line x1="12" y1="8" x2="12" y2="16"></line>', "arrow-down-left": '<line x1="17" y1="7" x2="7" y2="17"></line><polyline points="17 17 7 17 7 7"></polyline>', "arrow-down-right": '<line x1="7" y1="7" x2="17" y2="17"></line><polyline points="17 7 17 17 7 17"></polyline>', "arrow-down": '<line x1="12" y1="5" x2="12" y2="19"></line><polyline points="19 12 12 19 5 12"></polyline>', "arrow-left-circle": '<circle cx="12" cy="12" r="10"></circle><polyline points="12 8 8 12 12 16"></polyline><line x1="16" y1="12" x2="8" y2="12"></line>', "arrow-left": '<line x1="19" y1="12" x2="5" y2="12"></line><polyline points="12 19 5 12 12 5"></polyline>', "arrow-right-circle": '<circle cx="12" cy="12" r="10"></circle><polyline points="12 16 16 12 12 8"></polyline><line x1="8" y1="12" x2="16" y2="12"></line>', "arrow-right": '<line x1="5" y1="12" x2="19" y2="12"></line><polyline points="12 5 19 12 12 19"></polyline>', "arrow-up-circle": '<circle cx="12" cy="12" r="10"></circle><polyline points="16 12 12 8 8 12"></polyline><line x1="12" y1="16" x2="12" y2="8"></line>', "arrow-up-left": '<line x1="17" y1="17" x2="7" y2="7"></line><polyline points="7 17 7 7 17 7"></polyline>', "arrow-up-right": '<line x1="7" y1="17" x2="17" y2="7"></line><polyline points="7 7 17 7 17 17"></polyline>', "arrow-up": '<line x1="12" y1="19" x2="12" y2="5"></line><polyline points="5 12 12 5 19 12"></polyline>', "at-sign": '<circle cx="12" cy="12" r="4"></circle><path d="M16 8v5a3 3 0 0 0 6 0v-1a10 10 0 1 0-3.92 7.94"></path>', "award": '<circle cx="12" cy="8" r="7"></circle><polyline points="8.21 13.89 7 23 12 20 17 23 15.79 13.88"></polyline>', "bar-chart-2": '<line x1="18" y1="20" x2="18" y2="10"></line><line x1="12" y1="20" x2="12" y2="4"></line><line x1="6" y1="20" x2="6" y2="14"></line>', "bar-chart": '<line x1="12" y1="20" x2="12" y2="10"></line><line x1="18" y1="20" x2="18" y2="4"></line><line x1="6" y1="20" x2="6" y2="16"></line>', "battery-charging": '<path d="M5 18H3a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h3.19M15 6h2a2 2 0 0 1 2 2v8a2 2 0 0 1-2 2h-3.19"></path><line x1="23" y1="13" x2="23" y2="11"></line><polyline points="11 6 7 12 13 12 9 18"></polyline>', "battery": '<rect x="1" y="6" width="18" height="12" rx="2" ry="2"></rect><line x1="23" y1="13" x2="23" y2="11"></line>', "bell-off": '<path d="M13.73 21a2 2 0 0 1-3.46 0"></path><path d="M18.63 13A17.89 17.89 0 0 1 18 8"></path><path d="M6.26 6.26A5.86 5.86 0 0 0 6 8c0 7-3 9-3 9h14"></path><path d="M18 8a6 6 0 0 0-9.33-5"></path><line x1="1" y1="1" x2="23" y2="23"></line>', "bell": '<path d="M18 8A6 6 0 0 0 6 8c0 7-3 9-3 9h18s-3-2-3-9"></path><path d="M13.73 21a2 2 0 0 1-3.46 0"></path>', "bluetooth": '<polyline points="6.5 6.5 17.5 17.5 12 23 12 1 17.5 6.5 6.5 17.5"></polyline>', "bold": '<path d="M6 4h8a4 4 0 0 1 4 4 4 4 0 0 1-4 4H6z"></path><path d="M6 12h9a4 4 0 0 1 4 4 4 4 0 0 1-4 4H6z"></path>', "book-open": '<path d="M2 3h6a4 4 0 0 1 4 4v14a3 3 0 0 0-3-3H2z"></path><path d="M22 3h-6a4 4 0 0 0-4 4v14a3 3 0 0 1 3-3h7z"></path>', "book": '<path d="M4 19.5A2.5 2.5 0 0 1 6.5 17H20"></path><path d="M6.5 2H20v20H6.5A2.5 2.5 0 0 1 4 19.5v-15A2.5 2.5 0 0 1 6.5 2z"></path>', "bookmark": '<path d="M19 21l-7-5-7 5V5a2 2 0 0 1 2-2h10a2 2 0 0 1 2 2z"></path>', "box": '<path d="M21 16V8a2 2 0 0 0-1-1.73l-7-4a2 2 0 0 0-2 0l-7 4A2 2 0 0 0 3 8v8a2 2 0 0 0 1 1.73l7 4a2 2 0 0 0 2 0l7-4A2 2 0 0 0 21 16z"></path><polyline points="3.27 6.96 12 12.01 20.73 6.96"></polyline><line x1="12" y1="22.08" x2="12" y2="12"></line>', "briefcase": '<rect x="2" y="7" width="20" height="14" rx="2" ry="2"></rect><path d="M16 21V5a2 2 0 0 0-2-2h-4a2 2 0 0 0-2 2v16"></path>', "calendar": '<rect x="3" y="4" width="18" height="18" rx="2" ry="2"></rect><line x1="16" y1="2" x2="16" y2="6"></line><line x1="8" y1="2" x2="8" y2="6"></line><line x1="3" y1="10" x2="21" y2="10"></line>', "camera-off": '<line x1="1" y1="1" x2="23" y2="23"></line><path d="M21 21H3a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h3m3-3h6l2 3h4a2 2 0 0 1 2 2v9.34m-7.72-2.06a4 4 0 1 1-5.56-5.56"></path>', "camera": '<path d="M23 19a2 2 0 0 1-2 2H3a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h4l2-3h6l2 3h4a2 2 0 0 1 2 2z"></path><circle cx="12" cy="13" r="4"></circle>', "cast": '<path d="M2 16.1A5 5 0 0 1 5.9 20M2 12.05A9 9 0 0 1 9.95 20M2 8V6a2 2 0 0 1 2-2h16a2 2 0 0 1 2 2v12a2 2 0 0 1-2 2h-6"></path><line x1="2" y1="20" x2="2.01" y2="20"></line>', "check-circle": '<path d="M22 11.08V12a10 10 0 1 1-5.93-9.14"></path><polyline points="22 4 12 14.01 9 11.01"></polyline>', "check-square": '<polyline points="9 11 12 14 22 4"></polyline><path d="M21 12v7a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h11"></path>', "check": '<polyline points="20 6 9 17 4 12"></polyline>', "chevron-down": '<polyline points="6 9 12 15 18 9"></polyline>', "chevron-left": '<polyline points="15 18 9 12 15 6"></polyline>', "chevron-right": '<polyline points="9 18 15 12 9 6"></polyline>', "chevron-up": '<polyline points="18 15 12 9 6 15"></polyline>', "chevrons-down": '<polyline points="7 13 12 18 17 13"></polyline><polyline points="7 6 12 11 17 6"></polyline>', "chevrons-left": '<polyline points="11 17 6 12 11 7"></polyline><polyline points="18 17 13 12 18 7"></polyline>', "chevrons-right": '<polyline points="13 17 18 12 13 7"></polyline><polyline points="6 17 11 12 6 7"></polyline>', "chevrons-up": '<polyline points="17 11 12 6 7 11"></polyline><polyline points="17 18 12 13 7 18"></polyline>', "chrome": '<circle cx="12" cy="12" r="10"></circle><circle cx="12" cy="12" r="4"></circle><line x1="21.17" y1="8" x2="12" y2="8"></line><line x1="3.95" y1="6.06" x2="8.54" y2="14"></line><line x1="10.88" y1="21.94" x2="15.46" y2="14"></line>', "circle": '<circle cx="12" cy="12" r="10"></circle>', "clipboard": '<path d="M16 4h2a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h2"></path><rect x="8" y="2" width="8" height="4" rx="1" ry="1"></rect>', "clock": '<circle cx="12" cy="12" r="10"></circle><polyline points="12 6 12 12 16 14"></polyline>', "cloud-drizzle": '<line x1="8" y1="19" x2="8" y2="21"></line><line x1="8" y1="13" x2="8" y2="15"></line><line x1="16" y1="19" x2="16" y2="21"></line><line x1="16" y1="13" x2="16" y2="15"></line><line x1="12" y1="21" x2="12" y2="23"></line><line x1="12" y1="15" x2="12" y2="17"></line><path d="M20 16.58A5 5 0 0 0 18 7h-1.26A8 8 0 1 0 4 15.25"></path>', "cloud-lightning": '<path d="M19 16.9A5 5 0 0 0 18 7h-1.26a8 8 0 1 0-11.62 9"></path><polyline points="13 11 9 17 15 17 11 23"></polyline>', "cloud-off": '<path d="M22.61 16.95A5 5 0 0 0 18 10h-1.26a8 8 0 0 0-7.05-6M5 5a8 8 0 0 0 4 15h9a5 5 0 0 0 1.7-.3"></path><line x1="1" y1="1" x2="23" y2="23"></line>', "cloud-rain": '<line x1="16" y1="13" x2="16" y2="21"></line><line x1="8" y1="13" x2="8" y2="21"></line><line x1="12" y1="15" x2="12" y2="23"></line><path d="M20 16.58A5 5 0 0 0 18 7h-1.26A8 8 0 1 0 4 15.25"></path>', "cloud-snow": '<path d="M20 17.58A5 5 0 0 0 18 8h-1.26A8 8 0 1 0 4 16.25"></path><line x1="8" y1="16" x2="8.01" y2="16"></line><line x1="8" y1="20" x2="8.01" y2="20"></line><line x1="12" y1="18" x2="12.01" y2="18"></line><line x1="12" y1="22" x2="12.01" y2="22"></line><line x1="16" y1="16" x2="16.01" y2="16"></line><line x1="16" y1="20" x2="16.01" y2="20"></line>', "cloud": '<path d="M18 10h-1.26A8 8 0 1 0 9 20h9a5 5 0 0 0 0-10z"></path>', "code": '<polyline points="16 18 22 12 16 6"></polyline><polyline points="8 6 2 12 8 18"></polyline>', "codepen": '<polygon points="12 2 22 8.5 22 15.5 12 22 2 15.5 2 8.5 12 2"></polygon><line x1="12" y1="22" x2="12" y2="15.5"></line><polyline points="22 8.5 12 15.5 2 8.5"></polyline><polyline points="2 15.5 12 8.5 22 15.5"></polyline><line x1="12" y1="2" x2="12" y2="8.5"></line>', "codesandbox": '<path d="M21 16V8a2 2 0 0 0-1-1.73l-7-4a2 2 0 0 0-2 0l-7 4A2 2 0 0 0 3 8v8a2 2 0 0 0 1 1.73l7 4a2 2 0 0 0 2 0l7-4A2 2 0 0 0 21 16z"></path><polyline points="7.5 4.21 12 6.81 16.5 4.21"></polyline><polyline points="7.5 19.79 7.5 14.6 3 12"></polyline><polyline points="21 12 16.5 14.6 16.5 19.79"></polyline><polyline points="3.27 6.96 12 12.01 20.73 6.96"></polyline><line x1="12" y1="22.08" x2="12" y2="12"></line>', "coffee": '<path d="M18 8h1a4 4 0 0 1 0 8h-1"></path><path d="M2 8h16v9a4 4 0 0 1-4 4H6a4 4 0 0 1-4-4V8z"></path><line x1="6" y1="1" x2="6" y2="4"></line><line x1="10" y1="1" x2="10" y2="4"></line><line x1="14" y1="1" x2="14" y2="4"></line>', "columns": '<path d="M12 3h7a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2h-7m0-18H5a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h7m0-18v18"></path>', "command": '<path d="M18 3a3 3 0 0 0-3 3v12a3 3 0 0 0 3 3 3 3 0 0 0 3-3 3 3 0 0 0-3-3H6a3 3 0 0 0-3 3 3 3 0 0 0 3 3 3 3 0 0 0 3-3V6a3 3 0 0 0-3-3 3 3 0 0 0-3 3 3 3 0 0 0 3 3h12a3 3 0 0 0 3-3 3 3 0 0 0-3-3z"></path>', "compass": '<circle cx="12" cy="12" r="10"></circle><polygon points="16.24 7.76 14.12 14.12 7.76 16.24 9.88 9.88 16.24 7.76"></polygon>', "copy": '<rect x="9" y="9" width="13" height="13" rx="2" ry="2"></rect><path d="M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1"></path>', "corner-down-left": '<polyline points="9 10 4 15 9 20"></polyline><path d="M20 4v7a4 4 0 0 1-4 4H4"></path>', "corner-down-right": '<polyline points="15 10 20 15 15 20"></polyline><path d="M4 4v7a4 4 0 0 0 4 4h12"></path>', "corner-left-down": '<polyline points="14 15 9 20 4 15"></polyline><path d="M20 4h-7a4 4 0 0 0-4 4v12"></path>', "corner-left-up": '<polyline points="14 9 9 4 4 9"></polyline><path d="M20 20h-7a4 4 0 0 1-4-4V4"></path>', "corner-right-down": '<polyline points="10 15 15 20 20 15"></polyline><path d="M4 4h7a4 4 0 0 1 4 4v12"></path>', "corner-right-up": '<polyline points="10 9 15 4 20 9"></polyline><path d="M4 20h7a4 4 0 0 0 4-4V4"></path>', "corner-up-left": '<polyline points="9 14 4 9 9 4"></polyline><path d="M20 20v-7a4 4 0 0 0-4-4H4"></path>', "corner-up-right": '<polyline points="15 14 20 9 15 4"></polyline><path d="M4 20v-7a4 4 0 0 1 4-4h12"></path>', "cpu": '<rect x="4" y="4" width="16" height="16" rx="2" ry="2"></rect><rect x="9" y="9" width="6" height="6"></rect><line x1="9" y1="1" x2="9" y2="4"></line><line x1="15" y1="1" x2="15" y2="4"></line><line x1="9" y1="20" x2="9" y2="23"></line><line x1="15" y1="20" x2="15" y2="23"></line><line x1="20" y1="9" x2="23" y2="9"></line><line x1="20" y1="14" x2="23" y2="14"></line><line x1="1" y1="9" x2="4" y2="9"></line><line x1="1" y1="14" x2="4" y2="14"></line>', "credit-card": '<rect x="1" y="4" width="22" height="16" rx="2" ry="2"></rect><line x1="1" y1="10" x2="23" y2="10"></line>', "crop": '<path d="M6.13 1L6 16a2 2 0 0 0 2 2h15"></path><path d="M1 6.13L16 6a2 2 0 0 1 2 2v15"></path>', "crosshair": '<circle cx="12" cy="12" r="10"></circle><line x1="22" y1="12" x2="18" y2="12"></line><line x1="6" y1="12" x2="2" y2="12"></line><line x1="12" y1="6" x2="12" y2="2"></line><line x1="12" y1="22" x2="12" y2="18"></line>', "database": '<ellipse cx="12" cy="5" rx="9" ry="3"></ellipse><path d="M21 12c0 1.66-4 3-9 3s-9-1.34-9-3"></path><path d="M3 5v14c0 1.66 4 3 9 3s9-1.34 9-3V5"></path>', "delete": '<path d="M21 4H8l-7 8 7 8h13a2 2 0 0 0 2-2V6a2 2 0 0 0-2-2z"></path><line x1="18" y1="9" x2="12" y2="15"></line><line x1="12" y1="9" x2="18" y2="15"></line>', "disc": '<circle cx="12" cy="12" r="10"></circle><circle cx="12" cy="12" r="3"></circle>', "divide-circle": '<line x1="8" y1="12" x2="16" y2="12"></line><line x1="12" y1="16" x2="12" y2="16"></line><line x1="12" y1="8" x2="12" y2="8"></line><circle cx="12" cy="12" r="10"></circle>', "divide-square": '<rect x="3" y="3" width="18" height="18" rx="2" ry="2"></rect><line x1="8" y1="12" x2="16" y2="12"></line><line x1="12" y1="16" x2="12" y2="16"></line><line x1="12" y1="8" x2="12" y2="8"></line>', "divide": '<circle cx="12" cy="6" r="2"></circle><line x1="5" y1="12" x2="19" y2="12"></line><circle cx="12" cy="18" r="2"></circle>', "dollar-sign": '<line x1="12" y1="1" x2="12" y2="23"></line><path d="M17 5H9.5a3.5 3.5 0 0 0 0 7h5a3.5 3.5 0 0 1 0 7H6"></path>', "download-cloud": '<polyline points="8 17 12 21 16 17"></polyline><line x1="12" y1="12" x2="12" y2="21"></line><path d="M20.88 18.09A5 5 0 0 0 18 9h-1.26A8 8 0 1 0 3 16.29"></path>', "download": '<path d="M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4"></path><polyline points="7 10 12 15 17 10"></polyline><line x1="12" y1="15" x2="12" y2="3"></line>', "dribbble": '<circle cx="12" cy="12" r="10"></circle><path d="M8.56 2.75c4.37 6.03 6.02 9.42 8.03 17.72m2.54-15.38c-3.72 4.35-8.94 5.66-16.88 5.85m19.5 1.9c-3.5-.93-6.63-.82-8.94 0-2.58.92-5.01 2.86-7.44 6.32"></path>', "droplet": '<path d="M12 2.69l5.66 5.66a8 8 0 1 1-11.31 0z"></path>', "edit-2": '<path d="M17 3a2.828 2.828 0 1 1 4 4L7.5 20.5 2 22l1.5-5.5L17 3z"></path>', "edit-3": '<path d="M12 20h9"></path><path d="M16.5 3.5a2.121 2.121 0 0 1 3 3L7 19l-4 1 1-4L16.5 3.5z"></path>', "edit": '<path d="M11 4H4a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2v-7"></path><path d="M18.5 2.5a2.121 2.121 0 0 1 3 3L12 15l-4 1 1-4 9.5-9.5z"></path>', "external-link": '<path d="M18 13v6a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h6"></path><polyline points="15 3 21 3 21 9"></polyline><line x1="10" y1="14" x2="21" y2="3"></line>', "eye-off": '<path d="M17.94 17.94A10.07 10.07 0 0 1 12 20c-7 0-11-8-11-8a18.45 18.45 0 0 1 5.06-5.94M9.9 4.24A9.12 9.12 0 0 1 12 4c7 0 11 8 11 8a18.5 18.5 0 0 1-2.16 3.19m-6.72-1.07a3 3 0 1 1-4.24-4.24"></path><line x1="1" y1="1" x2="23" y2="23"></line>', "eye": '<path d="M1 12s4-8 11-8 11 8 11 8-4 8-11 8-11-8-11-8z"></path><circle cx="12" cy="12" r="3"></circle>', "facebook": '<path d="M18 2h-3a5 5 0 0 0-5 5v3H7v4h3v8h4v-8h3l1-4h-4V7a1 1 0 0 1 1-1h3z"></path>', "fast-forward": '<polygon points="13 19 22 12 13 5 13 19"></polygon><polygon points="2 19 11 12 2 5 2 19"></polygon>', "feather": '<path d="M20.24 12.24a6 6 0 0 0-8.49-8.49L5 10.5V19h8.5z"></path><line x1="16" y1="8" x2="2" y2="22"></line><line x1="17.5" y1="15" x2="9" y2="15"></line>', "figma": '<path d="M5 5.5A3.5 3.5 0 0 1 8.5 2H12v7H8.5A3.5 3.5 0 0 1 5 5.5z"></path><path d="M12 2h3.5a3.5 3.5 0 1 1 0 7H12V2z"></path><path d="M12 12.5a3.5 3.5 0 1 1 7 0 3.5 3.5 0 1 1-7 0z"></path><path d="M5 19.5A3.5 3.5 0 0 1 8.5 16H12v3.5a3.5 3.5 0 1 1-7 0z"></path><path d="M5 12.5A3.5 3.5 0 0 1 8.5 9H12v7H8.5A3.5 3.5 0 0 1 5 12.5z"></path>', "file-minus": '<path d="M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z"></path><polyline points="14 2 14 8 20 8"></polyline><line x1="9" y1="15" x2="15" y2="15"></line>', "file-plus": '<path d="M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z"></path><polyline points="14 2 14 8 20 8"></polyline><line x1="12" y1="18" x2="12" y2="12"></line><line x1="9" y1="15" x2="15" y2="15"></line>', "file-text": '<path d="M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z"></path><polyline points="14 2 14 8 20 8"></polyline><line x1="16" y1="13" x2="8" y2="13"></line><line x1="16" y1="17" x2="8" y2="17"></line><polyline points="10 9 9 9 8 9"></polyline>', "file": '<path d="M13 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V9z"></path><polyline points="13 2 13 9 20 9"></polyline>', "film": '<rect x="2" y="2" width="20" height="20" rx="2.18" ry="2.18"></rect><line x1="7" y1="2" x2="7" y2="22"></line><line x1="17" y1="2" x2="17" y2="22"></line><line x1="2" y1="12" x2="22" y2="12"></line><line x1="2" y1="7" x2="7" y2="7"></line><line x1="2" y1="17" x2="7" y2="17"></line><line x1="17" y1="17" x2="22" y2="17"></line><line x1="17" y1="7" x2="22" y2="7"></line>', "filter": '<polygon points="22 3 2 3 10 12.46 10 19 14 21 14 12.46 22 3"></polygon>', "flag": '<path d="M4 15s1-1 4-1 5 2 8 2 4-1 4-1V3s-1 1-4 1-5-2-8-2-4 1-4 1z"></path><line x1="4" y1="22" x2="4" y2="15"></line>', "folder-minus": '<path d="M22 19a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h5l2 3h9a2 2 0 0 1 2 2z"></path><line x1="9" y1="14" x2="15" y2="14"></line>', "folder-plus": '<path d="M22 19a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h5l2 3h9a2 2 0 0 1 2 2z"></path><line x1="12" y1="11" x2="12" y2="17"></line><line x1="9" y1="14" x2="15" y2="14"></line>', "folder": '<path d="M22 19a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h5l2 3h9a2 2 0 0 1 2 2z"></path>', "framer": '<path d="M5 16V9h14V2H5l14 14h-7m-7 0l7 7v-7m-7 0h7"></path>', "frown": '<circle cx="12" cy="12" r="10"></circle><path d="M16 16s-1.5-2-4-2-4 2-4 2"></path><line x1="9" y1="9" x2="9.01" y2="9"></line><line x1="15" y1="9" x2="15.01" y2="9"></line>', "gift": '<polyline points="20 12 20 22 4 22 4 12"></polyline><rect x="2" y="7" width="20" height="5"></rect><line x1="12" y1="22" x2="12" y2="7"></line><path d="M12 7H7.5a2.5 2.5 0 0 1 0-5C11 2 12 7 12 7z"></path><path d="M12 7h4.5a2.5 2.5 0 0 0 0-5C13 2 12 7 12 7z"></path>', "git-branch": '<line x1="6" y1="3" x2="6" y2="15"></line><circle cx="18" cy="6" r="3"></circle><circle cx="6" cy="18" r="3"></circle><path d="M18 9a9 9 0 0 1-9 9"></path>', "git-commit": '<circle cx="12" cy="12" r="4"></circle><line x1="1.05" y1="12" x2="7" y2="12"></line><line x1="17.01" y1="12" x2="22.96" y2="12"></line>', "git-merge": '<circle cx="18" cy="18" r="3"></circle><circle cx="6" cy="6" r="3"></circle><path d="M6 21V9a9 9 0 0 0 9 9"></path>', "git-pull-request": '<circle cx="18" cy="18" r="3"></circle><circle cx="6" cy="6" r="3"></circle><path d="M13 6h3a2 2 0 0 1 2 2v7"></path><line x1="6" y1="9" x2="6" y2="21"></line>', "github": '<path d="M9 19c-5 1.5-5-2.5-7-3m14 6v-3.87a3.37 3.37 0 0 0-.94-2.61c3.14-.35 6.44-1.54 6.44-7A5.44 5.44 0 0 0 20 4.77 5.07 5.07 0 0 0 19.91 1S18.73.65 16 2.48a13.38 13.38 0 0 0-7 0C6.27.65 5.09 1 5.09 1A5.07 5.07 0 0 0 5 4.77a5.44 5.44 0 0 0-1.5 3.78c0 5.42 3.3 6.61 6.44 7A3.37 3.37 0 0 0 9 18.13V22"></path>', "gitlab": '<path d="M22.65 14.39L12 22.13 1.35 14.39a.84.84 0 0 1-.3-.94l1.22-3.78 2.44-7.51A.42.42 0 0 1 4.82 2a.43.43 0 0 1 .58 0 .42.42 0 0 1 .11.18l2.44 7.49h8.1l2.44-7.51A.42.42 0 0 1 18.6 2a.43.43 0 0 1 .58 0 .42.42 0 0 1 .11.18l2.44 7.51L23 13.45a.84.84 0 0 1-.35.94z"></path>', "globe": '<circle cx="12" cy="12" r="10"></circle><line x1="2" y1="12" x2="22" y2="12"></line><path d="M12 2a15.3 15.3 0 0 1 4 10 15.3 15.3 0 0 1-4 10 15.3 15.3 0 0 1-4-10 15.3 15.3 0 0 1 4-10z"></path>', "grid": '<rect x="3" y="3" width="7" height="7"></rect><rect x="14" y="3" width="7" height="7"></rect><rect x="14" y="14" width="7" height="7"></rect><rect x="3" y="14" width="7" height="7"></rect>', "hard-drive": '<line x1="22" y1="12" x2="2" y2="12"></line><path d="M5.45 5.11L2 12v6a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2v-6l-3.45-6.89A2 2 0 0 0 16.76 4H7.24a2 2 0 0 0-1.79 1.11z"></path><line x1="6" y1="16" x2="6.01" y2="16"></line><line x1="10" y1="16" x2="10.01" y2="16"></line>', "hash": '<line x1="4" y1="9" x2="20" y2="9"></line><line x1="4" y1="15" x2="20" y2="15"></line><line x1="10" y1="3" x2="8" y2="21"></line><line x1="16" y1="3" x2="14" y2="21"></line>', "headphones": '<path d="M3 18v-6a9 9 0 0 1 18 0v6"></path><path d="M21 19a2 2 0 0 1-2 2h-1a2 2 0 0 1-2-2v-3a2 2 0 0 1 2-2h3zM3 19a2 2 0 0 0 2 2h1a2 2 0 0 0 2-2v-3a2 2 0 0 0-2-2H3z"></path>', "heart": '<path d="M20.84 4.61a5.5 5.5 0 0 0-7.78 0L12 5.67l-1.06-1.06a5.5 5.5 0 0 0-7.78 7.78l1.06 1.06L12 21.23l7.78-7.78 1.06-1.06a5.5 5.5 0 0 0 0-7.78z"></path>', "help-circle": '<circle cx="12" cy="12" r="10"></circle><path d="M9.09 9a3 3 0 0 1 5.83 1c0 2-3 3-3 3"></path><line x1="12" y1="17" x2="12.01" y2="17"></line>', "hexagon": '<path d="M21 16V8a2 2 0 0 0-1-1.73l-7-4a2 2 0 0 0-2 0l-7 4A2 2 0 0 0 3 8v8a2 2 0 0 0 1 1.73l7 4a2 2 0 0 0 2 0l7-4A2 2 0 0 0 21 16z"></path>', "home": '<path d="M3 9l9-7 9 7v11a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2z"></path><polyline points="9 22 9 12 15 12 15 22"></polyline>', "image": '<rect x="3" y="3" width="18" height="18" rx="2" ry="2"></rect><circle cx="8.5" cy="8.5" r="1.5"></circle><polyline points="21 15 16 10 5 21"></polyline>', "inbox": '<polyline points="22 12 16 12 14 15 10 15 8 12 2 12"></polyline><path d="M5.45 5.11L2 12v6a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2v-6l-3.45-6.89A2 2 0 0 0 16.76 4H7.24a2 2 0 0 0-1.79 1.11z"></path>', "info": '<circle cx="12" cy="12" r="10"></circle><line x1="12" y1="16" x2="12" y2="12"></line><line x1="12" y1="8" x2="12.01" y2="8"></line>', "instagram": '<rect x="2" y="2" width="20" height="20" rx="5" ry="5"></rect><path d="M16 11.37A4 4 0 1 1 12.63 8 4 4 0 0 1 16 11.37z"></path><line x1="17.5" y1="6.5" x2="17.51" y2="6.5"></line>', "italic": '<line x1="19" y1="4" x2="10" y2="4"></line><line x1="14" y1="20" x2="5" y2="20"></line><line x1="15" y1="4" x2="9" y2="20"></line>', "key": '<path d="M21 2l-2 2m-7.61 7.61a5.5 5.5 0 1 1-7.778 7.778 5.5 5.5 0 0 1 7.777-7.777zm0 0L15.5 7.5m0 0l3 3L22 7l-3-3m-3.5 3.5L19 4"></path>', "layers": '<polygon points="12 2 2 7 12 12 22 7 12 2"></polygon><polyline points="2 17 12 22 22 17"></polyline><polyline points="2 12 12 17 22 12"></polyline>', "layout": '<rect x="3" y="3" width="18" height="18" rx="2" ry="2"></rect><line x1="3" y1="9" x2="21" y2="9"></line><line x1="9" y1="21" x2="9" y2="9"></line>', "life-buoy": '<circle cx="12" cy="12" r="10"></circle><circle cx="12" cy="12" r="4"></circle><line x1="4.93" y1="4.93" x2="9.17" y2="9.17"></line><line x1="14.83" y1="14.83" x2="19.07" y2="19.07"></line><line x1="14.83" y1="9.17" x2="19.07" y2="4.93"></line><line x1="14.83" y1="9.17" x2="18.36" y2="5.64"></line><line x1="4.93" y1="19.07" x2="9.17" y2="14.83"></line>', "link-2": '<path d="M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3"></path><line x1="8" y1="12" x2="16" y2="12"></line>', "link": '<path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71"></path><path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71"></path>', "linkedin": '<path d="M16 8a6 6 0 0 1 6 6v7h-4v-7a2 2 0 0 0-2-2 2 2 0 0 0-2 2v7h-4v-7a6 6 0 0 1 6-6z"></path><rect x="2" y="9" width="4" height="12"></rect><circle cx="4" cy="4" r="2"></circle>', "list": '<line x1="8" y1="6" x2="21" y2="6"></line><line x1="8" y1="12" x2="21" y2="12"></line><line x1="8" y1="18" x2="21" y2="18"></line><line x1="3" y1="6" x2="3.01" y2="6"></line><line x1="3" y1="12" x2="3.01" y2="12"></line><line x1="3" y1="18" x2="3.01" y2="18"></line>', "loader": '<line x1="12" y1="2" x2="12" y2="6"></line><line x1="12" y1="18" x2="12" y2="22"></line><line x1="4.93" y1="4.93" x2="7.76" y2="7.76"></line><line x1="16.24" y1="16.24" x2="19.07" y2="19.07"></line><line x1="2" y1="12" x2="6" y2="12"></line><line x1="18" y1="12" x2="22" y2="12"></line><line x1="4.93" y1="19.07" x2="7.76" y2="16.24"></line><line x1="16.24" y1="7.76" x2="19.07" y2="4.93"></line>', "lock": '<rect x="3" y="11" width="18" height="11" rx="2" ry="2"></rect><path d="M7 11V7a5 5 0 0 1 10 0v4"></path>', "log-in": '<path d="M15 3h4a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2h-4"></path><polyline points="10 17 15 12 10 7"></polyline><line x1="15" y1="12" x2="3" y2="12"></line>', "log-out": '<path d="M9 21H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h4"></path><polyline points="16 17 21 12 16 7"></polyline><line x1="21" y1="12" x2="9" y2="12"></line>', "mail": '<path d="M4 4h16c1.1 0 2 .9 2 2v12c0 1.1-.9 2-2 2H4c-1.1 0-2-.9-2-2V6c0-1.1.9-2 2-2z"></path><polyline points="22,6 12,13 2,6"></polyline>', "map-pin": '<path d="M21 10c0 7-9 13-9 13s-9-6-9-13a9 9 0 0 1 18 0z"></path><circle cx="12" cy="10" r="3"></circle>', "map": '<polygon points="1 6 1 22 8 18 16 22 23 18 23 2 16 6 8 2 1 6"></polygon><line x1="8" y1="2" x2="8" y2="18"></line><line x1="16" y1="6" x2="16" y2="22"></line>', "maximize-2": '<polyline points="15 3 21 3 21 9"></polyline><polyline points="9 21 3 21 3 15"></polyline><line x1="21" y1="3" x2="14" y2="10"></line><line x1="3" y1="21" x2="10" y2="14"></line>', "maximize": '<path d="M8 3H5a2 2 0 0 0-2 2v3m18 0V5a2 2 0 0 0-2-2h-3m0 18h3a2 2 0 0 0 2-2v-3M3 16v3a2 2 0 0 0 2 2h3"></path>', "meh": '<circle cx="12" cy="12" r="10"></circle><line x1="8" y1="15" x2="16" y2="15"></line><line x1="9" y1="9" x2="9.01" y2="9"></line><line x1="15" y1="9" x2="15.01" y2="9"></line>', "menu": '<line x1="3" y1="12" x2="21" y2="12"></line><line x1="3" y1="6" x2="21" y2="6"></line><line x1="3" y1="18" x2="21" y2="18"></line>', "message-circle": '<path d="M21 11.5a8.38 8.38 0 0 1-.9 3.8 8.5 8.5 0 0 1-7.6 4.7 8.38 8.38 0 0 1-3.8-.9L3 21l1.9-5.7a8.38 8.38 0 0 1-.9-3.8 8.5 8.5 0 0 1 4.7-7.6 8.38 8.38 0 0 1 3.8-.9h.5a8.48 8.48 0 0 1 8 8v.5z"></path>', "message-square": '<path d="M21 15a2 2 0 0 1-2 2H7l-4 4V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2z"></path>', "mic-off": '<line x1="1" y1="1" x2="23" y2="23"></line><path d="M9 9v3a3 3 0 0 0 5.12 2.12M15 9.34V4a3 3 0 0 0-5.94-.6"></path><path d="M17 16.95A7 7 0 0 1 5 12v-2m14 0v2a7 7 0 0 1-.11 1.23"></path><line x1="12" y1="19" x2="12" y2="23"></line><line x1="8" y1="23" x2="16" y2="23"></line>', "mic": '<path d="M12 1a3 3 0 0 0-3 3v8a3 3 0 0 0 6 0V4a3 3 0 0 0-3-3z"></path><path d="M19 10v2a7 7 0 0 1-14 0v-2"></path><line x1="12" y1="19" x2="12" y2="23"></line><line x1="8" y1="23" x2="16" y2="23"></line>', "minimize-2": '<polyline points="4 14 10 14 10 20"></polyline><polyline points="20 10 14 10 14 4"></polyline><line x1="14" y1="10" x2="21" y2="3"></line><line x1="3" y1="21" x2="10" y2="14"></line>', "minimize": '<path d="M8 3v3a2 2 0 0 1-2 2H3m18 0h-3a2 2 0 0 1-2-2V3m0 18v-3a2 2 0 0 1 2-2h3M3 16h3a2 2 0 0 1 2 2v3"></path>', "minus-circle": '<circle cx="12" cy="12" r="10"></circle><line x1="8" y1="12" x2="16" y2="12"></line>', "minus-square": '<rect x="3" y="3" width="18" height="18" rx="2" ry="2"></rect><line x1="8" y1="12" x2="16" y2="12"></line>', "minus": '<line x1="5" y1="12" x2="19" y2="12"></line>', "monitor": '<rect x="2" y="3" width="20" height="14" rx="2" ry="2"></rect><line x1="8" y1="21" x2="16" y2="21"></line><line x1="12" y1="17" x2="12" y2="21"></line>', "moon": '<path d="M21 12.79A9 9 0 1 1 11.21 3 7 7 0 0 0 21 12.79z"></path>', "more-horizontal": '<circle cx="12" cy="12" r="1"></circle><circle cx="19" cy="12" r="1"></circle><circle cx="5" cy="12" r="1"></circle>', "more-vertical": '<circle cx="12" cy="12" r="1"></circle><circle cx="12" cy="5" r="1"></circle><circle cx="12" cy="19" r="1"></circle>', "mouse-pointer": '<path d="M3 3l7.07 16.97 2.51-7.39 7.39-2.51L3 3z"></path><path d="M13 13l6 6"></path>', "move": '<polyline points="5 9 2 12 5 15"></polyline><polyline points="9 5 12 2 15 5"></polyline><polyline points="15 19 12 22 9 19"></polyline><polyline points="19 9 22 12 19 15"></polyline><line x1="2" y1="12" x2="22" y2="12"></line><line x1="12" y1="2" x2="12" y2="22"></line>', "music": '<path d="M9 18V5l12-2v13"></path><circle cx="6" cy="18" r="3"></circle><circle cx="18" cy="16" r="3"></circle>', "navigation-2": '<polygon points="12 2 19 21 12 17 5 21 12 2"></polygon>', "navigation": '<polygon points="3 11 22 2 13 21 11 13 3 11"></polygon>', "octagon": '<polygon points="7.86 2 16.14 2 22 7.86 22 16.14 16.14 22 7.86 22 2 16.14 2 7.86 7.86 2"></polygon>', "package": '<line x1="16.5" y1="9.4" x2="7.5" y2="4.21"></line><path d="M21 16V8a2 2 0 0 0-1-1.73l-7-4a2 2 0 0 0-2 0l-7 4A2 2 0 0 0 3 8v8a2 2 0 0 0 1 1.73l7 4a2 2 0 0 0 2 0l7-4A2 2 0 0 0 21 16z"></path><polyline points="3.27 6.96 12 12.01 20.73 6.96"></polyline><line x1="12" y1="22.08" x2="12" y2="12"></line>', "paperclip": '<path d="M21.44 11.05l-9.19 9.19a6 6 0 0 1-8.49-8.49l9.19-9.19a4 4 0 0 1 5.66 5.66l-9.2 9.19a2 2 0 0 1-2.83-2.83l8.49-8.48"></path>', "pause-circle": '<circle cx="12" cy="12" r="10"></circle><line x1="10" y1="15" x2="10" y2="9"></line><line x1="14" y1="15" x2="14" y2="9"></line>', "pause": '<rect x="6" y="4" width="4" height="16"></rect><rect x="14" y="4" width="4" height="16"></rect>', "pen-tool": '<path d="M12 19l7-7 3 3-7 7-3-3z"></path><path d="M18 13l-1.5-7.5L2 2l3.5 14.5L13 18l5-5z"></path><path d="M2 2l7.586 7.586"></path><circle cx="11" cy="11" r="2"></circle>', "percent": '<line x1="19" y1="5" x2="5" y2="19"></line><circle cx="6.5" cy="6.5" r="2.5"></circle><circle cx="17.5" cy="17.5" r="2.5"></circle>', "phone-call": '<path d="M15.05 5A5 5 0 0 1 19 8.95M15.05 1A9 9 0 0 1 23 8.94m-1 7.98v3a2 2 0 0 1-2.18 2 19.79 19.79 0 0 1-8.63-3.07 19.5 19.5 0 0 1-6-6 19.79 19.79 0 0 1-3.07-8.67A2 2 0 0 1 4.11 2h3a2 2 0 0 1 2 1.72 12.84 12.84 0 0 0 .7 2.81 2 2 0 0 1-.45 2.11L8.09 9.91a16 16 0 0 0 6 6l1.27-1.27a2 2 0 0 1 2.11-.45 12.84 12.84 0 0 0 2.81.7A2 2 0 0 1 22 16.92z"></path>', "phone-forwarded": '<polyline points="19 1 23 5 19 9"></polyline><line x1="15" y1="5" x2="23" y2="5"></line><path d="M22 16.92v3a2 2 0 0 1-2.18 2 19.79 19.79 0 0 1-8.63-3.07 19.5 19.5 0 0 1-6-6 19.79 19.79 0 0 1-3.07-8.67A2 2 0 0 1 4.11 2h3a2 2 0 0 1 2 1.72 12.84 12.84 0 0 0 .7 2.81 2 2 0 0 1-.45 2.11L8.09 9.91a16 16 0 0 0 6 6l1.27-1.27a2 2 0 0 1 2.11-.45 12.84 12.84 0 0 0 2.81.7A2 2 0 0 1 22 16.92z"></path>', "phone-incoming": '<polyline points="16 2 16 8 22 8"></polyline><line x1="23" y1="1" x2="16" y2="8"></line><path d="M22 16.92v3a2 2 0 0 1-2.18 2 19.79 19.79 0 0 1-8.63-3.07 19.5 19.5 0 0 1-6-6 19.79 19.79 0 0 1-3.07-8.67A2 2 0 0 1 4.11 2h3a2 2 0 0 1 2 1.72 12.84 12.84 0 0 0 .7 2.81 2 2 0 0 1-.45 2.11L8.09 9.91a16 16 0 0 0 6 6l1.27-1.27a2 2 0 0 1 2.11-.45 12.84 12.84 0 0 0 2.81.7A2 2 0 0 1 22 16.92z"></path>', "phone-missed": '<line x1="23" y1="1" x2="17" y2="7"></line><line x1="17" y1="1" x2="23" y2="7"></line><path d="M22 16.92v3a2 2 0 0 1-2.18 2 19.79 19.79 0 0 1-8.63-3.07 19.5 19.5 0 0 1-6-6 19.79 19.79 0 0 1-3.07-8.67A2 2 0 0 1 4.11 2h3a2 2 0 0 1 2 1.72 12.84 12.84 0 0 0 .7 2.81 2 2 0 0 1-.45 2.11L8.09 9.91a16 16 0 0 0 6 6l1.27-1.27a2 2 0 0 1 2.11-.45 12.84 12.84 0 0 0 2.81.7A2 2 0 0 1 22 16.92z"></path>', "phone-off": '<path d="M10.68 13.31a16 16 0 0 0 3.41 2.6l1.27-1.27a2 2 0 0 1 2.11-.45 12.84 12.84 0 0 0 2.81.7 2 2 0 0 1 1.72 2v3a2 2 0 0 1-2.18 2 19.79 19.79 0 0 1-8.63-3.07 19.42 19.42 0 0 1-3.33-2.67m-2.67-3.34a19.79 19.79 0 0 1-3.07-8.63A2 2 0 0 1 4.11 2h3a2 2 0 0 1 2 1.72 12.84 12.84 0 0 0 .7 2.81 2 2 0 0 1-.45 2.11L8.09 9.91"></path><line x1="23" y1="1" x2="1" y2="23"></line>', "phone-outgoing": '<polyline points="23 7 23 1 17 1"></polyline><line x1="16" y1="8" x2="23" y2="1"></line><path d="M22 16.92v3a2 2 0 0 1-2.18 2 19.79 19.79 0 0 1-8.63-3.07 19.5 19.5 0 0 1-6-6 19.79 19.79 0 0 1-3.07-8.67A2 2 0 0 1 4.11 2h3a2 2 0 0 1 2 1.72 12.84 12.84 0 0 0 .7 2.81 2 2 0 0 1-.45 2.11L8.09 9.91a16 16 0 0 0 6 6l1.27-1.27a2 2 0 0 1 2.11-.45 12.84 12.84 0 0 0 2.81.7A2 2 0 0 1 22 16.92z"></path>', "phone": '<path d="M22 16.92v3a2 2 0 0 1-2.18 2 19.79 19.79 0 0 1-8.63-3.07 19.5 19.5 0 0 1-6-6 19.79 19.79 0 0 1-3.07-8.67A2 2 0 0 1 4.11 2h3a2 2 0 0 1 2 1.72 12.84 12.84 0 0 0 .7 2.81 2 2 0 0 1-.45 2.11L8.09 9.91a16 16 0 0 0 6 6l1.27-1.27a2 2 0 0 1 2.11-.45 12.84 12.84 0 0 0 2.81.7A2 2 0 0 1 22 16.92z"></path>', "pie-chart": '<path d="M21.21 15.89A10 10 0 1 1 8 2.83"></path><path d="M22 12A10 10 0 0 0 12 2v10z"></path>', "play-circle": '<circle cx="12" cy="12" r="10"></circle><polygon points="10 8 16 12 10 16 10 8"></polygon>', "play": '<polygon points="5 3 19 12 5 21 5 3"></polygon>', "plus-circle": '<circle cx="12" cy="12" r="10"></circle><line x1="12" y1="8" x2="12" y2="16"></line><line x1="8" y1="12" x2="16" y2="12"></line>', "plus-square": '<rect x="3" y="3" width="18" height="18" rx="2" ry="2"></rect><line x1="12" y1="8" x2="12" y2="16"></line><line x1="8" y1="12" x2="16" y2="12"></line>', "plus": '<line x1="12" y1="5" x2="12" y2="19"></line><line x1="5" y1="12" x2="19" y2="12"></line>', "pocket": '<path d="M4 3h16a2 2 0 0 1 2 2v6a10 10 0 0 1-10 10A10 10 0 0 1 2 11V5a2 2 0 0 1 2-2z"></path><polyline points="8 10 12 14 16 10"></polyline>', "power": '<path d="M18.36 6.64a9 9 0 1 1-12.73 0"></path><line x1="12" y1="2" x2="12" y2="12"></line>', "printer": '<polyline points="6 9 6 2 18 2 18 9"></polyline><path d="M6 18H4a2 2 0 0 1-2-2v-5a2 2 0 0 1 2-2h16a2 2 0 0 1 2 2v5a2 2 0 0 1-2 2h-2"></path><rect x="6" y="14" width="12" height="8"></rect>', "radio": '<circle cx="12" cy="12" r="2"></circle><path d="M16.24 7.76a6 6 0 0 1 0 8.49m-8.48-.01a6 6 0 0 1 0-8.49m11.31-2.82a10 10 0 0 1 0 14.14m-14.14 0a10 10 0 0 1 0-14.14"></path>', "refresh-ccw": '<polyline points="1 4 1 10 7 10"></polyline><polyline points="23 20 23 14 17 14"></polyline><path d="M20.49 9A9 9 0 0 0 5.64 5.64L1 10m22 4l-4.64 4.36A9 9 0 0 1 3.51 15"></path>', "refresh-cw": '<polyline points="23 4 23 10 17 10"></polyline><polyline points="1 20 1 14 7 14"></polyline><path d="M3.51 9a9 9 0 0 1 14.85-3.36L23 10M1 14l4.64 4.36A9 9 0 0 0 20.49 15"></path>', "repeat": '<polyline points="17 1 21 5 17 9"></polyline><path d="M3 11V9a4 4 0 0 1 4-4h14"></path><polyline points="7 23 3 19 7 15"></polyline><path d="M21 13v2a4 4 0 0 1-4 4H3"></path>', "rewind": '<polygon points="11 19 2 12 11 5 11 19"></polygon><polygon points="22 19 13 12 22 5 22 19"></polygon>', "rotate-ccw": '<polyline points="1 4 1 10 7 10"></polyline><path d="M3.51 15a9 9 0 1 0 2.13-9.36L1 10"></path>', "rotate-cw": '<polyline points="23 4 23 10 17 10"></polyline><path d="M20.49 15a9 9 0 1 1-2.12-9.36L23 10"></path>', "rss": '<path d="M4 11a9 9 0 0 1 9 9"></path><path d="M4 4a16 16 0 0 1 16 16"></path><circle cx="5" cy="19" r="1"></circle>', "save": '<path d="M19 21H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h11l5 5v11a2 2 0 0 1-2 2z"></path><polyline points="17 21 17 13 7 13 7 21"></polyline><polyline points="7 3 7 8 15 8"></polyline>', "scissors": '<circle cx="6" cy="6" r="3"></circle><circle cx="6" cy="18" r="3"></circle><line x1="20" y1="4" x2="8.12" y2="15.88"></line><line x1="14.47" y1="14.48" x2="20" y2="20"></line><line x1="8.12" y1="8.12" x2="12" y2="12"></line>', "search": '<circle cx="11" cy="11" r="8"></circle><line x1="21" y1="21" x2="16.65" y2="16.65"></line>', "send": '<line x1="22" y1="2" x2="11" y2="13"></line><polygon points="22 2 15 22 11 13 2 9 22 2"></polygon>', "server": '<rect x="2" y="2" width="20" height="8" rx="2" ry="2"></rect><rect x="2" y="14" width="20" height="8" rx="2" ry="2"></rect><line x1="6" y1="6" x2="6.01" y2="6"></line><line x1="6" y1="18" x2="6.01" y2="18"></line>', "settings": '<circle cx="12" cy="12" r="3"></circle><path d="M19.4 15a1.65 1.65 0 0 0 .33 1.82l.06.06a2 2 0 0 1 0 2.83 2 2 0 0 1-2.83 0l-.06-.06a1.65 1.65 0 0 0-1.82-.33 1.65 1.65 0 0 0-1 1.51V21a2 2 0 0 1-2 2 2 2 0 0 1-2-2v-.09A1.65 1.65 0 0 0 9 19.4a1.65 1.65 0 0 0-1.82.33l-.06.06a2 2 0 0 1-2.83 0 2 2 0 0 1 0-2.83l.06-.06a1.65 1.65 0 0 0 .33-1.82 1.65 1.65 0 0 0-1.51-1H3a2 2 0 0 1-2-2 2 2 0 0 1 2-2h.09A1.65 1.65 0 0 0 4.6 9a1.65 1.65 0 0 0-.33-1.82l-.06-.06a2 2 0 0 1 0-2.83 2 2 0 0 1 2.83 0l.06.06a1.65 1.65 0 0 0 1.82.33H9a1.65 1.65 0 0 0 1-1.51V3a2 2 0 0 1 2-2 2 2 0 0 1 2 2v.09a1.65 1.65 0 0 0 1 1.51 1.65 1.65 0 0 0 1.82-.33l.06-.06a2 2 0 0 1 2.83 0 2 2 0 0 1 0 2.83l-.06.06a1.65 1.65 0 0 0-.33 1.82V9a1.65 1.65 0 0 0 1.51 1H21a2 2 0 0 1 2 2 2 2 0 0 1-2 2h-.09a1.65 1.65 0 0 0-1.51 1z"></path>', "share-2": '<circle cx="18" cy="5" r="3"></circle><circle cx="6" cy="12" r="3"></circle><circle cx="18" cy="19" r="3"></circle><line x1="8.59" y1="13.51" x2="15.42" y2="17.49"></line><line x1="15.41" y1="6.51" x2="8.59" y2="10.49"></line>', "share": '<path d="M4 12v8a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2v-8"></path><polyline points="16 6 12 2 8 6"></polyline><line x1="12" y1="2" x2="12" y2="15"></line>', "shield-off": '<path d="M19.69 14a6.9 6.9 0 0 0 .31-2V5l-8-3-3.16 1.18"></path><path d="M4.73 4.73L4 5v7c0 6 8 10 8 10a20.29 20.29 0 0 0 5.62-4.38"></path><line x1="1" y1="1" x2="23" y2="23"></line>', "shield": '<path d="M12 22s8-4 8-10V5l-8-3-8 3v7c0 6 8 10 8 10z"></path>', "shopping-bag": '<path d="M6 2L3 6v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2V6l-3-4z"></path><line x1="3" y1="6" x2="21" y2="6"></line><path d="M16 10a4 4 0 0 1-8 0"></path>', "shopping-cart": '<circle cx="9" cy="21" r="1"></circle><circle cx="20" cy="21" r="1"></circle><path d="M1 1h4l2.68 13.39a2 2 0 0 0 2 1.61h9.72a2 2 0 0 0 2-1.61L23 6H6"></path>', "shuffle": '<polyline points="16 3 21 3 21 8"></polyline><line x1="4" y1="20" x2="21" y2="3"></line><polyline points="21 16 21 21 16 21"></polyline><line x1="15" y1="15" x2="21" y2="21"></line><line x1="4" y1="4" x2="9" y2="9"></line>', "sidebar": '<rect x="3" y="3" width="18" height="18" rx="2" ry="2"></rect><line x1="9" y1="3" x2="9" y2="21"></line>', "skip-back": '<polygon points="19 20 9 12 19 4 19 20"></polygon><line x1="5" y1="19" x2="5" y2="5"></line>', "skip-forward": '<polygon points="5 4 15 12 5 20 5 4"></polygon><line x1="19" y1="5" x2="19" y2="19"></line>', "slack": '<path d="M14.5 10c-.83 0-1.5-.67-1.5-1.5v-5c0-.83.67-1.5 1.5-1.5s1.5.67 1.5 1.5v5c0 .83-.67 1.5-1.5 1.5z"></path><path d="M20.5 10H19V8.5c0-.83.67-1.5 1.5-1.5s1.5.67 1.5 1.5-.67 1.5-1.5 1.5z"></path><path d="M9.5 14c.83 0 1.5.67 1.5 1.5v5c0 .83-.67 1.5-1.5 1.5S8 21.33 8 20.5v-5c0-.83.67-1.5 1.5-1.5z"></path><path d="M3.5 14H5v1.5c0 .83-.67 1.5-1.5 1.5S2 16.33 2 15.5 2.67 14 3.5 14z"></path><path d="M14 14.5c0-.83.67-1.5 1.5-1.5h5c.83 0 1.5.67 1.5 1.5s-.67 1.5-1.5 1.5h-5c-.83 0-1.5-.67-1.5-1.5z"></path><path d="M15.5 19H14v1.5c0 .83.67 1.5 1.5 1.5s1.5-.67 1.5-1.5-.67-1.5-1.5-1.5z"></path><path d="M10 9.5C10 8.67 9.33 8 8.5 8h-5C2.67 8 2 8.67 2 9.5S2.67 11 3.5 11h5c.83 0 1.5-.67 1.5-1.5z"></path><path d="M8.5 5H10V3.5C10 2.67 9.33 2 8.5 2S7 2.67 7 3.5 7.67 5 8.5 5z"></path>', "slash": '<circle cx="12" cy="12" r="10"></circle><line x1="4.93" y1="4.93" x2="19.07" y2="19.07"></line>', "sliders": '<line x1="4" y1="21" x2="4" y2="14"></line><line x1="4" y1="10" x2="4" y2="3"></line><line x1="12" y1="21" x2="12" y2="12"></line><line x1="12" y1="8" x2="12" y2="3"></line><line x1="20" y1="21" x2="20" y2="16"></line><line x1="20" y1="12" x2="20" y2="3"></line><line x1="1" y1="14" x2="7" y2="14"></line><line x1="9" y1="8" x2="15" y2="8"></line><line x1="17" y1="16" x2="23" y2="16"></line>', "smartphone": '<rect x="5" y="2" width="14" height="20" rx="2" ry="2"></rect><line x1="12" y1="18" x2="12.01" y2="18"></line>', "smile": '<circle cx="12" cy="12" r="10"></circle><path d="M8 14s1.5 2 4 2 4-2 4-2"></path><line x1="9" y1="9" x2="9.01" y2="9"></line><line x1="15" y1="9" x2="15.01" y2="9"></line>', "speaker": '<rect x="4" y="2" width="16" height="20" rx="2" ry="2"></rect><circle cx="12" cy="14" r="4"></circle><line x1="12" y1="6" x2="12.01" y2="6"></line>', "square": '<rect x="3" y="3" width="18" height="18" rx="2" ry="2"></rect>', "star": '<polygon points="12 2 15.09 8.26 22 9.27 17 14.14 18.18 21.02 12 17.77 5.82 21.02 7 14.14 2 9.27 8.91 8.26 12 2"></polygon>', "stop-circle": '<circle cx="12" cy="12" r="10"></circle><rect x="9" y="9" width="6" height="6"></rect>', "sun": '<circle cx="12" cy="12" r="5"></circle><line x1="12" y1="1" x2="12" y2="3"></line><line x1="12" y1="21" x2="12" y2="23"></line><line x1="4.22" y1="4.22" x2="5.64" y2="5.64"></line><line x1="18.36" y1="18.36" x2="19.78" y2="19.78"></line><line x1="1" y1="12" x2="3" y2="12"></line><line x1="21" y1="12" x2="23" y2="12"></line><line x1="4.22" y1="19.78" x2="5.64" y2="18.36"></line><line x1="18.36" y1="5.64" x2="19.78" y2="4.22"></line>', "sunrise": '<path d="M17 18a5 5 0 0 0-10 0"></path><line x1="12" y1="2" x2="12" y2="9"></line><line x1="4.22" y1="10.22" x2="5.64" y2="11.64"></line><line x1="1" y1="18" x2="3" y2="18"></line><line x1="21" y1="18" x2="23" y2="18"></line><line x1="18.36" y1="11.64" x2="19.78" y2="10.22"></line><line x1="23" y1="22" x2="1" y2="22"></line><polyline points="8 6 12 2 16 6"></polyline>', "sunset": '<path d="M17 18a5 5 0 0 0-10 0"></path><line x1="12" y1="9" x2="12" y2="2"></line><line x1="4.22" y1="10.22" x2="5.64" y2="11.64"></line><line x1="1" y1="18" x2="3" y2="18"></line><line x1="21" y1="18" x2="23" y2="18"></line><line x1="18.36" y1="11.64" x2="19.78" y2="10.22"></line><line x1="23" y1="22" x2="1" y2="22"></line><polyline points="16 5 12 9 8 5"></polyline>', "table": '<path d="M9 3H5a2 2 0 0 0-2 2v4m6-6h10a2 2 0 0 1 2 2v4M9 3v18m0 0h10a2 2 0 0 0 2-2V9M9 21H5a2 2 0 0 1-2-2V9m0 0h18"></path>', "tablet": '<rect x="4" y="2" width="16" height="20" rx="2" ry="2"></rect><line x1="12" y1="18" x2="12.01" y2="18"></line>', "tag": '<path d="M20.59 13.41l-7.17 7.17a2 2 0 0 1-2.83 0L2 12V2h10l8.59 8.59a2 2 0 0 1 0 2.82z"></path><line x1="7" y1="7" x2="7.01" y2="7"></line>', "target": '<circle cx="12" cy="12" r="10"></circle><circle cx="12" cy="12" r="6"></circle><circle cx="12" cy="12" r="2"></circle>', "terminal": '<polyline points="4 17 10 11 4 5"></polyline><line x1="12" y1="19" x2="20" y2="19"></line>', "thermometer": '<path d="M14 14.76V3.5a2.5 2.5 0 0 0-5 0v11.26a4.5 4.5 0 1 0 5 0z"></path>', "thumbs-down": '<path d="M10 15v4a3 3 0 0 0 3 3l4-9V2H5.72a2 2 0 0 0-2 1.7l-1.38 9a2 2 0 0 0 2 2.3zm7-13h2.67A2.31 2.31 0 0 1 22 4v7a2.31 2.31 0 0 1-2.33 2H17"></path>', "thumbs-up": '<path d="M14 9V5a3 3 0 0 0-3-3l-4 9v11h11.28a2 2 0 0 0 2-1.7l1.38-9a2 2 0 0 0-2-2.3zM7 22H4a2 2 0 0 1-2-2v-7a2 2 0 0 1 2-2h3"></path>', "toggle-left": '<rect x="1" y="5" width="22" height="14" rx="7" ry="7"></rect><circle cx="8" cy="12" r="3"></circle>', "toggle-right": '<rect x="1" y="5" width="22" height="14" rx="7" ry="7"></rect><circle cx="16" cy="12" r="3"></circle>', "tool": '<path d="M14.7 6.3a1 1 0 0 0 0 1.4l1.6 1.6a1 1 0 0 0 1.4 0l3.77-3.77a6 6 0 0 1-7.94 7.94l-6.91 6.91a2.12 2.12 0 0 1-3-3l6.91-6.91a6 6 0 0 1 7.94-7.94l-3.76 3.76z"></path>', "trash-2": '<polyline points="3 6 5 6 21 6"></polyline><path d="M19 6v14a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2V6m3 0V4a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v2"></path><line x1="10" y1="11" x2="10" y2="17"></line><line x1="14" y1="11" x2="14" y2="17"></line>', "trash": '<polyline points="3 6 5 6 21 6"></polyline><path d="M19 6v14a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2V6m3 0V4a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v2"></path>', "trello": '<rect x="3" y="3" width="18" height="18" rx="2" ry="2"></rect><rect x="7" y="7" width="3" height="9"></rect><rect x="14" y="7" width="3" height="5"></rect>', "trending-down": '<polyline points="23 18 13.5 8.5 8.5 13.5 1 6"></polyline><polyline points="17 18 23 18 23 12"></polyline>', "trending-up": '<polyline points="23 6 13.5 15.5 8.5 10.5 1 18"></polyline><polyline points="17 6 23 6 23 12"></polyline>', "triangle": '<path d="M10.29 3.86L1.82 18a2 2 0 0 0 1.71 3h16.94a2 2 0 0 0 1.71-3L13.71 3.86a2 2 0 0 0-3.42 0z"></path>', "truck": '<rect x="1" y="3" width="15" height="13"></rect><polygon points="16 8 20 8 23 11 23 16 16 16 16 8"></polygon><circle cx="5.5" cy="18.5" r="2.5"></circle><circle cx="18.5" cy="18.5" r="2.5"></circle>', "tv": '<rect x="2" y="7" width="20" height="15" rx="2" ry="2"></rect><polyline points="17 2 12 7 7 2"></polyline>', "twitch": '<path d="M21 2H3v16h5v4l4-4h5l4-4V2zm-10 9V7m5 4V7"></path>', "twitter": '<path d="M23 3a10.9 10.9 0 0 1-3.14 1.53 4.48 4.48 0 0 0-7.86 3v1A10.66 10.66 0 0 1 3 4s-4 9 5 13a11.64 11.64 0 0 1-7 2c9 5 20 0 20-11.5a4.5 4.5 0 0 0-.08-.83A7.72 7.72 0 0 0 23 3z"></path>', "type": '<polyline points="4 7 4 4 20 4 20 7"></polyline><line x1="9" y1="20" x2="15" y2="20"></line><line x1="12" y1="4" x2="12" y2="20"></line>', "umbrella": '<path d="M23 12a11.05 11.05 0 0 0-22 0zm-5 7a3 3 0 0 1-6 0v-7"></path>', "underline": '<path d="M6 3v7a6 6 0 0 0 6 6 6 6 0 0 0 6-6V3"></path><line x1="4" y1="21" x2="20" y2="21"></line>', "unlock": '<rect x="3" y="11" width="18" height="11" rx="2" ry="2"></rect><path d="M7 11V7a5 5 0 0 1 9.9-1"></path>', "upload-cloud": '<polyline points="16 16 12 12 8 16"></polyline><line x1="12" y1="12" x2="12" y2="21"></line><path d="M20.39 18.39A5 5 0 0 0 18 9h-1.26A8 8 0 1 0 3 16.3"></path><polyline points="16 16 12 12 8 16"></polyline>', "upload": '<path d="M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4"></path><polyline points="17 8 12 3 7 8"></polyline><line x1="12" y1="3" x2="12" y2="15"></line>', "user-check": '<path d="M16 21v-2a4 4 0 0 0-4-4H5a4 4 0 0 0-4 4v2"></path><circle cx="8.5" cy="7" r="4"></circle><polyline points="17 11 19 13 23 9"></polyline>', "user-minus": '<path d="M16 21v-2a4 4 0 0 0-4-4H5a4 4 0 0 0-4 4v2"></path><circle cx="8.5" cy="7" r="4"></circle><line x1="23" y1="11" x2="17" y2="11"></line>', "user-plus": '<path d="M16 21v-2a4 4 0 0 0-4-4H5a4 4 0 0 0-4 4v2"></path><circle cx="8.5" cy="7" r="4"></circle><line x1="20" y1="8" x2="20" y2="14"></line><line x1="23" y1="11" x2="17" y2="11"></line>', "user-x": '<path d="M16 21v-2a4 4 0 0 0-4-4H5a4 4 0 0 0-4 4v2"></path><circle cx="8.5" cy="7" r="4"></circle><line x1="18" y1="8" x2="23" y2="13"></line><line x1="23" y1="8" x2="18" y2="13"></line>', "user": '<path d="M20 21v-2a4 4 0 0 0-4-4H8a4 4 0 0 0-4 4v2"></path><circle cx="12" cy="7" r="4"></circle>', "users": '<path d="M17 21v-2a4 4 0 0 0-4-4H5a4 4 0 0 0-4 4v2"></path><circle cx="9" cy="7" r="4"></circle><path d="M23 21v-2a4 4 0 0 0-3-3.87"></path><path d="M16 3.13a4 4 0 0 1 0 7.75"></path>', "video-off": '<path d="M16 16v1a2 2 0 0 1-2 2H3a2 2 0 0 1-2-2V7a2 2 0 0 1 2-2h2m5.66 0H14a2 2 0 0 1 2 2v3.34l1 1L23 7v10"></path><line x1="1" y1="1" x2="23" y2="23"></line>', "video": '<polygon points="23 7 16 12 23 17 23 7"></polygon><rect x="1" y="5" width="15" height="14" rx="2" ry="2"></rect>', "voicemail": '<circle cx="5.5" cy="11.5" r="4.5"></circle><circle cx="18.5" cy="11.5" r="4.5"></circle><line x1="5.5" y1="16" x2="18.5" y2="16"></line>', "volume-1": '<polygon points="11 5 6 9 2 9 2 15 6 15 11 19 11 5"></polygon><path d="M15.54 8.46a5 5 0 0 1 0 7.07"></path>', "volume-2": '<polygon points="11 5 6 9 2 9 2 15 6 15 11 19 11 5"></polygon><path d="M19.07 4.93a10 10 0 0 1 0 14.14M15.54 8.46a5 5 0 0 1 0 7.07"></path>', "volume-x": '<polygon points="11 5 6 9 2 9 2 15 6 15 11 19 11 5"></polygon><line x1="23" y1="9" x2="17" y2="15"></line><line x1="17" y1="9" x2="23" y2="15"></line>', "volume": '<polygon points="11 5 6 9 2 9 2 15 6 15 11 19 11 5"></polygon>', "watch": '<circle cx="12" cy="12" r="7"></circle><polyline points="12 9 12 12 13.5 13.5"></polyline><path d="M16.51 17.35l-.35 3.83a2 2 0 0 1-2 1.82H9.83a2 2 0 0 1-2-1.82l-.35-3.83m.01-10.7l.35-3.83A2 2 0 0 1 9.83 1h4.35a2 2 0 0 1 2 1.82l.35 3.83"></path>', "wifi-off": '<line x1="1" y1="1" x2="23" y2="23"></line><path d="M16.72 11.06A10.94 10.94 0 0 1 19 12.55"></path><path d="M5 12.55a10.94 10.94 0 0 1 5.17-2.39"></path><path d="M10.71 5.05A16 16 0 0 1 22.58 9"></path><path d="M1.42 9a15.91 15.91 0 0 1 4.7-2.88"></path><path d="M8.53 16.11a6 6 0 0 1 6.95 0"></path><line x1="12" y1="20" x2="12.01" y2="20"></line>', "wifi": '<path d="M5 12.55a11 11 0 0 1 14.08 0"></path><path d="M1.42 9a16 16 0 0 1 21.16 0"></path><path d="M8.53 16.11a6 6 0 0 1 6.95 0"></path><line x1="12" y1="20" x2="12.01" y2="20"></line>', "wind": '<path d="M9.59 4.59A2 2 0 1 1 11 8H2m10.59 11.41A2 2 0 1 0 14 16H2m15.73-8.27A2.5 2.5 0 1 1 19.5 12H2"></path>', "x-circle": '<circle cx="12" cy="12" r="10"></circle><line x1="15" y1="9" x2="9" y2="15"></line><line x1="9" y1="9" x2="15" y2="15"></line>', "x-octagon": '<polygon points="7.86 2 16.14 2 22 7.86 22 16.14 16.14 22 7.86 22 2 16.14 2 7.86 7.86 2"></polygon><line x1="15" y1="9" x2="9" y2="15"></line><line x1="9" y1="9" x2="15" y2="15"></line>', "x-square": '<rect x="3" y="3" width="18" height="18" rx="2" ry="2"></rect><line x1="9" y1="9" x2="15" y2="15"></line><line x1="15" y1="9" x2="9" y2="15"></line>', "x": '<line x1="18" y1="6" x2="6" y2="18"></line><line x1="6" y1="6" x2="18" y2="18"></line>', "youtube": '<path d="M22.54 6.42a2.78 2.78 0 0 0-1.94-2C18.88 4 12 4 12 4s-6.88 0-8.6.46a2.78 2.78 0 0 0-1.94 2A29 29 0 0 0 1 11.75a29 29 0 0 0 .46 5.33A2.78 2.78 0 0 0 3.4 19c1.72.46 8.6.46 8.6.46s6.88 0 8.6-.46a2.78 2.78 0 0 0 1.94-2 29 29 0 0 0 .46-5.25 29 29 0 0 0-.46-5.33z"></path><polygon points="9.75 15.02 15.5 11.75 9.75 8.48 9.75 15.02"></polygon>', "zap-off": '<polyline points="12.41 6.75 13 2 10.57 4.92"></polyline><polyline points="18.57 12.91 21 10 15.66 10"></polyline><polyline points="8 8 3 14 12 14 11 22 16 16"></polyline><line x1="1" y1="1" x2="23" y2="23"></line>', "zap": '<polygon points="13 2 3 14 12 14 11 22 21 10 12 10 13 2"></polygon>', "zoom-in": '<circle cx="11" cy="11" r="8"></circle><line x1="21" y1="21" x2="16.65" y2="16.65"></line><line x1="11" y1="8" x2="11" y2="14"></line><line x1="8" y1="11" x2="14" y2="11"></line>', "zoom-out": '<circle cx="11" cy="11" r="8"></circle><line x1="21" y1="21" x2="16.65" y2="16.65"></line><line x1="8" y1="11" x2="14" y2="11"></line>' };
            }
          ),
          /***/
          "./node_modules/classnames/dedupe.js": (
            /*!*******************************************!*\
              !*** ./node_modules/classnames/dedupe.js ***!
              \*******************************************/
            /*! no static exports found */
            /***/
            function(module3, exports2, __webpack_require__) {
              var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
              (function() {
                "use strict";
                var classNames = function() {
                  function StorageObject() {
                  }
                  StorageObject.prototype = /* @__PURE__ */ Object.create(null);
                  function _parseArray(resultSet, array) {
                    var length = array.length;
                    for (var i = 0; i < length; ++i) {
                      _parse(resultSet, array[i]);
                    }
                  }
                  var hasOwn = {}.hasOwnProperty;
                  function _parseNumber(resultSet, num) {
                    resultSet[num] = true;
                  }
                  function _parseObject(resultSet, object) {
                    for (var k in object) {
                      if (hasOwn.call(object, k)) {
                        resultSet[k] = !!object[k];
                      }
                    }
                  }
                  var SPACE = /\s+/;
                  function _parseString(resultSet, str) {
                    var array = str.split(SPACE);
                    var length = array.length;
                    for (var i = 0; i < length; ++i) {
                      resultSet[array[i]] = true;
                    }
                  }
                  function _parse(resultSet, arg) {
                    if (!arg) return;
                    var argType = typeof arg;
                    if (argType === "string") {
                      _parseString(resultSet, arg);
                    } else if (Array.isArray(arg)) {
                      _parseArray(resultSet, arg);
                    } else if (argType === "object") {
                      _parseObject(resultSet, arg);
                    } else if (argType === "number") {
                      _parseNumber(resultSet, arg);
                    }
                  }
                  function _classNames() {
                    var len = arguments.length;
                    var args = Array(len);
                    for (var i = 0; i < len; i++) {
                      args[i] = arguments[i];
                    }
                    var classSet = new StorageObject();
                    _parseArray(classSet, args);
                    var list = [];
                    for (var k in classSet) {
                      if (classSet[k]) {
                        list.push(k);
                      }
                    }
                    return list.join(" ");
                  }
                  return _classNames;
                }();
                if (typeof module3 !== "undefined" && module3.exports) {
                  module3.exports = classNames;
                } else if (true) {
                  !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function() {
                    return classNames;
                  }.apply(exports2, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== void 0 && (module3.exports = __WEBPACK_AMD_DEFINE_RESULT__));
                } else {
                }
              })();
            }
          ),
          /***/
          "./node_modules/core-js/es/array/from.js": (
            /*!***********************************************!*\
              !*** ./node_modules/core-js/es/array/from.js ***!
              \***********************************************/
            /*! no static exports found */
            /***/
            function(module3, exports2, __webpack_require__) {
              __webpack_require__(
                /*! ../../modules/es.string.iterator */
                "./node_modules/core-js/modules/es.string.iterator.js"
              );
              __webpack_require__(
                /*! ../../modules/es.array.from */
                "./node_modules/core-js/modules/es.array.from.js"
              );
              var path = __webpack_require__(
                /*! ../../internals/path */
                "./node_modules/core-js/internals/path.js"
              );
              module3.exports = path.Array.from;
            }
          ),
          /***/
          "./node_modules/core-js/internals/a-function.js": (
            /*!******************************************************!*\
              !*** ./node_modules/core-js/internals/a-function.js ***!
              \******************************************************/
            /*! no static exports found */
            /***/
            function(module3, exports2) {
              module3.exports = function(it) {
                if (typeof it != "function") {
                  throw TypeError(String(it) + " is not a function");
                }
                return it;
              };
            }
          ),
          /***/
          "./node_modules/core-js/internals/an-object.js": (
            /*!*****************************************************!*\
              !*** ./node_modules/core-js/internals/an-object.js ***!
              \*****************************************************/
            /*! no static exports found */
            /***/
            function(module3, exports2, __webpack_require__) {
              var isObject = __webpack_require__(
                /*! ../internals/is-object */
                "./node_modules/core-js/internals/is-object.js"
              );
              module3.exports = function(it) {
                if (!isObject(it)) {
                  throw TypeError(String(it) + " is not an object");
                }
                return it;
              };
            }
          ),
          /***/
          "./node_modules/core-js/internals/array-from.js": (
            /*!******************************************************!*\
              !*** ./node_modules/core-js/internals/array-from.js ***!
              \******************************************************/
            /*! no static exports found */
            /***/
            function(module3, exports2, __webpack_require__) {
              "use strict";
              var bind2 = __webpack_require__(
                /*! ../internals/bind-context */
                "./node_modules/core-js/internals/bind-context.js"
              );
              var toObject = __webpack_require__(
                /*! ../internals/to-object */
                "./node_modules/core-js/internals/to-object.js"
              );
              var callWithSafeIterationClosing = __webpack_require__(
                /*! ../internals/call-with-safe-iteration-closing */
                "./node_modules/core-js/internals/call-with-safe-iteration-closing.js"
              );
              var isArrayIteratorMethod = __webpack_require__(
                /*! ../internals/is-array-iterator-method */
                "./node_modules/core-js/internals/is-array-iterator-method.js"
              );
              var toLength = __webpack_require__(
                /*! ../internals/to-length */
                "./node_modules/core-js/internals/to-length.js"
              );
              var createProperty = __webpack_require__(
                /*! ../internals/create-property */
                "./node_modules/core-js/internals/create-property.js"
              );
              var getIteratorMethod = __webpack_require__(
                /*! ../internals/get-iterator-method */
                "./node_modules/core-js/internals/get-iterator-method.js"
              );
              module3.exports = function from(arrayLike) {
                var O = toObject(arrayLike);
                var C = typeof this == "function" ? this : Array;
                var argumentsLength = arguments.length;
                var mapfn = argumentsLength > 1 ? arguments[1] : void 0;
                var mapping = mapfn !== void 0;
                var index = 0;
                var iteratorMethod = getIteratorMethod(O);
                var length, result, step, iterator;
                if (mapping) mapfn = bind2(mapfn, argumentsLength > 2 ? arguments[2] : void 0, 2);
                if (iteratorMethod != void 0 && !(C == Array && isArrayIteratorMethod(iteratorMethod))) {
                  iterator = iteratorMethod.call(O);
                  result = new C();
                  for (; !(step = iterator.next()).done; index++) {
                    createProperty(
                      result,
                      index,
                      mapping ? callWithSafeIterationClosing(iterator, mapfn, [step.value, index], true) : step.value
                    );
                  }
                } else {
                  length = toLength(O.length);
                  result = new C(length);
                  for (; length > index; index++) {
                    createProperty(result, index, mapping ? mapfn(O[index], index) : O[index]);
                  }
                }
                result.length = index;
                return result;
              };
            }
          ),
          /***/
          "./node_modules/core-js/internals/array-includes.js": (
            /*!**********************************************************!*\
              !*** ./node_modules/core-js/internals/array-includes.js ***!
              \**********************************************************/
            /*! no static exports found */
            /***/
            function(module3, exports2, __webpack_require__) {
              var toIndexedObject = __webpack_require__(
                /*! ../internals/to-indexed-object */
                "./node_modules/core-js/internals/to-indexed-object.js"
              );
              var toLength = __webpack_require__(
                /*! ../internals/to-length */
                "./node_modules/core-js/internals/to-length.js"
              );
              var toAbsoluteIndex = __webpack_require__(
                /*! ../internals/to-absolute-index */
                "./node_modules/core-js/internals/to-absolute-index.js"
              );
              module3.exports = function(IS_INCLUDES) {
                return function($this, el, fromIndex) {
                  var O = toIndexedObject($this);
                  var length = toLength(O.length);
                  var index = toAbsoluteIndex(fromIndex, length);
                  var value;
                  if (IS_INCLUDES && el != el) while (length > index) {
                    value = O[index++];
                    if (value != value) return true;
                  }
                  else for (; length > index; index++) if (IS_INCLUDES || index in O) {
                    if (O[index] === el) return IS_INCLUDES || index || 0;
                  }
                  return !IS_INCLUDES && -1;
                };
              };
            }
          ),
          /***/
          "./node_modules/core-js/internals/bind-context.js": (
            /*!********************************************************!*\
              !*** ./node_modules/core-js/internals/bind-context.js ***!
              \********************************************************/
            /*! no static exports found */
            /***/
            function(module3, exports2, __webpack_require__) {
              var aFunction = __webpack_require__(
                /*! ../internals/a-function */
                "./node_modules/core-js/internals/a-function.js"
              );
              module3.exports = function(fn, that, length) {
                aFunction(fn);
                if (that === void 0) return fn;
                switch (length) {
                  case 0:
                    return function() {
                      return fn.call(that);
                    };
                  case 1:
                    return function(a) {
                      return fn.call(that, a);
                    };
                  case 2:
                    return function(a, b) {
                      return fn.call(that, a, b);
                    };
                  case 3:
                    return function(a, b, c) {
                      return fn.call(that, a, b, c);
                    };
                }
                return function() {
                  return fn.apply(that, arguments);
                };
              };
            }
          ),
          /***/
          "./node_modules/core-js/internals/call-with-safe-iteration-closing.js": (
            /*!****************************************************************************!*\
              !*** ./node_modules/core-js/internals/call-with-safe-iteration-closing.js ***!
              \****************************************************************************/
            /*! no static exports found */
            /***/
            function(module3, exports2, __webpack_require__) {
              var anObject = __webpack_require__(
                /*! ../internals/an-object */
                "./node_modules/core-js/internals/an-object.js"
              );
              module3.exports = function(iterator, fn, value, ENTRIES) {
                try {
                  return ENTRIES ? fn(anObject(value)[0], value[1]) : fn(value);
                } catch (error) {
                  var returnMethod = iterator["return"];
                  if (returnMethod !== void 0) anObject(returnMethod.call(iterator));
                  throw error;
                }
              };
            }
          ),
          /***/
          "./node_modules/core-js/internals/check-correctness-of-iteration.js": (
            /*!**************************************************************************!*\
              !*** ./node_modules/core-js/internals/check-correctness-of-iteration.js ***!
              \**************************************************************************/
            /*! no static exports found */
            /***/
            function(module3, exports2, __webpack_require__) {
              var wellKnownSymbol = __webpack_require__(
                /*! ../internals/well-known-symbol */
                "./node_modules/core-js/internals/well-known-symbol.js"
              );
              var ITERATOR = wellKnownSymbol("iterator");
              var SAFE_CLOSING = false;
              try {
                var called = 0;
                var iteratorWithReturn = {
                  next: function() {
                    return { done: !!called++ };
                  },
                  "return": function() {
                    SAFE_CLOSING = true;
                  }
                };
                iteratorWithReturn[ITERATOR] = function() {
                  return this;
                };
                Array.from(iteratorWithReturn, function() {
                  throw 2;
                });
              } catch (error) {
              }
              module3.exports = function(exec, SKIP_CLOSING) {
                if (!SKIP_CLOSING && !SAFE_CLOSING) return false;
                var ITERATION_SUPPORT = false;
                try {
                  var object = {};
                  object[ITERATOR] = function() {
                    return {
                      next: function() {
                        return { done: ITERATION_SUPPORT = true };
                      }
                    };
                  };
                  exec(object);
                } catch (error) {
                }
                return ITERATION_SUPPORT;
              };
            }
          ),
          /***/
          "./node_modules/core-js/internals/classof-raw.js": (
            /*!*******************************************************!*\
              !*** ./node_modules/core-js/internals/classof-raw.js ***!
              \*******************************************************/
            /*! no static exports found */
            /***/
            function(module3, exports2) {
              var toString = {}.toString;
              module3.exports = function(it) {
                return toString.call(it).slice(8, -1);
              };
            }
          ),
          /***/
          "./node_modules/core-js/internals/classof.js": (
            /*!***************************************************!*\
              !*** ./node_modules/core-js/internals/classof.js ***!
              \***************************************************/
            /*! no static exports found */
            /***/
            function(module3, exports2, __webpack_require__) {
              var classofRaw = __webpack_require__(
                /*! ../internals/classof-raw */
                "./node_modules/core-js/internals/classof-raw.js"
              );
              var wellKnownSymbol = __webpack_require__(
                /*! ../internals/well-known-symbol */
                "./node_modules/core-js/internals/well-known-symbol.js"
              );
              var TO_STRING_TAG = wellKnownSymbol("toStringTag");
              var CORRECT_ARGUMENTS = classofRaw(/* @__PURE__ */ function() {
                return arguments;
              }()) == "Arguments";
              var tryGet = function(it, key) {
                try {
                  return it[key];
                } catch (error) {
                }
              };
              module3.exports = function(it) {
                var O, tag, result;
                return it === void 0 ? "Undefined" : it === null ? "Null" : typeof (tag = tryGet(O = Object(it), TO_STRING_TAG)) == "string" ? tag : CORRECT_ARGUMENTS ? classofRaw(O) : (result = classofRaw(O)) == "Object" && typeof O.callee == "function" ? "Arguments" : result;
              };
            }
          ),
          /***/
          "./node_modules/core-js/internals/copy-constructor-properties.js": (
            /*!***********************************************************************!*\
              !*** ./node_modules/core-js/internals/copy-constructor-properties.js ***!
              \***********************************************************************/
            /*! no static exports found */
            /***/
            function(module3, exports2, __webpack_require__) {
              var has = __webpack_require__(
                /*! ../internals/has */
                "./node_modules/core-js/internals/has.js"
              );
              var ownKeys = __webpack_require__(
                /*! ../internals/own-keys */
                "./node_modules/core-js/internals/own-keys.js"
              );
              var getOwnPropertyDescriptorModule = __webpack_require__(
                /*! ../internals/object-get-own-property-descriptor */
                "./node_modules/core-js/internals/object-get-own-property-descriptor.js"
              );
              var definePropertyModule = __webpack_require__(
                /*! ../internals/object-define-property */
                "./node_modules/core-js/internals/object-define-property.js"
              );
              module3.exports = function(target, source) {
                var keys = ownKeys(source);
                var defineProperty = definePropertyModule.f;
                var getOwnPropertyDescriptor = getOwnPropertyDescriptorModule.f;
                for (var i = 0; i < keys.length; i++) {
                  var key = keys[i];
                  if (!has(target, key)) defineProperty(target, key, getOwnPropertyDescriptor(source, key));
                }
              };
            }
          ),
          /***/
          "./node_modules/core-js/internals/correct-prototype-getter.js": (
            /*!********************************************************************!*\
              !*** ./node_modules/core-js/internals/correct-prototype-getter.js ***!
              \********************************************************************/
            /*! no static exports found */
            /***/
            function(module3, exports2, __webpack_require__) {
              var fails = __webpack_require__(
                /*! ../internals/fails */
                "./node_modules/core-js/internals/fails.js"
              );
              module3.exports = !fails(function() {
                function F() {
                }
                F.prototype.constructor = null;
                return Object.getPrototypeOf(new F()) !== F.prototype;
              });
            }
          ),
          /***/
          "./node_modules/core-js/internals/create-iterator-constructor.js": (
            /*!***********************************************************************!*\
              !*** ./node_modules/core-js/internals/create-iterator-constructor.js ***!
              \***********************************************************************/
            /*! no static exports found */
            /***/
            function(module3, exports2, __webpack_require__) {
              "use strict";
              var IteratorPrototype = __webpack_require__(
                /*! ../internals/iterators-core */
                "./node_modules/core-js/internals/iterators-core.js"
              ).IteratorPrototype;
              var create = __webpack_require__(
                /*! ../internals/object-create */
                "./node_modules/core-js/internals/object-create.js"
              );
              var createPropertyDescriptor = __webpack_require__(
                /*! ../internals/create-property-descriptor */
                "./node_modules/core-js/internals/create-property-descriptor.js"
              );
              var setToStringTag = __webpack_require__(
                /*! ../internals/set-to-string-tag */
                "./node_modules/core-js/internals/set-to-string-tag.js"
              );
              var Iterators = __webpack_require__(
                /*! ../internals/iterators */
                "./node_modules/core-js/internals/iterators.js"
              );
              var returnThis = function() {
                return this;
              };
              module3.exports = function(IteratorConstructor, NAME, next) {
                var TO_STRING_TAG = NAME + " Iterator";
                IteratorConstructor.prototype = create(IteratorPrototype, { next: createPropertyDescriptor(1, next) });
                setToStringTag(IteratorConstructor, TO_STRING_TAG, false, true);
                Iterators[TO_STRING_TAG] = returnThis;
                return IteratorConstructor;
              };
            }
          ),
          /***/
          "./node_modules/core-js/internals/create-property-descriptor.js": (
            /*!**********************************************************************!*\
              !*** ./node_modules/core-js/internals/create-property-descriptor.js ***!
              \**********************************************************************/
            /*! no static exports found */
            /***/
            function(module3, exports2) {
              module3.exports = function(bitmap, value) {
                return {
                  enumerable: !(bitmap & 1),
                  configurable: !(bitmap & 2),
                  writable: !(bitmap & 4),
                  value
                };
              };
            }
          ),
          /***/
          "./node_modules/core-js/internals/create-property.js": (
            /*!***********************************************************!*\
              !*** ./node_modules/core-js/internals/create-property.js ***!
              \***********************************************************/
            /*! no static exports found */
            /***/
            function(module3, exports2, __webpack_require__) {
              "use strict";
              var toPrimitive = __webpack_require__(
                /*! ../internals/to-primitive */
                "./node_modules/core-js/internals/to-primitive.js"
              );
              var definePropertyModule = __webpack_require__(
                /*! ../internals/object-define-property */
                "./node_modules/core-js/internals/object-define-property.js"
              );
              var createPropertyDescriptor = __webpack_require__(
                /*! ../internals/create-property-descriptor */
                "./node_modules/core-js/internals/create-property-descriptor.js"
              );
              module3.exports = function(object, key, value) {
                var propertyKey = toPrimitive(key);
                if (propertyKey in object) definePropertyModule.f(object, propertyKey, createPropertyDescriptor(0, value));
                else object[propertyKey] = value;
              };
            }
          ),
          /***/
          "./node_modules/core-js/internals/define-iterator.js": (
            /*!***********************************************************!*\
              !*** ./node_modules/core-js/internals/define-iterator.js ***!
              \***********************************************************/
            /*! no static exports found */
            /***/
            function(module3, exports2, __webpack_require__) {
              "use strict";
              var $ = __webpack_require__(
                /*! ../internals/export */
                "./node_modules/core-js/internals/export.js"
              );
              var createIteratorConstructor = __webpack_require__(
                /*! ../internals/create-iterator-constructor */
                "./node_modules/core-js/internals/create-iterator-constructor.js"
              );
              var getPrototypeOf = __webpack_require__(
                /*! ../internals/object-get-prototype-of */
                "./node_modules/core-js/internals/object-get-prototype-of.js"
              );
              var setPrototypeOf = __webpack_require__(
                /*! ../internals/object-set-prototype-of */
                "./node_modules/core-js/internals/object-set-prototype-of.js"
              );
              var setToStringTag = __webpack_require__(
                /*! ../internals/set-to-string-tag */
                "./node_modules/core-js/internals/set-to-string-tag.js"
              );
              var hide = __webpack_require__(
                /*! ../internals/hide */
                "./node_modules/core-js/internals/hide.js"
              );
              var redefine = __webpack_require__(
                /*! ../internals/redefine */
                "./node_modules/core-js/internals/redefine.js"
              );
              var wellKnownSymbol = __webpack_require__(
                /*! ../internals/well-known-symbol */
                "./node_modules/core-js/internals/well-known-symbol.js"
              );
              var IS_PURE = __webpack_require__(
                /*! ../internals/is-pure */
                "./node_modules/core-js/internals/is-pure.js"
              );
              var Iterators = __webpack_require__(
                /*! ../internals/iterators */
                "./node_modules/core-js/internals/iterators.js"
              );
              var IteratorsCore = __webpack_require__(
                /*! ../internals/iterators-core */
                "./node_modules/core-js/internals/iterators-core.js"
              );
              var IteratorPrototype = IteratorsCore.IteratorPrototype;
              var BUGGY_SAFARI_ITERATORS = IteratorsCore.BUGGY_SAFARI_ITERATORS;
              var ITERATOR = wellKnownSymbol("iterator");
              var KEYS = "keys";
              var VALUES = "values";
              var ENTRIES = "entries";
              var returnThis = function() {
                return this;
              };
              module3.exports = function(Iterable, NAME, IteratorConstructor, next, DEFAULT, IS_SET, FORCED) {
                createIteratorConstructor(IteratorConstructor, NAME, next);
                var getIterationMethod = function(KIND) {
                  if (KIND === DEFAULT && defaultIterator) return defaultIterator;
                  if (!BUGGY_SAFARI_ITERATORS && KIND in IterablePrototype) return IterablePrototype[KIND];
                  switch (KIND) {
                    case KEYS:
                      return function keys() {
                        return new IteratorConstructor(this, KIND);
                      };
                    case VALUES:
                      return function values() {
                        return new IteratorConstructor(this, KIND);
                      };
                    case ENTRIES:
                      return function entries() {
                        return new IteratorConstructor(this, KIND);
                      };
                  }
                  return function() {
                    return new IteratorConstructor(this);
                  };
                };
                var TO_STRING_TAG = NAME + " Iterator";
                var INCORRECT_VALUES_NAME = false;
                var IterablePrototype = Iterable.prototype;
                var nativeIterator = IterablePrototype[ITERATOR] || IterablePrototype["@@iterator"] || DEFAULT && IterablePrototype[DEFAULT];
                var defaultIterator = !BUGGY_SAFARI_ITERATORS && nativeIterator || getIterationMethod(DEFAULT);
                var anyNativeIterator = NAME == "Array" ? IterablePrototype.entries || nativeIterator : nativeIterator;
                var CurrentIteratorPrototype, methods, KEY;
                if (anyNativeIterator) {
                  CurrentIteratorPrototype = getPrototypeOf(anyNativeIterator.call(new Iterable()));
                  if (IteratorPrototype !== Object.prototype && CurrentIteratorPrototype.next) {
                    if (!IS_PURE && getPrototypeOf(CurrentIteratorPrototype) !== IteratorPrototype) {
                      if (setPrototypeOf) {
                        setPrototypeOf(CurrentIteratorPrototype, IteratorPrototype);
                      } else if (typeof CurrentIteratorPrototype[ITERATOR] != "function") {
                        hide(CurrentIteratorPrototype, ITERATOR, returnThis);
                      }
                    }
                    setToStringTag(CurrentIteratorPrototype, TO_STRING_TAG, true, true);
                    if (IS_PURE) Iterators[TO_STRING_TAG] = returnThis;
                  }
                }
                if (DEFAULT == VALUES && nativeIterator && nativeIterator.name !== VALUES) {
                  INCORRECT_VALUES_NAME = true;
                  defaultIterator = function values() {
                    return nativeIterator.call(this);
                  };
                }
                if ((!IS_PURE || FORCED) && IterablePrototype[ITERATOR] !== defaultIterator) {
                  hide(IterablePrototype, ITERATOR, defaultIterator);
                }
                Iterators[NAME] = defaultIterator;
                if (DEFAULT) {
                  methods = {
                    values: getIterationMethod(VALUES),
                    keys: IS_SET ? defaultIterator : getIterationMethod(KEYS),
                    entries: getIterationMethod(ENTRIES)
                  };
                  if (FORCED) for (KEY in methods) {
                    if (BUGGY_SAFARI_ITERATORS || INCORRECT_VALUES_NAME || !(KEY in IterablePrototype)) {
                      redefine(IterablePrototype, KEY, methods[KEY]);
                    }
                  }
                  else $({ target: NAME, proto: true, forced: BUGGY_SAFARI_ITERATORS || INCORRECT_VALUES_NAME }, methods);
                }
                return methods;
              };
            }
          ),
          /***/
          "./node_modules/core-js/internals/descriptors.js": (
            /*!*******************************************************!*\
              !*** ./node_modules/core-js/internals/descriptors.js ***!
              \*******************************************************/
            /*! no static exports found */
            /***/
            function(module3, exports2, __webpack_require__) {
              var fails = __webpack_require__(
                /*! ../internals/fails */
                "./node_modules/core-js/internals/fails.js"
              );
              module3.exports = !fails(function() {
                return Object.defineProperty({}, "a", { get: function() {
                  return 7;
                } }).a != 7;
              });
            }
          ),
          /***/
          "./node_modules/core-js/internals/document-create-element.js": (
            /*!*******************************************************************!*\
              !*** ./node_modules/core-js/internals/document-create-element.js ***!
              \*******************************************************************/
            /*! no static exports found */
            /***/
            function(module3, exports2, __webpack_require__) {
              var global2 = __webpack_require__(
                /*! ../internals/global */
                "./node_modules/core-js/internals/global.js"
              );
              var isObject = __webpack_require__(
                /*! ../internals/is-object */
                "./node_modules/core-js/internals/is-object.js"
              );
              var document2 = global2.document;
              var exist = isObject(document2) && isObject(document2.createElement);
              module3.exports = function(it) {
                return exist ? document2.createElement(it) : {};
              };
            }
          ),
          /***/
          "./node_modules/core-js/internals/enum-bug-keys.js": (
            /*!*********************************************************!*\
              !*** ./node_modules/core-js/internals/enum-bug-keys.js ***!
              \*********************************************************/
            /*! no static exports found */
            /***/
            function(module3, exports2) {
              module3.exports = [
                "constructor",
                "hasOwnProperty",
                "isPrototypeOf",
                "propertyIsEnumerable",
                "toLocaleString",
                "toString",
                "valueOf"
              ];
            }
          ),
          /***/
          "./node_modules/core-js/internals/export.js": (
            /*!**************************************************!*\
              !*** ./node_modules/core-js/internals/export.js ***!
              \**************************************************/
            /*! no static exports found */
            /***/
            function(module3, exports2, __webpack_require__) {
              var global2 = __webpack_require__(
                /*! ../internals/global */
                "./node_modules/core-js/internals/global.js"
              );
              var getOwnPropertyDescriptor = __webpack_require__(
                /*! ../internals/object-get-own-property-descriptor */
                "./node_modules/core-js/internals/object-get-own-property-descriptor.js"
              ).f;
              var hide = __webpack_require__(
                /*! ../internals/hide */
                "./node_modules/core-js/internals/hide.js"
              );
              var redefine = __webpack_require__(
                /*! ../internals/redefine */
                "./node_modules/core-js/internals/redefine.js"
              );
              var setGlobal = __webpack_require__(
                /*! ../internals/set-global */
                "./node_modules/core-js/internals/set-global.js"
              );
              var copyConstructorProperties = __webpack_require__(
                /*! ../internals/copy-constructor-properties */
                "./node_modules/core-js/internals/copy-constructor-properties.js"
              );
              var isForced = __webpack_require__(
                /*! ../internals/is-forced */
                "./node_modules/core-js/internals/is-forced.js"
              );
              module3.exports = function(options, source) {
                var TARGET = options.target;
                var GLOBAL = options.global;
                var STATIC = options.stat;
                var FORCED, target, key, targetProperty, sourceProperty, descriptor;
                if (GLOBAL) {
                  target = global2;
                } else if (STATIC) {
                  target = global2[TARGET] || setGlobal(TARGET, {});
                } else {
                  target = (global2[TARGET] || {}).prototype;
                }
                if (target) for (key in source) {
                  sourceProperty = source[key];
                  if (options.noTargetGet) {
                    descriptor = getOwnPropertyDescriptor(target, key);
                    targetProperty = descriptor && descriptor.value;
                  } else targetProperty = target[key];
                  FORCED = isForced(GLOBAL ? key : TARGET + (STATIC ? "." : "#") + key, options.forced);
                  if (!FORCED && targetProperty !== void 0) {
                    if (typeof sourceProperty === typeof targetProperty) continue;
                    copyConstructorProperties(sourceProperty, targetProperty);
                  }
                  if (options.sham || targetProperty && targetProperty.sham) {
                    hide(sourceProperty, "sham", true);
                  }
                  redefine(target, key, sourceProperty, options);
                }
              };
            }
          ),
          /***/
          "./node_modules/core-js/internals/fails.js": (
            /*!*************************************************!*\
              !*** ./node_modules/core-js/internals/fails.js ***!
              \*************************************************/
            /*! no static exports found */
            /***/
            function(module3, exports2) {
              module3.exports = function(exec) {
                try {
                  return !!exec();
                } catch (error) {
                  return true;
                }
              };
            }
          ),
          /***/
          "./node_modules/core-js/internals/function-to-string.js": (
            /*!**************************************************************!*\
              !*** ./node_modules/core-js/internals/function-to-string.js ***!
              \**************************************************************/
            /*! no static exports found */
            /***/
            function(module3, exports2, __webpack_require__) {
              var shared = __webpack_require__(
                /*! ../internals/shared */
                "./node_modules/core-js/internals/shared.js"
              );
              module3.exports = shared("native-function-to-string", Function.toString);
            }
          ),
          /***/
          "./node_modules/core-js/internals/get-iterator-method.js": (
            /*!***************************************************************!*\
              !*** ./node_modules/core-js/internals/get-iterator-method.js ***!
              \***************************************************************/
            /*! no static exports found */
            /***/
            function(module3, exports2, __webpack_require__) {
              var classof = __webpack_require__(
                /*! ../internals/classof */
                "./node_modules/core-js/internals/classof.js"
              );
              var Iterators = __webpack_require__(
                /*! ../internals/iterators */
                "./node_modules/core-js/internals/iterators.js"
              );
              var wellKnownSymbol = __webpack_require__(
                /*! ../internals/well-known-symbol */
                "./node_modules/core-js/internals/well-known-symbol.js"
              );
              var ITERATOR = wellKnownSymbol("iterator");
              module3.exports = function(it) {
                if (it != void 0) return it[ITERATOR] || it["@@iterator"] || Iterators[classof(it)];
              };
            }
          ),
          /***/
          "./node_modules/core-js/internals/global.js": (
            /*!**************************************************!*\
              !*** ./node_modules/core-js/internals/global.js ***!
              \**************************************************/
            /*! no static exports found */
            /***/
            function(module3, exports2, __webpack_require__) {
              (function(global2) {
                var O = "object";
                var check = function(it) {
                  return it && it.Math == Math && it;
                };
                module3.exports = // eslint-disable-next-line no-undef
                check(typeof globalThis == O && globalThis) || check(typeof window == O && window) || check(typeof self == O && self) || check(typeof global2 == O && global2) || // eslint-disable-next-line no-new-func
                Function("return this")();
              }).call(this, __webpack_require__(
                /*! ./../../webpack/buildin/global.js */
                "./node_modules/webpack/buildin/global.js"
              ));
            }
          ),
          /***/
          "./node_modules/core-js/internals/has.js": (
            /*!***********************************************!*\
              !*** ./node_modules/core-js/internals/has.js ***!
              \***********************************************/
            /*! no static exports found */
            /***/
            function(module3, exports2) {
              var hasOwnProperty = {}.hasOwnProperty;
              module3.exports = function(it, key) {
                return hasOwnProperty.call(it, key);
              };
            }
          ),
          /***/
          "./node_modules/core-js/internals/hidden-keys.js": (
            /*!*******************************************************!*\
              !*** ./node_modules/core-js/internals/hidden-keys.js ***!
              \*******************************************************/
            /*! no static exports found */
            /***/
            function(module3, exports2) {
              module3.exports = {};
            }
          ),
          /***/
          "./node_modules/core-js/internals/hide.js": (
            /*!************************************************!*\
              !*** ./node_modules/core-js/internals/hide.js ***!
              \************************************************/
            /*! no static exports found */
            /***/
            function(module3, exports2, __webpack_require__) {
              var DESCRIPTORS = __webpack_require__(
                /*! ../internals/descriptors */
                "./node_modules/core-js/internals/descriptors.js"
              );
              var definePropertyModule = __webpack_require__(
                /*! ../internals/object-define-property */
                "./node_modules/core-js/internals/object-define-property.js"
              );
              var createPropertyDescriptor = __webpack_require__(
                /*! ../internals/create-property-descriptor */
                "./node_modules/core-js/internals/create-property-descriptor.js"
              );
              module3.exports = DESCRIPTORS ? function(object, key, value) {
                return definePropertyModule.f(object, key, createPropertyDescriptor(1, value));
              } : function(object, key, value) {
                object[key] = value;
                return object;
              };
            }
          ),
          /***/
          "./node_modules/core-js/internals/html.js": (
            /*!************************************************!*\
              !*** ./node_modules/core-js/internals/html.js ***!
              \************************************************/
            /*! no static exports found */
            /***/
            function(module3, exports2, __webpack_require__) {
              var global2 = __webpack_require__(
                /*! ../internals/global */
                "./node_modules/core-js/internals/global.js"
              );
              var document2 = global2.document;
              module3.exports = document2 && document2.documentElement;
            }
          ),
          /***/
          "./node_modules/core-js/internals/ie8-dom-define.js": (
            /*!**********************************************************!*\
              !*** ./node_modules/core-js/internals/ie8-dom-define.js ***!
              \**********************************************************/
            /*! no static exports found */
            /***/
            function(module3, exports2, __webpack_require__) {
              var DESCRIPTORS = __webpack_require__(
                /*! ../internals/descriptors */
                "./node_modules/core-js/internals/descriptors.js"
              );
              var fails = __webpack_require__(
                /*! ../internals/fails */
                "./node_modules/core-js/internals/fails.js"
              );
              var createElement = __webpack_require__(
                /*! ../internals/document-create-element */
                "./node_modules/core-js/internals/document-create-element.js"
              );
              module3.exports = !DESCRIPTORS && !fails(function() {
                return Object.defineProperty(createElement("div"), "a", {
                  get: function() {
                    return 7;
                  }
                }).a != 7;
              });
            }
          ),
          /***/
          "./node_modules/core-js/internals/indexed-object.js": (
            /*!**********************************************************!*\
              !*** ./node_modules/core-js/internals/indexed-object.js ***!
              \**********************************************************/
            /*! no static exports found */
            /***/
            function(module3, exports2, __webpack_require__) {
              var fails = __webpack_require__(
                /*! ../internals/fails */
                "./node_modules/core-js/internals/fails.js"
              );
              var classof = __webpack_require__(
                /*! ../internals/classof-raw */
                "./node_modules/core-js/internals/classof-raw.js"
              );
              var split = "".split;
              module3.exports = fails(function() {
                return !Object("z").propertyIsEnumerable(0);
              }) ? function(it) {
                return classof(it) == "String" ? split.call(it, "") : Object(it);
              } : Object;
            }
          ),
          /***/
          "./node_modules/core-js/internals/internal-state.js": (
            /*!**********************************************************!*\
              !*** ./node_modules/core-js/internals/internal-state.js ***!
              \**********************************************************/
            /*! no static exports found */
            /***/
            function(module3, exports2, __webpack_require__) {
              var NATIVE_WEAK_MAP = __webpack_require__(
                /*! ../internals/native-weak-map */
                "./node_modules/core-js/internals/native-weak-map.js"
              );
              var global2 = __webpack_require__(
                /*! ../internals/global */
                "./node_modules/core-js/internals/global.js"
              );
              var isObject = __webpack_require__(
                /*! ../internals/is-object */
                "./node_modules/core-js/internals/is-object.js"
              );
              var hide = __webpack_require__(
                /*! ../internals/hide */
                "./node_modules/core-js/internals/hide.js"
              );
              var objectHas = __webpack_require__(
                /*! ../internals/has */
                "./node_modules/core-js/internals/has.js"
              );
              var sharedKey = __webpack_require__(
                /*! ../internals/shared-key */
                "./node_modules/core-js/internals/shared-key.js"
              );
              var hiddenKeys = __webpack_require__(
                /*! ../internals/hidden-keys */
                "./node_modules/core-js/internals/hidden-keys.js"
              );
              var WeakMap2 = global2.WeakMap;
              var set2, get, has;
              var enforce = function(it) {
                return has(it) ? get(it) : set2(it, {});
              };
              var getterFor = function(TYPE) {
                return function(it) {
                  var state;
                  if (!isObject(it) || (state = get(it)).type !== TYPE) {
                    throw TypeError("Incompatible receiver, " + TYPE + " required");
                  }
                  return state;
                };
              };
              if (NATIVE_WEAK_MAP) {
                var store = new WeakMap2();
                var wmget = store.get;
                var wmhas = store.has;
                var wmset = store.set;
                set2 = function(it, metadata) {
                  wmset.call(store, it, metadata);
                  return metadata;
                };
                get = function(it) {
                  return wmget.call(store, it) || {};
                };
                has = function(it) {
                  return wmhas.call(store, it);
                };
              } else {
                var STATE = sharedKey("state");
                hiddenKeys[STATE] = true;
                set2 = function(it, metadata) {
                  hide(it, STATE, metadata);
                  return metadata;
                };
                get = function(it) {
                  return objectHas(it, STATE) ? it[STATE] : {};
                };
                has = function(it) {
                  return objectHas(it, STATE);
                };
              }
              module3.exports = {
                set: set2,
                get,
                has,
                enforce,
                getterFor
              };
            }
          ),
          /***/
          "./node_modules/core-js/internals/is-array-iterator-method.js": (
            /*!********************************************************************!*\
              !*** ./node_modules/core-js/internals/is-array-iterator-method.js ***!
              \********************************************************************/
            /*! no static exports found */
            /***/
            function(module3, exports2, __webpack_require__) {
              var wellKnownSymbol = __webpack_require__(
                /*! ../internals/well-known-symbol */
                "./node_modules/core-js/internals/well-known-symbol.js"
              );
              var Iterators = __webpack_require__(
                /*! ../internals/iterators */
                "./node_modules/core-js/internals/iterators.js"
              );
              var ITERATOR = wellKnownSymbol("iterator");
              var ArrayPrototype = Array.prototype;
              module3.exports = function(it) {
                return it !== void 0 && (Iterators.Array === it || ArrayPrototype[ITERATOR] === it);
              };
            }
          ),
          /***/
          "./node_modules/core-js/internals/is-forced.js": (
            /*!*****************************************************!*\
              !*** ./node_modules/core-js/internals/is-forced.js ***!
              \*****************************************************/
            /*! no static exports found */
            /***/
            function(module3, exports2, __webpack_require__) {
              var fails = __webpack_require__(
                /*! ../internals/fails */
                "./node_modules/core-js/internals/fails.js"
              );
              var replacement = /#|\.prototype\./;
              var isForced = function(feature, detection) {
                var value = data[normalize(feature)];
                return value == POLYFILL ? true : value == NATIVE ? false : typeof detection == "function" ? fails(detection) : !!detection;
              };
              var normalize = isForced.normalize = function(string) {
                return String(string).replace(replacement, ".").toLowerCase();
              };
              var data = isForced.data = {};
              var NATIVE = isForced.NATIVE = "N";
              var POLYFILL = isForced.POLYFILL = "P";
              module3.exports = isForced;
            }
          ),
          /***/
          "./node_modules/core-js/internals/is-object.js": (
            /*!*****************************************************!*\
              !*** ./node_modules/core-js/internals/is-object.js ***!
              \*****************************************************/
            /*! no static exports found */
            /***/
            function(module3, exports2) {
              module3.exports = function(it) {
                return typeof it === "object" ? it !== null : typeof it === "function";
              };
            }
          ),
          /***/
          "./node_modules/core-js/internals/is-pure.js": (
            /*!***************************************************!*\
              !*** ./node_modules/core-js/internals/is-pure.js ***!
              \***************************************************/
            /*! no static exports found */
            /***/
            function(module3, exports2) {
              module3.exports = false;
            }
          ),
          /***/
          "./node_modules/core-js/internals/iterators-core.js": (
            /*!**********************************************************!*\
              !*** ./node_modules/core-js/internals/iterators-core.js ***!
              \**********************************************************/
            /*! no static exports found */
            /***/
            function(module3, exports2, __webpack_require__) {
              "use strict";
              var getPrototypeOf = __webpack_require__(
                /*! ../internals/object-get-prototype-of */
                "./node_modules/core-js/internals/object-get-prototype-of.js"
              );
              var hide = __webpack_require__(
                /*! ../internals/hide */
                "./node_modules/core-js/internals/hide.js"
              );
              var has = __webpack_require__(
                /*! ../internals/has */
                "./node_modules/core-js/internals/has.js"
              );
              var wellKnownSymbol = __webpack_require__(
                /*! ../internals/well-known-symbol */
                "./node_modules/core-js/internals/well-known-symbol.js"
              );
              var IS_PURE = __webpack_require__(
                /*! ../internals/is-pure */
                "./node_modules/core-js/internals/is-pure.js"
              );
              var ITERATOR = wellKnownSymbol("iterator");
              var BUGGY_SAFARI_ITERATORS = false;
              var returnThis = function() {
                return this;
              };
              var IteratorPrototype, PrototypeOfArrayIteratorPrototype, arrayIterator;
              if ([].keys) {
                arrayIterator = [].keys();
                if (!("next" in arrayIterator)) BUGGY_SAFARI_ITERATORS = true;
                else {
                  PrototypeOfArrayIteratorPrototype = getPrototypeOf(getPrototypeOf(arrayIterator));
                  if (PrototypeOfArrayIteratorPrototype !== Object.prototype) IteratorPrototype = PrototypeOfArrayIteratorPrototype;
                }
              }
              if (IteratorPrototype == void 0) IteratorPrototype = {};
              if (!IS_PURE && !has(IteratorPrototype, ITERATOR)) hide(IteratorPrototype, ITERATOR, returnThis);
              module3.exports = {
                IteratorPrototype,
                BUGGY_SAFARI_ITERATORS
              };
            }
          ),
          /***/
          "./node_modules/core-js/internals/iterators.js": (
            /*!*****************************************************!*\
              !*** ./node_modules/core-js/internals/iterators.js ***!
              \*****************************************************/
            /*! no static exports found */
            /***/
            function(module3, exports2) {
              module3.exports = {};
            }
          ),
          /***/
          "./node_modules/core-js/internals/native-symbol.js": (
            /*!*********************************************************!*\
              !*** ./node_modules/core-js/internals/native-symbol.js ***!
              \*********************************************************/
            /*! no static exports found */
            /***/
            function(module3, exports2, __webpack_require__) {
              var fails = __webpack_require__(
                /*! ../internals/fails */
                "./node_modules/core-js/internals/fails.js"
              );
              module3.exports = !!Object.getOwnPropertySymbols && !fails(function() {
                return !String(Symbol());
              });
            }
          ),
          /***/
          "./node_modules/core-js/internals/native-weak-map.js": (
            /*!***********************************************************!*\
              !*** ./node_modules/core-js/internals/native-weak-map.js ***!
              \***********************************************************/
            /*! no static exports found */
            /***/
            function(module3, exports2, __webpack_require__) {
              var global2 = __webpack_require__(
                /*! ../internals/global */
                "./node_modules/core-js/internals/global.js"
              );
              var nativeFunctionToString = __webpack_require__(
                /*! ../internals/function-to-string */
                "./node_modules/core-js/internals/function-to-string.js"
              );
              var WeakMap2 = global2.WeakMap;
              module3.exports = typeof WeakMap2 === "function" && /native code/.test(nativeFunctionToString.call(WeakMap2));
            }
          ),
          /***/
          "./node_modules/core-js/internals/object-create.js": (
            /*!*********************************************************!*\
              !*** ./node_modules/core-js/internals/object-create.js ***!
              \*********************************************************/
            /*! no static exports found */
            /***/
            function(module3, exports2, __webpack_require__) {
              var anObject = __webpack_require__(
                /*! ../internals/an-object */
                "./node_modules/core-js/internals/an-object.js"
              );
              var defineProperties = __webpack_require__(
                /*! ../internals/object-define-properties */
                "./node_modules/core-js/internals/object-define-properties.js"
              );
              var enumBugKeys = __webpack_require__(
                /*! ../internals/enum-bug-keys */
                "./node_modules/core-js/internals/enum-bug-keys.js"
              );
              var hiddenKeys = __webpack_require__(
                /*! ../internals/hidden-keys */
                "./node_modules/core-js/internals/hidden-keys.js"
              );
              var html = __webpack_require__(
                /*! ../internals/html */
                "./node_modules/core-js/internals/html.js"
              );
              var documentCreateElement = __webpack_require__(
                /*! ../internals/document-create-element */
                "./node_modules/core-js/internals/document-create-element.js"
              );
              var sharedKey = __webpack_require__(
                /*! ../internals/shared-key */
                "./node_modules/core-js/internals/shared-key.js"
              );
              var IE_PROTO = sharedKey("IE_PROTO");
              var PROTOTYPE = "prototype";
              var Empty = function() {
              };
              var createDict = function() {
                var iframe = documentCreateElement("iframe");
                var length = enumBugKeys.length;
                var lt = "<";
                var script = "script";
                var gt = ">";
                var js = "java" + script + ":";
                var iframeDocument;
                iframe.style.display = "none";
                html.appendChild(iframe);
                iframe.src = String(js);
                iframeDocument = iframe.contentWindow.document;
                iframeDocument.open();
                iframeDocument.write(lt + script + gt + "document.F=Object" + lt + "/" + script + gt);
                iframeDocument.close();
                createDict = iframeDocument.F;
                while (length--) delete createDict[PROTOTYPE][enumBugKeys[length]];
                return createDict();
              };
              module3.exports = Object.create || function create(O, Properties) {
                var result;
                if (O !== null) {
                  Empty[PROTOTYPE] = anObject(O);
                  result = new Empty();
                  Empty[PROTOTYPE] = null;
                  result[IE_PROTO] = O;
                } else result = createDict();
                return Properties === void 0 ? result : defineProperties(result, Properties);
              };
              hiddenKeys[IE_PROTO] = true;
            }
          ),
          /***/
          "./node_modules/core-js/internals/object-define-properties.js": (
            /*!********************************************************************!*\
              !*** ./node_modules/core-js/internals/object-define-properties.js ***!
              \********************************************************************/
            /*! no static exports found */
            /***/
            function(module3, exports2, __webpack_require__) {
              var DESCRIPTORS = __webpack_require__(
                /*! ../internals/descriptors */
                "./node_modules/core-js/internals/descriptors.js"
              );
              var definePropertyModule = __webpack_require__(
                /*! ../internals/object-define-property */
                "./node_modules/core-js/internals/object-define-property.js"
              );
              var anObject = __webpack_require__(
                /*! ../internals/an-object */
                "./node_modules/core-js/internals/an-object.js"
              );
              var objectKeys = __webpack_require__(
                /*! ../internals/object-keys */
                "./node_modules/core-js/internals/object-keys.js"
              );
              module3.exports = DESCRIPTORS ? Object.defineProperties : function defineProperties(O, Properties) {
                anObject(O);
                var keys = objectKeys(Properties);
                var length = keys.length;
                var i = 0;
                var key;
                while (length > i) definePropertyModule.f(O, key = keys[i++], Properties[key]);
                return O;
              };
            }
          ),
          /***/
          "./node_modules/core-js/internals/object-define-property.js": (
            /*!******************************************************************!*\
              !*** ./node_modules/core-js/internals/object-define-property.js ***!
              \******************************************************************/
            /*! no static exports found */
            /***/
            function(module3, exports2, __webpack_require__) {
              var DESCRIPTORS = __webpack_require__(
                /*! ../internals/descriptors */
                "./node_modules/core-js/internals/descriptors.js"
              );
              var IE8_DOM_DEFINE = __webpack_require__(
                /*! ../internals/ie8-dom-define */
                "./node_modules/core-js/internals/ie8-dom-define.js"
              );
              var anObject = __webpack_require__(
                /*! ../internals/an-object */
                "./node_modules/core-js/internals/an-object.js"
              );
              var toPrimitive = __webpack_require__(
                /*! ../internals/to-primitive */
                "./node_modules/core-js/internals/to-primitive.js"
              );
              var nativeDefineProperty = Object.defineProperty;
              exports2.f = DESCRIPTORS ? nativeDefineProperty : function defineProperty(O, P, Attributes) {
                anObject(O);
                P = toPrimitive(P, true);
                anObject(Attributes);
                if (IE8_DOM_DEFINE) try {
                  return nativeDefineProperty(O, P, Attributes);
                } catch (error) {
                }
                if ("get" in Attributes || "set" in Attributes) throw TypeError("Accessors not supported");
                if ("value" in Attributes) O[P] = Attributes.value;
                return O;
              };
            }
          ),
          /***/
          "./node_modules/core-js/internals/object-get-own-property-descriptor.js": (
            /*!******************************************************************************!*\
              !*** ./node_modules/core-js/internals/object-get-own-property-descriptor.js ***!
              \******************************************************************************/
            /*! no static exports found */
            /***/
            function(module3, exports2, __webpack_require__) {
              var DESCRIPTORS = __webpack_require__(
                /*! ../internals/descriptors */
                "./node_modules/core-js/internals/descriptors.js"
              );
              var propertyIsEnumerableModule = __webpack_require__(
                /*! ../internals/object-property-is-enumerable */
                "./node_modules/core-js/internals/object-property-is-enumerable.js"
              );
              var createPropertyDescriptor = __webpack_require__(
                /*! ../internals/create-property-descriptor */
                "./node_modules/core-js/internals/create-property-descriptor.js"
              );
              var toIndexedObject = __webpack_require__(
                /*! ../internals/to-indexed-object */
                "./node_modules/core-js/internals/to-indexed-object.js"
              );
              var toPrimitive = __webpack_require__(
                /*! ../internals/to-primitive */
                "./node_modules/core-js/internals/to-primitive.js"
              );
              var has = __webpack_require__(
                /*! ../internals/has */
                "./node_modules/core-js/internals/has.js"
              );
              var IE8_DOM_DEFINE = __webpack_require__(
                /*! ../internals/ie8-dom-define */
                "./node_modules/core-js/internals/ie8-dom-define.js"
              );
              var nativeGetOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
              exports2.f = DESCRIPTORS ? nativeGetOwnPropertyDescriptor : function getOwnPropertyDescriptor(O, P) {
                O = toIndexedObject(O);
                P = toPrimitive(P, true);
                if (IE8_DOM_DEFINE) try {
                  return nativeGetOwnPropertyDescriptor(O, P);
                } catch (error) {
                }
                if (has(O, P)) return createPropertyDescriptor(!propertyIsEnumerableModule.f.call(O, P), O[P]);
              };
            }
          ),
          /***/
          "./node_modules/core-js/internals/object-get-own-property-names.js": (
            /*!*************************************************************************!*\
              !*** ./node_modules/core-js/internals/object-get-own-property-names.js ***!
              \*************************************************************************/
            /*! no static exports found */
            /***/
            function(module3, exports2, __webpack_require__) {
              var internalObjectKeys = __webpack_require__(
                /*! ../internals/object-keys-internal */
                "./node_modules/core-js/internals/object-keys-internal.js"
              );
              var enumBugKeys = __webpack_require__(
                /*! ../internals/enum-bug-keys */
                "./node_modules/core-js/internals/enum-bug-keys.js"
              );
              var hiddenKeys = enumBugKeys.concat("length", "prototype");
              exports2.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {
                return internalObjectKeys(O, hiddenKeys);
              };
            }
          ),
          /***/
          "./node_modules/core-js/internals/object-get-own-property-symbols.js": (
            /*!***************************************************************************!*\
              !*** ./node_modules/core-js/internals/object-get-own-property-symbols.js ***!
              \***************************************************************************/
            /*! no static exports found */
            /***/
            function(module3, exports2) {
              exports2.f = Object.getOwnPropertySymbols;
            }
          ),
          /***/
          "./node_modules/core-js/internals/object-get-prototype-of.js": (
            /*!*******************************************************************!*\
              !*** ./node_modules/core-js/internals/object-get-prototype-of.js ***!
              \*******************************************************************/
            /*! no static exports found */
            /***/
            function(module3, exports2, __webpack_require__) {
              var has = __webpack_require__(
                /*! ../internals/has */
                "./node_modules/core-js/internals/has.js"
              );
              var toObject = __webpack_require__(
                /*! ../internals/to-object */
                "./node_modules/core-js/internals/to-object.js"
              );
              var sharedKey = __webpack_require__(
                /*! ../internals/shared-key */
                "./node_modules/core-js/internals/shared-key.js"
              );
              var CORRECT_PROTOTYPE_GETTER = __webpack_require__(
                /*! ../internals/correct-prototype-getter */
                "./node_modules/core-js/internals/correct-prototype-getter.js"
              );
              var IE_PROTO = sharedKey("IE_PROTO");
              var ObjectPrototype = Object.prototype;
              module3.exports = CORRECT_PROTOTYPE_GETTER ? Object.getPrototypeOf : function(O) {
                O = toObject(O);
                if (has(O, IE_PROTO)) return O[IE_PROTO];
                if (typeof O.constructor == "function" && O instanceof O.constructor) {
                  return O.constructor.prototype;
                }
                return O instanceof Object ? ObjectPrototype : null;
              };
            }
          ),
          /***/
          "./node_modules/core-js/internals/object-keys-internal.js": (
            /*!****************************************************************!*\
              !*** ./node_modules/core-js/internals/object-keys-internal.js ***!
              \****************************************************************/
            /*! no static exports found */
            /***/
            function(module3, exports2, __webpack_require__) {
              var has = __webpack_require__(
                /*! ../internals/has */
                "./node_modules/core-js/internals/has.js"
              );
              var toIndexedObject = __webpack_require__(
                /*! ../internals/to-indexed-object */
                "./node_modules/core-js/internals/to-indexed-object.js"
              );
              var arrayIncludes = __webpack_require__(
                /*! ../internals/array-includes */
                "./node_modules/core-js/internals/array-includes.js"
              );
              var hiddenKeys = __webpack_require__(
                /*! ../internals/hidden-keys */
                "./node_modules/core-js/internals/hidden-keys.js"
              );
              var arrayIndexOf = arrayIncludes(false);
              module3.exports = function(object, names) {
                var O = toIndexedObject(object);
                var i = 0;
                var result = [];
                var key;
                for (key in O) !has(hiddenKeys, key) && has(O, key) && result.push(key);
                while (names.length > i) if (has(O, key = names[i++])) {
                  ~arrayIndexOf(result, key) || result.push(key);
                }
                return result;
              };
            }
          ),
          /***/
          "./node_modules/core-js/internals/object-keys.js": (
            /*!*******************************************************!*\
              !*** ./node_modules/core-js/internals/object-keys.js ***!
              \*******************************************************/
            /*! no static exports found */
            /***/
            function(module3, exports2, __webpack_require__) {
              var internalObjectKeys = __webpack_require__(
                /*! ../internals/object-keys-internal */
                "./node_modules/core-js/internals/object-keys-internal.js"
              );
              var enumBugKeys = __webpack_require__(
                /*! ../internals/enum-bug-keys */
                "./node_modules/core-js/internals/enum-bug-keys.js"
              );
              module3.exports = Object.keys || function keys(O) {
                return internalObjectKeys(O, enumBugKeys);
              };
            }
          ),
          /***/
          "./node_modules/core-js/internals/object-property-is-enumerable.js": (
            /*!*************************************************************************!*\
              !*** ./node_modules/core-js/internals/object-property-is-enumerable.js ***!
              \*************************************************************************/
            /*! no static exports found */
            /***/
            function(module3, exports2, __webpack_require__) {
              "use strict";
              var nativePropertyIsEnumerable = {}.propertyIsEnumerable;
              var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
              var NASHORN_BUG = getOwnPropertyDescriptor && !nativePropertyIsEnumerable.call({ 1: 2 }, 1);
              exports2.f = NASHORN_BUG ? function propertyIsEnumerable(V) {
                var descriptor = getOwnPropertyDescriptor(this, V);
                return !!descriptor && descriptor.enumerable;
              } : nativePropertyIsEnumerable;
            }
          ),
          /***/
          "./node_modules/core-js/internals/object-set-prototype-of.js": (
            /*!*******************************************************************!*\
              !*** ./node_modules/core-js/internals/object-set-prototype-of.js ***!
              \*******************************************************************/
            /*! no static exports found */
            /***/
            function(module3, exports2, __webpack_require__) {
              var validateSetPrototypeOfArguments = __webpack_require__(
                /*! ../internals/validate-set-prototype-of-arguments */
                "./node_modules/core-js/internals/validate-set-prototype-of-arguments.js"
              );
              module3.exports = Object.setPrototypeOf || ("__proto__" in {} ? function() {
                var correctSetter = false;
                var test = {};
                var setter;
                try {
                  setter = Object.getOwnPropertyDescriptor(Object.prototype, "__proto__").set;
                  setter.call(test, []);
                  correctSetter = test instanceof Array;
                } catch (error) {
                }
                return function setPrototypeOf(O, proto) {
                  validateSetPrototypeOfArguments(O, proto);
                  if (correctSetter) setter.call(O, proto);
                  else O.__proto__ = proto;
                  return O;
                };
              }() : void 0);
            }
          ),
          /***/
          "./node_modules/core-js/internals/own-keys.js": (
            /*!****************************************************!*\
              !*** ./node_modules/core-js/internals/own-keys.js ***!
              \****************************************************/
            /*! no static exports found */
            /***/
            function(module3, exports2, __webpack_require__) {
              var global2 = __webpack_require__(
                /*! ../internals/global */
                "./node_modules/core-js/internals/global.js"
              );
              var getOwnPropertyNamesModule = __webpack_require__(
                /*! ../internals/object-get-own-property-names */
                "./node_modules/core-js/internals/object-get-own-property-names.js"
              );
              var getOwnPropertySymbolsModule = __webpack_require__(
                /*! ../internals/object-get-own-property-symbols */
                "./node_modules/core-js/internals/object-get-own-property-symbols.js"
              );
              var anObject = __webpack_require__(
                /*! ../internals/an-object */
                "./node_modules/core-js/internals/an-object.js"
              );
              var Reflect2 = global2.Reflect;
              module3.exports = Reflect2 && Reflect2.ownKeys || function ownKeys(it) {
                var keys = getOwnPropertyNamesModule.f(anObject(it));
                var getOwnPropertySymbols = getOwnPropertySymbolsModule.f;
                return getOwnPropertySymbols ? keys.concat(getOwnPropertySymbols(it)) : keys;
              };
            }
          ),
          /***/
          "./node_modules/core-js/internals/path.js": (
            /*!************************************************!*\
              !*** ./node_modules/core-js/internals/path.js ***!
              \************************************************/
            /*! no static exports found */
            /***/
            function(module3, exports2, __webpack_require__) {
              module3.exports = __webpack_require__(
                /*! ../internals/global */
                "./node_modules/core-js/internals/global.js"
              );
            }
          ),
          /***/
          "./node_modules/core-js/internals/redefine.js": (
            /*!****************************************************!*\
              !*** ./node_modules/core-js/internals/redefine.js ***!
              \****************************************************/
            /*! no static exports found */
            /***/
            function(module3, exports2, __webpack_require__) {
              var global2 = __webpack_require__(
                /*! ../internals/global */
                "./node_modules/core-js/internals/global.js"
              );
              var shared = __webpack_require__(
                /*! ../internals/shared */
                "./node_modules/core-js/internals/shared.js"
              );
              var hide = __webpack_require__(
                /*! ../internals/hide */
                "./node_modules/core-js/internals/hide.js"
              );
              var has = __webpack_require__(
                /*! ../internals/has */
                "./node_modules/core-js/internals/has.js"
              );
              var setGlobal = __webpack_require__(
                /*! ../internals/set-global */
                "./node_modules/core-js/internals/set-global.js"
              );
              var nativeFunctionToString = __webpack_require__(
                /*! ../internals/function-to-string */
                "./node_modules/core-js/internals/function-to-string.js"
              );
              var InternalStateModule = __webpack_require__(
                /*! ../internals/internal-state */
                "./node_modules/core-js/internals/internal-state.js"
              );
              var getInternalState = InternalStateModule.get;
              var enforceInternalState = InternalStateModule.enforce;
              var TEMPLATE = String(nativeFunctionToString).split("toString");
              shared("inspectSource", function(it) {
                return nativeFunctionToString.call(it);
              });
              (module3.exports = function(O, key, value, options) {
                var unsafe = options ? !!options.unsafe : false;
                var simple = options ? !!options.enumerable : false;
                var noTargetGet = options ? !!options.noTargetGet : false;
                if (typeof value == "function") {
                  if (typeof key == "string" && !has(value, "name")) hide(value, "name", key);
                  enforceInternalState(value).source = TEMPLATE.join(typeof key == "string" ? key : "");
                }
                if (O === global2) {
                  if (simple) O[key] = value;
                  else setGlobal(key, value);
                  return;
                } else if (!unsafe) {
                  delete O[key];
                } else if (!noTargetGet && O[key]) {
                  simple = true;
                }
                if (simple) O[key] = value;
                else hide(O, key, value);
              })(Function.prototype, "toString", function toString() {
                return typeof this == "function" && getInternalState(this).source || nativeFunctionToString.call(this);
              });
            }
          ),
          /***/
          "./node_modules/core-js/internals/require-object-coercible.js": (
            /*!********************************************************************!*\
              !*** ./node_modules/core-js/internals/require-object-coercible.js ***!
              \********************************************************************/
            /*! no static exports found */
            /***/
            function(module3, exports2) {
              module3.exports = function(it) {
                if (it == void 0) throw TypeError("Can't call method on " + it);
                return it;
              };
            }
          ),
          /***/
          "./node_modules/core-js/internals/set-global.js": (
            /*!******************************************************!*\
              !*** ./node_modules/core-js/internals/set-global.js ***!
              \******************************************************/
            /*! no static exports found */
            /***/
            function(module3, exports2, __webpack_require__) {
              var global2 = __webpack_require__(
                /*! ../internals/global */
                "./node_modules/core-js/internals/global.js"
              );
              var hide = __webpack_require__(
                /*! ../internals/hide */
                "./node_modules/core-js/internals/hide.js"
              );
              module3.exports = function(key, value) {
                try {
                  hide(global2, key, value);
                } catch (error) {
                  global2[key] = value;
                }
                return value;
              };
            }
          ),
          /***/
          "./node_modules/core-js/internals/set-to-string-tag.js": (
            /*!*************************************************************!*\
              !*** ./node_modules/core-js/internals/set-to-string-tag.js ***!
              \*************************************************************/
            /*! no static exports found */
            /***/
            function(module3, exports2, __webpack_require__) {
              var defineProperty = __webpack_require__(
                /*! ../internals/object-define-property */
                "./node_modules/core-js/internals/object-define-property.js"
              ).f;
              var has = __webpack_require__(
                /*! ../internals/has */
                "./node_modules/core-js/internals/has.js"
              );
              var wellKnownSymbol = __webpack_require__(
                /*! ../internals/well-known-symbol */
                "./node_modules/core-js/internals/well-known-symbol.js"
              );
              var TO_STRING_TAG = wellKnownSymbol("toStringTag");
              module3.exports = function(it, TAG, STATIC) {
                if (it && !has(it = STATIC ? it : it.prototype, TO_STRING_TAG)) {
                  defineProperty(it, TO_STRING_TAG, { configurable: true, value: TAG });
                }
              };
            }
          ),
          /***/
          "./node_modules/core-js/internals/shared-key.js": (
            /*!******************************************************!*\
              !*** ./node_modules/core-js/internals/shared-key.js ***!
              \******************************************************/
            /*! no static exports found */
            /***/
            function(module3, exports2, __webpack_require__) {
              var shared = __webpack_require__(
                /*! ../internals/shared */
                "./node_modules/core-js/internals/shared.js"
              );
              var uid = __webpack_require__(
                /*! ../internals/uid */
                "./node_modules/core-js/internals/uid.js"
              );
              var keys = shared("keys");
              module3.exports = function(key) {
                return keys[key] || (keys[key] = uid(key));
              };
            }
          ),
          /***/
          "./node_modules/core-js/internals/shared.js": (
            /*!**************************************************!*\
              !*** ./node_modules/core-js/internals/shared.js ***!
              \**************************************************/
            /*! no static exports found */
            /***/
            function(module3, exports2, __webpack_require__) {
              var global2 = __webpack_require__(
                /*! ../internals/global */
                "./node_modules/core-js/internals/global.js"
              );
              var setGlobal = __webpack_require__(
                /*! ../internals/set-global */
                "./node_modules/core-js/internals/set-global.js"
              );
              var IS_PURE = __webpack_require__(
                /*! ../internals/is-pure */
                "./node_modules/core-js/internals/is-pure.js"
              );
              var SHARED = "__core-js_shared__";
              var store = global2[SHARED] || setGlobal(SHARED, {});
              (module3.exports = function(key, value) {
                return store[key] || (store[key] = value !== void 0 ? value : {});
              })("versions", []).push({
                version: "3.1.3",
                mode: IS_PURE ? "pure" : "global",
                copyright: "\xA9 2019 Denis Pushkarev (zloirock.ru)"
              });
            }
          ),
          /***/
          "./node_modules/core-js/internals/string-at.js": (
            /*!*****************************************************!*\
              !*** ./node_modules/core-js/internals/string-at.js ***!
              \*****************************************************/
            /*! no static exports found */
            /***/
            function(module3, exports2, __webpack_require__) {
              var toInteger = __webpack_require__(
                /*! ../internals/to-integer */
                "./node_modules/core-js/internals/to-integer.js"
              );
              var requireObjectCoercible = __webpack_require__(
                /*! ../internals/require-object-coercible */
                "./node_modules/core-js/internals/require-object-coercible.js"
              );
              module3.exports = function(that, pos, CONVERT_TO_STRING) {
                var S = String(requireObjectCoercible(that));
                var position = toInteger(pos);
                var size6 = S.length;
                var first, second;
                if (position < 0 || position >= size6) return CONVERT_TO_STRING ? "" : void 0;
                first = S.charCodeAt(position);
                return first < 55296 || first > 56319 || position + 1 === size6 || (second = S.charCodeAt(position + 1)) < 56320 || second > 57343 ? CONVERT_TO_STRING ? S.charAt(position) : first : CONVERT_TO_STRING ? S.slice(position, position + 2) : (first - 55296 << 10) + (second - 56320) + 65536;
              };
            }
          ),
          /***/
          "./node_modules/core-js/internals/to-absolute-index.js": (
            /*!*************************************************************!*\
              !*** ./node_modules/core-js/internals/to-absolute-index.js ***!
              \*************************************************************/
            /*! no static exports found */
            /***/
            function(module3, exports2, __webpack_require__) {
              var toInteger = __webpack_require__(
                /*! ../internals/to-integer */
                "./node_modules/core-js/internals/to-integer.js"
              );
              var max = Math.max;
              var min = Math.min;
              module3.exports = function(index, length) {
                var integer = toInteger(index);
                return integer < 0 ? max(integer + length, 0) : min(integer, length);
              };
            }
          ),
          /***/
          "./node_modules/core-js/internals/to-indexed-object.js": (
            /*!*************************************************************!*\
              !*** ./node_modules/core-js/internals/to-indexed-object.js ***!
              \*************************************************************/
            /*! no static exports found */
            /***/
            function(module3, exports2, __webpack_require__) {
              var IndexedObject = __webpack_require__(
                /*! ../internals/indexed-object */
                "./node_modules/core-js/internals/indexed-object.js"
              );
              var requireObjectCoercible = __webpack_require__(
                /*! ../internals/require-object-coercible */
                "./node_modules/core-js/internals/require-object-coercible.js"
              );
              module3.exports = function(it) {
                return IndexedObject(requireObjectCoercible(it));
              };
            }
          ),
          /***/
          "./node_modules/core-js/internals/to-integer.js": (
            /*!******************************************************!*\
              !*** ./node_modules/core-js/internals/to-integer.js ***!
              \******************************************************/
            /*! no static exports found */
            /***/
            function(module3, exports2) {
              var ceil = Math.ceil;
              var floor = Math.floor;
              module3.exports = function(argument) {
                return isNaN(argument = +argument) ? 0 : (argument > 0 ? floor : ceil)(argument);
              };
            }
          ),
          /***/
          "./node_modules/core-js/internals/to-length.js": (
            /*!*****************************************************!*\
              !*** ./node_modules/core-js/internals/to-length.js ***!
              \*****************************************************/
            /*! no static exports found */
            /***/
            function(module3, exports2, __webpack_require__) {
              var toInteger = __webpack_require__(
                /*! ../internals/to-integer */
                "./node_modules/core-js/internals/to-integer.js"
              );
              var min = Math.min;
              module3.exports = function(argument) {
                return argument > 0 ? min(toInteger(argument), 9007199254740991) : 0;
              };
            }
          ),
          /***/
          "./node_modules/core-js/internals/to-object.js": (
            /*!*****************************************************!*\
              !*** ./node_modules/core-js/internals/to-object.js ***!
              \*****************************************************/
            /*! no static exports found */
            /***/
            function(module3, exports2, __webpack_require__) {
              var requireObjectCoercible = __webpack_require__(
                /*! ../internals/require-object-coercible */
                "./node_modules/core-js/internals/require-object-coercible.js"
              );
              module3.exports = function(argument) {
                return Object(requireObjectCoercible(argument));
              };
            }
          ),
          /***/
          "./node_modules/core-js/internals/to-primitive.js": (
            /*!********************************************************!*\
              !*** ./node_modules/core-js/internals/to-primitive.js ***!
              \********************************************************/
            /*! no static exports found */
            /***/
            function(module3, exports2, __webpack_require__) {
              var isObject = __webpack_require__(
                /*! ../internals/is-object */
                "./node_modules/core-js/internals/is-object.js"
              );
              module3.exports = function(it, S) {
                if (!isObject(it)) return it;
                var fn, val;
                if (S && typeof (fn = it.toString) == "function" && !isObject(val = fn.call(it))) return val;
                if (typeof (fn = it.valueOf) == "function" && !isObject(val = fn.call(it))) return val;
                if (!S && typeof (fn = it.toString) == "function" && !isObject(val = fn.call(it))) return val;
                throw TypeError("Can't convert object to primitive value");
              };
            }
          ),
          /***/
          "./node_modules/core-js/internals/uid.js": (
            /*!***********************************************!*\
              !*** ./node_modules/core-js/internals/uid.js ***!
              \***********************************************/
            /*! no static exports found */
            /***/
            function(module3, exports2) {
              var id = 0;
              var postfix = Math.random();
              module3.exports = function(key) {
                return "Symbol(".concat(key === void 0 ? "" : key, ")_", (++id + postfix).toString(36));
              };
            }
          ),
          /***/
          "./node_modules/core-js/internals/validate-set-prototype-of-arguments.js": (
            /*!*******************************************************************************!*\
              !*** ./node_modules/core-js/internals/validate-set-prototype-of-arguments.js ***!
              \*******************************************************************************/
            /*! no static exports found */
            /***/
            function(module3, exports2, __webpack_require__) {
              var isObject = __webpack_require__(
                /*! ../internals/is-object */
                "./node_modules/core-js/internals/is-object.js"
              );
              var anObject = __webpack_require__(
                /*! ../internals/an-object */
                "./node_modules/core-js/internals/an-object.js"
              );
              module3.exports = function(O, proto) {
                anObject(O);
                if (!isObject(proto) && proto !== null) {
                  throw TypeError("Can't set " + String(proto) + " as a prototype");
                }
              };
            }
          ),
          /***/
          "./node_modules/core-js/internals/well-known-symbol.js": (
            /*!*************************************************************!*\
              !*** ./node_modules/core-js/internals/well-known-symbol.js ***!
              \*************************************************************/
            /*! no static exports found */
            /***/
            function(module3, exports2, __webpack_require__) {
              var global2 = __webpack_require__(
                /*! ../internals/global */
                "./node_modules/core-js/internals/global.js"
              );
              var shared = __webpack_require__(
                /*! ../internals/shared */
                "./node_modules/core-js/internals/shared.js"
              );
              var uid = __webpack_require__(
                /*! ../internals/uid */
                "./node_modules/core-js/internals/uid.js"
              );
              var NATIVE_SYMBOL = __webpack_require__(
                /*! ../internals/native-symbol */
                "./node_modules/core-js/internals/native-symbol.js"
              );
              var Symbol2 = global2.Symbol;
              var store = shared("wks");
              module3.exports = function(name) {
                return store[name] || (store[name] = NATIVE_SYMBOL && Symbol2[name] || (NATIVE_SYMBOL ? Symbol2 : uid)("Symbol." + name));
              };
            }
          ),
          /***/
          "./node_modules/core-js/modules/es.array.from.js": (
            /*!*******************************************************!*\
              !*** ./node_modules/core-js/modules/es.array.from.js ***!
              \*******************************************************/
            /*! no static exports found */
            /***/
            function(module3, exports2, __webpack_require__) {
              var $ = __webpack_require__(
                /*! ../internals/export */
                "./node_modules/core-js/internals/export.js"
              );
              var from = __webpack_require__(
                /*! ../internals/array-from */
                "./node_modules/core-js/internals/array-from.js"
              );
              var checkCorrectnessOfIteration = __webpack_require__(
                /*! ../internals/check-correctness-of-iteration */
                "./node_modules/core-js/internals/check-correctness-of-iteration.js"
              );
              var INCORRECT_ITERATION = !checkCorrectnessOfIteration(function(iterable) {
                Array.from(iterable);
              });
              $({ target: "Array", stat: true, forced: INCORRECT_ITERATION }, {
                from
              });
            }
          ),
          /***/
          "./node_modules/core-js/modules/es.string.iterator.js": (
            /*!************************************************************!*\
              !*** ./node_modules/core-js/modules/es.string.iterator.js ***!
              \************************************************************/
            /*! no static exports found */
            /***/
            function(module3, exports2, __webpack_require__) {
              "use strict";
              var codePointAt = __webpack_require__(
                /*! ../internals/string-at */
                "./node_modules/core-js/internals/string-at.js"
              );
              var InternalStateModule = __webpack_require__(
                /*! ../internals/internal-state */
                "./node_modules/core-js/internals/internal-state.js"
              );
              var defineIterator = __webpack_require__(
                /*! ../internals/define-iterator */
                "./node_modules/core-js/internals/define-iterator.js"
              );
              var STRING_ITERATOR = "String Iterator";
              var setInternalState = InternalStateModule.set;
              var getInternalState = InternalStateModule.getterFor(STRING_ITERATOR);
              defineIterator(String, "String", function(iterated) {
                setInternalState(this, {
                  type: STRING_ITERATOR,
                  string: String(iterated),
                  index: 0
                });
              }, function next() {
                var state = getInternalState(this);
                var string = state.string;
                var index = state.index;
                var point;
                if (index >= string.length) return { value: void 0, done: true };
                point = codePointAt(string, index, true);
                state.index += point.length;
                return { value: point, done: false };
              });
            }
          ),
          /***/
          "./node_modules/webpack/buildin/global.js": (
            /*!***********************************!*\
              !*** (webpack)/buildin/global.js ***!
              \***********************************/
            /*! no static exports found */
            /***/
            function(module3, exports2) {
              var g;
              g = /* @__PURE__ */ function() {
                return this;
              }();
              try {
                g = g || Function("return this")() || (1, eval)("this");
              } catch (e) {
                if (typeof window === "object") g = window;
              }
              module3.exports = g;
            }
          ),
          /***/
          "./src/default-attrs.json": (
            /*!********************************!*\
              !*** ./src/default-attrs.json ***!
              \********************************/
            /*! exports provided: xmlns, width, height, viewBox, fill, stroke, stroke-width, stroke-linecap, stroke-linejoin, default */
            /***/
            function(module3) {
              module3.exports = { "xmlns": "http://www.w3.org/2000/svg", "width": 24, "height": 24, "viewBox": "0 0 24 24", "fill": "none", "stroke": "currentColor", "stroke-width": 2, "stroke-linecap": "round", "stroke-linejoin": "round" };
            }
          ),
          /***/
          "./src/icon.js": (
            /*!*********************!*\
              !*** ./src/icon.js ***!
              \*********************/
            /*! no static exports found */
            /***/
            function(module3, exports2, __webpack_require__) {
              "use strict";
              Object.defineProperty(exports2, "__esModule", {
                value: true
              });
              var _extends = Object.assign || function(target) {
                for (var i = 1; i < arguments.length; i++) {
                  var source = arguments[i];
                  for (var key in source) {
                    if (Object.prototype.hasOwnProperty.call(source, key)) {
                      target[key] = source[key];
                    }
                  }
                }
                return target;
              };
              var _createClass = /* @__PURE__ */ function() {
                function defineProperties(target, props) {
                  for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor);
                  }
                }
                return function(Constructor, protoProps, staticProps) {
                  if (protoProps) defineProperties(Constructor.prototype, protoProps);
                  if (staticProps) defineProperties(Constructor, staticProps);
                  return Constructor;
                };
              }();
              var _dedupe = __webpack_require__(
                /*! classnames/dedupe */
                "./node_modules/classnames/dedupe.js"
              );
              var _dedupe2 = _interopRequireDefault(_dedupe);
              var _defaultAttrs = __webpack_require__(
                /*! ./default-attrs.json */
                "./src/default-attrs.json"
              );
              var _defaultAttrs2 = _interopRequireDefault(_defaultAttrs);
              function _interopRequireDefault(obj) {
                return obj && obj.__esModule ? obj : { default: obj };
              }
              function _classCallCheck(instance41, Constructor) {
                if (!(instance41 instanceof Constructor)) {
                  throw new TypeError("Cannot call a class as a function");
                }
              }
              var Icon = function() {
                function Icon2(name, contents) {
                  var tags = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : [];
                  _classCallCheck(this, Icon2);
                  this.name = name;
                  this.contents = contents;
                  this.tags = tags;
                  this.attrs = _extends({}, _defaultAttrs2.default, { class: "feather feather-" + name });
                }
                _createClass(Icon2, [{
                  key: "toSvg",
                  value: function toSvg() {
                    var attrs = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
                    var combinedAttrs = _extends({}, this.attrs, attrs, { class: (0, _dedupe2.default)(this.attrs.class, attrs.class) });
                    return "<svg " + attrsToString(combinedAttrs) + ">" + this.contents + "</svg>";
                  }
                  /**
                   * Return string representation of an `Icon`.
                   *
                   * Added for backward compatibility. If old code expects `feather.icons.<name>`
                   * to be a string, `toString()` will get implicitly called.
                   *
                   * @returns {string}
                   */
                }, {
                  key: "toString",
                  value: function toString() {
                    return this.contents;
                  }
                }]);
                return Icon2;
              }();
              function attrsToString(attrs) {
                return Object.keys(attrs).map(function(key) {
                  return key + '="' + attrs[key] + '"';
                }).join(" ");
              }
              exports2.default = Icon;
            }
          ),
          /***/
          "./src/icons.js": (
            /*!**********************!*\
              !*** ./src/icons.js ***!
              \**********************/
            /*! no static exports found */
            /***/
            function(module3, exports2, __webpack_require__) {
              "use strict";
              Object.defineProperty(exports2, "__esModule", {
                value: true
              });
              var _icon = __webpack_require__(
                /*! ./icon */
                "./src/icon.js"
              );
              var _icon2 = _interopRequireDefault(_icon);
              var _icons = __webpack_require__(
                /*! ../dist/icons.json */
                "./dist/icons.json"
              );
              var _icons2 = _interopRequireDefault(_icons);
              var _tags = __webpack_require__(
                /*! ./tags.json */
                "./src/tags.json"
              );
              var _tags2 = _interopRequireDefault(_tags);
              function _interopRequireDefault(obj) {
                return obj && obj.__esModule ? obj : { default: obj };
              }
              exports2.default = Object.keys(_icons2.default).map(function(key) {
                return new _icon2.default(key, _icons2.default[key], _tags2.default[key]);
              }).reduce(function(object, icon) {
                object[icon.name] = icon;
                return object;
              }, {});
            }
          ),
          /***/
          "./src/index.js": (
            /*!**********************!*\
              !*** ./src/index.js ***!
              \**********************/
            /*! no static exports found */
            /***/
            function(module3, exports2, __webpack_require__) {
              "use strict";
              var _icons = __webpack_require__(
                /*! ./icons */
                "./src/icons.js"
              );
              var _icons2 = _interopRequireDefault(_icons);
              var _toSvg = __webpack_require__(
                /*! ./to-svg */
                "./src/to-svg.js"
              );
              var _toSvg2 = _interopRequireDefault(_toSvg);
              var _replace = __webpack_require__(
                /*! ./replace */
                "./src/replace.js"
              );
              var _replace2 = _interopRequireDefault(_replace);
              function _interopRequireDefault(obj) {
                return obj && obj.__esModule ? obj : { default: obj };
              }
              module3.exports = { icons: _icons2.default, toSvg: _toSvg2.default, replace: _replace2.default };
            }
          ),
          /***/
          "./src/replace.js": (
            /*!************************!*\
              !*** ./src/replace.js ***!
              \************************/
            /*! no static exports found */
            /***/
            function(module3, exports2, __webpack_require__) {
              "use strict";
              Object.defineProperty(exports2, "__esModule", {
                value: true
              });
              var _extends = Object.assign || function(target) {
                for (var i = 1; i < arguments.length; i++) {
                  var source = arguments[i];
                  for (var key in source) {
                    if (Object.prototype.hasOwnProperty.call(source, key)) {
                      target[key] = source[key];
                    }
                  }
                }
                return target;
              };
              var _dedupe = __webpack_require__(
                /*! classnames/dedupe */
                "./node_modules/classnames/dedupe.js"
              );
              var _dedupe2 = _interopRequireDefault(_dedupe);
              var _icons = __webpack_require__(
                /*! ./icons */
                "./src/icons.js"
              );
              var _icons2 = _interopRequireDefault(_icons);
              function _interopRequireDefault(obj) {
                return obj && obj.__esModule ? obj : { default: obj };
              }
              function replace() {
                var attrs = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
                if (typeof document === "undefined") {
                  throw new Error("`feather.replace()` only works in a browser environment.");
                }
                var elementsToReplace = document.querySelectorAll("[data-feather]");
                Array.from(elementsToReplace).forEach(function(element2) {
                  return replaceElement(element2, attrs);
                });
              }
              function replaceElement(element2) {
                var attrs = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
                var elementAttrs = getAttrs(element2);
                var name = elementAttrs["data-feather"];
                delete elementAttrs["data-feather"];
                if (_icons2.default[name] === void 0) {
                  console.warn("feather: '" + name + "' is not a valid icon");
                  return;
                }
                var svgString = _icons2.default[name].toSvg(_extends({}, attrs, elementAttrs, { class: (0, _dedupe2.default)(attrs.class, elementAttrs.class) }));
                var svgDocument = new DOMParser().parseFromString(svgString, "image/svg+xml");
                var svgElement = svgDocument.querySelector("svg");
                element2.parentNode.replaceChild(svgElement, element2);
              }
              function getAttrs(element2) {
                return Array.from(element2.attributes).reduce(function(attrs, attr2) {
                  attrs[attr2.name] = attr2.value;
                  return attrs;
                }, {});
              }
              exports2.default = replace;
            }
          ),
          /***/
          "./src/tags.json": (
            /*!***********************!*\
              !*** ./src/tags.json ***!
              \***********************/
            /*! exports provided: activity, airplay, alert-circle, alert-octagon, alert-triangle, align-center, align-justify, align-left, align-right, anchor, archive, at-sign, award, aperture, bar-chart, bar-chart-2, battery, battery-charging, bell, bell-off, bluetooth, book-open, book, bookmark, box, briefcase, calendar, camera, cast, chevron-down, chevron-up, circle, clipboard, clock, cloud-drizzle, cloud-lightning, cloud-rain, cloud-snow, cloud, codepen, codesandbox, code, coffee, columns, command, compass, copy, corner-down-left, corner-down-right, corner-left-down, corner-left-up, corner-right-down, corner-right-up, corner-up-left, corner-up-right, cpu, credit-card, crop, crosshair, database, delete, disc, dollar-sign, droplet, edit, edit-2, edit-3, eye, eye-off, external-link, facebook, fast-forward, figma, file-minus, file-plus, file-text, film, filter, flag, folder-minus, folder-plus, folder, framer, frown, gift, git-branch, git-commit, git-merge, git-pull-request, github, gitlab, globe, hard-drive, hash, headphones, heart, help-circle, hexagon, home, image, inbox, instagram, key, layers, layout, life-buoy, link, link-2, linkedin, list, lock, log-in, log-out, mail, map-pin, map, maximize, maximize-2, meh, menu, message-circle, message-square, mic-off, mic, minimize, minimize-2, minus, monitor, moon, more-horizontal, more-vertical, mouse-pointer, move, music, navigation, navigation-2, octagon, package, paperclip, pause, pause-circle, pen-tool, percent, phone-call, phone-forwarded, phone-incoming, phone-missed, phone-off, phone-outgoing, phone, play, pie-chart, play-circle, plus, plus-circle, plus-square, pocket, power, printer, radio, refresh-cw, refresh-ccw, repeat, rewind, rotate-ccw, rotate-cw, rss, save, scissors, search, send, settings, share-2, shield, shield-off, shopping-bag, shopping-cart, shuffle, skip-back, skip-forward, slack, slash, sliders, smartphone, smile, speaker, star, stop-circle, sun, sunrise, sunset, tablet, tag, target, terminal, thermometer, thumbs-down, thumbs-up, toggle-left, toggle-right, tool, trash, trash-2, triangle, truck, tv, twitch, twitter, type, umbrella, unlock, user-check, user-minus, user-plus, user-x, user, users, video-off, video, voicemail, volume, volume-1, volume-2, volume-x, watch, wifi-off, wifi, wind, x-circle, x-octagon, x-square, x, youtube, zap-off, zap, zoom-in, zoom-out, default */
            /***/
            function(module3) {
              module3.exports = { "activity": ["pulse", "health", "action", "motion"], "airplay": ["stream", "cast", "mirroring"], "alert-circle": ["warning", "alert", "danger"], "alert-octagon": ["warning", "alert", "danger"], "alert-triangle": ["warning", "alert", "danger"], "align-center": ["text alignment", "center"], "align-justify": ["text alignment", "justified"], "align-left": ["text alignment", "left"], "align-right": ["text alignment", "right"], "anchor": [], "archive": ["index", "box"], "at-sign": ["mention", "at", "email", "message"], "award": ["achievement", "badge"], "aperture": ["camera", "photo"], "bar-chart": ["statistics", "diagram", "graph"], "bar-chart-2": ["statistics", "diagram", "graph"], "battery": ["power", "electricity"], "battery-charging": ["power", "electricity"], "bell": ["alarm", "notification", "sound"], "bell-off": ["alarm", "notification", "silent"], "bluetooth": ["wireless"], "book-open": ["read", "library"], "book": ["read", "dictionary", "booklet", "magazine", "library"], "bookmark": ["read", "clip", "marker", "tag"], "box": ["cube"], "briefcase": ["work", "bag", "baggage", "folder"], "calendar": ["date"], "camera": ["photo"], "cast": ["chromecast", "airplay"], "chevron-down": ["expand"], "chevron-up": ["collapse"], "circle": ["off", "zero", "record"], "clipboard": ["copy"], "clock": ["time", "watch", "alarm"], "cloud-drizzle": ["weather", "shower"], "cloud-lightning": ["weather", "bolt"], "cloud-rain": ["weather"], "cloud-snow": ["weather", "blizzard"], "cloud": ["weather"], "codepen": ["logo"], "codesandbox": ["logo"], "code": ["source", "programming"], "coffee": ["drink", "cup", "mug", "tea", "cafe", "hot", "beverage"], "columns": ["layout"], "command": ["keyboard", "cmd", "terminal", "prompt"], "compass": ["navigation", "safari", "travel", "direction"], "copy": ["clone", "duplicate"], "corner-down-left": ["arrow", "return"], "corner-down-right": ["arrow"], "corner-left-down": ["arrow"], "corner-left-up": ["arrow"], "corner-right-down": ["arrow"], "corner-right-up": ["arrow"], "corner-up-left": ["arrow"], "corner-up-right": ["arrow"], "cpu": ["processor", "technology"], "credit-card": ["purchase", "payment", "cc"], "crop": ["photo", "image"], "crosshair": ["aim", "target"], "database": ["storage", "memory"], "delete": ["remove"], "disc": ["album", "cd", "dvd", "music"], "dollar-sign": ["currency", "money", "payment"], "droplet": ["water"], "edit": ["pencil", "change"], "edit-2": ["pencil", "change"], "edit-3": ["pencil", "change"], "eye": ["view", "watch"], "eye-off": ["view", "watch", "hide", "hidden"], "external-link": ["outbound"], "facebook": ["logo", "social"], "fast-forward": ["music"], "figma": ["logo", "design", "tool"], "file-minus": ["delete", "remove", "erase"], "file-plus": ["add", "create", "new"], "file-text": ["data", "txt", "pdf"], "film": ["movie", "video"], "filter": ["funnel", "hopper"], "flag": ["report"], "folder-minus": ["directory"], "folder-plus": ["directory"], "folder": ["directory"], "framer": ["logo", "design", "tool"], "frown": ["emoji", "face", "bad", "sad", "emotion"], "gift": ["present", "box", "birthday", "party"], "git-branch": ["code", "version control"], "git-commit": ["code", "version control"], "git-merge": ["code", "version control"], "git-pull-request": ["code", "version control"], "github": ["logo", "version control"], "gitlab": ["logo", "version control"], "globe": ["world", "browser", "language", "translate"], "hard-drive": ["computer", "server", "memory", "data"], "hash": ["hashtag", "number", "pound"], "headphones": ["music", "audio", "sound"], "heart": ["like", "love", "emotion"], "help-circle": ["question mark"], "hexagon": ["shape", "node.js", "logo"], "home": ["house", "living"], "image": ["picture"], "inbox": ["email"], "instagram": ["logo", "camera"], "key": ["password", "login", "authentication", "secure"], "layers": ["stack"], "layout": ["window", "webpage"], "life-buoy": ["help", "life ring", "support"], "link": ["chain", "url"], "link-2": ["chain", "url"], "linkedin": ["logo", "social media"], "list": ["options"], "lock": ["security", "password", "secure"], "log-in": ["sign in", "arrow", "enter"], "log-out": ["sign out", "arrow", "exit"], "mail": ["email", "message"], "map-pin": ["location", "navigation", "travel", "marker"], "map": ["location", "navigation", "travel"], "maximize": ["fullscreen"], "maximize-2": ["fullscreen", "arrows", "expand"], "meh": ["emoji", "face", "neutral", "emotion"], "menu": ["bars", "navigation", "hamburger"], "message-circle": ["comment", "chat"], "message-square": ["comment", "chat"], "mic-off": ["record", "sound", "mute"], "mic": ["record", "sound", "listen"], "minimize": ["exit fullscreen", "close"], "minimize-2": ["exit fullscreen", "arrows", "close"], "minus": ["subtract"], "monitor": ["tv", "screen", "display"], "moon": ["dark", "night"], "more-horizontal": ["ellipsis"], "more-vertical": ["ellipsis"], "mouse-pointer": ["arrow", "cursor"], "move": ["arrows"], "music": ["note"], "navigation": ["location", "travel"], "navigation-2": ["location", "travel"], "octagon": ["stop"], "package": ["box", "container"], "paperclip": ["attachment"], "pause": ["music", "stop"], "pause-circle": ["music", "audio", "stop"], "pen-tool": ["vector", "drawing"], "percent": ["discount"], "phone-call": ["ring"], "phone-forwarded": ["call"], "phone-incoming": ["call"], "phone-missed": ["call"], "phone-off": ["call", "mute"], "phone-outgoing": ["call"], "phone": ["call"], "play": ["music", "start"], "pie-chart": ["statistics", "diagram"], "play-circle": ["music", "start"], "plus": ["add", "new"], "plus-circle": ["add", "new"], "plus-square": ["add", "new"], "pocket": ["logo", "save"], "power": ["on", "off"], "printer": ["fax", "office", "device"], "radio": ["signal"], "refresh-cw": ["synchronise", "arrows"], "refresh-ccw": ["arrows"], "repeat": ["loop", "arrows"], "rewind": ["music"], "rotate-ccw": ["arrow"], "rotate-cw": ["arrow"], "rss": ["feed", "subscribe"], "save": ["floppy disk"], "scissors": ["cut"], "search": ["find", "magnifier", "magnifying glass"], "send": ["message", "mail", "email", "paper airplane", "paper aeroplane"], "settings": ["cog", "edit", "gear", "preferences"], "share-2": ["network", "connections"], "shield": ["security", "secure"], "shield-off": ["security", "insecure"], "shopping-bag": ["ecommerce", "cart", "purchase", "store"], "shopping-cart": ["ecommerce", "cart", "purchase", "store"], "shuffle": ["music"], "skip-back": ["music"], "skip-forward": ["music"], "slack": ["logo"], "slash": ["ban", "no"], "sliders": ["settings", "controls"], "smartphone": ["cellphone", "device"], "smile": ["emoji", "face", "happy", "good", "emotion"], "speaker": ["audio", "music"], "star": ["bookmark", "favorite", "like"], "stop-circle": ["media", "music"], "sun": ["brightness", "weather", "light"], "sunrise": ["weather", "time", "morning", "day"], "sunset": ["weather", "time", "evening", "night"], "tablet": ["device"], "tag": ["label"], "target": ["logo", "bullseye"], "terminal": ["code", "command line", "prompt"], "thermometer": ["temperature", "celsius", "fahrenheit", "weather"], "thumbs-down": ["dislike", "bad", "emotion"], "thumbs-up": ["like", "good", "emotion"], "toggle-left": ["on", "off", "switch"], "toggle-right": ["on", "off", "switch"], "tool": ["settings", "spanner"], "trash": ["garbage", "delete", "remove", "bin"], "trash-2": ["garbage", "delete", "remove", "bin"], "triangle": ["delta"], "truck": ["delivery", "van", "shipping", "transport", "lorry"], "tv": ["television", "stream"], "twitch": ["logo"], "twitter": ["logo", "social"], "type": ["text"], "umbrella": ["rain", "weather"], "unlock": ["security"], "user-check": ["followed", "subscribed"], "user-minus": ["delete", "remove", "unfollow", "unsubscribe"], "user-plus": ["new", "add", "create", "follow", "subscribe"], "user-x": ["delete", "remove", "unfollow", "unsubscribe", "unavailable"], "user": ["person", "account"], "users": ["group"], "video-off": ["camera", "movie", "film"], "video": ["camera", "movie", "film"], "voicemail": ["phone"], "volume": ["music", "sound", "mute"], "volume-1": ["music", "sound"], "volume-2": ["music", "sound"], "volume-x": ["music", "sound", "mute"], "watch": ["clock", "time"], "wifi-off": ["disabled"], "wifi": ["connection", "signal", "wireless"], "wind": ["weather", "air"], "x-circle": ["cancel", "close", "delete", "remove", "times", "clear"], "x-octagon": ["delete", "stop", "alert", "warning", "times", "clear"], "x-square": ["cancel", "close", "delete", "remove", "times", "clear"], "x": ["cancel", "close", "delete", "remove", "times", "clear"], "youtube": ["logo", "video", "play"], "zap-off": ["flash", "camera", "lightning"], "zap": ["flash", "camera", "lightning"], "zoom-in": ["magnifying glass"], "zoom-out": ["magnifying glass"] };
            }
          ),
          /***/
          "./src/to-svg.js": (
            /*!***********************!*\
              !*** ./src/to-svg.js ***!
              \***********************/
            /*! no static exports found */
            /***/
            function(module3, exports2, __webpack_require__) {
              "use strict";
              Object.defineProperty(exports2, "__esModule", {
                value: true
              });
              var _icons = __webpack_require__(
                /*! ./icons */
                "./src/icons.js"
              );
              var _icons2 = _interopRequireDefault(_icons);
              function _interopRequireDefault(obj) {
                return obj && obj.__esModule ? obj : { default: obj };
              }
              function toSvg(name) {
                var attrs = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
                console.warn("feather.toSvg() is deprecated. Please use feather.icons[name].toSvg() instead.");
                if (!name) {
                  throw new Error("The required `key` (icon name) parameter is missing.");
                }
                if (!_icons2.default[name]) {
                  throw new Error("No icon matching '" + name + "'. See the complete list of icons at https://feathericons.com");
                }
                return _icons2.default[name].toSvg(attrs);
              }
              exports2.default = toSvg;
            }
          ),
          /***/
          0: (
            /*!**************************************************!*\
              !*** multi core-js/es/array/from ./src/index.js ***!
              \**************************************************/
            /*! no static exports found */
            /***/
            function(module3, exports2, __webpack_require__) {
              __webpack_require__(
                /*! core-js/es/array/from */
                "./node_modules/core-js/es/array/from.js"
              );
              module3.exports = __webpack_require__(
                /*! /home/runner/work/feather/feather/src/index.js */
                "./src/index.js"
              );
            }
          )
          /******/
        })
      );
    });
  }
});

// node_modules/.pnpm/graphology@0.23.2_graphology-types@0.24.8/node_modules/graphology/dist/graphology.umd.min.js
var require_graphology_umd_min = __commonJS({
  "node_modules/.pnpm/graphology@0.23.2_graphology-types@0.24.8/node_modules/graphology/dist/graphology.umd.min.js"(exports, module2) {
    !function(t, e) {
      "object" == typeof exports && "undefined" != typeof module2 ? module2.exports = e() : "function" == typeof define && define.amd ? define(e) : (t = "undefined" != typeof globalThis ? globalThis : t || self).graphology = e();
    }(exports, function() {
      "use strict";
      function t(e2) {
        return t = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t2) {
          return typeof t2;
        } : function(t2) {
          return t2 && "function" == typeof Symbol && t2.constructor === Symbol && t2 !== Symbol.prototype ? "symbol" : typeof t2;
        }, t(e2);
      }
      function e(t2, e2) {
        t2.prototype = Object.create(e2.prototype), t2.prototype.constructor = t2, r(t2, e2);
      }
      function n(t2) {
        return n = Object.setPrototypeOf ? Object.getPrototypeOf : function(t3) {
          return t3.__proto__ || Object.getPrototypeOf(t3);
        }, n(t2);
      }
      function r(t2, e2) {
        return r = Object.setPrototypeOf || function(t3, e3) {
          return t3.__proto__ = e3, t3;
        }, r(t2, e2);
      }
      function i() {
        if ("undefined" == typeof Reflect || !Reflect.construct) return false;
        if (Reflect.construct.sham) return false;
        if ("function" == typeof Proxy) return true;
        try {
          return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
          })), true;
        } catch (t2) {
          return false;
        }
      }
      function o(t2, e2, n2) {
        return o = i() ? Reflect.construct : function(t3, e3, n3) {
          var i2 = [null];
          i2.push.apply(i2, e3);
          var o2 = new (Function.bind.apply(t3, i2))();
          return n3 && r(o2, n3.prototype), o2;
        }, o.apply(null, arguments);
      }
      function a(t2) {
        var e2 = "function" == typeof Map ? /* @__PURE__ */ new Map() : void 0;
        return a = function(t3) {
          if (null === t3 || (i2 = t3, -1 === Function.toString.call(i2).indexOf("[native code]"))) return t3;
          var i2;
          if ("function" != typeof t3) throw new TypeError("Super expression must either be null or a function");
          if (void 0 !== e2) {
            if (e2.has(t3)) return e2.get(t3);
            e2.set(t3, a2);
          }
          function a2() {
            return o(t3, arguments, n(this).constructor);
          }
          return a2.prototype = Object.create(t3.prototype, { constructor: { value: a2, enumerable: false, writable: true, configurable: true } }), r(a2, t3);
        }, a(t2);
      }
      function u(t2) {
        if (void 0 === t2) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        return t2;
      }
      var c = function() {
        for (var t2 = arguments[0], e2 = 1, n2 = arguments.length; e2 < n2; e2++) if (arguments[e2]) for (var r2 in arguments[e2]) t2[r2] = arguments[e2][r2];
        return t2;
      };
      function d(t2, e2, n2, r2) {
        var i2 = t2._nodes.get(e2), o2 = null;
        return i2 ? o2 = "mixed" === r2 ? i2.out && i2.out[n2] || i2.undirected && i2.undirected[n2] : "directed" === r2 ? i2.out && i2.out[n2] : i2.undirected && i2.undirected[n2] : o2;
      }
      function s(e2) {
        return null !== e2 && "object" === t(e2) && "function" == typeof e2.addUndirectedEdgeWithKey && "function" == typeof e2.dropNode;
      }
      function h(e2) {
        return "object" === t(e2) && null !== e2 && e2.constructor === Object;
      }
      function f(t2) {
        var e2;
        for (e2 in t2) return false;
        return true;
      }
      function p(t2, e2, n2) {
        Object.defineProperty(t2, e2, { enumerable: false, configurable: false, writable: true, value: n2 });
      }
      function l(t2, e2, n2) {
        var r2 = { enumerable: true, configurable: true };
        "function" == typeof n2 ? r2.get = n2 : (r2.value = n2, r2.writable = false), Object.defineProperty(t2, e2, r2);
      }
      function g(t2) {
        return !!h(t2) && !(t2.attributes && !Array.isArray(t2.attributes));
      }
      "function" == typeof Object.assign && (c = Object.assign);
      var y, v = { exports: {} }, b = "object" == typeof Reflect ? Reflect : null, w = b && "function" == typeof b.apply ? b.apply : function(t2, e2, n2) {
        return Function.prototype.apply.call(t2, e2, n2);
      };
      y = b && "function" == typeof b.ownKeys ? b.ownKeys : Object.getOwnPropertySymbols ? function(t2) {
        return Object.getOwnPropertyNames(t2).concat(Object.getOwnPropertySymbols(t2));
      } : function(t2) {
        return Object.getOwnPropertyNames(t2);
      };
      var m = Number.isNaN || function(t2) {
        return t2 != t2;
      };
      function _() {
        _.init.call(this);
      }
      v.exports = _, v.exports.once = function(t2, e2) {
        return new Promise(function(n2, r2) {
          function i2(n3) {
            t2.removeListener(e2, o2), r2(n3);
          }
          function o2() {
            "function" == typeof t2.removeListener && t2.removeListener("error", i2), n2([].slice.call(arguments));
          }
          U(t2, e2, o2, { once: true }), "error" !== e2 && function(t3, e3, n3) {
            "function" == typeof t3.on && U(t3, "error", e3, n3);
          }(t2, i2, { once: true });
        });
      }, _.EventEmitter = _, _.prototype._events = void 0, _.prototype._eventsCount = 0, _.prototype._maxListeners = void 0;
      var k = 10;
      function G(t2) {
        if ("function" != typeof t2) throw new TypeError('The "listener" argument must be of type Function. Received type ' + typeof t2);
      }
      function x(t2) {
        return void 0 === t2._maxListeners ? _.defaultMaxListeners : t2._maxListeners;
      }
      function E(t2, e2, n2, r2) {
        var i2, o2, a2, u2;
        if (G(n2), void 0 === (o2 = t2._events) ? (o2 = t2._events = /* @__PURE__ */ Object.create(null), t2._eventsCount = 0) : (void 0 !== o2.newListener && (t2.emit("newListener", e2, n2.listener ? n2.listener : n2), o2 = t2._events), a2 = o2[e2]), void 0 === a2) a2 = o2[e2] = n2, ++t2._eventsCount;
        else if ("function" == typeof a2 ? a2 = o2[e2] = r2 ? [n2, a2] : [a2, n2] : r2 ? a2.unshift(n2) : a2.push(n2), (i2 = x(t2)) > 0 && a2.length > i2 && !a2.warned) {
          a2.warned = true;
          var c2 = new Error("Possible EventEmitter memory leak detected. " + a2.length + " " + String(e2) + " listeners added. Use emitter.setMaxListeners() to increase limit");
          c2.name = "MaxListenersExceededWarning", c2.emitter = t2, c2.type = e2, c2.count = a2.length, u2 = c2, console && console.warn && console.warn(u2);
        }
        return t2;
      }
      function S() {
        if (!this.fired) return this.target.removeListener(this.type, this.wrapFn), this.fired = true, 0 === arguments.length ? this.listener.call(this.target) : this.listener.apply(this.target, arguments);
      }
      function A(t2, e2, n2) {
        var r2 = { fired: false, wrapFn: void 0, target: t2, type: e2, listener: n2 }, i2 = S.bind(r2);
        return i2.listener = n2, r2.wrapFn = i2, i2;
      }
      function L(t2, e2, n2) {
        var r2 = t2._events;
        if (void 0 === r2) return [];
        var i2 = r2[e2];
        return void 0 === i2 ? [] : "function" == typeof i2 ? n2 ? [i2.listener || i2] : [i2] : n2 ? function(t3) {
          for (var e3 = new Array(t3.length), n3 = 0; n3 < e3.length; ++n3) e3[n3] = t3[n3].listener || t3[n3];
          return e3;
        }(i2) : N(i2, i2.length);
      }
      function D(t2) {
        var e2 = this._events;
        if (void 0 !== e2) {
          var n2 = e2[t2];
          if ("function" == typeof n2) return 1;
          if (void 0 !== n2) return n2.length;
        }
        return 0;
      }
      function N(t2, e2) {
        for (var n2 = new Array(e2), r2 = 0; r2 < e2; ++r2) n2[r2] = t2[r2];
        return n2;
      }
      function U(t2, e2, n2, r2) {
        if ("function" == typeof t2.on) r2.once ? t2.once(e2, n2) : t2.on(e2, n2);
        else {
          if ("function" != typeof t2.addEventListener) throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type ' + typeof t2);
          t2.addEventListener(e2, function i2(o2) {
            r2.once && t2.removeEventListener(e2, i2), n2(o2);
          });
        }
      }
      function j(t2) {
        if ("function" != typeof t2) throw new Error("obliterator/iterator: expecting a function!");
        this.next = t2;
      }
      Object.defineProperty(_, "defaultMaxListeners", { enumerable: true, get: function() {
        return k;
      }, set: function(t2) {
        if ("number" != typeof t2 || t2 < 0 || m(t2)) throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received ' + t2 + ".");
        k = t2;
      } }), _.init = function() {
        void 0 !== this._events && this._events !== Object.getPrototypeOf(this)._events || (this._events = /* @__PURE__ */ Object.create(null), this._eventsCount = 0), this._maxListeners = this._maxListeners || void 0;
      }, _.prototype.setMaxListeners = function(t2) {
        if ("number" != typeof t2 || t2 < 0 || m(t2)) throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received ' + t2 + ".");
        return this._maxListeners = t2, this;
      }, _.prototype.getMaxListeners = function() {
        return x(this);
      }, _.prototype.emit = function(t2) {
        for (var e2 = [], n2 = 1; n2 < arguments.length; n2++) e2.push(arguments[n2]);
        var r2 = "error" === t2, i2 = this._events;
        if (void 0 !== i2) r2 = r2 && void 0 === i2.error;
        else if (!r2) return false;
        if (r2) {
          var o2;
          if (e2.length > 0 && (o2 = e2[0]), o2 instanceof Error) throw o2;
          var a2 = new Error("Unhandled error." + (o2 ? " (" + o2.message + ")" : ""));
          throw a2.context = o2, a2;
        }
        var u2 = i2[t2];
        if (void 0 === u2) return false;
        if ("function" == typeof u2) w(u2, this, e2);
        else {
          var c2 = u2.length, d2 = N(u2, c2);
          for (n2 = 0; n2 < c2; ++n2) w(d2[n2], this, e2);
        }
        return true;
      }, _.prototype.addListener = function(t2, e2) {
        return E(this, t2, e2, false);
      }, _.prototype.on = _.prototype.addListener, _.prototype.prependListener = function(t2, e2) {
        return E(this, t2, e2, true);
      }, _.prototype.once = function(t2, e2) {
        return G(e2), this.on(t2, A(this, t2, e2)), this;
      }, _.prototype.prependOnceListener = function(t2, e2) {
        return G(e2), this.prependListener(t2, A(this, t2, e2)), this;
      }, _.prototype.removeListener = function(t2, e2) {
        var n2, r2, i2, o2, a2;
        if (G(e2), void 0 === (r2 = this._events)) return this;
        if (void 0 === (n2 = r2[t2])) return this;
        if (n2 === e2 || n2.listener === e2) 0 == --this._eventsCount ? this._events = /* @__PURE__ */ Object.create(null) : (delete r2[t2], r2.removeListener && this.emit("removeListener", t2, n2.listener || e2));
        else if ("function" != typeof n2) {
          for (i2 = -1, o2 = n2.length - 1; o2 >= 0; o2--) if (n2[o2] === e2 || n2[o2].listener === e2) {
            a2 = n2[o2].listener, i2 = o2;
            break;
          }
          if (i2 < 0) return this;
          0 === i2 ? n2.shift() : function(t3, e3) {
            for (; e3 + 1 < t3.length; e3++) t3[e3] = t3[e3 + 1];
            t3.pop();
          }(n2, i2), 1 === n2.length && (r2[t2] = n2[0]), void 0 !== r2.removeListener && this.emit("removeListener", t2, a2 || e2);
        }
        return this;
      }, _.prototype.off = _.prototype.removeListener, _.prototype.removeAllListeners = function(t2) {
        var e2, n2, r2;
        if (void 0 === (n2 = this._events)) return this;
        if (void 0 === n2.removeListener) return 0 === arguments.length ? (this._events = /* @__PURE__ */ Object.create(null), this._eventsCount = 0) : void 0 !== n2[t2] && (0 == --this._eventsCount ? this._events = /* @__PURE__ */ Object.create(null) : delete n2[t2]), this;
        if (0 === arguments.length) {
          var i2, o2 = Object.keys(n2);
          for (r2 = 0; r2 < o2.length; ++r2) "removeListener" !== (i2 = o2[r2]) && this.removeAllListeners(i2);
          return this.removeAllListeners("removeListener"), this._events = /* @__PURE__ */ Object.create(null), this._eventsCount = 0, this;
        }
        if ("function" == typeof (e2 = n2[t2])) this.removeListener(t2, e2);
        else if (void 0 !== e2) for (r2 = e2.length - 1; r2 >= 0; r2--) this.removeListener(t2, e2[r2]);
        return this;
      }, _.prototype.listeners = function(t2) {
        return L(this, t2, true);
      }, _.prototype.rawListeners = function(t2) {
        return L(this, t2, false);
      }, _.listenerCount = function(t2, e2) {
        return "function" == typeof t2.listenerCount ? t2.listenerCount(e2) : D.call(t2, e2);
      }, _.prototype.listenerCount = D, _.prototype.eventNames = function() {
        return this._eventsCount > 0 ? y(this._events) : [];
      }, "undefined" != typeof Symbol && (j.prototype[Symbol.iterator] = function() {
        return this;
      }), j.of = function() {
        var t2 = arguments, e2 = t2.length, n2 = 0;
        return new j(function() {
          return n2 >= e2 ? { done: true } : { done: false, value: t2[n2++] };
        });
      }, j.empty = function() {
        return new j(function() {
          return { done: true };
        });
      }, j.fromSequence = function(t2) {
        var e2 = 0, n2 = t2.length;
        return new j(function() {
          return e2 >= n2 ? { done: true } : { done: false, value: t2[e2++] };
        });
      }, j.is = function(t2) {
        return t2 instanceof j || "object" == typeof t2 && null !== t2 && "function" == typeof t2.next;
      };
      var O = j, C = {};
      C.ARRAY_BUFFER_SUPPORT = "undefined" != typeof ArrayBuffer, C.SYMBOL_SUPPORT = "undefined" != typeof Symbol;
      var z = O, M = C, P = M.ARRAY_BUFFER_SUPPORT, T = M.SYMBOL_SUPPORT;
      var R = function(t2) {
        var e2 = function(t3) {
          return "string" == typeof t3 || Array.isArray(t3) || P && ArrayBuffer.isView(t3) ? z.fromSequence(t3) : "object" != typeof t3 || null === t3 ? null : T && "function" == typeof t3[Symbol.iterator] ? t3[Symbol.iterator]() : "function" == typeof t3.next ? t3 : null;
        }(t2);
        if (!e2) throw new Error("obliterator: target is not iterable nor a valid iterator.");
        return e2;
      }, W = R, K = function(t2, e2) {
        for (var n2, r2 = arguments.length > 1 ? e2 : 1 / 0, i2 = r2 !== 1 / 0 ? new Array(r2) : [], o2 = 0, a2 = W(t2); ; ) {
          if (o2 === r2) return i2;
          if ((n2 = a2.next()).done) return o2 !== e2 && (i2.length = o2), i2;
          i2[o2++] = n2.value;
        }
      }, I = function(t2) {
        function n2(e2) {
          var n3;
          return (n3 = t2.call(this) || this).name = "GraphError", n3.message = e2, n3;
        }
        return e(n2, t2), n2;
      }(a(Error)), F = function(t2) {
        function n2(e2) {
          var r2;
          return (r2 = t2.call(this, e2) || this).name = "InvalidArgumentsGraphError", "function" == typeof Error.captureStackTrace && Error.captureStackTrace(u(r2), n2.prototype.constructor), r2;
        }
        return e(n2, t2), n2;
      }(I), Y = function(t2) {
        function n2(e2) {
          var r2;
          return (r2 = t2.call(this, e2) || this).name = "NotFoundGraphError", "function" == typeof Error.captureStackTrace && Error.captureStackTrace(u(r2), n2.prototype.constructor), r2;
        }
        return e(n2, t2), n2;
      }(I), B = function(t2) {
        function n2(e2) {
          var r2;
          return (r2 = t2.call(this, e2) || this).name = "UsageGraphError", "function" == typeof Error.captureStackTrace && Error.captureStackTrace(u(r2), n2.prototype.constructor), r2;
        }
        return e(n2, t2), n2;
      }(I);
      function q(t2, e2) {
        this.key = t2, this.attributes = e2, this.clear();
      }
      function J(t2, e2) {
        this.key = t2, this.attributes = e2, this.clear();
      }
      function V(t2, e2) {
        this.key = t2, this.attributes = e2, this.clear();
      }
      function H(t2, e2, n2, r2, i2) {
        this.key = e2, this.attributes = i2, this.undirected = t2, this.source = n2, this.target = r2;
      }
      function Q(t2, e2, n2, r2, i2, o2, a2) {
        var u2, c2, d2 = "out", s2 = "in";
        if (e2 && (d2 = s2 = "undirected"), t2.multi) {
          if (void 0 === (c2 = (u2 = o2[d2])[i2]) && (c2 = /* @__PURE__ */ new Set(), u2[i2] = c2), c2.add(n2), r2 === i2 && e2) return;
          void 0 === (u2 = a2[s2])[r2] && (u2[r2] = c2);
        } else {
          if (o2[d2][i2] = n2, r2 === i2 && e2) return;
          a2[s2][r2] = n2;
        }
      }
      function X(t2, e2, n2) {
        var r2 = t2.multi, i2 = n2.source, o2 = n2.target, a2 = i2.key, u2 = o2.key, c2 = i2[e2 ? "undirected" : "out"], d2 = e2 ? "undirected" : "in";
        if (u2 in c2) if (r2) {
          var s2 = c2[u2];
          1 === s2.size ? (delete c2[u2], delete o2[d2][a2]) : s2.delete(n2);
        } else delete c2[u2];
        r2 || delete o2[d2][a2];
      }
      q.prototype.clear = function() {
        this.inDegree = 0, this.outDegree = 0, this.undirectedDegree = 0, this.directedSelfLoops = 0, this.undirectedSelfLoops = 0, this.in = {}, this.out = {}, this.undirected = {};
      }, J.prototype.clear = function() {
        this.inDegree = 0, this.outDegree = 0, this.directedSelfLoops = 0, this.in = {}, this.out = {};
      }, J.prototype.upgradeToMixed = function() {
        this.undirectedDegree = 0, this.undirectedSelfLoops = 0, this.undirected = {};
      }, V.prototype.clear = function() {
        this.undirectedDegree = 0, this.undirectedSelfLoops = 0, this.undirected = {};
      }, V.prototype.upgradeToMixed = function() {
        this.inDegree = 0, this.outDegree = 0, this.directedSelfLoops = 0, this.in = {}, this.out = {};
      };
      function Z(t2, e2, n2, r2, i2, o2, a2) {
        var u2, c2, d2, s2;
        if (r2 = "" + r2, 0 === n2) {
          if (!(u2 = t2._nodes.get(r2))) throw new Y("Graph.".concat(e2, ': could not find the "').concat(r2, '" node in the graph.'));
          d2 = i2, s2 = o2;
        } else if (3 === n2) {
          if (i2 = "" + i2, !(c2 = t2._edges.get(i2))) throw new Y("Graph.".concat(e2, ': could not find the "').concat(i2, '" edge in the graph.'));
          var h2 = c2.source.key, f2 = c2.target.key;
          if (r2 === h2) u2 = c2.target;
          else {
            if (r2 !== f2) throw new Y("Graph.".concat(e2, ': the "').concat(r2, '" node is not attached to the "').concat(i2, '" edge (').concat(h2, ", ").concat(f2, ")."));
            u2 = c2.source;
          }
          d2 = o2, s2 = a2;
        } else {
          if (!(c2 = t2._edges.get(r2))) throw new Y("Graph.".concat(e2, ': could not find the "').concat(r2, '" edge in the graph.'));
          u2 = 1 === n2 ? c2.source : c2.target, d2 = i2, s2 = o2;
        }
        return [u2, d2, s2];
      }
      var $ = [{ name: function(t2) {
        return "get".concat(t2, "Attribute");
      }, attacher: function(t2, e2, n2) {
        t2.prototype[e2] = function(t3, r2, i2) {
          var o2 = Z(this, e2, n2, t3, r2, i2), a2 = o2[0], u2 = o2[1];
          return a2.attributes[u2];
        };
      } }, { name: function(t2) {
        return "get".concat(t2, "Attributes");
      }, attacher: function(t2, e2, n2) {
        t2.prototype[e2] = function(t3, r2) {
          return Z(this, e2, n2, t3, r2)[0].attributes;
        };
      } }, { name: function(t2) {
        return "has".concat(t2, "Attribute");
      }, attacher: function(t2, e2, n2) {
        t2.prototype[e2] = function(t3, r2, i2) {
          var o2 = Z(this, e2, n2, t3, r2, i2), a2 = o2[0], u2 = o2[1];
          return a2.attributes.hasOwnProperty(u2);
        };
      } }, { name: function(t2) {
        return "set".concat(t2, "Attribute");
      }, attacher: function(t2, e2, n2) {
        t2.prototype[e2] = function(t3, r2, i2, o2) {
          var a2 = Z(this, e2, n2, t3, r2, i2, o2), u2 = a2[0], c2 = a2[1], d2 = a2[2];
          return u2.attributes[c2] = d2, this.emit("nodeAttributesUpdated", { key: u2.key, type: "set", attributes: u2.attributes, name: c2 }), this;
        };
      } }, { name: function(t2) {
        return "update".concat(t2, "Attribute");
      }, attacher: function(t2, e2, n2) {
        t2.prototype[e2] = function(t3, r2, i2, o2) {
          var a2 = Z(this, e2, n2, t3, r2, i2, o2), u2 = a2[0], c2 = a2[1], d2 = a2[2];
          if ("function" != typeof d2) throw new F("Graph.".concat(e2, ": updater should be a function."));
          var s2 = u2.attributes, h2 = d2(s2[c2]);
          return s2[c2] = h2, this.emit("nodeAttributesUpdated", { key: u2.key, type: "set", attributes: u2.attributes, name: c2 }), this;
        };
      } }, { name: function(t2) {
        return "remove".concat(t2, "Attribute");
      }, attacher: function(t2, e2, n2) {
        t2.prototype[e2] = function(t3, r2, i2) {
          var o2 = Z(this, e2, n2, t3, r2, i2), a2 = o2[0], u2 = o2[1];
          return delete a2.attributes[u2], this.emit("nodeAttributesUpdated", { key: a2.key, type: "remove", attributes: a2.attributes, name: u2 }), this;
        };
      } }, { name: function(t2) {
        return "replace".concat(t2, "Attributes");
      }, attacher: function(t2, e2, n2) {
        t2.prototype[e2] = function(t3, r2, i2) {
          var o2 = Z(this, e2, n2, t3, r2, i2), a2 = o2[0], u2 = o2[1];
          if (!h(u2)) throw new F("Graph.".concat(e2, ": provided attributes are not a plain object."));
          return a2.attributes = u2, this.emit("nodeAttributesUpdated", { key: a2.key, type: "replace", attributes: a2.attributes }), this;
        };
      } }, { name: function(t2) {
        return "merge".concat(t2, "Attributes");
      }, attacher: function(t2, e2, n2) {
        t2.prototype[e2] = function(t3, r2, i2) {
          var o2 = Z(this, e2, n2, t3, r2, i2), a2 = o2[0], u2 = o2[1];
          if (!h(u2)) throw new F("Graph.".concat(e2, ": provided attributes are not a plain object."));
          return c(a2.attributes, u2), this.emit("nodeAttributesUpdated", { key: a2.key, type: "merge", attributes: a2.attributes, data: u2 }), this;
        };
      } }, { name: function(t2) {
        return "update".concat(t2, "Attributes");
      }, attacher: function(t2, e2, n2) {
        t2.prototype[e2] = function(t3, r2, i2) {
          var o2 = Z(this, e2, n2, t3, r2, i2), a2 = o2[0], u2 = o2[1];
          if ("function" != typeof u2) throw new F("Graph.".concat(e2, ": provided updater is not a function."));
          return a2.attributes = u2(a2.attributes), this.emit("nodeAttributesUpdated", { key: a2.key, type: "update", attributes: a2.attributes }), this;
        };
      } }];
      var tt = [{ name: function(t2) {
        return "get".concat(t2, "Attribute");
      }, attacher: function(t2, e2, n2) {
        t2.prototype[e2] = function(t3, r2) {
          var i2;
          if ("mixed" !== this.type && "mixed" !== n2 && n2 !== this.type) throw new B("Graph.".concat(e2, ": cannot find this type of edges in your ").concat(this.type, " graph."));
          if (arguments.length > 2) {
            if (this.multi) throw new B("Graph.".concat(e2, ": cannot use a {source,target} combo when asking about an edge's attributes in a MultiGraph since we cannot infer the one you want information about."));
            var o2 = "" + t3, a2 = "" + r2;
            if (r2 = arguments[2], !(i2 = d(this, o2, a2, n2))) throw new Y("Graph.".concat(e2, ': could not find an edge for the given path ("').concat(o2, '" - "').concat(a2, '").'));
          } else if (t3 = "" + t3, !(i2 = this._edges.get(t3))) throw new Y("Graph.".concat(e2, ': could not find the "').concat(t3, '" edge in the graph.'));
          if ("mixed" !== n2 && i2.undirected !== ("undirected" === n2)) throw new Y("Graph.".concat(e2, ': could not find the "').concat(t3, '" ').concat(n2, " edge in the graph."));
          return i2.attributes[r2];
        };
      } }, { name: function(t2) {
        return "get".concat(t2, "Attributes");
      }, attacher: function(t2, e2, n2) {
        t2.prototype[e2] = function(t3) {
          var r2;
          if ("mixed" !== this.type && "mixed" !== n2 && n2 !== this.type) throw new B("Graph.".concat(e2, ": cannot find this type of edges in your ").concat(this.type, " graph."));
          if (arguments.length > 1) {
            if (this.multi) throw new B("Graph.".concat(e2, ": cannot use a {source,target} combo when asking about an edge's attributes in a MultiGraph since we cannot infer the one you want information about."));
            var i2 = "" + t3, o2 = "" + arguments[1];
            if (!(r2 = d(this, i2, o2, n2))) throw new Y("Graph.".concat(e2, ': could not find an edge for the given path ("').concat(i2, '" - "').concat(o2, '").'));
          } else if (t3 = "" + t3, !(r2 = this._edges.get(t3))) throw new Y("Graph.".concat(e2, ': could not find the "').concat(t3, '" edge in the graph.'));
          if ("mixed" !== n2 && r2.undirected !== ("undirected" === n2)) throw new Y("Graph.".concat(e2, ': could not find the "').concat(t3, '" ').concat(n2, " edge in the graph."));
          return r2.attributes;
        };
      } }, { name: function(t2) {
        return "has".concat(t2, "Attribute");
      }, attacher: function(t2, e2, n2) {
        t2.prototype[e2] = function(t3, r2) {
          var i2;
          if ("mixed" !== this.type && "mixed" !== n2 && n2 !== this.type) throw new B("Graph.".concat(e2, ": cannot find this type of edges in your ").concat(this.type, " graph."));
          if (arguments.length > 2) {
            if (this.multi) throw new B("Graph.".concat(e2, ": cannot use a {source,target} combo when asking about an edge's attributes in a MultiGraph since we cannot infer the one you want information about."));
            var o2 = "" + t3, a2 = "" + r2;
            if (r2 = arguments[2], !(i2 = d(this, o2, a2, n2))) throw new Y("Graph.".concat(e2, ': could not find an edge for the given path ("').concat(o2, '" - "').concat(a2, '").'));
          } else if (t3 = "" + t3, !(i2 = this._edges.get(t3))) throw new Y("Graph.".concat(e2, ': could not find the "').concat(t3, '" edge in the graph.'));
          if ("mixed" !== n2 && i2.undirected !== ("undirected" === n2)) throw new Y("Graph.".concat(e2, ': could not find the "').concat(t3, '" ').concat(n2, " edge in the graph."));
          return i2.attributes.hasOwnProperty(r2);
        };
      } }, { name: function(t2) {
        return "set".concat(t2, "Attribute");
      }, attacher: function(t2, e2, n2) {
        t2.prototype[e2] = function(t3, r2, i2) {
          var o2;
          if ("mixed" !== this.type && "mixed" !== n2 && n2 !== this.type) throw new B("Graph.".concat(e2, ": cannot find this type of edges in your ").concat(this.type, " graph."));
          if (arguments.length > 3) {
            if (this.multi) throw new B("Graph.".concat(e2, ": cannot use a {source,target} combo when asking about an edge's attributes in a MultiGraph since we cannot infer the one you want information about."));
            var a2 = "" + t3, u2 = "" + r2;
            if (r2 = arguments[2], i2 = arguments[3], !(o2 = d(this, a2, u2, n2))) throw new Y("Graph.".concat(e2, ': could not find an edge for the given path ("').concat(a2, '" - "').concat(u2, '").'));
          } else if (t3 = "" + t3, !(o2 = this._edges.get(t3))) throw new Y("Graph.".concat(e2, ': could not find the "').concat(t3, '" edge in the graph.'));
          if ("mixed" !== n2 && o2.undirected !== ("undirected" === n2)) throw new Y("Graph.".concat(e2, ': could not find the "').concat(t3, '" ').concat(n2, " edge in the graph."));
          return o2.attributes[r2] = i2, this.emit("edgeAttributesUpdated", { key: o2.key, type: "set", attributes: o2.attributes, name: r2 }), this;
        };
      } }, { name: function(t2) {
        return "update".concat(t2, "Attribute");
      }, attacher: function(t2, e2, n2) {
        t2.prototype[e2] = function(t3, r2, i2) {
          var o2;
          if ("mixed" !== this.type && "mixed" !== n2 && n2 !== this.type) throw new B("Graph.".concat(e2, ": cannot find this type of edges in your ").concat(this.type, " graph."));
          if (arguments.length > 3) {
            if (this.multi) throw new B("Graph.".concat(e2, ": cannot use a {source,target} combo when asking about an edge's attributes in a MultiGraph since we cannot infer the one you want information about."));
            var a2 = "" + t3, u2 = "" + r2;
            if (r2 = arguments[2], i2 = arguments[3], !(o2 = d(this, a2, u2, n2))) throw new Y("Graph.".concat(e2, ': could not find an edge for the given path ("').concat(a2, '" - "').concat(u2, '").'));
          } else if (t3 = "" + t3, !(o2 = this._edges.get(t3))) throw new Y("Graph.".concat(e2, ': could not find the "').concat(t3, '" edge in the graph.'));
          if ("function" != typeof i2) throw new F("Graph.".concat(e2, ": updater should be a function."));
          if ("mixed" !== n2 && o2.undirected !== ("undirected" === n2)) throw new Y("Graph.".concat(e2, ': could not find the "').concat(t3, '" ').concat(n2, " edge in the graph."));
          return o2.attributes[r2] = i2(o2.attributes[r2]), this.emit("edgeAttributesUpdated", { key: o2.key, type: "set", attributes: o2.attributes, name: r2 }), this;
        };
      } }, { name: function(t2) {
        return "remove".concat(t2, "Attribute");
      }, attacher: function(t2, e2, n2) {
        t2.prototype[e2] = function(t3, r2) {
          var i2;
          if ("mixed" !== this.type && "mixed" !== n2 && n2 !== this.type) throw new B("Graph.".concat(e2, ": cannot find this type of edges in your ").concat(this.type, " graph."));
          if (arguments.length > 2) {
            if (this.multi) throw new B("Graph.".concat(e2, ": cannot use a {source,target} combo when asking about an edge's attributes in a MultiGraph since we cannot infer the one you want information about."));
            var o2 = "" + t3, a2 = "" + r2;
            if (r2 = arguments[2], !(i2 = d(this, o2, a2, n2))) throw new Y("Graph.".concat(e2, ': could not find an edge for the given path ("').concat(o2, '" - "').concat(a2, '").'));
          } else if (t3 = "" + t3, !(i2 = this._edges.get(t3))) throw new Y("Graph.".concat(e2, ': could not find the "').concat(t3, '" edge in the graph.'));
          if ("mixed" !== n2 && i2.undirected !== ("undirected" === n2)) throw new Y("Graph.".concat(e2, ': could not find the "').concat(t3, '" ').concat(n2, " edge in the graph."));
          return delete i2.attributes[r2], this.emit("edgeAttributesUpdated", { key: i2.key, type: "remove", attributes: i2.attributes, name: r2 }), this;
        };
      } }, { name: function(t2) {
        return "replace".concat(t2, "Attributes");
      }, attacher: function(t2, e2, n2) {
        t2.prototype[e2] = function(t3, r2) {
          var i2;
          if ("mixed" !== this.type && "mixed" !== n2 && n2 !== this.type) throw new B("Graph.".concat(e2, ": cannot find this type of edges in your ").concat(this.type, " graph."));
          if (arguments.length > 2) {
            if (this.multi) throw new B("Graph.".concat(e2, ": cannot use a {source,target} combo when asking about an edge's attributes in a MultiGraph since we cannot infer the one you want information about."));
            var o2 = "" + t3, a2 = "" + r2;
            if (r2 = arguments[2], !(i2 = d(this, o2, a2, n2))) throw new Y("Graph.".concat(e2, ': could not find an edge for the given path ("').concat(o2, '" - "').concat(a2, '").'));
          } else if (t3 = "" + t3, !(i2 = this._edges.get(t3))) throw new Y("Graph.".concat(e2, ': could not find the "').concat(t3, '" edge in the graph.'));
          if (!h(r2)) throw new F("Graph.".concat(e2, ": provided attributes are not a plain object."));
          if ("mixed" !== n2 && i2.undirected !== ("undirected" === n2)) throw new Y("Graph.".concat(e2, ': could not find the "').concat(t3, '" ').concat(n2, " edge in the graph."));
          return i2.attributes = r2, this.emit("edgeAttributesUpdated", { key: i2.key, type: "replace", attributes: i2.attributes }), this;
        };
      } }, { name: function(t2) {
        return "merge".concat(t2, "Attributes");
      }, attacher: function(t2, e2, n2) {
        t2.prototype[e2] = function(t3, r2) {
          var i2;
          if ("mixed" !== this.type && "mixed" !== n2 && n2 !== this.type) throw new B("Graph.".concat(e2, ": cannot find this type of edges in your ").concat(this.type, " graph."));
          if (arguments.length > 2) {
            if (this.multi) throw new B("Graph.".concat(e2, ": cannot use a {source,target} combo when asking about an edge's attributes in a MultiGraph since we cannot infer the one you want information about."));
            var o2 = "" + t3, a2 = "" + r2;
            if (r2 = arguments[2], !(i2 = d(this, o2, a2, n2))) throw new Y("Graph.".concat(e2, ': could not find an edge for the given path ("').concat(o2, '" - "').concat(a2, '").'));
          } else if (t3 = "" + t3, !(i2 = this._edges.get(t3))) throw new Y("Graph.".concat(e2, ': could not find the "').concat(t3, '" edge in the graph.'));
          if (!h(r2)) throw new F("Graph.".concat(e2, ": provided attributes are not a plain object."));
          if ("mixed" !== n2 && i2.undirected !== ("undirected" === n2)) throw new Y("Graph.".concat(e2, ': could not find the "').concat(t3, '" ').concat(n2, " edge in the graph."));
          return c(i2.attributes, r2), this.emit("edgeAttributesUpdated", { key: i2.key, type: "merge", attributes: i2.attributes, data: r2 }), this;
        };
      } }, { name: function(t2) {
        return "update".concat(t2, "Attributes");
      }, attacher: function(t2, e2, n2) {
        t2.prototype[e2] = function(t3, r2) {
          var i2;
          if ("mixed" !== this.type && "mixed" !== n2 && n2 !== this.type) throw new B("Graph.".concat(e2, ": cannot find this type of edges in your ").concat(this.type, " graph."));
          if (arguments.length > 2) {
            if (this.multi) throw new B("Graph.".concat(e2, ": cannot use a {source,target} combo when asking about an edge's attributes in a MultiGraph since we cannot infer the one you want information about."));
            var o2 = "" + t3, a2 = "" + r2;
            if (r2 = arguments[2], !(i2 = d(this, o2, a2, n2))) throw new Y("Graph.".concat(e2, ': could not find an edge for the given path ("').concat(o2, '" - "').concat(a2, '").'));
          } else if (t3 = "" + t3, !(i2 = this._edges.get(t3))) throw new Y("Graph.".concat(e2, ': could not find the "').concat(t3, '" edge in the graph.'));
          if ("function" != typeof r2) throw new F("Graph.".concat(e2, ": provided updater is not a function."));
          if ("mixed" !== n2 && i2.undirected !== ("undirected" === n2)) throw new Y("Graph.".concat(e2, ': could not find the "').concat(t3, '" ').concat(n2, " edge in the graph."));
          return i2.attributes = r2(i2.attributes), this.emit("edgeAttributesUpdated", { key: i2.key, type: "update", attributes: i2.attributes }), this;
        };
      } }];
      var et = O, nt = R, rt = function() {
        var t2 = arguments, e2 = null, n2 = -1;
        return new et(function r2() {
          if (null === e2) {
            if (++n2 >= t2.length) return { done: true };
            e2 = nt(t2[n2]);
          }
          var i2 = e2.next();
          return i2.done ? (e2 = null, r2()) : i2;
        });
      }, it = [{ name: "edges", type: "mixed" }, { name: "inEdges", type: "directed", direction: "in" }, { name: "outEdges", type: "directed", direction: "out" }, { name: "inboundEdges", type: "mixed", direction: "in" }, { name: "outboundEdges", type: "mixed", direction: "out" }, { name: "directedEdges", type: "directed" }, { name: "undirectedEdges", type: "undirected" }];
      function ot(t2, e2) {
        for (var n2 in e2) t2.push(e2[n2].key);
      }
      function at(t2, e2) {
        for (var n2 in e2) e2[n2].forEach(function(e3) {
          return t2.push(e3.key);
        });
      }
      function ut(t2, e2, n2) {
        for (var r2 in t2) if (r2 !== n2) {
          var i2 = t2[r2];
          e2(i2.key, i2.attributes, i2.source.key, i2.target.key, i2.source.attributes, i2.target.attributes, i2.undirected);
        }
      }
      function ct(t2, e2, n2) {
        for (var r2 in t2) r2 !== n2 && t2[r2].forEach(function(t3) {
          return e2(t3.key, t3.attributes, t3.source.key, t3.target.key, t3.source.attributes, t3.target.attributes, t3.undirected);
        });
      }
      function dt(t2, e2, n2) {
        for (var r2 in t2) if (r2 !== n2) {
          var i2 = t2[r2];
          if (e2(i2.key, i2.attributes, i2.source.key, i2.target.key, i2.source.attributes, i2.target.attributes, i2.undirected)) return i2.key;
        }
      }
      function st(t2, e2, n2) {
        var r2, i2, o2, a2, u2;
        for (var c2 in t2) if (c2 !== n2) {
          for (r2 = t2[c2].values(); true !== (i2 = r2.next()).done; ) if (a2 = (o2 = i2.value).source, u2 = o2.target, e2(o2.key, o2.attributes, a2.key, u2.key, a2.attributes, u2.attributes, o2.undirected)) return o2.key;
        }
      }
      function ht(t2, e2) {
        var n2 = Object.keys(t2), r2 = n2.length, i2 = null, o2 = 0;
        return new O(function a2() {
          var u2;
          if (i2) {
            var c2 = i2.next();
            if (c2.done) return i2 = null, o2++, a2();
            u2 = c2.value;
          } else {
            if (o2 >= r2) return { done: true };
            var d2 = n2[o2];
            if (d2 === e2) return o2++, a2();
            if ((u2 = t2[d2]) instanceof Set) return i2 = u2.values(), a2();
            o2++;
          }
          return { done: false, value: { edge: u2.key, attributes: u2.attributes, source: u2.source.key, target: u2.target.key, sourceAttributes: u2.source.attributes, targetAttributes: u2.target.attributes, undirected: u2.undirected } };
        });
      }
      function ft(t2, e2, n2) {
        var r2 = e2[n2];
        r2 && t2.push(r2.key);
      }
      function pt(t2, e2, n2) {
        var r2 = e2[n2];
        r2 && r2.forEach(function(e3) {
          return t2.push(e3.key);
        });
      }
      function lt(t2, e2, n2) {
        var r2 = t2[e2];
        if (r2) {
          var i2 = r2.source, o2 = r2.target;
          n2(r2.key, r2.attributes, i2.key, o2.key, i2.attributes, o2.attributes, r2.undirected);
        }
      }
      function gt(t2, e2, n2) {
        var r2 = t2[e2];
        r2 && r2.forEach(function(t3) {
          return n2(t3.key, t3.attributes, t3.source.key, t3.target.key, t3.source.attributes, t3.target.attributes, t3.undirected);
        });
      }
      function yt(t2, e2, n2) {
        var r2 = t2[e2];
        if (r2) {
          var i2 = r2.source, o2 = r2.target;
          return n2(r2.key, r2.attributes, i2.key, o2.key, i2.attributes, o2.attributes, r2.undirected) ? r2.key : void 0;
        }
      }
      function vt(t2, e2, n2) {
        var r2 = t2[e2];
        if (r2) {
          for (var i2, o2, a2 = r2.values(); true !== (i2 = a2.next()).done; ) if (n2((o2 = i2.value).key, o2.attributes, o2.source.key, o2.target.key, o2.source.attributes, o2.target.attributes, o2.undirected)) return o2.key;
        }
      }
      function bt(t2, e2) {
        var n2 = t2[e2];
        if (n2 instanceof Set) {
          var r2 = n2.values();
          return new O(function() {
            var t3 = r2.next();
            if (t3.done) return t3;
            var e3 = t3.value;
            return { done: false, value: { edge: e3.key, attributes: e3.attributes, source: e3.source.key, target: e3.target.key, sourceAttributes: e3.source.attributes, targetAttributes: e3.target.attributes, undirected: e3.undirected } };
          });
        }
        return O.of([n2.key, n2.attributes, n2.source.key, n2.target.key, n2.source.attributes, n2.target.attributes]);
      }
      function wt(t2, e2) {
        if (0 === t2.size) return [];
        if ("mixed" === e2 || e2 === t2.type) return "function" == typeof Array.from ? Array.from(t2._edges.keys()) : K(t2._edges.keys(), t2._edges.size);
        for (var n2, r2, i2 = "undirected" === e2 ? t2.undirectedSize : t2.directedSize, o2 = new Array(i2), a2 = "undirected" === e2, u2 = t2._edges.values(), c2 = 0; true !== (n2 = u2.next()).done; ) (r2 = n2.value).undirected === a2 && (o2[c2++] = r2.key);
        return o2;
      }
      function mt(t2, e2, n2) {
        if (0 !== t2.size) {
          for (var r2, i2, o2 = "mixed" !== e2 && e2 !== t2.type, a2 = "undirected" === e2, u2 = t2._edges.values(); true !== (r2 = u2.next()).done; ) if (i2 = r2.value, !o2 || i2.undirected === a2) {
            var c2 = i2, d2 = c2.key, s2 = c2.attributes, h2 = c2.source, f2 = c2.target;
            n2(d2, s2, h2.key, f2.key, h2.attributes, f2.attributes, i2.undirected);
          }
        }
      }
      function _t(t2, e2, n2) {
        if (0 !== t2.size) {
          for (var r2, i2, o2 = "mixed" !== e2 && e2 !== t2.type, a2 = "undirected" === e2, u2 = t2._edges.values(); true !== (r2 = u2.next()).done; ) if (i2 = r2.value, !o2 || i2.undirected === a2) {
            var c2 = i2, d2 = c2.key, s2 = c2.attributes, h2 = c2.source, f2 = c2.target;
            if (n2(d2, s2, h2.key, f2.key, h2.attributes, f2.attributes, i2.undirected)) return d2;
          }
        }
      }
      function kt(t2, e2) {
        if (0 === t2.size) return O.empty();
        var n2 = "mixed" !== e2 && e2 !== t2.type, r2 = "undirected" === e2, i2 = t2._edges.values();
        return new O(function() {
          for (var t3, e3; ; ) {
            if ((t3 = i2.next()).done) return t3;
            if (e3 = t3.value, !n2 || e3.undirected === r2) break;
          }
          return { value: { edge: e3.key, attributes: e3.attributes, source: e3.source.key, target: e3.target.key, sourceAttributes: e3.source.attributes, targetAttributes: e3.target.attributes, undirected: e3.undirected }, done: false };
        });
      }
      function Gt(t2, e2, n2, r2) {
        var i2 = [], o2 = t2 ? at : ot;
        return "undirected" !== e2 && ("out" !== n2 && o2(i2, r2.in), "in" !== n2 && o2(i2, r2.out), !n2 && r2.directedSelfLoops > 0 && i2.splice(i2.lastIndexOf(r2.key), 1)), "directed" !== e2 && o2(i2, r2.undirected), i2;
      }
      function xt(t2, e2, n2, r2, i2) {
        var o2 = t2 ? ct : ut;
        "undirected" !== e2 && ("out" !== n2 && o2(r2.in, i2), "in" !== n2 && o2(r2.out, i2, n2 ? null : r2.key)), "directed" !== e2 && o2(r2.undirected, i2);
      }
      function Et(t2, e2, n2, r2, i2) {
        var o2, a2 = t2 ? st : dt;
        if ("undirected" !== e2) {
          if ("out" !== n2 && (o2 = a2(r2.in, i2))) return o2;
          if ("in" !== n2 && (o2 = a2(r2.out, i2, n2 ? null : r2.key))) return o2;
        }
        if ("directed" !== e2 && (o2 = a2(r2.undirected, i2))) return o2;
      }
      function St(t2, e2, n2) {
        var r2 = O.empty();
        return "undirected" !== t2 && ("out" !== e2 && void 0 !== n2.in && (r2 = rt(r2, ht(n2.in))), "in" !== e2 && void 0 !== n2.out && (r2 = rt(r2, ht(n2.out, e2 ? null : n2.key)))), "directed" !== t2 && void 0 !== n2.undirected && (r2 = rt(r2, ht(n2.undirected))), r2;
      }
      function At(t2, e2, n2, r2, i2) {
        var o2 = e2 ? pt : ft, a2 = [];
        return "undirected" !== t2 && (void 0 !== r2.in && "out" !== n2 && o2(a2, r2.in, i2), void 0 !== r2.out && "in" !== n2 && o2(a2, r2.out, i2), !n2 && r2.directedSelfLoops > 0 && a2.splice(a2.lastIndexOf(r2.key), 1)), "directed" !== t2 && void 0 !== r2.undirected && o2(a2, r2.undirected, i2), a2;
      }
      function Lt(t2, e2, n2, r2, i2, o2) {
        var a2 = e2 ? gt : lt;
        "undirected" !== t2 && (void 0 !== r2.in && "out" !== n2 && a2(r2.in, i2, o2), r2.key !== i2 && void 0 !== r2.out && "in" !== n2 && a2(r2.out, i2, o2)), "directed" !== t2 && void 0 !== r2.undirected && a2(r2.undirected, i2, o2);
      }
      function Dt(t2, e2, n2, r2, i2, o2) {
        var a2, u2 = e2 ? vt : yt;
        if ("undirected" !== t2) {
          if (void 0 !== r2.in && "out" !== n2 && (a2 = u2(r2.in, i2, o2))) return a2;
          if (r2.key !== i2 && void 0 !== r2.out && "in" !== n2 && (a2 = u2(r2.out, i2, o2, n2 ? null : r2.key))) return a2;
        }
        if ("directed" !== t2 && void 0 !== r2.undirected && (a2 = u2(r2.undirected, i2, o2))) return a2;
      }
      function Nt(t2, e2, n2, r2) {
        var i2 = O.empty();
        return "undirected" !== t2 && (void 0 !== n2.in && "out" !== e2 && r2 in n2.in && (i2 = rt(i2, bt(n2.in, r2))), void 0 !== n2.out && "in" !== e2 && r2 in n2.out && (i2 = rt(i2, bt(n2.out, r2)))), "directed" !== t2 && void 0 !== n2.undirected && r2 in n2.undirected && (i2 = rt(i2, bt(n2.undirected, r2))), i2;
      }
      var Ut = [{ name: "neighbors", type: "mixed" }, { name: "inNeighbors", type: "directed", direction: "in" }, { name: "outNeighbors", type: "directed", direction: "out" }, { name: "inboundNeighbors", type: "mixed", direction: "in" }, { name: "outboundNeighbors", type: "mixed", direction: "out" }, { name: "directedNeighbors", type: "directed" }, { name: "undirectedNeighbors", type: "undirected" }];
      function jt(t2, e2) {
        if (void 0 !== e2) for (var n2 in e2) t2.add(n2);
      }
      function Ot(t2, e2, n2) {
        for (var r2 in e2) {
          var i2 = e2[r2];
          i2 instanceof Set && (i2 = i2.values().next().value);
          var o2 = i2.source, a2 = i2.target, u2 = o2 === t2 ? a2 : o2;
          n2(u2.key, u2.attributes);
        }
      }
      function Ct(t2, e2, n2, r2) {
        for (var i2 in n2) {
          var o2 = n2[i2];
          o2 instanceof Set && (o2 = o2.values().next().value);
          var a2 = o2.source, u2 = o2.target, c2 = a2 === e2 ? u2 : a2;
          t2.has(c2.key) || (t2.add(c2.key), r2(c2.key, c2.attributes));
        }
      }
      function zt(t2, e2, n2) {
        for (var r2 in e2) {
          var i2 = e2[r2];
          i2 instanceof Set && (i2 = i2.values().next().value);
          var o2 = i2.source, a2 = i2.target, u2 = o2 === t2 ? a2 : o2;
          if (n2(u2.key, u2.attributes)) return u2.key;
        }
      }
      function Mt(t2, e2, n2, r2) {
        for (var i2 in n2) {
          var o2 = n2[i2];
          o2 instanceof Set && (o2 = o2.values().next().value);
          var a2 = o2.source, u2 = o2.target, c2 = a2 === e2 ? u2 : a2;
          if (!t2.has(c2.key)) {
            if (t2.add(c2.key), r2(c2.key, c2.attributes)) return c2.key;
          }
        }
      }
      function Pt(t2, e2) {
        var n2 = Object.keys(e2), r2 = n2.length, i2 = 0;
        return new O(function() {
          if (i2 >= r2) return { done: true };
          var o2 = e2[n2[i2++]];
          o2 instanceof Set && (o2 = o2.values().next().value);
          var a2 = o2.source, u2 = o2.target, c2 = a2 === t2 ? u2 : a2;
          return { done: false, value: { neighbor: c2.key, attributes: c2.attributes } };
        });
      }
      function Tt(t2, e2, n2) {
        var r2 = Object.keys(n2), i2 = r2.length, o2 = 0;
        return new O(function a2() {
          if (o2 >= i2) return { done: true };
          var u2 = n2[r2[o2++]];
          u2 instanceof Set && (u2 = u2.values().next().value);
          var c2 = u2.source, d2 = u2.target, s2 = c2 === e2 ? d2 : c2;
          return t2.has(s2.key) ? a2() : (t2.add(s2.key), { done: false, value: { neighbor: s2.key, attributes: s2.attributes } });
        });
      }
      function Rt(t2, e2) {
        var n2 = e2.name, r2 = e2.type, i2 = e2.direction;
        t2.prototype[n2] = function(t3) {
          if ("mixed" !== r2 && "mixed" !== this.type && r2 !== this.type) return [];
          t3 = "" + t3;
          var e3 = this._nodes.get(t3);
          if (void 0 === e3) throw new Y("Graph.".concat(n2, ': could not find the "').concat(t3, '" node in the graph.'));
          return function(t4, e4, n3) {
            if ("mixed" !== t4) {
              if ("undirected" === t4) return Object.keys(n3.undirected);
              if ("string" == typeof e4) return Object.keys(n3[e4]);
            }
            var r3 = /* @__PURE__ */ new Set();
            return "undirected" !== t4 && ("out" !== e4 && jt(r3, n3.in), "in" !== e4 && jt(r3, n3.out)), "directed" !== t4 && jt(r3, n3.undirected), K(r3.values(), r3.size);
          }("mixed" === r2 ? this.type : r2, i2, e3);
        };
      }
      function Wt(t2, e2) {
        var n2 = e2.name, r2 = e2.type, i2 = e2.direction, o2 = "forEach" + n2[0].toUpperCase() + n2.slice(1, -1);
        t2.prototype[o2] = function(t3, e3) {
          if ("mixed" === r2 || "mixed" === this.type || r2 === this.type) {
            t3 = "" + t3;
            var n3 = this._nodes.get(t3);
            if (void 0 === n3) throw new Y("Graph.".concat(o2, ': could not find the "').concat(t3, '" node in the graph.'));
            !function(t4, e4, n4, r3) {
              if ("mixed" !== t4) {
                if ("undirected" === t4) return Ot(n4, n4.undirected, r3);
                if ("string" == typeof e4) return Ot(n4, n4[e4], r3);
              }
              var i3 = /* @__PURE__ */ new Set();
              "undirected" !== t4 && ("out" !== e4 && Ct(i3, n4, n4.in, r3), "in" !== e4 && Ct(i3, n4, n4.out, r3)), "directed" !== t4 && Ct(i3, n4, n4.undirected, r3);
            }("mixed" === r2 ? this.type : r2, i2, n3, e3);
          }
        };
        var a2 = "map" + n2[0].toUpperCase() + n2.slice(1);
        t2.prototype[a2] = function(t3, e3) {
          var n3 = [];
          return this[o2](t3, function(t4, r3) {
            n3.push(e3(t4, r3));
          }), n3;
        };
        var u2 = "filter" + n2[0].toUpperCase() + n2.slice(1);
        t2.prototype[u2] = function(t3, e3) {
          var n3 = [];
          return this[o2](t3, function(t4, r3) {
            e3(t4, r3) && n3.push(t4);
          }), n3;
        };
        var c2 = "reduce" + n2[0].toUpperCase() + n2.slice(1);
        t2.prototype[c2] = function(t3, e3, n3) {
          if (arguments.length < 3) throw new F("Graph.".concat(c2, ": missing initial value. You must provide it because the callback takes more than one argument and we cannot infer the initial value from the first iteration, as you could with a simple array."));
          var r3 = n3;
          return this[o2](t3, function(t4, n4) {
            r3 = e3(r3, t4, n4);
          }), r3;
        };
      }
      function Kt(t2, e2) {
        var n2 = e2.name, r2 = e2.type, i2 = e2.direction, o2 = n2[0].toUpperCase() + n2.slice(1, -1), a2 = "find" + o2;
        t2.prototype[a2] = function(t3, e3) {
          if ("mixed" === r2 || "mixed" === this.type || r2 === this.type) {
            t3 = "" + t3;
            var n3 = this._nodes.get(t3);
            if (void 0 === n3) throw new Y("Graph.".concat(a2, ': could not find the "').concat(t3, '" node in the graph.'));
            return function(t4, e4, n4, r3) {
              if ("mixed" !== t4) {
                if ("undirected" === t4) return zt(n4, n4.undirected, r3);
                if ("string" == typeof e4) return zt(n4, n4[e4], r3);
              }
              var i3, o3 = /* @__PURE__ */ new Set();
              if ("undirected" !== t4) {
                if ("out" !== e4 && (i3 = Mt(o3, n4, n4.in, r3))) return i3;
                if ("in" !== e4 && (i3 = Mt(o3, n4, n4.out, r3))) return i3;
              }
              if ("directed" !== t4 && (i3 = Mt(o3, n4, n4.undirected, r3))) return i3;
            }("mixed" === r2 ? this.type : r2, i2, n3, e3);
          }
        };
        var u2 = "some" + o2;
        t2.prototype[u2] = function(t3, e3) {
          return !!this[a2](t3, e3);
        };
        var c2 = "every" + o2;
        t2.prototype[c2] = function(t3, e3) {
          return !this[a2](t3, function(t4, n3) {
            return !e3(t4, n3);
          });
        };
      }
      function It(t2, e2) {
        var n2 = e2.name, r2 = e2.type, i2 = e2.direction, o2 = n2.slice(0, -1) + "Entries";
        t2.prototype[o2] = function(t3) {
          if ("mixed" !== r2 && "mixed" !== this.type && r2 !== this.type) return O.empty();
          t3 = "" + t3;
          var e3 = this._nodes.get(t3);
          if (void 0 === e3) throw new Y("Graph.".concat(o2, ': could not find the "').concat(t3, '" node in the graph.'));
          return function(t4, e4, n3) {
            if ("mixed" !== t4) {
              if ("undirected" === t4) return Pt(n3, n3.undirected);
              if ("string" == typeof e4) return Pt(n3, n3[e4]);
            }
            var r3 = O.empty(), i3 = /* @__PURE__ */ new Set();
            return "undirected" !== t4 && ("out" !== e4 && (r3 = rt(r3, Tt(i3, n3, n3.in))), "in" !== e4 && (r3 = rt(r3, Tt(i3, n3, n3.out)))), "directed" !== t4 && (r3 = rt(r3, Tt(i3, n3, n3.undirected))), r3;
          }("mixed" === r2 ? this.type : r2, i2, e3);
        };
      }
      function Ft(t2, e2, n2, r2, i2) {
        for (var o2, a2, u2, c2, d2, s2, h2, f2 = r2._nodes.values(), p2 = r2.type; true !== (o2 = f2.next()).done; ) {
          var l2 = false;
          if (a2 = o2.value, "undirected" !== p2) {
            for (u2 in c2 = a2.out) if (s2 = (d2 = c2[u2]).target, l2 = true, h2 = i2(a2.key, s2.key, a2.attributes, s2.attributes, d2.key, d2.attributes, d2.undirected), t2 && h2) return d2;
          }
          if ("directed" !== p2) {
            for (u2 in c2 = a2.undirected) if (!(e2 && a2.key > u2) && ((s2 = (d2 = c2[u2]).target).key !== u2 && (s2 = d2.source), l2 = true, h2 = i2(a2.key, s2.key, a2.attributes, s2.attributes, d2.key, d2.attributes, d2.undirected), t2 && h2)) return d2;
          }
          if (n2 && !l2 && (h2 = i2(a2.key, null, a2.attributes, null, null, null, null), t2 && h2)) return null;
        }
      }
      function Yt(t2, e2, n2, r2, i2) {
        for (var o2, a2, u2, c2, d2, s2, h2, f2, p2, l2 = r2._nodes.values(), g2 = r2.type; true !== (o2 = l2.next()).done; ) {
          var y2 = false;
          if (a2 = o2.value, "undirected" !== g2) {
            for (u2 in s2 = a2.out) for (c2 = s2[u2].values(); true !== (d2 = c2.next()).done; ) if (f2 = (h2 = d2.value).target, y2 = true, p2 = i2(a2.key, f2.key, a2.attributes, f2.attributes, h2.key, h2.attributes, h2.undirected), t2 && p2) return h2;
          }
          if ("directed" !== g2) {
            for (u2 in s2 = a2.undirected) if (!(e2 && a2.key > u2)) {
              for (c2 = s2[u2].values(); true !== (d2 = c2.next()).done; ) if ((f2 = (h2 = d2.value).target).key !== u2 && (f2 = h2.source), y2 = true, p2 = i2(a2.key, f2.key, a2.attributes, f2.attributes, h2.key, h2.attributes, h2.undirected), t2 && p2) return h2;
            }
          }
          if (n2 && !y2 && (p2 = i2(a2.key, null, a2.attributes, null, null, null, null), t2 && p2)) return null;
        }
      }
      function Bt(t2, e2) {
        var n2 = { key: t2 };
        return f(e2.attributes) || (n2.attributes = c({}, e2.attributes)), n2;
      }
      function qt(t2, e2) {
        var n2 = { key: t2, source: e2.source.key, target: e2.target.key };
        return f(e2.attributes) || (n2.attributes = c({}, e2.attributes)), e2.undirected && (n2.undirected = true), n2;
      }
      function Jt(t2) {
        return h(t2) ? "key" in t2 ? !("attributes" in t2) || h(t2.attributes) && null !== t2.attributes ? null : "invalid-attributes" : "no-key" : "not-object";
      }
      function Vt(t2) {
        return h(t2) ? "source" in t2 ? "target" in t2 ? !("attributes" in t2) || h(t2.attributes) && null !== t2.attributes ? "undirected" in t2 && "boolean" != typeof t2.undirected ? "invalid-undirected" : null : "invalid-attributes" : "no-target" : "no-source" : "not-object";
      }
      var Ht, Qt = (Ht = 255 & Math.floor(256 * Math.random()), function() {
        return Ht++;
      }), Xt = /* @__PURE__ */ new Set(["directed", "undirected", "mixed"]), Zt = /* @__PURE__ */ new Set(["domain", "_events", "_eventsCount", "_maxListeners"]), $t = { allowSelfLoops: true, multi: false, type: "mixed" };
      function te(t2, e2, n2) {
        var r2 = new t2.NodeDataClass(e2, n2);
        return t2._nodes.set(e2, r2), t2.emit("nodeAdded", { key: e2, attributes: n2 }), r2;
      }
      function ee(t2, e2, n2, r2, i2, o2, a2, u2) {
        if (!r2 && "undirected" === t2.type) throw new B("Graph.".concat(e2, ": you cannot add a directed edge to an undirected graph. Use the #.addEdge or #.addUndirectedEdge instead."));
        if (r2 && "directed" === t2.type) throw new B("Graph.".concat(e2, ": you cannot add an undirected edge to a directed graph. Use the #.addEdge or #.addDirectedEdge instead."));
        if (u2 && !h(u2)) throw new F("Graph.".concat(e2, ': invalid attributes. Expecting an object but got "').concat(u2, '"'));
        if (o2 = "" + o2, a2 = "" + a2, u2 = u2 || {}, !t2.allowSelfLoops && o2 === a2) throw new B("Graph.".concat(e2, ': source & target are the same ("').concat(o2, `"), thus creating a loop explicitly forbidden by this graph 'allowSelfLoops' option set to false.`));
        var c2 = t2._nodes.get(o2), d2 = t2._nodes.get(a2);
        if (!c2) throw new Y("Graph.".concat(e2, ': source node "').concat(o2, '" not found.'));
        if (!d2) throw new Y("Graph.".concat(e2, ': target node "').concat(a2, '" not found.'));
        var s2 = { key: null, undirected: r2, source: o2, target: a2, attributes: u2 };
        if (n2) i2 = t2._edgeKeyGenerator();
        else if (i2 = "" + i2, t2._edges.has(i2)) throw new B("Graph.".concat(e2, ': the "').concat(i2, '" edge already exists in the graph.'));
        if (!t2.multi && (r2 ? void 0 !== c2.undirected[a2] : void 0 !== c2.out[a2])) throw new B("Graph.".concat(e2, ': an edge linking "').concat(o2, '" to "').concat(a2, `" already exists. If you really want to add multiple edges linking those nodes, you should create a multi graph by using the 'multi' option.`));
        var f2 = new H(r2, i2, c2, d2, u2);
        return t2._edges.set(i2, f2), o2 === a2 ? r2 ? (c2.undirectedSelfLoops++, t2._undirectedSelfLoopCount++) : (c2.directedSelfLoops++, t2._directedSelfLoopCount++) : r2 ? (c2.undirectedDegree++, d2.undirectedDegree++) : (c2.outDegree++, d2.inDegree++), Q(t2, r2, f2, o2, a2, c2, d2), r2 ? t2._undirectedSize++ : t2._directedSize++, s2.key = i2, t2.emit("edgeAdded", s2), i2;
      }
      function ne(t2, e2, n2, r2, i2, o2, a2, u2, d2) {
        if (!r2 && "undirected" === t2.type) throw new B("Graph.".concat(e2, ": you cannot merge/update a directed edge to an undirected graph. Use the #.mergeEdge/#.updateEdge or #.addUndirectedEdge instead."));
        if (r2 && "directed" === t2.type) throw new B("Graph.".concat(e2, ": you cannot merge/update an undirected edge to a directed graph. Use the #.mergeEdge/#.updateEdge or #.addDirectedEdge instead."));
        if (u2) {
          if (d2) {
            if ("function" != typeof u2) throw new F("Graph.".concat(e2, ': invalid updater function. Expecting a function but got "').concat(u2, '"'));
          } else if (!h(u2)) throw new F("Graph.".concat(e2, ': invalid attributes. Expecting an object but got "').concat(u2, '"'));
        }
        var s2;
        if (o2 = "" + o2, a2 = "" + a2, d2 && (s2 = u2, u2 = void 0), !t2.allowSelfLoops && o2 === a2) throw new B("Graph.".concat(e2, ': source & target are the same ("').concat(o2, `"), thus creating a loop explicitly forbidden by this graph 'allowSelfLoops' option set to false.`));
        var f2, p2, l2 = t2._nodes.get(o2), g2 = t2._nodes.get(a2);
        if (!n2 && (f2 = t2._edges.get(i2))) {
          if (!(f2.source.key === o2 && f2.target.key === a2 || r2 && f2.source.key === a2 && f2.target.key === o2)) throw new B("Graph.".concat(e2, ': inconsistency detected when attempting to merge the "').concat(i2, '" edge with "').concat(o2, '" source & "').concat(a2, '" target vs. ("').concat(f2.source.key, '", "').concat(f2.target.key, '").'));
          p2 = f2;
        }
        if (p2 || t2.multi || !l2 || (p2 = r2 ? l2.undirected[a2] : l2.out[a2]), p2) {
          var y2 = [p2.key, false, false, false];
          if (d2 ? !s2 : !u2) return y2;
          if (d2) {
            var v2 = p2.attributes;
            p2.attributes = s2(v2), t2.emit("edgeAttributesUpdated", { type: "replace", key: p2.key, attributes: p2.attributes });
          } else c(p2.attributes, u2), t2.emit("edgeAttributesUpdated", { type: "merge", key: p2.key, attributes: p2.attributes, data: u2 });
          return y2;
        }
        u2 = u2 || {}, d2 && s2 && (u2 = s2(u2));
        var b2 = { key: null, undirected: r2, source: o2, target: a2, attributes: u2 };
        if (n2) i2 = t2._edgeKeyGenerator();
        else if (i2 = "" + i2, t2._edges.has(i2)) throw new B("Graph.".concat(e2, ': the "').concat(i2, '" edge already exists in the graph.'));
        var w2 = false, m2 = false;
        return l2 || (l2 = te(t2, o2, {}), w2 = true, o2 === a2 && (g2 = l2, m2 = true)), g2 || (g2 = te(t2, a2, {}), m2 = true), f2 = new H(r2, i2, l2, g2, u2), t2._edges.set(i2, f2), o2 === a2 ? r2 ? (l2.undirectedSelfLoops++, t2._undirectedSelfLoopCount++) : (l2.directedSelfLoops++, t2._directedSelfLoopCount++) : r2 ? (l2.undirectedDegree++, g2.undirectedDegree++) : (l2.outDegree++, g2.inDegree++), Q(t2, r2, f2, o2, a2, l2, g2), r2 ? t2._undirectedSize++ : t2._directedSize++, b2.key = i2, t2.emit("edgeAdded", b2), [i2, true, w2, m2];
      }
      var re = function(n2) {
        function r2(t2) {
          var e2;
          if (e2 = n2.call(this) || this, "boolean" != typeof (t2 = c({}, $t, t2)).multi) throw new F(`Graph.constructor: invalid 'multi' option. Expecting a boolean but got "`.concat(t2.multi, '".'));
          if (!Xt.has(t2.type)) throw new F(`Graph.constructor: invalid 'type' option. Should be one of "mixed", "directed" or "undirected" but got "`.concat(t2.type, '".'));
          if ("boolean" != typeof t2.allowSelfLoops) throw new F(`Graph.constructor: invalid 'allowSelfLoops' option. Expecting a boolean but got "`.concat(t2.allowSelfLoops, '".'));
          var r3 = "mixed" === t2.type ? q : "directed" === t2.type ? J : V;
          p(u(e2), "NodeDataClass", r3);
          var i3 = Qt(), o2 = 0;
          return p(u(e2), "_attributes", {}), p(u(e2), "_nodes", /* @__PURE__ */ new Map()), p(u(e2), "_edges", /* @__PURE__ */ new Map()), p(u(e2), "_directedSize", 0), p(u(e2), "_undirectedSize", 0), p(u(e2), "_directedSelfLoopCount", 0), p(u(e2), "_undirectedSelfLoopCount", 0), p(u(e2), "_edgeKeyGenerator", function() {
            var t3;
            do {
              t3 = "geid_" + i3 + "_" + o2++;
            } while (e2._edges.has(t3));
            return t3;
          }), p(u(e2), "_options", t2), Zt.forEach(function(t3) {
            return p(u(e2), t3, e2[t3]);
          }), l(u(e2), "order", function() {
            return e2._nodes.size;
          }), l(u(e2), "size", function() {
            return e2._edges.size;
          }), l(u(e2), "directedSize", function() {
            return e2._directedSize;
          }), l(u(e2), "undirectedSize", function() {
            return e2._undirectedSize;
          }), l(u(e2), "selfLoopCount", function() {
            return e2._directedSelfLoopCount + e2._undirectedSelfLoopCount;
          }), l(u(e2), "directedSelfLoopCount", function() {
            return e2._directedSelfLoopCount;
          }), l(u(e2), "undirectedSelfLoopCount", function() {
            return e2._undirectedSelfLoopCount;
          }), l(u(e2), "multi", e2._options.multi), l(u(e2), "type", e2._options.type), l(u(e2), "allowSelfLoops", e2._options.allowSelfLoops), l(u(e2), "implementation", function() {
            return "graphology";
          }), e2;
        }
        e(r2, n2);
        var i2 = r2.prototype;
        return i2._resetInstanceCounters = function() {
          this._directedSize = 0, this._undirectedSize = 0, this._directedSelfLoopCount = 0, this._undirectedSelfLoopCount = 0;
        }, i2.hasNode = function(t2) {
          return this._nodes.has("" + t2);
        }, i2.hasDirectedEdge = function(t2, e2) {
          if ("undirected" === this.type) return false;
          if (1 === arguments.length) {
            var n3 = "" + t2, r3 = this._edges.get(n3);
            return !!r3 && !r3.undirected;
          }
          if (2 === arguments.length) {
            t2 = "" + t2, e2 = "" + e2;
            var i3 = this._nodes.get(t2);
            if (!i3) return false;
            var o2 = i3.out[e2];
            return !!o2 && (!this.multi || !!o2.size);
          }
          throw new F("Graph.hasDirectedEdge: invalid arity (".concat(arguments.length, ", instead of 1 or 2). You can either ask for an edge id or for the existence of an edge between a source & a target."));
        }, i2.hasUndirectedEdge = function(t2, e2) {
          if ("directed" === this.type) return false;
          if (1 === arguments.length) {
            var n3 = "" + t2, r3 = this._edges.get(n3);
            return !!r3 && r3.undirected;
          }
          if (2 === arguments.length) {
            t2 = "" + t2, e2 = "" + e2;
            var i3 = this._nodes.get(t2);
            if (!i3) return false;
            var o2 = i3.undirected[e2];
            return !!o2 && (!this.multi || !!o2.size);
          }
          throw new F("Graph.hasDirectedEdge: invalid arity (".concat(arguments.length, ", instead of 1 or 2). You can either ask for an edge id or for the existence of an edge between a source & a target."));
        }, i2.hasEdge = function(t2, e2) {
          if (1 === arguments.length) {
            var n3 = "" + t2;
            return this._edges.has(n3);
          }
          if (2 === arguments.length) {
            t2 = "" + t2, e2 = "" + e2;
            var r3 = this._nodes.get(t2);
            if (!r3) return false;
            var i3 = void 0 !== r3.out && r3.out[e2];
            return i3 || (i3 = void 0 !== r3.undirected && r3.undirected[e2]), !!i3 && (!this.multi || !!i3.size);
          }
          throw new F("Graph.hasEdge: invalid arity (".concat(arguments.length, ", instead of 1 or 2). You can either ask for an edge id or for the existence of an edge between a source & a target."));
        }, i2.directedEdge = function(t2, e2) {
          if ("undirected" !== this.type) {
            if (t2 = "" + t2, e2 = "" + e2, this.multi) throw new B("Graph.directedEdge: this method is irrelevant with multigraphs since there might be multiple edges between source & target. See #.directedEdges instead.");
            var n3 = this._nodes.get(t2);
            if (!n3) throw new Y('Graph.directedEdge: could not find the "'.concat(t2, '" source node in the graph.'));
            if (!this._nodes.has(e2)) throw new Y('Graph.directedEdge: could not find the "'.concat(e2, '" target node in the graph.'));
            var r3 = n3.out && n3.out[e2] || void 0;
            return r3 ? r3.key : void 0;
          }
        }, i2.undirectedEdge = function(t2, e2) {
          if ("directed" !== this.type) {
            if (t2 = "" + t2, e2 = "" + e2, this.multi) throw new B("Graph.undirectedEdge: this method is irrelevant with multigraphs since there might be multiple edges between source & target. See #.undirectedEdges instead.");
            var n3 = this._nodes.get(t2);
            if (!n3) throw new Y('Graph.undirectedEdge: could not find the "'.concat(t2, '" source node in the graph.'));
            if (!this._nodes.has(e2)) throw new Y('Graph.undirectedEdge: could not find the "'.concat(e2, '" target node in the graph.'));
            var r3 = n3.undirected && n3.undirected[e2] || void 0;
            return r3 ? r3.key : void 0;
          }
        }, i2.edge = function(t2, e2) {
          if (this.multi) throw new B("Graph.edge: this method is irrelevant with multigraphs since there might be multiple edges between source & target. See #.edges instead.");
          t2 = "" + t2, e2 = "" + e2;
          var n3 = this._nodes.get(t2);
          if (!n3) throw new Y('Graph.edge: could not find the "'.concat(t2, '" source node in the graph.'));
          if (!this._nodes.has(e2)) throw new Y('Graph.edge: could not find the "'.concat(e2, '" target node in the graph.'));
          var r3 = n3.out && n3.out[e2] || n3.undirected && n3.undirected[e2] || void 0;
          if (r3) return r3.key;
        }, i2.areDirectedNeighbors = function(t2, e2) {
          t2 = "" + t2, e2 = "" + e2;
          var n3 = this._nodes.get(t2);
          if (!n3) throw new Y('Graph.areDirectedNeighbors: could not find the "'.concat(t2, '" node in the graph.'));
          return "undirected" !== this.type && (e2 in n3.in || e2 in n3.out);
        }, i2.areOutNeighbors = function(t2, e2) {
          t2 = "" + t2, e2 = "" + e2;
          var n3 = this._nodes.get(t2);
          if (!n3) throw new Y('Graph.areOutNeighbors: could not find the "'.concat(t2, '" node in the graph.'));
          return "undirected" !== this.type && e2 in n3.out;
        }, i2.areInNeighbors = function(t2, e2) {
          t2 = "" + t2, e2 = "" + e2;
          var n3 = this._nodes.get(t2);
          if (!n3) throw new Y('Graph.areInNeighbors: could not find the "'.concat(t2, '" node in the graph.'));
          return "undirected" !== this.type && e2 in n3.in;
        }, i2.areUndirectedNeighbors = function(t2, e2) {
          t2 = "" + t2, e2 = "" + e2;
          var n3 = this._nodes.get(t2);
          if (!n3) throw new Y('Graph.areUndirectedNeighbors: could not find the "'.concat(t2, '" node in the graph.'));
          return "directed" !== this.type && e2 in n3.undirected;
        }, i2.areNeighbors = function(t2, e2) {
          t2 = "" + t2, e2 = "" + e2;
          var n3 = this._nodes.get(t2);
          if (!n3) throw new Y('Graph.areNeighbors: could not find the "'.concat(t2, '" node in the graph.'));
          return "undirected" !== this.type && (e2 in n3.in || e2 in n3.out) || "directed" !== this.type && e2 in n3.undirected;
        }, i2.areInboundNeighbors = function(t2, e2) {
          t2 = "" + t2, e2 = "" + e2;
          var n3 = this._nodes.get(t2);
          if (!n3) throw new Y('Graph.areInboundNeighbors: could not find the "'.concat(t2, '" node in the graph.'));
          return "undirected" !== this.type && e2 in n3.in || "directed" !== this.type && e2 in n3.undirected;
        }, i2.areOutboundNeighbors = function(t2, e2) {
          t2 = "" + t2, e2 = "" + e2;
          var n3 = this._nodes.get(t2);
          if (!n3) throw new Y('Graph.areOutboundNeighbors: could not find the "'.concat(t2, '" node in the graph.'));
          return "undirected" !== this.type && e2 in n3.out || "directed" !== this.type && e2 in n3.undirected;
        }, i2.inDegree = function(t2) {
          t2 = "" + t2;
          var e2 = this._nodes.get(t2);
          if (!e2) throw new Y('Graph.inDegree: could not find the "'.concat(t2, '" node in the graph.'));
          return "undirected" === this.type ? 0 : e2.inDegree + e2.directedSelfLoops;
        }, i2.outDegree = function(t2) {
          t2 = "" + t2;
          var e2 = this._nodes.get(t2);
          if (!e2) throw new Y('Graph.outDegree: could not find the "'.concat(t2, '" node in the graph.'));
          return "undirected" === this.type ? 0 : e2.outDegree + e2.directedSelfLoops;
        }, i2.directedDegree = function(t2) {
          t2 = "" + t2;
          var e2 = this._nodes.get(t2);
          if (!e2) throw new Y('Graph.directedDegree: could not find the "'.concat(t2, '" node in the graph.'));
          if ("undirected" === this.type) return 0;
          var n3 = e2.directedSelfLoops;
          return e2.inDegree + n3 + (e2.outDegree + n3);
        }, i2.undirectedDegree = function(t2) {
          t2 = "" + t2;
          var e2 = this._nodes.get(t2);
          if (!e2) throw new Y('Graph.undirectedDegree: could not find the "'.concat(t2, '" node in the graph.'));
          if ("directed" === this.type) return 0;
          var n3 = e2.undirectedSelfLoops;
          return e2.undirectedDegree + 2 * n3;
        }, i2.degree = function(t2) {
          t2 = "" + t2;
          var e2 = this._nodes.get(t2);
          if (!e2) throw new Y('Graph.degree: could not find the "'.concat(t2, '" node in the graph.'));
          var n3 = 0;
          return "directed" !== this.type && (n3 += e2.undirectedDegree + 2 * e2.undirectedSelfLoops), "undirected" !== this.type && (n3 += e2.inDegree + e2.outDegree + 2 * e2.directedSelfLoops), n3;
        }, i2.inDegreeWithoutSelfLoops = function(t2) {
          t2 = "" + t2;
          var e2 = this._nodes.get(t2);
          if (!e2) throw new Y('Graph.inDegreeWithoutSelfLoops: could not find the "'.concat(t2, '" node in the graph.'));
          return "undirected" === this.type ? 0 : e2.inDegree;
        }, i2.outDegreeWithoutSelfLoops = function(t2) {
          t2 = "" + t2;
          var e2 = this._nodes.get(t2);
          if (!e2) throw new Y('Graph.outDegreeWithoutSelfLoops: could not find the "'.concat(t2, '" node in the graph.'));
          return "undirected" === this.type ? 0 : e2.outDegree;
        }, i2.directedDegreeWithoutSelfLoops = function(t2) {
          t2 = "" + t2;
          var e2 = this._nodes.get(t2);
          if (!e2) throw new Y('Graph.directedDegreeWithoutSelfLoops: could not find the "'.concat(t2, '" node in the graph.'));
          return "undirected" === this.type ? 0 : e2.inDegree + e2.outDegree;
        }, i2.undirectedDegreeWithoutSelfLoops = function(t2) {
          t2 = "" + t2;
          var e2 = this._nodes.get(t2);
          if (!e2) throw new Y('Graph.undirectedDegreeWithoutSelfLoops: could not find the "'.concat(t2, '" node in the graph.'));
          return "directed" === this.type ? 0 : e2.undirectedDegree;
        }, i2.degreeWithoutSelfLoops = function(t2) {
          t2 = "" + t2;
          var e2 = this._nodes.get(t2);
          if (!e2) throw new Y('Graph.degreeWithoutSelfLoops: could not find the "'.concat(t2, '" node in the graph.'));
          var n3 = 0;
          return "directed" !== this.type && (n3 += e2.undirectedDegree), "undirected" !== this.type && (n3 += e2.inDegree + e2.outDegree), n3;
        }, i2.source = function(t2) {
          t2 = "" + t2;
          var e2 = this._edges.get(t2);
          if (!e2) throw new Y('Graph.source: could not find the "'.concat(t2, '" edge in the graph.'));
          return e2.source.key;
        }, i2.target = function(t2) {
          t2 = "" + t2;
          var e2 = this._edges.get(t2);
          if (!e2) throw new Y('Graph.target: could not find the "'.concat(t2, '" edge in the graph.'));
          return e2.target.key;
        }, i2.extremities = function(t2) {
          t2 = "" + t2;
          var e2 = this._edges.get(t2);
          if (!e2) throw new Y('Graph.extremities: could not find the "'.concat(t2, '" edge in the graph.'));
          return [e2.source.key, e2.target.key];
        }, i2.opposite = function(t2, e2) {
          t2 = "" + t2, e2 = "" + e2;
          var n3 = this._edges.get(e2);
          if (!n3) throw new Y('Graph.opposite: could not find the "'.concat(e2, '" edge in the graph.'));
          var r3 = n3.source.key, i3 = n3.target.key;
          if (t2 === r3) return i3;
          if (t2 === i3) return r3;
          throw new Y('Graph.opposite: the "'.concat(t2, '" node is not attached to the "').concat(e2, '" edge (').concat(r3, ", ").concat(i3, ")."));
        }, i2.hasExtremity = function(t2, e2) {
          t2 = "" + t2, e2 = "" + e2;
          var n3 = this._edges.get(t2);
          if (!n3) throw new Y('Graph.hasExtremity: could not find the "'.concat(t2, '" edge in the graph.'));
          return n3.source.key === e2 || n3.target.key === e2;
        }, i2.isUndirected = function(t2) {
          t2 = "" + t2;
          var e2 = this._edges.get(t2);
          if (!e2) throw new Y('Graph.isUndirected: could not find the "'.concat(t2, '" edge in the graph.'));
          return e2.undirected;
        }, i2.isDirected = function(t2) {
          t2 = "" + t2;
          var e2 = this._edges.get(t2);
          if (!e2) throw new Y('Graph.isDirected: could not find the "'.concat(t2, '" edge in the graph.'));
          return !e2.undirected;
        }, i2.isSelfLoop = function(t2) {
          t2 = "" + t2;
          var e2 = this._edges.get(t2);
          if (!e2) throw new Y('Graph.isSelfLoop: could not find the "'.concat(t2, '" edge in the graph.'));
          return e2.source === e2.target;
        }, i2.addNode = function(t2, e2) {
          var n3 = function(t3, e3, n4) {
            if (n4 && !h(n4)) throw new F('Graph.addNode: invalid attributes. Expecting an object but got "'.concat(n4, '"'));
            if (e3 = "" + e3, n4 = n4 || {}, t3._nodes.has(e3)) throw new B('Graph.addNode: the "'.concat(e3, '" node already exist in the graph.'));
            var r3 = new t3.NodeDataClass(e3, n4);
            return t3._nodes.set(e3, r3), t3.emit("nodeAdded", { key: e3, attributes: n4 }), r3;
          }(this, t2, e2);
          return n3.key;
        }, i2.mergeNode = function(t2, e2) {
          if (e2 && !h(e2)) throw new F('Graph.mergeNode: invalid attributes. Expecting an object but got "'.concat(e2, '"'));
          t2 = "" + t2, e2 = e2 || {};
          var n3 = this._nodes.get(t2);
          return n3 ? (e2 && (c(n3.attributes, e2), this.emit("nodeAttributesUpdated", { type: "merge", key: t2, attributes: n3.attributes, data: e2 })), [t2, false]) : (n3 = new this.NodeDataClass(t2, e2), this._nodes.set(t2, n3), this.emit("nodeAdded", { key: t2, attributes: e2 }), [t2, true]);
        }, i2.updateNode = function(t2, e2) {
          if (e2 && "function" != typeof e2) throw new F('Graph.updateNode: invalid updater function. Expecting a function but got "'.concat(e2, '"'));
          t2 = "" + t2;
          var n3 = this._nodes.get(t2);
          if (n3) {
            if (e2) {
              var r3 = n3.attributes;
              n3.attributes = e2(r3), this.emit("nodeAttributesUpdated", { type: "replace", key: t2, attributes: n3.attributes });
            }
            return [t2, false];
          }
          var i3 = e2 ? e2({}) : {};
          return n3 = new this.NodeDataClass(t2, i3), this._nodes.set(t2, n3), this.emit("nodeAdded", { key: t2, attributes: i3 }), [t2, true];
        }, i2.dropNode = function(t2) {
          var e2 = this;
          t2 = "" + t2;
          var n3 = this._nodes.get(t2);
          if (!n3) throw new Y('Graph.dropNode: could not find the "'.concat(t2, '" node in the graph.'));
          this.forEachEdge(t2, function(t3) {
            e2.dropEdge(t3);
          }), this._nodes.delete(t2), this.emit("nodeDropped", { key: t2, attributes: n3.attributes });
        }, i2.dropEdge = function(t2) {
          var e2;
          if (arguments.length > 1) {
            var n3 = "" + arguments[0], r3 = "" + arguments[1];
            if (!(e2 = d(this, n3, r3, this.type))) throw new Y('Graph.dropEdge: could not find the "'.concat(n3, '" -> "').concat(r3, '" edge in the graph.'));
          } else if (t2 = "" + t2, !(e2 = this._edges.get(t2))) throw new Y('Graph.dropEdge: could not find the "'.concat(t2, '" edge in the graph.'));
          this._edges.delete(e2.key);
          var i3 = e2, o2 = i3.source, a2 = i3.target, u2 = i3.attributes, c2 = e2.undirected;
          return o2 === a2 ? c2 ? (o2.undirectedSelfLoops--, this._undirectedSelfLoopCount--) : (o2.directedSelfLoops--, this._directedSelfLoopCount--) : c2 ? (o2.undirectedDegree--, a2.undirectedDegree--) : (o2.outDegree--, a2.inDegree--), X(this, c2, e2), c2 ? this._undirectedSize-- : this._directedSize--, this.emit("edgeDropped", { key: t2, attributes: u2, source: o2.key, target: a2.key, undirected: c2 }), this;
        }, i2.clear = function() {
          this._edges.clear(), this._nodes.clear(), this._resetInstanceCounters(), this.emit("cleared");
        }, i2.clearEdges = function() {
          !function(t2) {
            for (var e2, n3 = t2._nodes.values(); true !== (e2 = n3.next()).done; ) e2.value.clear();
          }(this), this._edges.clear(), this._resetInstanceCounters(), this.emit("edgesCleared");
        }, i2.getAttribute = function(t2) {
          return this._attributes[t2];
        }, i2.getAttributes = function() {
          return this._attributes;
        }, i2.hasAttribute = function(t2) {
          return this._attributes.hasOwnProperty(t2);
        }, i2.setAttribute = function(t2, e2) {
          return this._attributes[t2] = e2, this.emit("attributesUpdated", { type: "set", attributes: this._attributes, name: t2 }), this;
        }, i2.updateAttribute = function(t2, e2) {
          if ("function" != typeof e2) throw new F("Graph.updateAttribute: updater should be a function.");
          var n3 = this._attributes[t2];
          return this._attributes[t2] = e2(n3), this.emit("attributesUpdated", { type: "set", attributes: this._attributes, name: t2 }), this;
        }, i2.removeAttribute = function(t2) {
          return delete this._attributes[t2], this.emit("attributesUpdated", { type: "remove", attributes: this._attributes, name: t2 }), this;
        }, i2.replaceAttributes = function(t2) {
          if (!h(t2)) throw new F("Graph.replaceAttributes: provided attributes are not a plain object.");
          return this._attributes = t2, this.emit("attributesUpdated", { type: "replace", attributes: this._attributes }), this;
        }, i2.mergeAttributes = function(t2) {
          if (!h(t2)) throw new F("Graph.mergeAttributes: provided attributes are not a plain object.");
          return c(this._attributes, t2), this.emit("attributesUpdated", { type: "merge", attributes: this._attributes, data: t2 }), this;
        }, i2.updateAttributes = function(t2) {
          if ("function" != typeof t2) throw new F("Graph.updateAttributes: provided updater is not a function.");
          return this._attributes = t2(this._attributes), this.emit("attributesUpdated", { type: "update", attributes: this._attributes }), this;
        }, i2.updateEachNodeAttributes = function(t2, e2) {
          if ("function" != typeof t2) throw new F("Graph.updateEachNodeAttributes: expecting an updater function.");
          if (e2 && !g(e2)) throw new F("Graph.updateEachNodeAttributes: invalid hints. Expecting an object having the following shape: {attributes?: [string]}");
          for (var n3, r3, i3 = this._nodes.values(); true !== (n3 = i3.next()).done; ) (r3 = n3.value).attributes = t2(r3.key, r3.attributes);
          this.emit("eachNodeAttributesUpdated", { hints: e2 || null });
        }, i2.updateEachEdgeAttributes = function(t2, e2) {
          if ("function" != typeof t2) throw new F("Graph.updateEachEdgeAttributes: expecting an updater function.");
          if (e2 && !g(e2)) throw new F("Graph.updateEachEdgeAttributes: invalid hints. Expecting an object having the following shape: {attributes?: [string]}");
          for (var n3, r3, i3, o2, a2 = this._edges.values(); true !== (n3 = a2.next()).done; ) i3 = (r3 = n3.value).source, o2 = r3.target, r3.attributes = t2(r3.key, r3.attributes, i3.key, o2.key, i3.attributes, o2.attributes, r3.undirected);
          this.emit("eachEdgeAttributesUpdated", { hints: e2 || null });
        }, i2.forEachAdjacencyEntry = function(t2) {
          if ("function" != typeof t2) throw new F("Graph.forEachAdjacencyEntry: expecting a callback.");
          this.multi ? Yt(false, false, false, this, t2) : Ft(false, false, false, this, t2);
        }, i2.forEachAdjacencyEntryWithOrphans = function(t2) {
          if ("function" != typeof t2) throw new F("Graph.forEachAdjacencyEntryWithOrphans: expecting a callback.");
          this.multi ? Yt(false, false, true, this, t2) : Ft(false, false, true, this, t2);
        }, i2.forEachAssymetricAdjacencyEntry = function(t2) {
          if ("function" != typeof t2) throw new F("Graph.forEachAssymetricAdjacencyEntry: expecting a callback.");
          this.multi ? Yt(false, true, false, this, t2) : Ft(false, true, false, this, t2);
        }, i2.forEachAssymetricAdjacencyEntryWithOrphans = function(t2) {
          if ("function" != typeof t2) throw new F("Graph.forEachAssymetricAdjacencyEntryWithOrphans: expecting a callback.");
          this.multi ? Yt(false, true, true, this, t2) : Ft(false, true, true, this, t2);
        }, i2.nodes = function() {
          return "function" == typeof Array.from ? Array.from(this._nodes.keys()) : K(this._nodes.keys(), this._nodes.size);
        }, i2.forEachNode = function(t2) {
          if ("function" != typeof t2) throw new F("Graph.forEachNode: expecting a callback.");
          for (var e2, n3, r3 = this._nodes.values(); true !== (e2 = r3.next()).done; ) t2((n3 = e2.value).key, n3.attributes);
        }, i2.findNode = function(t2) {
          if ("function" != typeof t2) throw new F("Graph.findNode: expecting a callback.");
          for (var e2, n3, r3 = this._nodes.values(); true !== (e2 = r3.next()).done; ) if (t2((n3 = e2.value).key, n3.attributes)) return n3.key;
        }, i2.mapNodes = function(t2) {
          if ("function" != typeof t2) throw new F("Graph.mapNode: expecting a callback.");
          for (var e2, n3, r3 = this._nodes.values(), i3 = new Array(this.order), o2 = 0; true !== (e2 = r3.next()).done; ) n3 = e2.value, i3[o2++] = t2(n3.key, n3.attributes);
          return i3;
        }, i2.someNode = function(t2) {
          if ("function" != typeof t2) throw new F("Graph.someNode: expecting a callback.");
          for (var e2, n3, r3 = this._nodes.values(); true !== (e2 = r3.next()).done; ) if (t2((n3 = e2.value).key, n3.attributes)) return true;
          return false;
        }, i2.everyNode = function(t2) {
          if ("function" != typeof t2) throw new F("Graph.everyNode: expecting a callback.");
          for (var e2, n3, r3 = this._nodes.values(); true !== (e2 = r3.next()).done; ) if (!t2((n3 = e2.value).key, n3.attributes)) return false;
          return true;
        }, i2.filterNodes = function(t2) {
          if ("function" != typeof t2) throw new F("Graph.filterNodes: expecting a callback.");
          for (var e2, n3, r3 = this._nodes.values(), i3 = []; true !== (e2 = r3.next()).done; ) t2((n3 = e2.value).key, n3.attributes) && i3.push(n3.key);
          return i3;
        }, i2.reduceNodes = function(t2, e2) {
          if ("function" != typeof t2) throw new F("Graph.reduceNodes: expecting a callback.");
          if (arguments.length < 2) throw new F("Graph.reduceNodes: missing initial value. You must provide it because the callback takes more than one argument and we cannot infer the initial value from the first iteration, as you could with a simple array.");
          for (var n3, r3, i3 = e2, o2 = this._nodes.values(); true !== (n3 = o2.next()).done; ) i3 = t2(i3, (r3 = n3.value).key, r3.attributes);
          return i3;
        }, i2.nodeEntries = function() {
          var t2 = this._nodes.values();
          return new O(function() {
            var e2 = t2.next();
            if (e2.done) return e2;
            var n3 = e2.value;
            return { value: { node: n3.key, attributes: n3.attributes }, done: false };
          });
        }, i2.exportNode = function(t2) {
          t2 = "" + t2;
          var e2 = this._nodes.get(t2);
          if (!e2) throw new Y('Graph.exportNode: could not find the "'.concat(t2, '" node in the graph.'));
          return Bt(t2, e2);
        }, i2.exportEdge = function(t2) {
          t2 = "" + t2;
          var e2 = this._edges.get(t2);
          if (!e2) throw new Y('Graph.exportEdge: could not find the "'.concat(t2, '" edge in the graph.'));
          return qt(t2, e2);
        }, i2.export = function() {
          var t2 = new Array(this._nodes.size), e2 = 0;
          this._nodes.forEach(function(n4, r3) {
            t2[e2++] = Bt(r3, n4);
          });
          var n3 = new Array(this._edges.size);
          return e2 = 0, this._edges.forEach(function(t3, r3) {
            n3[e2++] = qt(r3, t3);
          }), { attributes: this.getAttributes(), nodes: t2, edges: n3, options: { type: this.type, multi: this.multi, allowSelfLoops: this.allowSelfLoops } };
        }, i2.importNode = function(t2) {
          var e2 = arguments.length > 1 && void 0 !== arguments[1] && arguments[1], n3 = Jt(t2);
          if (n3) {
            if ("not-object" === n3) throw new F('Graph.importNode: invalid serialized node. A serialized node should be a plain object with at least a "key" property.');
            if ("no-key" === n3) throw new F("Graph.importNode: no key provided.");
            if ("invalid-attributes" === n3) throw new F("Graph.importNode: invalid attributes. Attributes should be a plain object, null or omitted.");
          }
          var r3 = t2.key, i3 = t2.attributes, o2 = void 0 === i3 ? {} : i3;
          return e2 ? this.mergeNode(r3, o2) : this.addNode(r3, o2), this;
        }, i2.importEdge = function(t2) {
          var e2 = arguments.length > 1 && void 0 !== arguments[1] && arguments[1], n3 = Vt(t2);
          if (n3) {
            if ("not-object" === n3) throw new F('Graph.importEdge: invalid serialized edge. A serialized edge should be a plain object with at least a "source" & "target" property.');
            if ("no-source" === n3) throw new F("Graph.importEdge: missing souce.");
            if ("no-target" === n3) throw new F("Graph.importEdge: missing target.");
            if ("invalid-attributes" === n3) throw new F("Graph.importEdge: invalid attributes. Attributes should be a plain object, null or omitted.");
            if ("invalid-undirected" === n3) throw new F("Graph.importEdge: invalid undirected. Undirected should be boolean or omitted.");
          }
          var r3 = t2.source, i3 = t2.target, o2 = t2.attributes, a2 = void 0 === o2 ? {} : o2, u2 = t2.undirected, c2 = void 0 !== u2 && u2;
          return "key" in t2 ? (e2 ? c2 ? this.mergeUndirectedEdgeWithKey : this.mergeDirectedEdgeWithKey : c2 ? this.addUndirectedEdgeWithKey : this.addDirectedEdgeWithKey).call(this, t2.key, r3, i3, a2) : (e2 ? c2 ? this.mergeUndirectedEdge : this.mergeDirectedEdge : c2 ? this.addUndirectedEdge : this.addDirectedEdge).call(this, r3, i3, a2), this;
        }, i2.import = function(t2) {
          var e2, n3, r3, i3 = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];
          if (s(t2)) return this.import(t2.export(), i3), this;
          if (!h(t2)) throw new F("Graph.import: invalid argument. Expecting a serialized graph or, alternatively, a Graph instance.");
          if (t2.attributes) {
            if (!h(t2.attributes)) throw new F("Graph.import: invalid attributes. Expecting a plain object.");
            i3 ? this.mergeAttributes(t2.attributes) : this.replaceAttributes(t2.attributes);
          }
          if (t2.nodes) {
            if (r3 = t2.nodes, !Array.isArray(r3)) throw new F("Graph.import: invalid nodes. Expecting an array.");
            for (e2 = 0, n3 = r3.length; e2 < n3; e2++) this.importNode(r3[e2], i3);
          }
          if (t2.edges) {
            if (r3 = t2.edges, !Array.isArray(r3)) throw new F("Graph.import: invalid edges. Expecting an array.");
            for (e2 = 0, n3 = r3.length; e2 < n3; e2++) this.importEdge(r3[e2], i3);
          }
          return this;
        }, i2.nullCopy = function(t2) {
          var e2 = new r2(c({}, this._options, t2));
          return e2.replaceAttributes(c({}, this.getAttributes())), e2;
        }, i2.emptyCopy = function(t2) {
          var e2 = this.nullCopy(t2);
          return this._nodes.forEach(function(t3, n3) {
            var r3 = c({}, t3.attributes);
            t3 = new e2.NodeDataClass(n3, r3), e2._nodes.set(n3, t3);
          }), e2;
        }, i2.copy = function() {
          for (var t2, e2, n3 = this.emptyCopy(), r3 = this._edges.values(); true !== (t2 = r3.next()).done; ) ee(n3, "copy", false, (e2 = t2.value).undirected, e2.key, e2.source.key, e2.target.key, c({}, e2.attributes));
          return n3;
        }, i2.upgradeToMixed = function() {
          return "mixed" === this.type || (this._nodes.forEach(function(t2) {
            return t2.upgradeToMixed();
          }), this._options.type = "mixed", l(this, "type", this._options.type), p(this, "NodeDataClass", q)), this;
        }, i2.upgradeToMulti = function() {
          return this.multi || (this._options.multi = true, l(this, "multi", true), (t2 = this)._nodes.forEach(function(e2, n3) {
            if (e2.out) for (var r3 in e2.out) {
              var i3 = /* @__PURE__ */ new Set();
              i3.add(e2.out[r3]), e2.out[r3] = i3, t2._nodes.get(r3).in[n3] = i3;
            }
            if (e2.undirected) {
              for (var o2 in e2.undirected) if (!(o2 > n3)) {
                var a2 = /* @__PURE__ */ new Set();
                a2.add(e2.undirected[o2]), e2.undirected[o2] = a2, t2._nodes.get(o2).undirected[n3] = a2;
              }
            }
          })), this;
          var t2;
        }, i2.toJSON = function() {
          return this.export();
        }, i2.toString = function() {
          return "[object Graph]";
        }, i2.inspect = function() {
          var e2 = this, n3 = {};
          this._nodes.forEach(function(t2, e3) {
            n3[e3] = t2.attributes;
          });
          var r3 = {}, i3 = {};
          this._edges.forEach(function(t2, n4) {
            var o3, a3 = t2.undirected ? "--" : "->", u2 = "", c2 = t2.source.key, d2 = t2.target.key;
            t2.undirected && c2 > d2 && (o3 = c2, c2 = d2, d2 = o3);
            var s2 = "(".concat(c2, ")").concat(a3, "(").concat(d2, ")");
            n4.startsWith("geid_") ? e2.multi && (void 0 === i3[s2] ? i3[s2] = 0 : i3[s2]++, u2 += "".concat(i3[s2], ". ")) : u2 += "[".concat(n4, "]: "), r3[u2 += s2] = t2.attributes;
          });
          var o2 = {};
          for (var a2 in this) this.hasOwnProperty(a2) && !Zt.has(a2) && "function" != typeof this[a2] && "symbol" !== t(a2) && (o2[a2] = this[a2]);
          return o2.attributes = this._attributes, o2.nodes = n3, o2.edges = r3, p(o2, "constructor", this.constructor), o2;
        }, r2;
      }(v.exports.EventEmitter);
      "undefined" != typeof Symbol && (re.prototype[Symbol.for("nodejs.util.inspect.custom")] = re.prototype.inspect), [{ name: function(t2) {
        return "".concat(t2, "Edge");
      }, generateKey: true }, { name: function(t2) {
        return "".concat(t2, "DirectedEdge");
      }, generateKey: true, type: "directed" }, { name: function(t2) {
        return "".concat(t2, "UndirectedEdge");
      }, generateKey: true, type: "undirected" }, { name: function(t2) {
        return "".concat(t2, "EdgeWithKey");
      } }, { name: function(t2) {
        return "".concat(t2, "DirectedEdgeWithKey");
      }, type: "directed" }, { name: function(t2) {
        return "".concat(t2, "UndirectedEdgeWithKey");
      }, type: "undirected" }].forEach(function(t2) {
        ["add", "merge", "update"].forEach(function(e2) {
          var n2 = t2.name(e2), r2 = "add" === e2 ? ee : ne;
          t2.generateKey ? re.prototype[n2] = function(i2, o2, a2) {
            return r2(this, n2, true, "undirected" === (t2.type || this.type), null, i2, o2, a2, "update" === e2);
          } : re.prototype[n2] = function(i2, o2, a2, u2) {
            return r2(this, n2, false, "undirected" === (t2.type || this.type), i2, o2, a2, u2, "update" === e2);
          };
        });
      }), function(t2) {
        $.forEach(function(e2) {
          var n2 = e2.name, r2 = e2.attacher;
          r2(t2, n2("Node"), 0), r2(t2, n2("Source"), 1), r2(t2, n2("Target"), 2), r2(t2, n2("Opposite"), 3);
        });
      }(re), function(t2) {
        tt.forEach(function(e2) {
          var n2 = e2.name, r2 = e2.attacher;
          r2(t2, n2("Edge"), "mixed"), r2(t2, n2("DirectedEdge"), "directed"), r2(t2, n2("UndirectedEdge"), "undirected");
        });
      }(re), function(t2) {
        it.forEach(function(e2) {
          !function(t3, e3) {
            var n2 = e3.name, r2 = e3.type, i2 = e3.direction;
            t3.prototype[n2] = function(t4, e4) {
              if ("mixed" !== r2 && "mixed" !== this.type && r2 !== this.type) return [];
              if (!arguments.length) return wt(this, r2);
              if (1 === arguments.length) {
                t4 = "" + t4;
                var o2 = this._nodes.get(t4);
                if (void 0 === o2) throw new Y("Graph.".concat(n2, ': could not find the "').concat(t4, '" node in the graph.'));
                return Gt(this.multi, "mixed" === r2 ? this.type : r2, i2, o2);
              }
              if (2 === arguments.length) {
                t4 = "" + t4, e4 = "" + e4;
                var a2 = this._nodes.get(t4);
                if (!a2) throw new Y("Graph.".concat(n2, ':  could not find the "').concat(t4, '" source node in the graph.'));
                if (!this._nodes.has(e4)) throw new Y("Graph.".concat(n2, ':  could not find the "').concat(e4, '" target node in the graph.'));
                return At(r2, this.multi, i2, a2, e4);
              }
              throw new F("Graph.".concat(n2, ": too many arguments (expecting 0, 1 or 2 and got ").concat(arguments.length, ")."));
            };
          }(t2, e2), function(t3, e3) {
            var n2 = e3.name, r2 = e3.type, i2 = e3.direction, o2 = "forEach" + n2[0].toUpperCase() + n2.slice(1, -1);
            t3.prototype[o2] = function(t4, e4, n3) {
              if ("mixed" === r2 || "mixed" === this.type || r2 === this.type) {
                if (1 === arguments.length) return mt(this, r2, n3 = t4);
                if (2 === arguments.length) {
                  t4 = "" + t4, n3 = e4;
                  var a3 = this._nodes.get(t4);
                  if (void 0 === a3) throw new Y("Graph.".concat(o2, ': could not find the "').concat(t4, '" node in the graph.'));
                  return xt(this.multi, "mixed" === r2 ? this.type : r2, i2, a3, n3);
                }
                if (3 === arguments.length) {
                  t4 = "" + t4, e4 = "" + e4;
                  var u3 = this._nodes.get(t4);
                  if (!u3) throw new Y("Graph.".concat(o2, ':  could not find the "').concat(t4, '" source node in the graph.'));
                  if (!this._nodes.has(e4)) throw new Y("Graph.".concat(o2, ':  could not find the "').concat(e4, '" target node in the graph.'));
                  return Lt(r2, this.multi, i2, u3, e4, n3);
                }
                throw new F("Graph.".concat(o2, ": too many arguments (expecting 1, 2 or 3 and got ").concat(arguments.length, ")."));
              }
            };
            var a2 = "map" + n2[0].toUpperCase() + n2.slice(1);
            t3.prototype[a2] = function() {
              var t4, e4 = Array.prototype.slice.call(arguments), n3 = e4.pop();
              if (0 === e4.length) {
                var i3 = 0;
                "directed" !== r2 && (i3 += this.undirectedSize), "undirected" !== r2 && (i3 += this.directedSize), t4 = new Array(i3);
                var a3 = 0;
                e4.push(function(e5, r3, i4, o3, u3, c3, d2) {
                  t4[a3++] = n3(e5, r3, i4, o3, u3, c3, d2);
                });
              } else t4 = [], e4.push(function(e5, r3, i4, o3, a4, u3, c3) {
                t4.push(n3(e5, r3, i4, o3, a4, u3, c3));
              });
              return this[o2].apply(this, e4), t4;
            };
            var u2 = "filter" + n2[0].toUpperCase() + n2.slice(1);
            t3.prototype[u2] = function() {
              var t4 = Array.prototype.slice.call(arguments), e4 = t4.pop(), n3 = [];
              return t4.push(function(t5, r3, i3, o3, a3, u3, c3) {
                e4(t5, r3, i3, o3, a3, u3, c3) && n3.push(t5);
              }), this[o2].apply(this, t4), n3;
            };
            var c2 = "reduce" + n2[0].toUpperCase() + n2.slice(1);
            t3.prototype[c2] = function() {
              var t4, e4, n3 = Array.prototype.slice.call(arguments);
              if (n3.length < 2 || n3.length > 4) throw new F("Graph.".concat(c2, ": invalid number of arguments (expecting 2, 3 or 4 and got ").concat(n3.length, ")."));
              if ("function" == typeof n3[n3.length - 1] && "function" != typeof n3[n3.length - 2]) throw new F("Graph.".concat(c2, ": missing initial value. You must provide it because the callback takes more than one argument and we cannot infer the initial value from the first iteration, as you could with a simple array."));
              2 === n3.length ? (t4 = n3[0], e4 = n3[1], n3 = []) : 3 === n3.length ? (t4 = n3[1], e4 = n3[2], n3 = [n3[0]]) : 4 === n3.length && (t4 = n3[2], e4 = n3[3], n3 = [n3[0], n3[1]]);
              var r3 = e4;
              return n3.push(function(e5, n4, i3, o3, a3, u3, c3) {
                r3 = t4(r3, e5, n4, i3, o3, a3, u3, c3);
              }), this[o2].apply(this, n3), r3;
            };
          }(t2, e2), function(t3, e3) {
            var n2 = e3.name, r2 = e3.type, i2 = e3.direction, o2 = "find" + n2[0].toUpperCase() + n2.slice(1, -1);
            t3.prototype[o2] = function(t4, e4, n3) {
              if ("mixed" !== r2 && "mixed" !== this.type && r2 !== this.type) return false;
              if (1 === arguments.length) return _t(this, r2, n3 = t4);
              if (2 === arguments.length) {
                t4 = "" + t4, n3 = e4;
                var a3 = this._nodes.get(t4);
                if (void 0 === a3) throw new Y("Graph.".concat(o2, ': could not find the "').concat(t4, '" node in the graph.'));
                return Et(this.multi, "mixed" === r2 ? this.type : r2, i2, a3, n3);
              }
              if (3 === arguments.length) {
                t4 = "" + t4, e4 = "" + e4;
                var u3 = this._nodes.get(t4);
                if (!u3) throw new Y("Graph.".concat(o2, ':  could not find the "').concat(t4, '" source node in the graph.'));
                if (!this._nodes.has(e4)) throw new Y("Graph.".concat(o2, ':  could not find the "').concat(e4, '" target node in the graph.'));
                return Dt(r2, this.multi, i2, u3, e4, n3);
              }
              throw new F("Graph.".concat(o2, ": too many arguments (expecting 1, 2 or 3 and got ").concat(arguments.length, ")."));
            };
            var a2 = "some" + n2[0].toUpperCase() + n2.slice(1, -1);
            t3.prototype[a2] = function() {
              var t4 = Array.prototype.slice.call(arguments), e4 = t4.pop();
              return t4.push(function(t5, n3, r3, i3, o3, a3, u3) {
                return e4(t5, n3, r3, i3, o3, a3, u3);
              }), !!this[o2].apply(this, t4);
            };
            var u2 = "every" + n2[0].toUpperCase() + n2.slice(1, -1);
            t3.prototype[u2] = function() {
              var t4 = Array.prototype.slice.call(arguments), e4 = t4.pop();
              return t4.push(function(t5, n3, r3, i3, o3, a3, u3) {
                return !e4(t5, n3, r3, i3, o3, a3, u3);
              }), !this[o2].apply(this, t4);
            };
          }(t2, e2), function(t3, e3) {
            var n2 = e3.name, r2 = e3.type, i2 = e3.direction, o2 = n2.slice(0, -1) + "Entries";
            t3.prototype[o2] = function(t4, e4) {
              if ("mixed" !== r2 && "mixed" !== this.type && r2 !== this.type) return O.empty();
              if (!arguments.length) return kt(this, r2);
              if (1 === arguments.length) {
                t4 = "" + t4;
                var n3 = this._nodes.get(t4);
                if (!n3) throw new Y("Graph.".concat(o2, ': could not find the "').concat(t4, '" node in the graph.'));
                return St(r2, i2, n3);
              }
              if (2 === arguments.length) {
                t4 = "" + t4, e4 = "" + e4;
                var a2 = this._nodes.get(t4);
                if (!a2) throw new Y("Graph.".concat(o2, ':  could not find the "').concat(t4, '" source node in the graph.'));
                if (!this._nodes.has(e4)) throw new Y("Graph.".concat(o2, ':  could not find the "').concat(e4, '" target node in the graph.'));
                return Nt(r2, i2, a2, e4);
              }
              throw new F("Graph.".concat(o2, ": too many arguments (expecting 0, 1 or 2 and got ").concat(arguments.length, ")."));
            };
          }(t2, e2);
        });
      }(re), function(t2) {
        Ut.forEach(function(e2) {
          Rt(t2, e2), Wt(t2, e2), Kt(t2, e2), It(t2, e2);
        });
      }(re);
      var ie = function(t2) {
        function n2(e2) {
          var n3 = c({ type: "directed" }, e2);
          if ("multi" in n3 && false !== n3.multi) throw new F("DirectedGraph.from: inconsistent indication that the graph should be multi in given options!");
          if ("directed" !== n3.type) throw new F('DirectedGraph.from: inconsistent "' + n3.type + '" type in given options!');
          return t2.call(this, n3) || this;
        }
        return e(n2, t2), n2;
      }(re), oe = function(t2) {
        function n2(e2) {
          var n3 = c({ type: "undirected" }, e2);
          if ("multi" in n3 && false !== n3.multi) throw new F("UndirectedGraph.from: inconsistent indication that the graph should be multi in given options!");
          if ("undirected" !== n3.type) throw new F('UndirectedGraph.from: inconsistent "' + n3.type + '" type in given options!');
          return t2.call(this, n3) || this;
        }
        return e(n2, t2), n2;
      }(re), ae = function(t2) {
        function n2(e2) {
          var n3 = c({ multi: true }, e2);
          if ("multi" in n3 && true !== n3.multi) throw new F("MultiGraph.from: inconsistent indication that the graph should be simple in given options!");
          return t2.call(this, n3) || this;
        }
        return e(n2, t2), n2;
      }(re), ue = function(t2) {
        function n2(e2) {
          var n3 = c({ type: "directed", multi: true }, e2);
          if ("multi" in n3 && true !== n3.multi) throw new F("MultiDirectedGraph.from: inconsistent indication that the graph should be simple in given options!");
          if ("directed" !== n3.type) throw new F('MultiDirectedGraph.from: inconsistent "' + n3.type + '" type in given options!');
          return t2.call(this, n3) || this;
        }
        return e(n2, t2), n2;
      }(re), ce = function(t2) {
        function n2(e2) {
          var n3 = c({ type: "undirected", multi: true }, e2);
          if ("multi" in n3 && true !== n3.multi) throw new F("MultiUndirectedGraph.from: inconsistent indication that the graph should be simple in given options!");
          if ("undirected" !== n3.type) throw new F('MultiUndirectedGraph.from: inconsistent "' + n3.type + '" type in given options!');
          return t2.call(this, n3) || this;
        }
        return e(n2, t2), n2;
      }(re);
      function de(t2) {
        t2.from = function(e2, n2) {
          var r2 = c({}, e2.options, n2), i2 = new t2(r2);
          return i2.import(e2), i2;
        };
      }
      return de(re), de(ie), de(oe), de(ae), de(ue), de(ce), re.Graph = re, re.DirectedGraph = ie, re.UndirectedGraph = oe, re.MultiGraph = ae, re.MultiDirectedGraph = ue, re.MultiUndirectedGraph = ce, re.InvalidArgumentsGraphError = F, re.NotFoundGraphError = Y, re.UsageGraphError = B, re;
    });
  }
});

// node_modules/.pnpm/graphology-utils@2.5.2_graphology-types@0.24.8/node_modules/graphology-utils/defaults.js
var require_defaults = __commonJS({
  "node_modules/.pnpm/graphology-utils@2.5.2_graphology-types@0.24.8/node_modules/graphology-utils/defaults.js"(exports, module2) {
    function isLeaf(o) {
      return !o || typeof o !== "object" || typeof o === "function" || Array.isArray(o) || o instanceof Set || o instanceof Map || o instanceof RegExp || o instanceof Date;
    }
    function resolveDefaults(target, defaults) {
      target = target || {};
      var output = {};
      for (var k in defaults) {
        var existing = target[k];
        var def = defaults[k];
        if (!isLeaf(def)) {
          output[k] = resolveDefaults(existing, def);
          continue;
        }
        if (existing === void 0) {
          output[k] = def;
        } else {
          output[k] = existing;
        }
      }
      return output;
    }
    module2.exports = resolveDefaults;
  }
});

// node_modules/.pnpm/graphology-utils@2.5.2_graphology-types@0.24.8/node_modules/graphology-utils/is-graph.js
var require_is_graph = __commonJS({
  "node_modules/.pnpm/graphology-utils@2.5.2_graphology-types@0.24.8/node_modules/graphology-utils/is-graph.js"(exports, module2) {
    module2.exports = function isGraph(value) {
      return value !== null && typeof value === "object" && typeof value.addUndirectedEdgeWithKey === "function" && typeof value.dropNode === "function" && typeof value.multi === "boolean";
    };
  }
});

// node_modules/.pnpm/graphology-utils@2.5.2_graphology-types@0.24.8/node_modules/graphology-utils/infer-type.js
var require_infer_type = __commonJS({
  "node_modules/.pnpm/graphology-utils@2.5.2_graphology-types@0.24.8/node_modules/graphology-utils/infer-type.js"(exports, module2) {
    var isGraph = require_is_graph();
    module2.exports = function inferType(graph) {
      if (!isGraph(graph))
        throw new Error(
          "graphology-utils/infer-type: expecting a valid graphology instance."
        );
      var declaredType = graph.type;
      if (declaredType !== "mixed") return declaredType;
      if (graph.directedSize === 0 && graph.undirectedSize === 0 || graph.directedSize > 0 && graph.undirectedSize > 0)
        return "mixed";
      if (graph.directedSize > 0) return "directed";
      return "undirected";
    };
  }
});

// node_modules/.pnpm/obliterator@2.0.5/node_modules/obliterator/iterator.js
var require_iterator = __commonJS({
  "node_modules/.pnpm/obliterator@2.0.5/node_modules/obliterator/iterator.js"(exports, module2) {
    function Iterator2(next) {
      if (typeof next !== "function")
        throw new Error("obliterator/iterator: expecting a function!");
      this.next = next;
    }
    if (typeof Symbol !== "undefined")
      Iterator2.prototype[Symbol.iterator] = function() {
        return this;
      };
    Iterator2.of = function() {
      var args = arguments, l = args.length, i = 0;
      return new Iterator2(function() {
        if (i >= l) return { done: true };
        return { done: false, value: args[i++] };
      });
    };
    Iterator2.empty = function() {
      var iterator = new Iterator2(function() {
        return { done: true };
      });
      return iterator;
    };
    Iterator2.fromSequence = function(sequence) {
      var i = 0, l = sequence.length;
      return new Iterator2(function() {
        if (i >= l) return { done: true };
        return { done: false, value: sequence[i++] };
      });
    };
    Iterator2.is = function(value) {
      if (value instanceof Iterator2) return true;
      return typeof value === "object" && value !== null && typeof value.next === "function";
    };
    module2.exports = Iterator2;
  }
});

// node_modules/.pnpm/mnemonist@0.38.5/node_modules/mnemonist/utils/typed-arrays.js
var require_typed_arrays = __commonJS({
  "node_modules/.pnpm/mnemonist@0.38.5/node_modules/mnemonist/utils/typed-arrays.js"(exports) {
    var MAX_8BIT_INTEGER = Math.pow(2, 8) - 1;
    var MAX_16BIT_INTEGER = Math.pow(2, 16) - 1;
    var MAX_32BIT_INTEGER = Math.pow(2, 32) - 1;
    var MAX_SIGNED_8BIT_INTEGER = Math.pow(2, 7) - 1;
    var MAX_SIGNED_16BIT_INTEGER = Math.pow(2, 15) - 1;
    var MAX_SIGNED_32BIT_INTEGER = Math.pow(2, 31) - 1;
    exports.getPointerArray = function(size6) {
      var maxIndex = size6 - 1;
      if (maxIndex <= MAX_8BIT_INTEGER)
        return Uint8Array;
      if (maxIndex <= MAX_16BIT_INTEGER)
        return Uint16Array;
      if (maxIndex <= MAX_32BIT_INTEGER)
        return Uint32Array;
      throw new Error("mnemonist: Pointer Array of size > 4294967295 is not supported.");
    };
    exports.getSignedPointerArray = function(size6) {
      var maxIndex = size6 - 1;
      if (maxIndex <= MAX_SIGNED_8BIT_INTEGER)
        return Int8Array;
      if (maxIndex <= MAX_SIGNED_16BIT_INTEGER)
        return Int16Array;
      if (maxIndex <= MAX_SIGNED_32BIT_INTEGER)
        return Int32Array;
      return Float64Array;
    };
    exports.getNumberType = function(value) {
      if (value === (value | 0)) {
        if (Math.sign(value) === -1) {
          if (value <= 127 && value >= -128)
            return Int8Array;
          if (value <= 32767 && value >= -32768)
            return Int16Array;
          return Int32Array;
        } else {
          if (value <= 255)
            return Uint8Array;
          if (value <= 65535)
            return Uint16Array;
          return Uint32Array;
        }
      }
      return Float64Array;
    };
    var TYPE_PRIORITY = {
      Uint8Array: 1,
      Int8Array: 2,
      Uint16Array: 3,
      Int16Array: 4,
      Uint32Array: 5,
      Int32Array: 6,
      Float32Array: 7,
      Float64Array: 8
    };
    exports.getMinimalRepresentation = function(array, getter) {
      var maxType = null, maxPriority = 0, p, t, v, i, l;
      for (i = 0, l = array.length; i < l; i++) {
        v = getter ? getter(array[i]) : array[i];
        t = exports.getNumberType(v);
        p = TYPE_PRIORITY[t.name];
        if (p > maxPriority) {
          maxPriority = p;
          maxType = t;
        }
      }
      return maxType;
    };
    exports.isTypedArray = function(value) {
      return typeof ArrayBuffer !== "undefined" && ArrayBuffer.isView(value);
    };
    exports.concat = function() {
      var length = 0, i, o, l;
      for (i = 0, l = arguments.length; i < l; i++)
        length += arguments[i].length;
      var array = new arguments[0].constructor(length);
      for (i = 0, o = 0; i < l; i++) {
        array.set(arguments[i], o);
        o += arguments[i].length;
      }
      return array;
    };
    exports.indices = function(length) {
      var PointerArray = exports.getPointerArray(length);
      var array = new PointerArray(length);
      for (var i = 0; i < length; i++)
        array[i] = i;
      return array;
    };
  }
});

// node_modules/.pnpm/mnemonist@0.38.5/node_modules/mnemonist/sparse-map.js
var require_sparse_map = __commonJS({
  "node_modules/.pnpm/mnemonist@0.38.5/node_modules/mnemonist/sparse-map.js"(exports, module2) {
    var Iterator2 = require_iterator();
    var getPointerArray = require_typed_arrays().getPointerArray;
    function SparseMap(Values, length) {
      if (arguments.length < 2) {
        length = Values;
        Values = Array;
      }
      var ByteArray = getPointerArray(length);
      this.size = 0;
      this.length = length;
      this.dense = new ByteArray(length);
      this.sparse = new ByteArray(length);
      this.vals = new Values(length);
    }
    SparseMap.prototype.clear = function() {
      this.size = 0;
    };
    SparseMap.prototype.has = function(member) {
      var index = this.sparse[member];
      return index < this.size && this.dense[index] === member;
    };
    SparseMap.prototype.get = function(member) {
      var index = this.sparse[member];
      if (index < this.size && this.dense[index] === member)
        return this.vals[index];
      return;
    };
    SparseMap.prototype.set = function(member, value) {
      var index = this.sparse[member];
      if (index < this.size && this.dense[index] === member) {
        this.vals[index] = value;
        return this;
      }
      this.dense[this.size] = member;
      this.sparse[member] = this.size;
      this.vals[this.size] = value;
      this.size++;
      return this;
    };
    SparseMap.prototype.delete = function(member) {
      var index = this.sparse[member];
      if (index >= this.size || this.dense[index] !== member)
        return false;
      index = this.dense[this.size - 1];
      this.dense[this.sparse[member]] = index;
      this.sparse[index] = this.sparse[member];
      this.size--;
      return true;
    };
    SparseMap.prototype.forEach = function(callback, scope) {
      scope = arguments.length > 1 ? scope : this;
      for (var i = 0; i < this.size; i++)
        callback.call(scope, this.vals[i], this.dense[i]);
    };
    SparseMap.prototype.keys = function() {
      var size6 = this.size, dense = this.dense, i = 0;
      return new Iterator2(function() {
        if (i < size6) {
          var item = dense[i];
          i++;
          return {
            value: item
          };
        }
        return {
          done: true
        };
      });
    };
    SparseMap.prototype.values = function() {
      var size6 = this.size, values = this.vals, i = 0;
      return new Iterator2(function() {
        if (i < size6) {
          var item = values[i];
          i++;
          return {
            value: item
          };
        }
        return {
          done: true
        };
      });
    };
    SparseMap.prototype.entries = function() {
      var size6 = this.size, dense = this.dense, values = this.vals, i = 0;
      return new Iterator2(function() {
        if (i < size6) {
          var item = [dense[i], values[i]];
          i++;
          return {
            value: item
          };
        }
        return {
          done: true
        };
      });
    };
    if (typeof Symbol !== "undefined")
      SparseMap.prototype[Symbol.iterator] = SparseMap.prototype.entries;
    SparseMap.prototype.inspect = function() {
      var proxy = /* @__PURE__ */ new Map();
      for (var i = 0; i < this.size; i++)
        proxy.set(this.dense[i], this.vals[i]);
      Object.defineProperty(proxy, "constructor", {
        value: SparseMap,
        enumerable: false
      });
      proxy.length = this.length;
      if (this.vals.constructor !== Array)
        proxy.type = this.vals.constructor.name;
      return proxy;
    };
    if (typeof Symbol !== "undefined")
      SparseMap.prototype[Symbol.for("nodejs.util.inspect.custom")] = SparseMap.prototype.inspect;
    module2.exports = SparseMap;
  }
});

// node_modules/.pnpm/mnemonist@0.38.5/node_modules/mnemonist/sparse-queue-set.js
var require_sparse_queue_set = __commonJS({
  "node_modules/.pnpm/mnemonist@0.38.5/node_modules/mnemonist/sparse-queue-set.js"(exports, module2) {
    var Iterator2 = require_iterator();
    var getPointerArray = require_typed_arrays().getPointerArray;
    function SparseQueueSet(capacity) {
      var ByteArray = getPointerArray(capacity);
      this.start = 0;
      this.size = 0;
      this.capacity = capacity;
      this.dense = new ByteArray(capacity);
      this.sparse = new ByteArray(capacity);
    }
    SparseQueueSet.prototype.clear = function() {
      this.start = 0;
      this.size = 0;
    };
    SparseQueueSet.prototype.has = function(member) {
      if (this.size === 0)
        return false;
      var index = this.sparse[member];
      var inBounds = index < this.capacity && (index >= this.start && index < this.start + this.size) || index < (this.start + this.size) % this.capacity;
      return inBounds && this.dense[index] === member;
    };
    SparseQueueSet.prototype.enqueue = function(member) {
      var index = this.sparse[member];
      if (this.size !== 0) {
        var inBounds = index < this.capacity && (index >= this.start && index < this.start + this.size) || index < (this.start + this.size) % this.capacity;
        if (inBounds && this.dense[index] === member)
          return this;
      }
      index = (this.start + this.size) % this.capacity;
      this.dense[index] = member;
      this.sparse[member] = index;
      this.size++;
      return this;
    };
    SparseQueueSet.prototype.dequeue = function() {
      if (this.size === 0)
        return;
      var index = this.start;
      this.size--;
      this.start++;
      if (this.start === this.capacity)
        this.start = 0;
      var member = this.dense[index];
      this.sparse[member] = this.capacity;
      return member;
    };
    SparseQueueSet.prototype.forEach = function(callback, scope) {
      scope = arguments.length > 1 ? scope : this;
      var c = this.capacity, l = this.size, i = this.start, j = 0;
      while (j < l) {
        callback.call(scope, this.dense[i], j, this);
        i++;
        j++;
        if (i === c)
          i = 0;
      }
    };
    SparseQueueSet.prototype.values = function() {
      var dense = this.dense, c = this.capacity, l = this.size, i = this.start, j = 0;
      return new Iterator2(function() {
        if (j >= l)
          return {
            done: true
          };
        var value = dense[i];
        i++;
        j++;
        if (i === c)
          i = 0;
        return {
          value,
          done: false
        };
      });
    };
    if (typeof Symbol !== "undefined")
      SparseQueueSet.prototype[Symbol.iterator] = SparseQueueSet.prototype.values;
    SparseQueueSet.prototype.inspect = function() {
      var proxy = [];
      this.forEach(function(member) {
        proxy.push(member);
      });
      Object.defineProperty(proxy, "constructor", {
        value: SparseQueueSet,
        enumerable: false
      });
      proxy.capacity = this.capacity;
      return proxy;
    };
    if (typeof Symbol !== "undefined")
      SparseQueueSet.prototype[Symbol.for("nodejs.util.inspect.custom")] = SparseQueueSet.prototype.inspect;
    module2.exports = SparseQueueSet;
  }
});

// node_modules/.pnpm/pandemonium@2.4.1/node_modules/pandemonium/random-index.js
var require_random_index = __commonJS({
  "node_modules/.pnpm/pandemonium@2.4.1/node_modules/pandemonium/random-index.js"(exports, module2) {
    function createRandomIndex(rng) {
      return function(length) {
        if (typeof length !== "number") length = length.length;
        return Math.floor(rng() * length);
      };
    }
    var randomIndex = createRandomIndex(Math.random);
    randomIndex.createRandomIndex = createRandomIndex;
    module2.exports = randomIndex;
  }
});

// node_modules/.pnpm/mnemonist@0.39.8/node_modules/mnemonist/utils/typed-arrays.js
var require_typed_arrays2 = __commonJS({
  "node_modules/.pnpm/mnemonist@0.39.8/node_modules/mnemonist/utils/typed-arrays.js"(exports) {
    var MAX_8BIT_INTEGER = Math.pow(2, 8) - 1;
    var MAX_16BIT_INTEGER = Math.pow(2, 16) - 1;
    var MAX_32BIT_INTEGER = Math.pow(2, 32) - 1;
    var MAX_SIGNED_8BIT_INTEGER = Math.pow(2, 7) - 1;
    var MAX_SIGNED_16BIT_INTEGER = Math.pow(2, 15) - 1;
    var MAX_SIGNED_32BIT_INTEGER = Math.pow(2, 31) - 1;
    exports.getPointerArray = function(size6) {
      var maxIndex = size6 - 1;
      if (maxIndex <= MAX_8BIT_INTEGER)
        return Uint8Array;
      if (maxIndex <= MAX_16BIT_INTEGER)
        return Uint16Array;
      if (maxIndex <= MAX_32BIT_INTEGER)
        return Uint32Array;
      throw new Error("mnemonist: Pointer Array of size > 4294967295 is not supported.");
    };
    exports.getSignedPointerArray = function(size6) {
      var maxIndex = size6 - 1;
      if (maxIndex <= MAX_SIGNED_8BIT_INTEGER)
        return Int8Array;
      if (maxIndex <= MAX_SIGNED_16BIT_INTEGER)
        return Int16Array;
      if (maxIndex <= MAX_SIGNED_32BIT_INTEGER)
        return Int32Array;
      return Float64Array;
    };
    exports.getNumberType = function(value) {
      if (value === (value | 0)) {
        if (Math.sign(value) === -1) {
          if (value <= 127 && value >= -128)
            return Int8Array;
          if (value <= 32767 && value >= -32768)
            return Int16Array;
          return Int32Array;
        } else {
          if (value <= 255)
            return Uint8Array;
          if (value <= 65535)
            return Uint16Array;
          return Uint32Array;
        }
      }
      return Float64Array;
    };
    var TYPE_PRIORITY = {
      Uint8Array: 1,
      Int8Array: 2,
      Uint16Array: 3,
      Int16Array: 4,
      Uint32Array: 5,
      Int32Array: 6,
      Float32Array: 7,
      Float64Array: 8
    };
    exports.getMinimalRepresentation = function(array, getter) {
      var maxType = null, maxPriority = 0, p, t, v, i, l;
      for (i = 0, l = array.length; i < l; i++) {
        v = getter ? getter(array[i]) : array[i];
        t = exports.getNumberType(v);
        p = TYPE_PRIORITY[t.name];
        if (p > maxPriority) {
          maxPriority = p;
          maxType = t;
        }
      }
      return maxType;
    };
    exports.isTypedArray = function(value) {
      return typeof ArrayBuffer !== "undefined" && ArrayBuffer.isView(value);
    };
    exports.concat = function() {
      var length = 0, i, o, l;
      for (i = 0, l = arguments.length; i < l; i++)
        length += arguments[i].length;
      var array = new arguments[0].constructor(length);
      for (i = 0, o = 0; i < l; i++) {
        array.set(arguments[i], o);
        o += arguments[i].length;
      }
      return array;
    };
    exports.indices = function(length) {
      var PointerArray = exports.getPointerArray(length);
      var array = new PointerArray(length);
      for (var i = 0; i < length; i++)
        array[i] = i;
      return array;
    };
  }
});

// node_modules/.pnpm/graphology-utils@2.5.2_graphology-types@0.24.8/node_modules/graphology-utils/getters.js
var require_getters = __commonJS({
  "node_modules/.pnpm/graphology-utils@2.5.2_graphology-types@0.24.8/node_modules/graphology-utils/getters.js"(exports) {
    function coerceWeight(value) {
      if (typeof value !== "number" || isNaN(value)) return 1;
      return value;
    }
    function createNodeValueGetter(nameOrFunction, defaultValue) {
      var getter = {};
      var coerceToDefault = function(v) {
        if (typeof v === "undefined") return defaultValue;
        return v;
      };
      if (typeof defaultValue === "function") coerceToDefault = defaultValue;
      var get = function(attributes) {
        return coerceToDefault(attributes[nameOrFunction]);
      };
      var returnDefault = function() {
        return coerceToDefault(void 0);
      };
      if (typeof nameOrFunction === "string") {
        getter.fromAttributes = get;
        getter.fromGraph = function(graph, node) {
          return get(graph.getNodeAttributes(node));
        };
        getter.fromEntry = function(node, attributes) {
          return get(attributes);
        };
      } else if (typeof nameOrFunction === "function") {
        getter.fromAttributes = function() {
          throw new Error(
            "graphology-utils/getters/createNodeValueGetter: irrelevant usage."
          );
        };
        getter.fromGraph = function(graph, node) {
          return coerceToDefault(
            nameOrFunction(node, graph.getNodeAttributes(node))
          );
        };
        getter.fromEntry = function(node, attributes) {
          return coerceToDefault(nameOrFunction(node, attributes));
        };
      } else {
        getter.fromAttributes = returnDefault;
        getter.fromGraph = returnDefault;
        getter.fromEntry = returnDefault;
      }
      return getter;
    }
    function createEdgeValueGetter(nameOrFunction, defaultValue) {
      var getter = {};
      var coerceToDefault = function(v) {
        if (typeof v === "undefined") return defaultValue;
        return v;
      };
      if (typeof defaultValue === "function") coerceToDefault = defaultValue;
      var get = function(attributes) {
        return coerceToDefault(attributes[nameOrFunction]);
      };
      var returnDefault = function() {
        return coerceToDefault(void 0);
      };
      if (typeof nameOrFunction === "string") {
        getter.fromAttributes = get;
        getter.fromGraph = function(graph, edge) {
          return get(graph.getEdgeAttributes(edge));
        };
        getter.fromEntry = function(edge, attributes) {
          return get(attributes);
        };
        getter.fromPartialEntry = getter.fromEntry;
        getter.fromMinimalEntry = getter.fromEntry;
      } else if (typeof nameOrFunction === "function") {
        getter.fromAttributes = function() {
          throw new Error(
            "graphology-utils/getters/createEdgeValueGetter: irrelevant usage."
          );
        };
        getter.fromGraph = function(graph, edge) {
          var extremities = graph.extremities(edge);
          return coerceToDefault(
            nameOrFunction(
              edge,
              graph.getEdgeAttributes(edge),
              extremities[0],
              extremities[1],
              graph.getNodeAttributes(extremities[0]),
              graph.getNodeAttributes(extremities[1]),
              graph.isUndirected(edge)
            )
          );
        };
        getter.fromEntry = function(e, a, s, t, sa, ta, u) {
          return coerceToDefault(nameOrFunction(e, a, s, t, sa, ta, u));
        };
        getter.fromPartialEntry = function(e, a, s, t) {
          return coerceToDefault(nameOrFunction(e, a, s, t));
        };
        getter.fromMinimalEntry = function(e, a) {
          return coerceToDefault(nameOrFunction(e, a));
        };
      } else {
        getter.fromAttributes = returnDefault;
        getter.fromGraph = returnDefault;
        getter.fromEntry = returnDefault;
        getter.fromMinimalEntry = returnDefault;
      }
      return getter;
    }
    exports.createNodeValueGetter = createNodeValueGetter;
    exports.createEdgeValueGetter = createEdgeValueGetter;
    exports.createEdgeWeightGetter = function(name) {
      return createEdgeValueGetter(name, coerceWeight);
    };
  }
});

// node_modules/.pnpm/graphology-indices@0.16.6_graphology-types@0.24.8/node_modules/graphology-indices/louvain.js
var require_louvain = __commonJS({
  "node_modules/.pnpm/graphology-indices@0.16.6_graphology-types@0.24.8/node_modules/graphology-indices/louvain.js"(exports) {
    var typed = require_typed_arrays2();
    var resolveDefaults = require_defaults();
    var createEdgeWeightGetter = require_getters().createEdgeWeightGetter;
    var INSPECT = Symbol.for("nodejs.util.inspect.custom");
    var DEFAULTS = {
      getEdgeWeight: "weight",
      keepDendrogram: false,
      resolution: 1
    };
    function UndirectedLouvainIndex(graph, options) {
      options = resolveDefaults(options, DEFAULTS);
      var resolution = options.resolution;
      var getEdgeWeight = createEdgeWeightGetter(options.getEdgeWeight).fromEntry;
      var size6 = (graph.size - graph.selfLoopCount) * 2;
      var NeighborhoodPointerArray = typed.getPointerArray(size6);
      var NodesPointerArray = typed.getPointerArray(graph.order + 1);
      var WeightsArray = options.getEdgeWeight ? Float64Array : typed.getPointerArray(graph.size * 2);
      this.C = graph.order;
      this.M = 0;
      this.E = size6;
      this.U = 0;
      this.resolution = resolution;
      this.level = 0;
      this.graph = graph;
      this.nodes = new Array(graph.order);
      this.keepDendrogram = options.keepDendrogram;
      this.neighborhood = new NodesPointerArray(size6);
      this.weights = new WeightsArray(size6);
      this.loops = new WeightsArray(graph.order);
      this.starts = new NeighborhoodPointerArray(graph.order + 1);
      this.belongings = new NodesPointerArray(graph.order);
      this.dendrogram = [];
      this.mapping = null;
      this.counts = new NodesPointerArray(graph.order);
      this.unused = new NodesPointerArray(graph.order);
      this.totalWeights = new WeightsArray(graph.order);
      var ids = {};
      var weight;
      var i = 0, n = 0;
      var self2 = this;
      graph.forEachNode(function(node) {
        self2.nodes[i] = node;
        ids[node] = i;
        n += graph.undirectedDegreeWithoutSelfLoops(node);
        self2.starts[i] = n;
        self2.belongings[i] = i;
        self2.counts[i] = 1;
        i++;
      });
      graph.forEachEdge(function(edge, attr2, source, target, sa, ta, u) {
        weight = getEdgeWeight(edge, attr2, source, target, sa, ta, u);
        source = ids[source];
        target = ids[target];
        self2.M += weight;
        if (source === target) {
          self2.totalWeights[source] += weight * 2;
          self2.loops[source] = weight * 2;
        } else {
          self2.totalWeights[source] += weight;
          self2.totalWeights[target] += weight;
          var startSource = --self2.starts[source], startTarget = --self2.starts[target];
          self2.neighborhood[startSource] = target;
          self2.neighborhood[startTarget] = source;
          self2.weights[startSource] = weight;
          self2.weights[startTarget] = weight;
        }
      });
      this.starts[i] = this.E;
      if (this.keepDendrogram) this.dendrogram.push(this.belongings.slice());
      else this.mapping = this.belongings.slice();
    }
    UndirectedLouvainIndex.prototype.isolate = function(i, degree) {
      var currentCommunity = this.belongings[i];
      if (this.counts[currentCommunity] === 1) return currentCommunity;
      var newCommunity = this.unused[--this.U];
      var loops = this.loops[i];
      this.totalWeights[currentCommunity] -= degree + loops;
      this.totalWeights[newCommunity] += degree + loops;
      this.belongings[i] = newCommunity;
      this.counts[currentCommunity]--;
      this.counts[newCommunity]++;
      return newCommunity;
    };
    UndirectedLouvainIndex.prototype.move = function(i, degree, targetCommunity) {
      var currentCommunity = this.belongings[i], loops = this.loops[i];
      this.totalWeights[currentCommunity] -= degree + loops;
      this.totalWeights[targetCommunity] += degree + loops;
      this.belongings[i] = targetCommunity;
      var nowEmpty = this.counts[currentCommunity]-- === 1;
      this.counts[targetCommunity]++;
      if (nowEmpty) this.unused[this.U++] = currentCommunity;
    };
    UndirectedLouvainIndex.prototype.computeNodeDegree = function(i) {
      var o, l, weight;
      var degree = 0;
      for (o = this.starts[i], l = this.starts[i + 1]; o < l; o++) {
        weight = this.weights[o];
        degree += weight;
      }
      return degree;
    };
    UndirectedLouvainIndex.prototype.expensiveIsolate = function(i) {
      var degree = this.computeNodeDegree(i);
      return this.isolate(i, degree);
    };
    UndirectedLouvainIndex.prototype.expensiveMove = function(i, ci) {
      var degree = this.computeNodeDegree(i);
      this.move(i, degree, ci);
    };
    UndirectedLouvainIndex.prototype.zoomOut = function() {
      var inducedGraph = new Array(this.C - this.U), newLabels = {};
      var N = this.nodes.length;
      var C = 0, E = 0;
      var i, j, l, m, n, ci, cj, data, adj;
      for (i = 0, l = this.C; i < l; i++) {
        ci = this.belongings[i];
        if (!(ci in newLabels)) {
          newLabels[ci] = C;
          inducedGraph[C] = {
            adj: {},
            totalWeights: this.totalWeights[ci],
            internalWeights: 0
          };
          C++;
        }
        this.belongings[i] = newLabels[ci];
      }
      var currentLevel, nextLevel;
      if (this.keepDendrogram) {
        currentLevel = this.dendrogram[this.level];
        nextLevel = new (typed.getPointerArray(C))(N);
        for (i = 0; i < N; i++) nextLevel[i] = this.belongings[currentLevel[i]];
        this.dendrogram.push(nextLevel);
      } else {
        for (i = 0; i < N; i++) this.mapping[i] = this.belongings[this.mapping[i]];
      }
      for (i = 0, l = this.C; i < l; i++) {
        ci = this.belongings[i];
        data = inducedGraph[ci];
        adj = data.adj;
        data.internalWeights += this.loops[i];
        for (j = this.starts[i], m = this.starts[i + 1]; j < m; j++) {
          n = this.neighborhood[j];
          cj = this.belongings[n];
          if (ci === cj) {
            data.internalWeights += this.weights[j];
            continue;
          }
          if (!(cj in adj)) adj[cj] = 0;
          adj[cj] += this.weights[j];
        }
      }
      this.C = C;
      n = 0;
      for (ci = 0; ci < C; ci++) {
        data = inducedGraph[ci];
        adj = data.adj;
        ci = +ci;
        this.totalWeights[ci] = data.totalWeights;
        this.loops[ci] = data.internalWeights;
        this.counts[ci] = 1;
        this.starts[ci] = n;
        this.belongings[ci] = ci;
        for (cj in adj) {
          this.neighborhood[n] = +cj;
          this.weights[n] = adj[cj];
          E++;
          n++;
        }
      }
      this.starts[C] = E;
      this.E = E;
      this.U = 0;
      this.level++;
      return newLabels;
    };
    UndirectedLouvainIndex.prototype.modularity = function() {
      var ci, cj, i, j, m;
      var Q = 0;
      var M2 = this.M * 2;
      var internalWeights = new Float64Array(this.C);
      for (i = 0; i < this.C; i++) {
        ci = this.belongings[i];
        internalWeights[ci] += this.loops[i];
        for (j = this.starts[i], m = this.starts[i + 1]; j < m; j++) {
          cj = this.belongings[this.neighborhood[j]];
          if (ci !== cj) continue;
          internalWeights[ci] += this.weights[j];
        }
      }
      for (i = 0; i < this.C; i++) {
        Q += internalWeights[i] / M2 - Math.pow(this.totalWeights[i] / M2, 2) * this.resolution;
      }
      return Q;
    };
    UndirectedLouvainIndex.prototype.delta = function(i, degree, targetCommunityDegree, targetCommunity) {
      var M = this.M;
      var targetCommunityTotalWeight = this.totalWeights[targetCommunity];
      degree += this.loops[i];
      return targetCommunityDegree / M - // NOTE: formula is a bit different here because targetCommunityDegree is passed without * 2
      targetCommunityTotalWeight * degree * this.resolution / (2 * M * M);
    };
    UndirectedLouvainIndex.prototype.deltaWithOwnCommunity = function(i, degree, targetCommunityDegree, targetCommunity) {
      var M = this.M;
      var targetCommunityTotalWeight = this.totalWeights[targetCommunity];
      degree += this.loops[i];
      return targetCommunityDegree / M - // NOTE: formula is a bit different here because targetCommunityDegree is passed without * 2
      (targetCommunityTotalWeight - degree) * degree * this.resolution / (2 * M * M);
    };
    UndirectedLouvainIndex.prototype.fastDelta = function(i, degree, targetCommunityDegree, targetCommunity) {
      var M = this.M;
      var targetCommunityTotalWeight = this.totalWeights[targetCommunity];
      degree += this.loops[i];
      return targetCommunityDegree - degree * targetCommunityTotalWeight * this.resolution / (2 * M);
    };
    UndirectedLouvainIndex.prototype.fastDeltaWithOwnCommunity = function(i, degree, targetCommunityDegree, targetCommunity) {
      var M = this.M;
      var targetCommunityTotalWeight = this.totalWeights[targetCommunity];
      degree += this.loops[i];
      return targetCommunityDegree - degree * (targetCommunityTotalWeight - degree) * this.resolution / (2 * M);
    };
    UndirectedLouvainIndex.prototype.bounds = function(i) {
      return [this.starts[i], this.starts[i + 1]];
    };
    UndirectedLouvainIndex.prototype.project = function() {
      var self2 = this;
      var projection = {};
      self2.nodes.slice(0, this.C).forEach(function(node, i) {
        projection[node] = Array.from(
          self2.neighborhood.slice(self2.starts[i], self2.starts[i + 1])
        ).map(function(j) {
          return self2.nodes[j];
        });
      });
      return projection;
    };
    UndirectedLouvainIndex.prototype.collect = function(level) {
      if (arguments.length < 1) level = this.level;
      var o = {};
      var mapping = this.keepDendrogram ? this.dendrogram[level] : this.mapping;
      var i, l;
      for (i = 0, l = mapping.length; i < l; i++) o[this.nodes[i]] = mapping[i];
      return o;
    };
    UndirectedLouvainIndex.prototype.assign = function(prop, level) {
      if (arguments.length < 2) level = this.level;
      var mapping = this.keepDendrogram ? this.dendrogram[level] : this.mapping;
      var i, l;
      for (i = 0, l = mapping.length; i < l; i++)
        this.graph.setNodeAttribute(this.nodes[i], prop, mapping[i]);
    };
    UndirectedLouvainIndex.prototype[INSPECT] = function() {
      var proxy = {};
      Object.defineProperty(proxy, "constructor", {
        value: UndirectedLouvainIndex,
        enumerable: false
      });
      proxy.C = this.C;
      proxy.M = this.M;
      proxy.E = this.E;
      proxy.U = this.U;
      proxy.resolution = this.resolution;
      proxy.level = this.level;
      proxy.nodes = this.nodes;
      proxy.starts = this.starts.slice(0, proxy.C + 1);
      var eTruncated = ["neighborhood", "weights"];
      var cTruncated = ["counts", "loops", "belongings", "totalWeights"];
      var self2 = this;
      eTruncated.forEach(function(key) {
        proxy[key] = self2[key].slice(0, proxy.E);
      });
      cTruncated.forEach(function(key) {
        proxy[key] = self2[key].slice(0, proxy.C);
      });
      proxy.unused = this.unused.slice(0, this.U);
      if (this.keepDendrogram) proxy.dendrogram = this.dendrogram;
      else proxy.mapping = this.mapping;
      return proxy;
    };
    function DirectedLouvainIndex(graph, options) {
      options = resolveDefaults(options, DEFAULTS);
      var resolution = options.resolution;
      var getEdgeWeight = createEdgeWeightGetter(options.getEdgeWeight).fromEntry;
      var size6 = (graph.size - graph.selfLoopCount) * 2;
      var NeighborhoodPointerArray = typed.getPointerArray(size6);
      var NodesPointerArray = typed.getPointerArray(graph.order + 1);
      var WeightsArray = options.getEdgeWeight ? Float64Array : typed.getPointerArray(graph.size * 2);
      this.C = graph.order;
      this.M = 0;
      this.E = size6;
      this.U = 0;
      this.resolution = resolution;
      this.level = 0;
      this.graph = graph;
      this.nodes = new Array(graph.order);
      this.keepDendrogram = options.keepDendrogram;
      this.neighborhood = new NodesPointerArray(size6);
      this.weights = new WeightsArray(size6);
      this.loops = new WeightsArray(graph.order);
      this.starts = new NeighborhoodPointerArray(graph.order + 1);
      this.offsets = new NeighborhoodPointerArray(graph.order);
      this.belongings = new NodesPointerArray(graph.order);
      this.dendrogram = [];
      this.counts = new NodesPointerArray(graph.order);
      this.unused = new NodesPointerArray(graph.order);
      this.totalInWeights = new WeightsArray(graph.order);
      this.totalOutWeights = new WeightsArray(graph.order);
      var ids = {};
      var weight;
      var i = 0, n = 0;
      var self2 = this;
      graph.forEachNode(function(node) {
        self2.nodes[i] = node;
        ids[node] = i;
        n += graph.outDegreeWithoutSelfLoops(node);
        self2.starts[i] = n;
        n += graph.inDegreeWithoutSelfLoops(node);
        self2.offsets[i] = n;
        self2.belongings[i] = i;
        self2.counts[i] = 1;
        i++;
      });
      graph.forEachEdge(function(edge, attr2, source, target, sa, ta, u) {
        weight = getEdgeWeight(edge, attr2, source, target, sa, ta, u);
        source = ids[source];
        target = ids[target];
        self2.M += weight;
        if (source === target) {
          self2.loops[source] += weight;
          self2.totalInWeights[source] += weight;
          self2.totalOutWeights[source] += weight;
        } else {
          self2.totalOutWeights[source] += weight;
          self2.totalInWeights[target] += weight;
          var startSource = --self2.starts[source], startTarget = --self2.offsets[target];
          self2.neighborhood[startSource] = target;
          self2.neighborhood[startTarget] = source;
          self2.weights[startSource] = weight;
          self2.weights[startTarget] = weight;
        }
      });
      this.starts[i] = this.E;
      if (this.keepDendrogram) this.dendrogram.push(this.belongings.slice());
      else this.mapping = this.belongings.slice();
    }
    DirectedLouvainIndex.prototype.bounds = UndirectedLouvainIndex.prototype.bounds;
    DirectedLouvainIndex.prototype.inBounds = function(i) {
      return [this.offsets[i], this.starts[i + 1]];
    };
    DirectedLouvainIndex.prototype.outBounds = function(i) {
      return [this.starts[i], this.offsets[i]];
    };
    DirectedLouvainIndex.prototype.project = UndirectedLouvainIndex.prototype.project;
    DirectedLouvainIndex.prototype.projectIn = function() {
      var self2 = this;
      var projection = {};
      self2.nodes.slice(0, this.C).forEach(function(node, i) {
        projection[node] = Array.from(
          self2.neighborhood.slice(self2.offsets[i], self2.starts[i + 1])
        ).map(function(j) {
          return self2.nodes[j];
        });
      });
      return projection;
    };
    DirectedLouvainIndex.prototype.projectOut = function() {
      var self2 = this;
      var projection = {};
      self2.nodes.slice(0, this.C).forEach(function(node, i) {
        projection[node] = Array.from(
          self2.neighborhood.slice(self2.starts[i], self2.offsets[i])
        ).map(function(j) {
          return self2.nodes[j];
        });
      });
      return projection;
    };
    DirectedLouvainIndex.prototype.isolate = function(i, inDegree, outDegree) {
      var currentCommunity = this.belongings[i];
      if (this.counts[currentCommunity] === 1) return currentCommunity;
      var newCommunity = this.unused[--this.U];
      var loops = this.loops[i];
      this.totalInWeights[currentCommunity] -= inDegree + loops;
      this.totalInWeights[newCommunity] += inDegree + loops;
      this.totalOutWeights[currentCommunity] -= outDegree + loops;
      this.totalOutWeights[newCommunity] += outDegree + loops;
      this.belongings[i] = newCommunity;
      this.counts[currentCommunity]--;
      this.counts[newCommunity]++;
      return newCommunity;
    };
    DirectedLouvainIndex.prototype.move = function(i, inDegree, outDegree, targetCommunity) {
      var currentCommunity = this.belongings[i], loops = this.loops[i];
      this.totalInWeights[currentCommunity] -= inDegree + loops;
      this.totalInWeights[targetCommunity] += inDegree + loops;
      this.totalOutWeights[currentCommunity] -= outDegree + loops;
      this.totalOutWeights[targetCommunity] += outDegree + loops;
      this.belongings[i] = targetCommunity;
      var nowEmpty = this.counts[currentCommunity]-- === 1;
      this.counts[targetCommunity]++;
      if (nowEmpty) this.unused[this.U++] = currentCommunity;
    };
    DirectedLouvainIndex.prototype.computeNodeInDegree = function(i) {
      var o, l, weight;
      var inDegree = 0;
      for (o = this.offsets[i], l = this.starts[i + 1]; o < l; o++) {
        weight = this.weights[o];
        inDegree += weight;
      }
      return inDegree;
    };
    DirectedLouvainIndex.prototype.computeNodeOutDegree = function(i) {
      var o, l, weight;
      var outDegree = 0;
      for (o = this.starts[i], l = this.offsets[i]; o < l; o++) {
        weight = this.weights[o];
        outDegree += weight;
      }
      return outDegree;
    };
    DirectedLouvainIndex.prototype.expensiveMove = function(i, ci) {
      var inDegree = this.computeNodeInDegree(i), outDegree = this.computeNodeOutDegree(i);
      this.move(i, inDegree, outDegree, ci);
    };
    DirectedLouvainIndex.prototype.zoomOut = function() {
      var inducedGraph = new Array(this.C - this.U), newLabels = {};
      var N = this.nodes.length;
      var C = 0, E = 0;
      var i, j, l, m, n, ci, cj, data, offset, out, adj, inAdj, outAdj;
      for (i = 0, l = this.C; i < l; i++) {
        ci = this.belongings[i];
        if (!(ci in newLabels)) {
          newLabels[ci] = C;
          inducedGraph[C] = {
            inAdj: {},
            outAdj: {},
            totalInWeights: this.totalInWeights[ci],
            totalOutWeights: this.totalOutWeights[ci],
            internalWeights: 0
          };
          C++;
        }
        this.belongings[i] = newLabels[ci];
      }
      var currentLevel, nextLevel;
      if (this.keepDendrogram) {
        currentLevel = this.dendrogram[this.level];
        nextLevel = new (typed.getPointerArray(C))(N);
        for (i = 0; i < N; i++) nextLevel[i] = this.belongings[currentLevel[i]];
        this.dendrogram.push(nextLevel);
      } else {
        for (i = 0; i < N; i++) this.mapping[i] = this.belongings[this.mapping[i]];
      }
      for (i = 0, l = this.C; i < l; i++) {
        ci = this.belongings[i];
        offset = this.offsets[i];
        data = inducedGraph[ci];
        inAdj = data.inAdj;
        outAdj = data.outAdj;
        data.internalWeights += this.loops[i];
        for (j = this.starts[i], m = this.starts[i + 1]; j < m; j++) {
          n = this.neighborhood[j];
          cj = this.belongings[n];
          out = j < offset;
          adj = out ? outAdj : inAdj;
          if (ci === cj) {
            if (out) data.internalWeights += this.weights[j];
            continue;
          }
          if (!(cj in adj)) adj[cj] = 0;
          adj[cj] += this.weights[j];
        }
      }
      this.C = C;
      n = 0;
      for (ci = 0; ci < C; ci++) {
        data = inducedGraph[ci];
        inAdj = data.inAdj;
        outAdj = data.outAdj;
        ci = +ci;
        this.totalInWeights[ci] = data.totalInWeights;
        this.totalOutWeights[ci] = data.totalOutWeights;
        this.loops[ci] = data.internalWeights;
        this.counts[ci] = 1;
        this.starts[ci] = n;
        this.belongings[ci] = ci;
        for (cj in outAdj) {
          this.neighborhood[n] = +cj;
          this.weights[n] = outAdj[cj];
          E++;
          n++;
        }
        this.offsets[ci] = n;
        for (cj in inAdj) {
          this.neighborhood[n] = +cj;
          this.weights[n] = inAdj[cj];
          E++;
          n++;
        }
      }
      this.starts[C] = E;
      this.E = E;
      this.U = 0;
      this.level++;
      return newLabels;
    };
    DirectedLouvainIndex.prototype.modularity = function() {
      var ci, cj, i, j, m;
      var Q = 0;
      var M = this.M;
      var internalWeights = new Float64Array(this.C);
      for (i = 0; i < this.C; i++) {
        ci = this.belongings[i];
        internalWeights[ci] += this.loops[i];
        for (j = this.starts[i], m = this.offsets[i]; j < m; j++) {
          cj = this.belongings[this.neighborhood[j]];
          if (ci !== cj) continue;
          internalWeights[ci] += this.weights[j];
        }
      }
      for (i = 0; i < this.C; i++)
        Q += internalWeights[i] / M - this.totalInWeights[i] * this.totalOutWeights[i] / Math.pow(M, 2) * this.resolution;
      return Q;
    };
    DirectedLouvainIndex.prototype.delta = function(i, inDegree, outDegree, targetCommunityDegree, targetCommunity) {
      var M = this.M;
      var targetCommunityTotalInWeight = this.totalInWeights[targetCommunity], targetCommunityTotalOutWeight = this.totalOutWeights[targetCommunity];
      var loops = this.loops[i];
      inDegree += loops;
      outDegree += loops;
      return targetCommunityDegree / M - (outDegree * targetCommunityTotalInWeight + inDegree * targetCommunityTotalOutWeight) * this.resolution / (M * M);
    };
    DirectedLouvainIndex.prototype.deltaWithOwnCommunity = function(i, inDegree, outDegree, targetCommunityDegree, targetCommunity) {
      var M = this.M;
      var targetCommunityTotalInWeight = this.totalInWeights[targetCommunity], targetCommunityTotalOutWeight = this.totalOutWeights[targetCommunity];
      var loops = this.loops[i];
      inDegree += loops;
      outDegree += loops;
      return targetCommunityDegree / M - (outDegree * (targetCommunityTotalInWeight - inDegree) + inDegree * (targetCommunityTotalOutWeight - outDegree)) * this.resolution / (M * M);
    };
    DirectedLouvainIndex.prototype.collect = UndirectedLouvainIndex.prototype.collect;
    DirectedLouvainIndex.prototype.assign = UndirectedLouvainIndex.prototype.assign;
    DirectedLouvainIndex.prototype[INSPECT] = function() {
      var proxy = {};
      Object.defineProperty(proxy, "constructor", {
        value: DirectedLouvainIndex,
        enumerable: false
      });
      proxy.C = this.C;
      proxy.M = this.M;
      proxy.E = this.E;
      proxy.U = this.U;
      proxy.resolution = this.resolution;
      proxy.level = this.level;
      proxy.nodes = this.nodes;
      proxy.starts = this.starts.slice(0, proxy.C + 1);
      var eTruncated = ["neighborhood", "weights"];
      var cTruncated = [
        "counts",
        "offsets",
        "loops",
        "belongings",
        "totalInWeights",
        "totalOutWeights"
      ];
      var self2 = this;
      eTruncated.forEach(function(key) {
        proxy[key] = self2[key].slice(0, proxy.E);
      });
      cTruncated.forEach(function(key) {
        proxy[key] = self2[key].slice(0, proxy.C);
      });
      proxy.unused = this.unused.slice(0, this.U);
      if (this.keepDendrogram) proxy.dendrogram = this.dendrogram;
      else proxy.mapping = this.mapping;
      return proxy;
    };
    exports.UndirectedLouvainIndex = UndirectedLouvainIndex;
    exports.DirectedLouvainIndex = DirectedLouvainIndex;
  }
});

// node_modules/.pnpm/graphology-communities-louvain@1.5.3_graphology-types@0.24.8/node_modules/graphology-communities-louvain/index.js
var require_graphology_communities_louvain = __commonJS({
  "node_modules/.pnpm/graphology-communities-louvain@1.5.3_graphology-types@0.24.8/node_modules/graphology-communities-louvain/index.js"(exports, module2) {
    var resolveDefaults = require_defaults();
    var isGraph = require_is_graph();
    var inferType = require_infer_type();
    var SparseMap = require_sparse_map();
    var SparseQueueSet = require_sparse_queue_set();
    var createRandomIndex = require_random_index().createRandomIndex;
    var indices = require_louvain();
    var UndirectedLouvainIndex = indices.UndirectedLouvainIndex;
    var DirectedLouvainIndex = indices.DirectedLouvainIndex;
    var DEFAULTS = {
      attributes: {
        community: "community",
        weight: "weight"
      },
      fastLocalMoves: true,
      randomWalk: true,
      resolution: 1,
      rng: Math.random,
      weighted: false
    };
    function addWeightToCommunity(map, community, weight) {
      var currentWeight = map.get(community);
      if (typeof currentWeight === "undefined") currentWeight = 0;
      currentWeight += weight;
      map.set(community, currentWeight);
    }
    var EPSILON = 1e-10;
    function tieBreaker(bestCommunity, currentCommunity, targetCommunity, delta, bestDelta) {
      if (Math.abs(delta - bestDelta) < EPSILON) {
        if (bestCommunity === currentCommunity) {
          return false;
        } else {
          return targetCommunity > bestCommunity;
        }
      } else if (delta > bestDelta) {
        return true;
      }
      return false;
    }
    function undirectedLouvain(detailed, graph, options) {
      var index = new UndirectedLouvainIndex(graph, {
        attributes: {
          weight: options.attributes.weight
        },
        keepDendrogram: detailed,
        resolution: options.resolution,
        weighted: options.weighted
      });
      var randomIndex = createRandomIndex(options.rng);
      var moveWasMade = true, localMoveWasMade = true;
      var currentCommunity, targetCommunity;
      var communities = new SparseMap(Float64Array, index.C);
      var queue, start, end, weight, ci, ri, s, i, j, l;
      var degree, targetCommunityDegree;
      var bestCommunity, bestDelta, deltaIsBetter, delta;
      var deltaComputations = 0, nodesVisited = 0, moves = [], localMoves, currentMoves;
      if (options.fastLocalMoves) queue = new SparseQueueSet(index.C);
      while (moveWasMade) {
        l = index.C;
        moveWasMade = false;
        localMoveWasMade = true;
        if (options.fastLocalMoves) {
          currentMoves = 0;
          ri = options.randomWalk ? randomIndex(l) : 0;
          for (s = 0; s < l; s++, ri++) {
            i = ri % l;
            queue.enqueue(i);
          }
          while (queue.size !== 0) {
            i = queue.dequeue();
            nodesVisited++;
            degree = 0;
            communities.clear();
            currentCommunity = index.belongings[i];
            start = index.starts[i];
            end = index.starts[i + 1];
            for (; start < end; start++) {
              j = index.neighborhood[start];
              weight = index.weights[start];
              targetCommunity = index.belongings[j];
              degree += weight;
              addWeightToCommunity(communities, targetCommunity, weight);
            }
            bestDelta = index.fastDeltaWithOwnCommunity(
              i,
              degree,
              communities.get(currentCommunity) || 0,
              currentCommunity
            );
            bestCommunity = currentCommunity;
            for (ci = 0; ci < communities.size; ci++) {
              targetCommunity = communities.dense[ci];
              if (targetCommunity === currentCommunity) continue;
              targetCommunityDegree = communities.vals[ci];
              deltaComputations++;
              delta = index.fastDelta(
                i,
                degree,
                targetCommunityDegree,
                targetCommunity
              );
              deltaIsBetter = tieBreaker(
                bestCommunity,
                currentCommunity,
                targetCommunity,
                delta,
                bestDelta
              );
              if (deltaIsBetter) {
                bestDelta = delta;
                bestCommunity = targetCommunity;
              }
            }
            if (bestDelta < 0) {
              bestCommunity = index.isolate(i, degree);
              if (bestCommunity === currentCommunity) continue;
            } else {
              if (bestCommunity === currentCommunity) {
                continue;
              } else {
                index.move(i, degree, bestCommunity);
              }
            }
            moveWasMade = true;
            currentMoves++;
            start = index.starts[i];
            end = index.starts[i + 1];
            for (; start < end; start++) {
              j = index.neighborhood[start];
              targetCommunity = index.belongings[j];
              if (targetCommunity !== bestCommunity) queue.enqueue(j);
            }
          }
          moves.push(currentMoves);
        } else {
          localMoves = [];
          moves.push(localMoves);
          while (localMoveWasMade) {
            localMoveWasMade = false;
            currentMoves = 0;
            ri = options.randomWalk ? randomIndex(l) : 0;
            for (s = 0; s < l; s++, ri++) {
              i = ri % l;
              nodesVisited++;
              degree = 0;
              communities.clear();
              currentCommunity = index.belongings[i];
              start = index.starts[i];
              end = index.starts[i + 1];
              for (; start < end; start++) {
                j = index.neighborhood[start];
                weight = index.weights[start];
                targetCommunity = index.belongings[j];
                degree += weight;
                addWeightToCommunity(communities, targetCommunity, weight);
              }
              bestDelta = index.fastDeltaWithOwnCommunity(
                i,
                degree,
                communities.get(currentCommunity) || 0,
                currentCommunity
              );
              bestCommunity = currentCommunity;
              for (ci = 0; ci < communities.size; ci++) {
                targetCommunity = communities.dense[ci];
                if (targetCommunity === currentCommunity) continue;
                targetCommunityDegree = communities.vals[ci];
                deltaComputations++;
                delta = index.fastDelta(
                  i,
                  degree,
                  targetCommunityDegree,
                  targetCommunity
                );
                deltaIsBetter = tieBreaker(
                  bestCommunity,
                  currentCommunity,
                  targetCommunity,
                  delta,
                  bestDelta
                );
                if (deltaIsBetter) {
                  bestDelta = delta;
                  bestCommunity = targetCommunity;
                }
              }
              if (bestDelta < 0) {
                bestCommunity = index.isolate(i, degree);
                if (bestCommunity === currentCommunity) continue;
              } else {
                if (bestCommunity === currentCommunity) {
                  continue;
                } else {
                  index.move(i, degree, bestCommunity);
                }
              }
              localMoveWasMade = true;
              currentMoves++;
            }
            localMoves.push(currentMoves);
            moveWasMade = localMoveWasMade || moveWasMade;
          }
        }
        if (moveWasMade) index.zoomOut();
      }
      var results = {
        index,
        deltaComputations,
        nodesVisited,
        moves
      };
      return results;
    }
    function directedLouvain(detailed, graph, options) {
      var index = new DirectedLouvainIndex(graph, {
        attributes: {
          weight: options.attributes.weight
        },
        keepDendrogram: detailed,
        resolution: options.resolution,
        weighted: options.weighted
      });
      var randomIndex = createRandomIndex(options.rng);
      var moveWasMade = true, localMoveWasMade = true;
      var currentCommunity, targetCommunity;
      var communities = new SparseMap(Float64Array, index.C);
      var queue, start, end, offset, out, weight, ci, ri, s, i, j, l;
      var inDegree, outDegree, targetCommunityDegree;
      var bestCommunity, bestDelta, deltaIsBetter, delta;
      var deltaComputations = 0, nodesVisited = 0, moves = [], localMoves, currentMoves;
      if (options.fastLocalMoves) queue = new SparseQueueSet(index.C);
      while (moveWasMade) {
        l = index.C;
        moveWasMade = false;
        localMoveWasMade = true;
        if (options.fastLocalMoves) {
          currentMoves = 0;
          ri = options.randomWalk ? randomIndex(l) : 0;
          for (s = 0; s < l; s++, ri++) {
            i = ri % l;
            queue.enqueue(i);
          }
          while (queue.size !== 0) {
            i = queue.dequeue();
            nodesVisited++;
            inDegree = 0;
            outDegree = 0;
            communities.clear();
            currentCommunity = index.belongings[i];
            start = index.starts[i];
            end = index.starts[i + 1];
            offset = index.offsets[i];
            for (; start < end; start++) {
              out = start < offset;
              j = index.neighborhood[start];
              weight = index.weights[start];
              targetCommunity = index.belongings[j];
              if (out) outDegree += weight;
              else inDegree += weight;
              addWeightToCommunity(communities, targetCommunity, weight);
            }
            bestDelta = index.deltaWithOwnCommunity(
              i,
              inDegree,
              outDegree,
              communities.get(currentCommunity) || 0,
              currentCommunity
            );
            bestCommunity = currentCommunity;
            for (ci = 0; ci < communities.size; ci++) {
              targetCommunity = communities.dense[ci];
              if (targetCommunity === currentCommunity) continue;
              targetCommunityDegree = communities.vals[ci];
              deltaComputations++;
              delta = index.delta(
                i,
                inDegree,
                outDegree,
                targetCommunityDegree,
                targetCommunity
              );
              deltaIsBetter = tieBreaker(
                bestCommunity,
                currentCommunity,
                targetCommunity,
                delta,
                bestDelta
              );
              if (deltaIsBetter) {
                bestDelta = delta;
                bestCommunity = targetCommunity;
              }
            }
            if (bestDelta < 0) {
              bestCommunity = index.isolate(i, inDegree, outDegree);
              if (bestCommunity === currentCommunity) continue;
            } else {
              if (bestCommunity === currentCommunity) {
                continue;
              } else {
                index.move(i, inDegree, outDegree, bestCommunity);
              }
            }
            moveWasMade = true;
            currentMoves++;
            start = index.starts[i];
            end = index.starts[i + 1];
            for (; start < end; start++) {
              j = index.neighborhood[start];
              targetCommunity = index.belongings[j];
              if (targetCommunity !== bestCommunity) queue.enqueue(j);
            }
          }
          moves.push(currentMoves);
        } else {
          localMoves = [];
          moves.push(localMoves);
          while (localMoveWasMade) {
            localMoveWasMade = false;
            currentMoves = 0;
            ri = options.randomWalk ? randomIndex(l) : 0;
            for (s = 0; s < l; s++, ri++) {
              i = ri % l;
              nodesVisited++;
              inDegree = 0;
              outDegree = 0;
              communities.clear();
              currentCommunity = index.belongings[i];
              start = index.starts[i];
              end = index.starts[i + 1];
              offset = index.offsets[i];
              for (; start < end; start++) {
                out = start < offset;
                j = index.neighborhood[start];
                weight = index.weights[start];
                targetCommunity = index.belongings[j];
                if (out) outDegree += weight;
                else inDegree += weight;
                addWeightToCommunity(communities, targetCommunity, weight);
              }
              bestDelta = index.deltaWithOwnCommunity(
                i,
                inDegree,
                outDegree,
                communities.get(currentCommunity) || 0,
                currentCommunity
              );
              bestCommunity = currentCommunity;
              for (ci = 0; ci < communities.size; ci++) {
                targetCommunity = communities.dense[ci];
                if (targetCommunity === currentCommunity) continue;
                targetCommunityDegree = communities.vals[ci];
                deltaComputations++;
                delta = index.delta(
                  i,
                  inDegree,
                  outDegree,
                  targetCommunityDegree,
                  targetCommunity
                );
                deltaIsBetter = tieBreaker(
                  bestCommunity,
                  currentCommunity,
                  targetCommunity,
                  delta,
                  bestDelta
                );
                if (deltaIsBetter) {
                  bestDelta = delta;
                  bestCommunity = targetCommunity;
                }
              }
              if (bestDelta < 0) {
                bestCommunity = index.isolate(i, inDegree, outDegree);
                if (bestCommunity === currentCommunity) continue;
              } else {
                if (bestCommunity === currentCommunity) {
                  continue;
                } else {
                  index.move(i, inDegree, outDegree, bestCommunity);
                }
              }
              localMoveWasMade = true;
              currentMoves++;
            }
            localMoves.push(currentMoves);
            moveWasMade = localMoveWasMade || moveWasMade;
          }
        }
        if (moveWasMade) index.zoomOut();
      }
      var results = {
        index,
        deltaComputations,
        nodesVisited,
        moves
      };
      return results;
    }
    function louvain2(assign2, detailed, graph, options) {
      if (!isGraph(graph))
        throw new Error(
          "graphology-communities-louvain: the given graph is not a valid graphology instance."
        );
      var type = inferType(graph);
      if (type === "mixed")
        throw new Error(
          "graphology-communities-louvain: cannot run the algorithm on a true mixed graph."
        );
      options = resolveDefaults(options, DEFAULTS);
      var c = 0;
      if (graph.size === 0) {
        if (assign2) {
          graph.forEachNode(function(node) {
            graph.setNodeAttribute(node, options.attributes.communities, c++);
          });
          return;
        }
        var communities = {};
        graph.forEachNode(function(node) {
          communities[node] = c++;
        });
        if (!detailed) return communities;
        return {
          communities,
          count: graph.order,
          deltaComputations: 0,
          dendrogram: null,
          level: 0,
          modularity: NaN,
          moves: null,
          nodesVisited: 0,
          resolution: options.resolution
        };
      }
      var fn2 = type === "undirected" ? undirectedLouvain : directedLouvain;
      var results = fn2(detailed, graph, options);
      var index = results.index;
      if (!detailed) {
        if (assign2) {
          index.assign(options.attributes.community);
          return;
        }
        return index.collect();
      }
      var output = {
        count: index.C,
        deltaComputations: results.deltaComputations,
        dendrogram: index.dendrogram,
        level: index.level,
        modularity: index.modularity(),
        moves: results.moves,
        nodesVisited: results.nodesVisited,
        resolution: options.resolution
      };
      if (assign2) {
        index.assign(options.attributes.community);
        return output;
      }
      output.communities = index.collect();
      return output;
    }
    var fn = louvain2.bind(null, false, false);
    fn.assign = louvain2.bind(null, true, false);
    fn.detailed = louvain2.bind(null, false, true);
    fn.defaults = DEFAULTS;
    module2.exports = fn;
  }
});

// node_modules/.pnpm/graphology-metrics@1.18.2_graphology-types@0.24.8/node_modules/graphology-metrics/centrality/hits.js
var require_hits = __commonJS({
  "node_modules/.pnpm/graphology-metrics@1.18.2_graphology-types@0.24.8/node_modules/graphology-metrics/centrality/hits.js"(exports, module2) {
    var resolveDefaults = require_defaults();
    var isGraph = require_is_graph();
    var DEFAULTS = {
      attributes: {
        authority: "authority",
        hub: "hub",
        weight: "weight"
      },
      maxIterations: 100,
      normalize: true,
      tolerance: 1e-8
    };
    function dict(keys, value) {
      var o = /* @__PURE__ */ Object.create(null);
      var i, l;
      for (i = 0, l = keys.length; i < l; i++) o[keys[i]] = value;
      return o;
    }
    function sum2(o) {
      var nb = 0;
      for (var k in o) nb += o[k];
      return nb;
    }
    function hits2(assign2, graph, options) {
      if (!isGraph(graph))
        throw new Error(
          "graphology-hits: the given graph is not a valid graphology instance."
        );
      if (graph.multi)
        throw new Error(
          "graphology-hits: the HITS algorithm does not work with MultiGraphs."
        );
      options = resolveDefaults(options, DEFAULTS);
      var order = graph.order, size6 = graph.size, nodes = graph.nodes(), edges = graph.edges(), hubs = dict(nodes, 1 / order), weights = {}, converged = false, lastHubs, authorities;
      var node, neighbor, edge, iteration, maxAuthority, maxHub, error, s, i, j, m;
      for (i = 0; i < size6; i++) {
        edge = edges[i];
        weights[edge] = graph.getEdgeAttribute(edge, options.attributes.weight) || 1;
      }
      for (iteration = 0; iteration < options.maxIterations; iteration++) {
        lastHubs = hubs;
        hubs = dict(nodes, 0);
        authorities = dict(nodes, 0);
        maxHub = 0;
        maxAuthority = 0;
        for (i = 0; i < order; i++) {
          node = nodes[i];
          edges = graph.outEdges(node).concat(graph.undirectedEdges(node));
          for (j = 0, m = edges.length; j < m; j++) {
            edge = edges[j];
            neighbor = graph.opposite(node, edge);
            authorities[neighbor] += lastHubs[node] * weights[edge];
            if (authorities[neighbor] > maxAuthority)
              maxAuthority = authorities[neighbor];
          }
        }
        for (i = 0; i < order; i++) {
          node = nodes[i];
          edges = graph.outEdges(node).concat(graph.undirectedEdges(node));
          for (j = 0, m = edges.length; j < m; j++) {
            edge = edges[j];
            neighbor = graph.opposite(node, edge);
            hubs[node] += authorities[neighbor] * weights[edge];
            if (hubs[neighbor] > maxHub) maxHub = hubs[neighbor];
          }
        }
        s = 1 / maxHub;
        for (node in hubs) hubs[node] *= s;
        s = 1 / maxAuthority;
        for (node in authorities) authorities[node] *= s;
        error = 0;
        for (node in hubs) error += Math.abs(hubs[node] - lastHubs[node]);
        if (error < options.tolerance) {
          converged = true;
          break;
        }
      }
      if (options.normalize) {
        s = 1 / sum2(authorities);
        for (node in authorities) authorities[node] *= s;
        s = 1 / sum2(hubs);
        for (node in hubs) hubs[node] *= s;
      }
      if (assign2) {
        for (i = 0; i < order; i++) {
          node = nodes[i];
          graph.setNodeAttribute(
            node,
            options.attributes.authority,
            authorities[node]
          );
          graph.setNodeAttribute(node, options.attributes.hub, hubs[node]);
        }
      }
      return { converged, hubs, authorities };
    }
    var main = hits2.bind(null, false);
    main.assign = hits2.bind(null, true);
    module2.exports = main;
  }
});

// node_modules/.pnpm/sbd@1.0.19/node_modules/sbd/lib/sanitize-html-browser.js
var require_sanitize_html_browser = __commonJS({
  "node_modules/.pnpm/sbd@1.0.19/node_modules/sbd/lib/sanitize-html-browser.js"(exports, module2) {
    module2.exports = function sanitizeHtml(text2, opts) {
      if ((typeof text2 == "string" || text2 instanceof String) && typeof document !== "undefined") {
        var $div = document.createElement("DIV");
        $div.innerHTML = text2;
        text2 = ($div.textContent || "").trim();
      } else if (typeof text2 === "object" && text2.textContent) {
        text2 = (text2.textContent || "").trim();
      }
      return text2;
    };
  }
});

// node_modules/.pnpm/sbd@1.0.19/node_modules/sbd/lib/stringHelper.js
var require_stringHelper = __commonJS({
  "node_modules/.pnpm/sbd@1.0.19/node_modules/sbd/lib/stringHelper.js"(exports) {
    exports.endsWithChar = function ends_with_char(word, c) {
      if (c.length > 1) {
        return c.indexOf(word.slice(-1)) > -1;
      }
      return word.slice(-1) === c;
    };
    exports.endsWith = function ends_with(word, end) {
      return word.slice(word.length - end.length) === end;
    };
  }
});

// node_modules/.pnpm/sbd@1.0.19/node_modules/sbd/lib/Match.js
var require_Match = __commonJS({
  "node_modules/.pnpm/sbd@1.0.19/node_modules/sbd/lib/Match.js"(exports) {
    var abbreviations;
    var englishAbbreviations = [
      "al",
      "adj",
      "assn",
      "Ave",
      "BSc",
      "MSc",
      "Cell",
      "Ch",
      "Co",
      "cc",
      "Corp",
      "Dem",
      "Dept",
      "ed",
      "eg",
      "Eq",
      "Eqs",
      "est",
      "est",
      "etc",
      "Ex",
      "ext",
      // + number?
      "Fig",
      "fig",
      "Figs",
      "figs",
      "i.e",
      "ie",
      "Inc",
      "inc",
      "Jan",
      "Feb",
      "Mar",
      "Apr",
      "Jun",
      "Jul",
      "Aug",
      "Sep",
      "Sept",
      "Oct",
      "Nov",
      "Dec",
      "jr",
      "mi",
      "Miss",
      "Mrs",
      "Mr",
      "Ms",
      "Mol",
      "mt",
      "mts",
      "no",
      "Nos",
      "PhD",
      "MD",
      "BA",
      "MA",
      "MM",
      "pl",
      "pop",
      "pp",
      "Prof",
      "Dr",
      "pt",
      "Ref",
      "Refs",
      "Rep",
      "repr",
      "rev",
      "Sec",
      "Secs",
      "Sgt",
      "Col",
      "Gen",
      "Rep",
      "Sen",
      "Gov",
      "Lt",
      "Maj",
      "Capt",
      "St",
      "Sr",
      "sr",
      "Jr",
      "jr",
      "Rev",
      "Sun",
      "Mon",
      "Tu",
      "Tue",
      "Tues",
      "Wed",
      "Th",
      "Thu",
      "Thur",
      "Thurs",
      "Fri",
      "Sat",
      "trans",
      "Univ",
      "Viz",
      "Vol",
      "vs",
      "v"
    ];
    exports.setAbbreviations = function(abbr) {
      if (abbr) {
        abbreviations = abbr;
      } else {
        abbreviations = englishAbbreviations;
      }
    };
    var isCapitalized = exports.isCapitalized = function(str) {
      return /^[A-Z][a-z].*/.test(str) || isNumber(str);
    };
    exports.isSentenceStarter = function(str) {
      return isCapitalized(str) || /``|"|'/.test(str.substring(0, 2));
    };
    exports.isCommonAbbreviation = function(str) {
      var noSymbols = str.replace(/[-'`~!@#$%^&*()_|+=?;:'",.<>\{\}\[\]\\\/]/gi, "");
      return ~abbreviations.indexOf(noSymbols);
    };
    exports.isTimeAbbreviation = function(word, next) {
      if (word === "a.m." || word === "p.m.") {
        var tmp = next.replace(/\W+/g, "").slice(-3).toLowerCase();
        if (tmp === "day") {
          return true;
        }
      }
      return false;
    };
    exports.isDottedAbbreviation = function(word) {
      var matches = word.replace(/[\(\)\[\]\{\}]/g, "").match(/(.\.)*/);
      return matches && matches[0].length > 0;
    };
    exports.isCustomAbbreviation = function(str) {
      if (str.length <= 3) {
        return true;
      }
      return isCapitalized(str);
    };
    exports.isNameAbbreviation = function(wordCount, words) {
      if (words.length > 0) {
        if (wordCount < 5 && words[0].length < 6 && isCapitalized(words[0])) {
          return true;
        }
        var capitalized = words.filter(function(str) {
          return /[A-Z]/.test(str.charAt(0));
        });
        return capitalized.length >= 3;
      }
      return false;
    };
    var isNumber = exports.isNumber = function(str, dotPos) {
      if (dotPos) {
        str = str.slice(dotPos - 1, dotPos + 2);
      }
      return !isNaN(str);
    };
    exports.isPhoneNr = function(str) {
      return str.match(/^(?:(?:\+?1\s*(?:[.-]\s*)?)?(?:\(\s*([2-9]1[02-9]|[2-9][02-8]1|[2-9][02-8][02-9])\s*\)|([2-9]1[02-9]|[2-9][02-8]1|[2-9][02-8][02-9]))\s*(?:[.-]\s*)?)?([2-9]1[02-9]|[2-9][02-9]1|[2-9][02-9]{2})\s*(?:[.-]\s*)?([0-9]{4})(?:\s*(?:#|x\.?|ext\.?|extension)\s*(\d+))?$/);
    };
    exports.isURL = function(str) {
      return str.match(/[-a-zA-Z0-9@:%._\+~#=]{2,256}\.[a-z]{2,6}\b([-a-zA-Z0-9@:%_\+.~#?&//=]*)/);
    };
    exports.isConcatenated = function(word) {
      var i = 0;
      if ((i = word.indexOf(".")) > -1 || (i = word.indexOf("!")) > -1 || (i = word.indexOf("?")) > -1) {
        var c = word.charAt(i + 1);
        if (c.match(/[a-zA-Z].*/)) {
          return [word.slice(0, i), word.slice(i + 1)];
        }
      }
      return false;
    };
    exports.isBoundaryChar = function(word) {
      return word === "." || word === "!" || word === "?";
    };
  }
});

// node_modules/.pnpm/sbd@1.0.19/node_modules/sbd/lib/tokenizer.js
var require_tokenizer = __commonJS({
  "node_modules/.pnpm/sbd@1.0.19/node_modules/sbd/lib/tokenizer.js"(exports) {
    var sanitizeHtml = require_sanitize_html_browser();
    var stringHelper = require_stringHelper();
    var Match = require_Match();
    var newline_placeholder = " @~@ ";
    var newline_placeholder_t = newline_placeholder.trim();
    var whiteSpaceCheck = new RegExp("\\S", "");
    var addNewLineBoundaries = new RegExp("\\n+|[-#=_+*]{4,}", "g");
    var splitIntoWords = new RegExp("\\S+|\\n", "g");
    exports.sentences = function(text2, user_options) {
      if (!text2 || typeof text2 !== "string" || !text2.length) {
        return [];
      }
      if (!whiteSpaceCheck.test(text2)) {
        return [];
      }
      var options = {
        "newline_boundaries": false,
        "html_boundaries": false,
        "html_boundaries_tags": ["p", "div", "ul", "ol"],
        "sanitize": false,
        "allowed_tags": false,
        "preserve_whitespace": false,
        "abbreviations": null
      };
      if (typeof user_options === "boolean") {
        options.newline_boundaries = true;
      } else {
        for (var k in user_options) {
          options[k] = user_options[k];
        }
      }
      Match.setAbbreviations(options.abbreviations);
      if (options.newline_boundaries) {
        text2 = text2.replace(addNewLineBoundaries, newline_placeholder);
      }
      if (options.html_boundaries) {
        var html_boundaries_regexp = "(<br\\s*\\/?>|<\\/(" + options.html_boundaries_tags.join("|") + ")>)";
        var re = new RegExp(html_boundaries_regexp, "g");
        text2 = text2.replace(re, "$1" + newline_placeholder);
      }
      if (options.sanitize || options.allowed_tags) {
        if (!options.allowed_tags) {
          options.allowed_tags = [""];
        }
        text2 = sanitizeHtml(text2, { "allowedTags": options.allowed_tags });
      }
      var words;
      var tokens;
      if (options.preserve_whitespace) {
        tokens = text2.split(/(<br\s*\/?>|\S+|\n+)/);
        words = tokens.filter(function(token, ii) {
          return ii % 2;
        });
      } else {
        words = text2.trim().match(splitIntoWords);
      }
      var wordCount = 0;
      var index = 0;
      var temp = [];
      var sentences = [];
      var current = [];
      if (!words || !words.length) {
        return [];
      }
      for (var i = 0, L = words.length; i < L; i++) {
        wordCount++;
        current.push(words[i]);
        if (~words[i].indexOf(",")) {
          wordCount = 0;
        }
        if (Match.isBoundaryChar(words[i]) || stringHelper.endsWithChar(words[i], "?!") || words[i] === newline_placeholder_t) {
          if ((options.newline_boundaries || options.html_boundaries) && words[i] === newline_placeholder_t) {
            current.pop();
          }
          sentences.push(current);
          wordCount = 0;
          current = [];
          continue;
        }
        if (stringHelper.endsWithChar(words[i], '"') || stringHelper.endsWithChar(words[i], "\u201D")) {
          words[i] = words[i].slice(0, -1);
        }
        if (stringHelper.endsWithChar(words[i], ".")) {
          if (i + 1 < L) {
            if (words[i].length === 2 && isNaN(words[i].charAt(0))) {
              continue;
            }
            if (Match.isCommonAbbreviation(words[i])) {
              continue;
            }
            if (Match.isSentenceStarter(words[i + 1])) {
              if (Match.isTimeAbbreviation(words[i], words[i + 1])) {
                continue;
              }
              if (Match.isNameAbbreviation(wordCount, words.slice(i, 6))) {
                continue;
              }
              if (Match.isNumber(words[i + 1])) {
                if (Match.isCustomAbbreviation(words[i])) {
                  continue;
                }
              }
            } else {
              if (stringHelper.endsWith(words[i], "..")) {
                continue;
              }
              if (Match.isDottedAbbreviation(words[i])) {
                continue;
              }
              if (Match.isNameAbbreviation(wordCount, words.slice(i, 5))) {
                continue;
              }
            }
          }
          sentences.push(current);
          current = [];
          wordCount = 0;
          continue;
        }
        if ((index = words[i].indexOf(".")) > -1) {
          if (Match.isNumber(words[i], index)) {
            continue;
          }
          if (Match.isDottedAbbreviation(words[i])) {
            continue;
          }
          if (Match.isURL(words[i]) || Match.isPhoneNr(words[i])) {
            continue;
          }
        }
        if (temp = Match.isConcatenated(words[i])) {
          current.pop();
          current.push(temp[0]);
          sentences.push(current);
          current = [];
          wordCount = 0;
          current.push(temp[1]);
        }
      }
      if (current.length) {
        sentences.push(current);
      }
      sentences = sentences.filter(function(s) {
        return s.length > 0;
      });
      var result = sentences.slice(1).reduce(function(out, sentence) {
        var lastSentence = out[out.length - 1];
        if (lastSentence.length === 1 && /^.{1,2}[.]$/.test(lastSentence[0])) {
          if (!/[.]/.test(sentence[0])) {
            out.pop();
            out.push(lastSentence.concat(sentence));
            return out;
          }
        }
        out.push(sentence);
        return out;
      }, [sentences[0]]);
      return result.map(function(sentence, ii) {
        if (options.preserve_whitespace && !options.newline_boundaries && !options.html_boundaries) {
          var tokenCount = sentence.length * 2;
          if (ii === 0) {
            tokenCount += 1;
          }
          return tokens.splice(0, tokenCount).join("");
        }
        return sentence.join(" ");
      });
    };
  }
});

// node_modules/.pnpm/wink-nlp@1.14.3/node_modules/wink-nlp/utilities/similarity.js
var require_similarity = __commonJS({
  "node_modules/.pnpm/wink-nlp@1.14.3/node_modules/wink-nlp/utilities/similarity.js"(exports, module2) {
    var similarity2 = /* @__PURE__ */ Object.create(null);
    similarity2.bow = /* @__PURE__ */ Object.create(null);
    similarity2.set = /* @__PURE__ */ Object.create(null);
    similarity2.bow.cosine = function(bowA, bowB) {
      var ab = /* @__PURE__ */ Object.create(null);
      var ba = /* @__PURE__ */ Object.create(null);
      var ss;
      var w;
      for (w in bowA) {
        ab[w] = bowA[w];
        ba[w] = 0;
      }
      for (w in bowB) {
        ba[w] = bowB[w];
        ab[w] = ab[w] || 0;
      }
      var sa2 = 0, saxb = 0, sb2 = 0, va, vb;
      for (w in ab) {
        va = ab[w];
        vb = ba[w];
        sa2 += va * va;
        sb2 += vb * vb;
        saxb += va * vb;
      }
      ss = sa2 && sb2 ? (
        // Compute cosine if both of them are non-zero.
        +(saxb / (Math.sqrt(sa2) * Math.sqrt(sb2))).toFixed(6)
      ) : (
        // If one of them is 0 means **0** ss otherwise a ss of **1**.
        !sa2 ^ !sb2 ? 0 : 1
      );
      return ss;
    };
    similarity2.set.tversky = function(setA, setB, alpha, beta) {
      if (setA.size === 0 && setB.size === 0) return 1;
      if (setA.size === 0 || setB.size === 0) return 0;
      var a, b;
      var intersectSize = 0;
      var saDIFFsb, sbDIFFsa;
      var ss;
      a = isNaN(alpha) ? 0.5 : +alpha;
      b = isNaN(beta) ? 0.5 : +beta;
      if (a < 0 || b < 0) {
        throw Error("wink-nlp: tversky requires aplha & beta to be positive numbers.");
      }
      if (setA.size < setB.size) {
        setA.forEach(function(element2) {
          if (setB.has(element2)) intersectSize += 1;
        });
      } else {
        setB.forEach(function(element2) {
          if (setA.has(element2)) intersectSize += 1;
        });
      }
      saDIFFsb = setA.size - intersectSize;
      sbDIFFsa = setB.size - intersectSize;
      ss = intersectSize / (intersectSize + a * saDIFFsb + b * sbDIFFsa);
      return +ss.toFixed(6);
    };
    similarity2.set.oo = function(setA, setB) {
      if (setA.size === 0 && setB.size === 0) return 1;
      if (setA.size === 0 || setB.size === 0) return 0;
      var intersectSize = 0;
      if (setA.size < setB.size) {
        setA.forEach(function(element2) {
          if (setB.has(element2)) intersectSize += 1;
        });
      } else {
        setB.forEach(function(element2) {
          if (setA.has(element2)) intersectSize += 1;
        });
      }
      return +(intersectSize / Math.sqrt(setA.size * setB.size)).toFixed(6);
    };
    module2.exports = similarity2;
  }
});

// src/main.ts
var main_exports = {};
__export(main_exports, {
  default: () => GraphAnalysisPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian9 = require("obsidian");

// node_modules/.pnpm/obsidian-community-lib@1.2.0/node_modules/obsidian-community-lib/dist/utils.js
var feather = __toESM(require_feather());
var import_obsidian = require("obsidian");
async function wait(delay) {
  return new Promise((resolve) => setTimeout(resolve, delay));
}
async function copy(content, success = () => new import_obsidian.Notice("Copied to clipboard"), failure = (reason) => {
  new import_obsidian.Notice("Could not copy to clipboard");
  console.log({ reason });
}) {
  await navigator.clipboard.writeText(content).then(success, failure);
}
var isInVault = (app, noteName, sourcePath = "") => !!app.metadataCache.getFirstLinkpathDest(noteName, sourcePath);
function hoverPreview(event, view, to) {
  const targetEl = event.target;
  view.app.workspace.trigger("hover-link", {
    event,
    source: view.getViewType(),
    hoverParent: view,
    targetEl,
    linktext: to
  });
}
async function createNewMDNote(app, newName, currFilePath = "") {
  const newFileFolder = app.fileManager.getNewFileParent(currFilePath).path;
  const newFilePath = (0, import_obsidian.normalizePath)(`${newFileFolder}${newFileFolder === "/" ? "" : "/"}${addMD(newName)}`);
  return await app.vault.create(newFilePath, "");
}
var addMD = (noteName) => {
  let withMD = noteName.slice();
  if (!withMD.endsWith(".md")) {
    withMD += ".md";
  }
  return withMD;
};
function isLinked(resolvedLinks, from, to, directed = true) {
  var _a, _b;
  if (!from.endsWith(".md")) {
    from += ".md";
  }
  if (!to.endsWith(".md")) {
    to += ".md";
  }
  const fromTo = (_a = resolvedLinks[from]) === null || _a === void 0 ? void 0 : _a.hasOwnProperty(to);
  if (!fromTo && !directed) {
    const toFrom = (_b = resolvedLinks[to]) === null || _b === void 0 ? void 0 : _b.hasOwnProperty(from);
    return toFrom;
  } else
    return fromTo;
}
async function openView(app, viewType, viewClass, side = "right") {
  let leaf = null;
  for (leaf of app.workspace.getLeavesOfType(viewType)) {
    if (leaf.view instanceof viewClass) {
      return leaf.view;
    }
    await leaf.setViewState({ type: "empty" });
    break;
  }
  leaf = (leaf !== null && leaf !== void 0 ? leaf : side === "right") ? app.workspace.getRightLeaf(false) : app.workspace.getLeftLeaf(false);
  await leaf.setViewState({
    type: viewType,
    active: true
  });
  return leaf.view;
}

// src/AnalysisView.ts
var import_obsidian5 = require("obsidian");

// src/Constants.ts
var DEFAULT_SETTINGS = {
  noInfinity: true,
  noZero: true,
  allFileExtensions: true,
  showImgThumbnails: true,
  addUnresolved: true,
  coTags: true,
  defaultSubtypeType: "Co-Citations",
  debugMode: false,
  superDebugMode: false,
  exclusionRegex: "",
  exclusionTags: [],
  algsToShow: [
    "Adamic Adar",
    "Jaccard",
    "Otsuka-Chiai",
    "Co-Citations",
    "Label Propagation"
  ]
};
var DECIMALS = 4;
var VIEW_TYPE_GRAPH_ANALYSIS = "graph-analysis";
var LINKED = "GA-linked";
var NOT_LINKED = "GA-not-linked";
var MEASURE = "GA-measure";
var NODE = "GA-node";
var ICON = "GA-icon";
var ANALYSIS_TYPES = [
  {
    anl: "Co-Citations",
    subtype: "Co-Citations",
    desc: "See which of your notes are referenced together most often.",
    global: false,
    nlp: false
  },
  {
    anl: "Centrality",
    subtype: "HITS",
    desc: "An authority has lots of links coming in\nA hub has lots of links going out.",
    global: true,
    nlp: false
  },
  {
    anl: "Link Prediction",
    subtype: "Adamic Adar",
    desc: "Based on the structure of your graph, this alg predicts which notes _should_ be linked to the current note.",
    global: false,
    nlp: false
  },
  // {
  //   anl: 'Link Prediction',
  //   subtype: 'Common Neighbours',
  //   desc: 'Tells you how many notes are linked to the current (active) note, and the note in the table.\nHover over a cell in the table to see a list of common neighbours',
  //   global: false,
  //   nlp: false,
  // },
  {
    anl: "Similarity",
    subtype: "Jaccard",
    desc: "Based on the structure of your graph, this alg predicts which notes are most similar to the current note.\n\nIt shows the ratio of the numbers of neighbours two notes have in common, to the total number of neighbours they each have.\n\n'\u{1F517}' means that this note is linked to the group name.",
    global: false,
    nlp: false
  },
  {
    anl: "Similarity",
    subtype: "Overlap",
    desc: "<No description given yet>",
    global: false,
    nlp: false
  },
  {
    anl: "Community Detection",
    subtype: "Label Propagation",
    desc: "Start by giving each node a unique label (its own name). Then, look at each node's neighbours, and change it's label to the most common among it's neighbours. Repeat this process `iterations` number of times. Show the nodes grouped by the last label they had.\n\n'\u{1F517}' means that this note is linked to the group name.",
    global: true,
    nlp: false
  },
  {
    anl: "Community Detection",
    subtype: "Louvain",
    desc: "Show the Louvain community that the current note is in.\n\n'\u{1F517}' means that this note is linked to the group name.",
    global: false,
    nlp: false
  },
  {
    anl: "Community Detection",
    subtype: "Clustering Coefficient",
    desc: "Gives the likelihood that a nodes _neighbours_ are connected to each other.",
    global: true,
    nlp: false
  },
  {
    anl: "NLP",
    subtype: "BoW",
    desc: "Split a note into its words, count how many times each word appears, and use that to compare similarity between notes.",
    global: false,
    nlp: true
  },
  // {
  //   anl: 'NLP',
  //   subtype: 'Tversky',
  //   desc: '',
  //   global: false,
  //   nlp: true,
  // },
  {
    anl: "NLP",
    subtype: "Otsuka-Chiai",
    desc: 'Returns the "Otsuka-Chiai" similarity between the current note and every other note.',
    global: false,
    nlp: true
  },
  {
    anl: "NLP",
    subtype: "Sentiment",
    desc: "Gives the sentiment of every note. Positive \u2192 higher sentiment.",
    global: true,
    nlp: true
  }
];
var IMG_EXTENSIONS = ["png", "jpg", "jpeg", "svg", "gif", "webp"];
var iconSVG = `<path fill="currentColor" stroke="currentColor" d="M88.8,67.5c-3,0-5.7,1.2-7.7,3.1l-12.2-7c0.7-1.9,1.2-3.9,1.2-6.1C70,47.8,62.2,40,52.5,40c-1.3,0-2.6,0.2-3.8,0.5l-5-10.8
c2.3-2.1,3.8-5,3.8-8.4c0-6.2-5-11.3-11.3-11.3S25,15,25,21.3s5,11.3,11.3,11.3c0.1,0,0.3,0,0.4,0l5.2,11.2
c-4.2,3.2-6.9,8.2-6.9,13.8C35,67.2,42.8,75,52.5,75c4.8,0,9.2-1.9,12.3-5.1l12.8,7.3c-0.1,0.5-0.2,1-0.2,1.5
c0,6.2,5,11.3,11.3,11.3S100,85,100,78.7S95,67.5,88.8,67.5z M36.3,25c-2.1,0-3.8-1.7-3.8-3.8s1.7-3.8,3.8-3.8s3.8,1.7,3.8,3.8
S38.3,25,36.3,25z M52.5,67.5c-5.5,0-10-4.5-10-10s4.5-10,10-10s10,4.5,10,10S58,67.5,52.5,67.5z M88.8,82.5c-2.1,0-3.8-1.7-3.8-3.8
s1.7-3.8,3.8-3.8s3.8,1.7,3.8,3.8S90.8,82.5,88.8,82.5z M80.3,41.7l-3-4l-7.5,5.6l3,4L80.3,41.7z M90,40c5.5,0,10-4.5,10-10
s-4.5-10-10-10s-10,4.5-10,10S84.5,40,90,40z M23.8,60h7.5v-5h-7.5V60z M10,47.5c-5.5,0-10,4.5-10,10s4.5,10,10,10s10-4.5,10-10
S15.5,47.5,10,47.5z"/>`;

// node_modules/.pnpm/svelte@4.2.20/node_modules/svelte/src/runtime/internal/utils.js
function noop() {
}
function assign(tar, src) {
  for (const k in src) tar[k] = src[k];
  return (
    /** @type {T & S} */
    tar
  );
}
function is_promise(value) {
  return !!value && (typeof value === "object" || typeof value === "function") && typeof /** @type {any} */
  value.then === "function";
}
function run(fn) {
  return fn();
}
function blank_object() {
  return /* @__PURE__ */ Object.create(null);
}
function run_all(fns) {
  fns.forEach(run);
}
function is_function(thing) {
  return typeof thing === "function";
}
function safe_not_equal(a, b) {
  return a != a ? b == b : a !== b || a && typeof a === "object" || typeof a === "function";
}
var src_url_equal_anchor;
function src_url_equal(element_src, url) {
  if (element_src === url) return true;
  if (!src_url_equal_anchor) {
    src_url_equal_anchor = document.createElement("a");
  }
  src_url_equal_anchor.href = url;
  return element_src === src_url_equal_anchor.href;
}
function is_empty(obj) {
  return Object.keys(obj).length === 0;
}
function create_slot(definition, ctx, $$scope, fn) {
  if (definition) {
    const slot_ctx = get_slot_context(definition, ctx, $$scope, fn);
    return definition[0](slot_ctx);
  }
}
function get_slot_context(definition, ctx, $$scope, fn) {
  return definition[1] && fn ? assign($$scope.ctx.slice(), definition[1](fn(ctx))) : $$scope.ctx;
}
function get_slot_changes(definition, $$scope, dirty, fn) {
  if (definition[2] && fn) {
    const lets = definition[2](fn(dirty));
    if ($$scope.dirty === void 0) {
      return lets;
    }
    if (typeof lets === "object") {
      const merged = [];
      const len = Math.max($$scope.dirty.length, lets.length);
      for (let i = 0; i < len; i += 1) {
        merged[i] = $$scope.dirty[i] | lets[i];
      }
      return merged;
    }
    return $$scope.dirty | lets;
  }
  return $$scope.dirty;
}
function update_slot_base(slot, slot_definition, ctx, $$scope, slot_changes, get_slot_context_fn) {
  if (slot_changes) {
    const slot_context = get_slot_context(slot_definition, ctx, $$scope, get_slot_context_fn);
    slot.p(slot_context, slot_changes);
  }
}
function get_all_dirty_from_scope($$scope) {
  if ($$scope.ctx.length > 32) {
    const dirty = [];
    const length = $$scope.ctx.length / 32;
    for (let i = 0; i < length; i++) {
      dirty[i] = -1;
    }
    return dirty;
  }
  return -1;
}
function exclude_internal_props(props) {
  const result = {};
  for (const k in props) if (k[0] !== "$") result[k] = props[k];
  return result;
}
function null_to_empty(value) {
  return value == null ? "" : value;
}

// node_modules/.pnpm/svelte@4.2.20/node_modules/svelte/src/runtime/internal/globals.js
var globals = typeof window !== "undefined" ? window : typeof globalThis !== "undefined" ? globalThis : (
  // @ts-ignore Node typings have this
  global
);

// node_modules/.pnpm/svelte@4.2.20/node_modules/svelte/src/runtime/internal/ResizeObserverSingleton.js
var ResizeObserverSingleton = class _ResizeObserverSingleton {
  /** @param {ResizeObserverOptions} options */
  constructor(options) {
    /**
     * @private
     * @readonly
     * @type {WeakMap<Element, import('./private.js').Listener>}
     */
    __publicField(this, "_listeners", "WeakMap" in globals ? /* @__PURE__ */ new WeakMap() : void 0);
    /**
     * @private
     * @type {ResizeObserver}
     */
    __publicField(this, "_observer");
    /** @type {ResizeObserverOptions} */
    __publicField(this, "options");
    this.options = options;
  }
  /**
   * @param {Element} element
   * @param {import('./private.js').Listener} listener
   * @returns {() => void}
   */
  observe(element2, listener) {
    this._listeners.set(element2, listener);
    this._getObserver().observe(element2, this.options);
    return () => {
      this._listeners.delete(element2);
      this._observer.unobserve(element2);
    };
  }
  /**
   * @private
   */
  _getObserver() {
    var _a;
    return (_a = this._observer) != null ? _a : this._observer = new ResizeObserver((entries) => {
      var _a2;
      for (const entry of entries) {
        _ResizeObserverSingleton.entries.set(entry.target, entry);
        (_a2 = this._listeners.get(entry.target)) == null ? void 0 : _a2(entry);
      }
    });
  }
};
ResizeObserverSingleton.entries = "WeakMap" in globals ? /* @__PURE__ */ new WeakMap() : void 0;

// node_modules/.pnpm/svelte@4.2.20/node_modules/svelte/src/runtime/internal/dom.js
var is_hydrating = false;
function start_hydrating() {
  is_hydrating = true;
}
function end_hydrating() {
  is_hydrating = false;
}
function append(target, node) {
  target.appendChild(node);
}
function insert(target, node, anchor) {
  target.insertBefore(node, anchor || null);
}
function detach(node) {
  if (node.parentNode) {
    node.parentNode.removeChild(node);
  }
}
function destroy_each(iterations, detaching) {
  for (let i = 0; i < iterations.length; i += 1) {
    if (iterations[i]) iterations[i].d(detaching);
  }
}
function element(name) {
  return document.createElement(name);
}
function svg_element(name) {
  return document.createElementNS("http://www.w3.org/2000/svg", name);
}
function text(data) {
  return document.createTextNode(data);
}
function space() {
  return text(" ");
}
function empty() {
  return text("");
}
function listen(node, event, handler, options) {
  node.addEventListener(event, handler, options);
  return () => node.removeEventListener(event, handler, options);
}
function attr(node, attribute, value) {
  if (value == null) node.removeAttribute(attribute);
  else if (node.getAttribute(attribute) !== value) node.setAttribute(attribute, value);
}
function get_binding_group_value(group, __value, checked) {
  const value = /* @__PURE__ */ new Set();
  for (let i = 0; i < group.length; i += 1) {
    if (group[i].checked) value.add(group[i].__value);
  }
  if (!checked) {
    value.delete(__value);
  }
  return Array.from(value);
}
function init_binding_group(group) {
  let _inputs;
  return {
    /* push */
    p(...inputs) {
      _inputs = inputs;
      _inputs.forEach((input) => group.push(input));
    },
    /* remove */
    r() {
      _inputs.forEach((input) => group.splice(group.indexOf(input), 1));
    }
  };
}
function children(element2) {
  return Array.from(element2.childNodes);
}
function set_data(text2, data) {
  data = "" + data;
  if (text2.data === data) return;
  text2.data = /** @type {string} */
  data;
}
function set_input_value(input, value) {
  input.value = value == null ? "" : value;
}
function set_style(node, key, value, important) {
  if (value == null) {
    node.style.removeProperty(key);
  } else {
    node.style.setProperty(key, value, important ? "important" : "");
  }
}
function custom_event(type, detail, { bubbles = false, cancelable = false } = {}) {
  return new CustomEvent(type, { detail, bubbles, cancelable });
}
function get_custom_elements_slots(element2) {
  const result = {};
  element2.childNodes.forEach(
    /** @param {Element} node */
    (node) => {
      result[node.slot || "default"] = true;
    }
  );
  return result;
}

// node_modules/.pnpm/svelte@4.2.20/node_modules/svelte/src/runtime/internal/lifecycle.js
var current_component;
function set_current_component(component) {
  current_component = component;
}
function get_current_component() {
  if (!current_component) throw new Error("Function called outside component initialization");
  return current_component;
}
function onMount(fn) {
  get_current_component().$$.on_mount.push(fn);
}
function onDestroy(fn) {
  get_current_component().$$.on_destroy.push(fn);
}
function createEventDispatcher() {
  const component = get_current_component();
  return (type, detail, { cancelable = false } = {}) => {
    const callbacks = component.$$.callbacks[type];
    if (callbacks) {
      const event = custom_event(
        /** @type {string} */
        type,
        detail,
        { cancelable }
      );
      callbacks.slice().forEach((fn) => {
        fn.call(component, event);
      });
      return !event.defaultPrevented;
    }
    return true;
  };
}

// node_modules/.pnpm/svelte@4.2.20/node_modules/svelte/src/runtime/internal/scheduler.js
var dirty_components = [];
var binding_callbacks = [];
var render_callbacks = [];
var flush_callbacks = [];
var resolved_promise = /* @__PURE__ */ Promise.resolve();
var update_scheduled = false;
function schedule_update() {
  if (!update_scheduled) {
    update_scheduled = true;
    resolved_promise.then(flush);
  }
}
function add_render_callback(fn) {
  render_callbacks.push(fn);
}
function add_flush_callback(fn) {
  flush_callbacks.push(fn);
}
var seen_callbacks = /* @__PURE__ */ new Set();
var flushidx = 0;
function flush() {
  if (flushidx !== 0) {
    return;
  }
  const saved_component = current_component;
  do {
    try {
      while (flushidx < dirty_components.length) {
        const component = dirty_components[flushidx];
        flushidx++;
        set_current_component(component);
        update(component.$$);
      }
    } catch (e) {
      dirty_components.length = 0;
      flushidx = 0;
      throw e;
    }
    set_current_component(null);
    dirty_components.length = 0;
    flushidx = 0;
    while (binding_callbacks.length) binding_callbacks.pop()();
    for (let i = 0; i < render_callbacks.length; i += 1) {
      const callback = render_callbacks[i];
      if (!seen_callbacks.has(callback)) {
        seen_callbacks.add(callback);
        callback();
      }
    }
    render_callbacks.length = 0;
  } while (dirty_components.length);
  while (flush_callbacks.length) {
    flush_callbacks.pop()();
  }
  update_scheduled = false;
  seen_callbacks.clear();
  set_current_component(saved_component);
}
function update($$) {
  if ($$.fragment !== null) {
    $$.update();
    run_all($$.before_update);
    const dirty = $$.dirty;
    $$.dirty = [-1];
    $$.fragment && $$.fragment.p($$.ctx, dirty);
    $$.after_update.forEach(add_render_callback);
  }
}
function flush_render_callbacks(fns) {
  const filtered = [];
  const targets = [];
  render_callbacks.forEach((c) => fns.indexOf(c) === -1 ? filtered.push(c) : targets.push(c));
  targets.forEach((c) => c());
  render_callbacks = filtered;
}

// node_modules/.pnpm/svelte@4.2.20/node_modules/svelte/src/runtime/internal/transitions.js
var outroing = /* @__PURE__ */ new Set();
var outros;
function group_outros() {
  outros = {
    r: 0,
    c: [],
    p: outros
    // parent group
  };
}
function check_outros() {
  if (!outros.r) {
    run_all(outros.c);
  }
  outros = outros.p;
}
function transition_in(block, local) {
  if (block && block.i) {
    outroing.delete(block);
    block.i(local);
  }
}
function transition_out(block, local, detach2, callback) {
  if (block && block.o) {
    if (outroing.has(block)) return;
    outroing.add(block);
    outros.c.push(() => {
      outroing.delete(block);
      if (callback) {
        if (detach2) block.d(1);
        callback();
      }
    });
    block.o(local);
  } else if (callback) {
    callback();
  }
}

// node_modules/.pnpm/svelte@4.2.20/node_modules/svelte/src/runtime/internal/await_block.js
function handle_promise(promise, info) {
  const token = info.token = {};
  function update2(type, index, key, value) {
    if (info.token !== token) return;
    info.resolved = value;
    let child_ctx = info.ctx;
    if (key !== void 0) {
      child_ctx = child_ctx.slice();
      child_ctx[key] = value;
    }
    const block = type && (info.current = type)(child_ctx);
    let needs_flush = false;
    if (info.block) {
      if (info.blocks) {
        info.blocks.forEach((block2, i) => {
          if (i !== index && block2) {
            group_outros();
            transition_out(block2, 1, 1, () => {
              if (info.blocks[i] === block2) {
                info.blocks[i] = null;
              }
            });
            check_outros();
          }
        });
      } else {
        info.block.d(1);
      }
      block.c();
      transition_in(block, 1);
      block.m(info.mount(), info.anchor);
      needs_flush = true;
    }
    info.block = block;
    if (info.blocks) info.blocks[index] = block;
    if (needs_flush) {
      flush();
    }
  }
  if (is_promise(promise)) {
    const current_component2 = get_current_component();
    promise.then(
      (value) => {
        set_current_component(current_component2);
        update2(info.then, 1, info.value, value);
        set_current_component(null);
      },
      (error) => {
        set_current_component(current_component2);
        update2(info.catch, 2, info.error, error);
        set_current_component(null);
        if (!info.hasCatch) {
          throw error;
        }
      }
    );
    if (info.current !== info.pending) {
      update2(info.pending, 0);
      return true;
    }
  } else {
    if (info.current !== info.then) {
      update2(info.then, 1, info.value, promise);
      return true;
    }
    info.resolved = /** @type {T} */
    promise;
  }
}
function update_await_block_branch(info, ctx, dirty) {
  const child_ctx = ctx.slice();
  const { resolved } = info;
  if (info.current === info.then) {
    child_ctx[info.value] = resolved;
  }
  if (info.current === info.catch) {
    child_ctx[info.error] = resolved;
  }
  info.block.p(child_ctx, dirty);
}

// node_modules/.pnpm/svelte@4.2.20/node_modules/svelte/src/runtime/internal/each.js
function ensure_array_like(array_like_or_iterator) {
  return (array_like_or_iterator == null ? void 0 : array_like_or_iterator.length) !== void 0 ? array_like_or_iterator : Array.from(array_like_or_iterator);
}

// node_modules/.pnpm/svelte@4.2.20/node_modules/svelte/src/runtime/internal/spread.js
function get_spread_update(levels, updates) {
  const update2 = {};
  const to_null_out = {};
  const accounted_for = { $$scope: 1 };
  let i = levels.length;
  while (i--) {
    const o = levels[i];
    const n = updates[i];
    if (n) {
      for (const key in o) {
        if (!(key in n)) to_null_out[key] = 1;
      }
      for (const key in n) {
        if (!accounted_for[key]) {
          update2[key] = n[key];
          accounted_for[key] = 1;
        }
      }
      levels[i] = n;
    } else {
      for (const key in o) {
        accounted_for[key] = 1;
      }
    }
  }
  for (const key in to_null_out) {
    if (!(key in update2)) update2[key] = void 0;
  }
  return update2;
}
function get_spread_object(spread_props) {
  return typeof spread_props === "object" && spread_props !== null ? spread_props : {};
}

// node_modules/.pnpm/svelte@4.2.20/node_modules/svelte/src/shared/boolean_attributes.js
var _boolean_attributes = (
  /** @type {const} */
  [
    "allowfullscreen",
    "allowpaymentrequest",
    "async",
    "autofocus",
    "autoplay",
    "checked",
    "controls",
    "default",
    "defer",
    "disabled",
    "formnovalidate",
    "hidden",
    "inert",
    "ismap",
    "loop",
    "multiple",
    "muted",
    "nomodule",
    "novalidate",
    "open",
    "playsinline",
    "readonly",
    "required",
    "reversed",
    "selected"
  ]
);
var boolean_attributes = /* @__PURE__ */ new Set([..._boolean_attributes]);

// node_modules/.pnpm/svelte@4.2.20/node_modules/svelte/src/runtime/internal/Component.js
function bind(component, name, callback) {
  const index = component.$$.props[name];
  if (index !== void 0) {
    component.$$.bound[index] = callback;
    callback(component.$$.ctx[index]);
  }
}
function create_component(block) {
  block && block.c();
}
function mount_component(component, target, anchor) {
  const { fragment, after_update } = component.$$;
  fragment && fragment.m(target, anchor);
  add_render_callback(() => {
    const new_on_destroy = component.$$.on_mount.map(run).filter(is_function);
    if (component.$$.on_destroy) {
      component.$$.on_destroy.push(...new_on_destroy);
    } else {
      run_all(new_on_destroy);
    }
    component.$$.on_mount = [];
  });
  after_update.forEach(add_render_callback);
}
function destroy_component(component, detaching) {
  const $$ = component.$$;
  if ($$.fragment !== null) {
    flush_render_callbacks($$.after_update);
    run_all($$.on_destroy);
    $$.fragment && $$.fragment.d(detaching);
    $$.on_destroy = $$.fragment = null;
    $$.ctx = [];
  }
}
function make_dirty(component, i) {
  if (component.$$.dirty[0] === -1) {
    dirty_components.push(component);
    schedule_update();
    component.$$.dirty.fill(0);
  }
  component.$$.dirty[i / 31 | 0] |= 1 << i % 31;
}
function init(component, options, instance41, create_fragment41, not_equal, props, append_styles = null, dirty = [-1]) {
  const parent_component = current_component;
  set_current_component(component);
  const $$ = component.$$ = {
    fragment: null,
    ctx: [],
    // state
    props,
    update: noop,
    not_equal,
    bound: blank_object(),
    // lifecycle
    on_mount: [],
    on_destroy: [],
    on_disconnect: [],
    before_update: [],
    after_update: [],
    context: new Map(options.context || (parent_component ? parent_component.$$.context : [])),
    // everything else
    callbacks: blank_object(),
    dirty,
    skip_bound: false,
    root: options.target || parent_component.$$.root
  };
  append_styles && append_styles($$.root);
  let ready = false;
  $$.ctx = instance41 ? instance41(component, options.props || {}, (i, ret, ...rest) => {
    const value = rest.length ? rest[0] : ret;
    if ($$.ctx && not_equal($$.ctx[i], $$.ctx[i] = value)) {
      if (!$$.skip_bound && $$.bound[i]) $$.bound[i](value);
      if (ready) make_dirty(component, i);
    }
    return ret;
  }) : [];
  $$.update();
  ready = true;
  run_all($$.before_update);
  $$.fragment = create_fragment41 ? create_fragment41($$.ctx) : false;
  if (options.target) {
    if (options.hydrate) {
      start_hydrating();
      const nodes = children(options.target);
      $$.fragment && $$.fragment.l(nodes);
      nodes.forEach(detach);
    } else {
      $$.fragment && $$.fragment.c();
    }
    if (options.intro) transition_in(component.$$.fragment);
    mount_component(component, options.target, options.anchor);
    end_hydrating();
    flush();
  }
  set_current_component(parent_component);
}
var SvelteElement;
if (typeof HTMLElement === "function") {
  SvelteElement = class extends HTMLElement {
    constructor($$componentCtor, $$slots, use_shadow_dom) {
      super();
      /** The Svelte component constructor */
      __publicField(this, "$$ctor");
      /** Slots */
      __publicField(this, "$$s");
      /** The Svelte component instance */
      __publicField(this, "$$c");
      /** Whether or not the custom element is connected */
      __publicField(this, "$$cn", false);
      /** Component props data */
      __publicField(this, "$$d", {});
      /** `true` if currently in the process of reflecting component props back to attributes */
      __publicField(this, "$$r", false);
      /** @type {Record<string, CustomElementPropDefinition>} Props definition (name, reflected, type etc) */
      __publicField(this, "$$p_d", {});
      /** @type {Record<string, Function[]>} Event listeners */
      __publicField(this, "$$l", {});
      /** @type {Map<Function, Function>} Event listener unsubscribe functions */
      __publicField(this, "$$l_u", /* @__PURE__ */ new Map());
      this.$$ctor = $$componentCtor;
      this.$$s = $$slots;
      if (use_shadow_dom) {
        this.attachShadow({ mode: "open" });
      }
    }
    addEventListener(type, listener, options) {
      this.$$l[type] = this.$$l[type] || [];
      this.$$l[type].push(listener);
      if (this.$$c) {
        const unsub = this.$$c.$on(type, listener);
        this.$$l_u.set(listener, unsub);
      }
      super.addEventListener(type, listener, options);
    }
    removeEventListener(type, listener, options) {
      super.removeEventListener(type, listener, options);
      if (this.$$c) {
        const unsub = this.$$l_u.get(listener);
        if (unsub) {
          unsub();
          this.$$l_u.delete(listener);
        }
      }
      if (this.$$l[type]) {
        const idx = this.$$l[type].indexOf(listener);
        if (idx >= 0) {
          this.$$l[type].splice(idx, 1);
        }
      }
    }
    async connectedCallback() {
      this.$$cn = true;
      if (!this.$$c) {
        let create_slot2 = function(name) {
          return () => {
            let node;
            const obj = {
              c: function create() {
                node = element("slot");
                if (name !== "default") {
                  attr(node, "name", name);
                }
              },
              /**
               * @param {HTMLElement} target
               * @param {HTMLElement} [anchor]
               */
              m: function mount(target, anchor) {
                insert(target, node, anchor);
              },
              d: function destroy(detaching) {
                if (detaching) {
                  detach(node);
                }
              }
            };
            return obj;
          };
        };
        await Promise.resolve();
        if (!this.$$cn || this.$$c) {
          return;
        }
        const $$slots = {};
        const existing_slots = get_custom_elements_slots(this);
        for (const name of this.$$s) {
          if (name in existing_slots) {
            $$slots[name] = [create_slot2(name)];
          }
        }
        for (const attribute of this.attributes) {
          const name = this.$$g_p(attribute.name);
          if (!(name in this.$$d)) {
            this.$$d[name] = get_custom_element_value(name, attribute.value, this.$$p_d, "toProp");
          }
        }
        for (const key in this.$$p_d) {
          if (!(key in this.$$d) && this[key] !== void 0) {
            this.$$d[key] = this[key];
            delete this[key];
          }
        }
        this.$$c = new this.$$ctor({
          target: this.shadowRoot || this,
          props: {
            ...this.$$d,
            $$slots,
            $$scope: {
              ctx: []
            }
          }
        });
        const reflect_attributes = () => {
          this.$$r = true;
          for (const key in this.$$p_d) {
            this.$$d[key] = this.$$c.$$.ctx[this.$$c.$$.props[key]];
            if (this.$$p_d[key].reflect) {
              const attribute_value = get_custom_element_value(
                key,
                this.$$d[key],
                this.$$p_d,
                "toAttribute"
              );
              if (attribute_value == null) {
                this.removeAttribute(this.$$p_d[key].attribute || key);
              } else {
                this.setAttribute(this.$$p_d[key].attribute || key, attribute_value);
              }
            }
          }
          this.$$r = false;
        };
        this.$$c.$$.after_update.push(reflect_attributes);
        reflect_attributes();
        for (const type in this.$$l) {
          for (const listener of this.$$l[type]) {
            const unsub = this.$$c.$on(type, listener);
            this.$$l_u.set(listener, unsub);
          }
        }
        this.$$l = {};
      }
    }
    // We don't need this when working within Svelte code, but for compatibility of people using this outside of Svelte
    // and setting attributes through setAttribute etc, this is helpful
    attributeChangedCallback(attr2, _oldValue, newValue) {
      var _a;
      if (this.$$r) return;
      attr2 = this.$$g_p(attr2);
      this.$$d[attr2] = get_custom_element_value(attr2, newValue, this.$$p_d, "toProp");
      (_a = this.$$c) == null ? void 0 : _a.$set({ [attr2]: this.$$d[attr2] });
    }
    disconnectedCallback() {
      this.$$cn = false;
      Promise.resolve().then(() => {
        if (!this.$$cn && this.$$c) {
          this.$$c.$destroy();
          this.$$c = void 0;
        }
      });
    }
    $$g_p(attribute_name) {
      return Object.keys(this.$$p_d).find(
        (key) => this.$$p_d[key].attribute === attribute_name || !this.$$p_d[key].attribute && key.toLowerCase() === attribute_name
      ) || attribute_name;
    }
  };
}
function get_custom_element_value(prop, value, props_definition, transform) {
  var _a;
  const type = (_a = props_definition[prop]) == null ? void 0 : _a.type;
  value = type === "Boolean" && typeof value !== "boolean" ? value != null : value;
  if (!transform || !props_definition[prop]) {
    return value;
  } else if (transform === "toAttribute") {
    switch (type) {
      case "Object":
      case "Array":
        return value == null ? null : JSON.stringify(value);
      case "Boolean":
        return value ? "" : null;
      case "Number":
        return value == null ? null : value;
      default:
        return value;
    }
  } else {
    switch (type) {
      case "Object":
      case "Array":
        return value && JSON.parse(value);
      case "Boolean":
        return value;
      // conversion already handled above
      case "Number":
        return value != null ? +value : value;
      default:
        return value;
    }
  }
}
var SvelteComponent = class {
  constructor() {
    /**
     * ### PRIVATE API
     *
     * Do not use, may change at any time
     *
     * @type {any}
     */
    __publicField(this, "$$");
    /**
     * ### PRIVATE API
     *
     * Do not use, may change at any time
     *
     * @type {any}
     */
    __publicField(this, "$$set");
  }
  /** @returns {void} */
  $destroy() {
    destroy_component(this, 1);
    this.$destroy = noop;
  }
  /**
   * @template {Extract<keyof Events, string>} K
   * @param {K} type
   * @param {((e: Events[K]) => void) | null | undefined} callback
   * @returns {() => void}
   */
  $on(type, callback) {
    if (!is_function(callback)) {
      return noop;
    }
    const callbacks = this.$$.callbacks[type] || (this.$$.callbacks[type] = []);
    callbacks.push(callback);
    return () => {
      const index = callbacks.indexOf(callback);
      if (index !== -1) callbacks.splice(index, 1);
    };
  }
  /**
   * @param {Partial<Props>} props
   * @returns {void}
   */
  $set(props) {
    if (this.$$set && !is_empty(props)) {
      this.$$.skip_bound = true;
      this.$$set(props);
      this.$$.skip_bound = false;
    }
  }
};

// node_modules/.pnpm/svelte@4.2.20/node_modules/svelte/src/shared/version.js
var PUBLIC_VERSION = "4";

// node_modules/.pnpm/svelte@4.2.20/node_modules/svelte/src/runtime/internal/disclose-version/index.js
if (typeof window !== "undefined")
  (window.__svelte || (window.__svelte = { v: /* @__PURE__ */ new Set() })).v.add(PUBLIC_VERSION);

// src/Utility.ts
var import_obsidian3 = require("obsidian");

// src/Interfaces.ts
var import_obsidian2 = require("obsidian");

// src/Utility.ts
var sum = (arr) => {
  if (arr.length === 0) {
    return 0;
  }
  return arr.reduce((a, b) => a + b);
};
function debug(settings, log) {
  if (settings.debugMode) {
    console.log(log);
  }
}
function roundNumber(num, dec = DECIMALS) {
  return Math.round(num * Math.pow(10, dec)) / Math.pow(10, dec);
}
var dropPath = (path) => {
  return path.split("/").last();
};
var dropExt = (path) => path.split(".").length === 1 ? path : path.split(".").slice(0, -1).join(".");
var getExt = (path) => path.split(".").last();
var classExt = (path) => `GA-${getExt(path)}`;
var classResolved = (app, node) => node.endsWith(".md") && !isInVault(app, dropExt(node)) ? "is-unresolved" : "";
var classLinked = (resolvedLinks, from, to, directed = false) => isLinked(resolvedLinks, from, to, directed) ? LINKED : NOT_LINKED;
var presentPath = (path) => dropExt(dropPath(path));
function hoverPreview2(event, view, to) {
  const targetEl = event.target;
  view.app.workspace.trigger("hover-link", {
    event,
    source: view.getViewType(),
    hoverParent: view,
    targetEl,
    linktext: to
  });
}
function looserIsLinked(app, from, to, directed = true) {
  var _a, _b, _c, _d;
  const { resolvedLinks, unresolvedLinks } = app.metadataCache;
  const fromTo = ((_a = resolvedLinks[from]) == null ? void 0 : _a.hasOwnProperty(to)) || ((_b = unresolvedLinks[from]) == null ? void 0 : _b.hasOwnProperty(dropExt(to)));
  if (!fromTo && !directed) {
    return ((_c = resolvedLinks[to]) == null ? void 0 : _c.hasOwnProperty(from)) || ((_d = unresolvedLinks[to]) == null ? void 0 : _d.hasOwnProperty(dropExt(from)));
  } else return fromTo;
}
var createOrUpdateYaml = async (key, value, file, app) => {
  var _a, _b;
  const api = (_a = app.plugins.plugins.metaedit) == null ? void 0 : _a.api;
  if (!api) {
    new import_obsidian3.Notice("Metaedit must be enabled for this function to work");
    return;
  }
  let valueStr = value.toString();
  const frontmatter = (_b = app.metadataCache.getFileCache(file)) == null ? void 0 : _b.frontmatter;
  if (!frontmatter || frontmatter[key] === void 0) {
    await api.createYamlProperty(key, `['${valueStr}']`, file);
  } else if ([...[frontmatter[key]]].flat(3).some((val) => val == valueStr)) {
    return;
  } else {
    const oldValueFlat = [...[frontmatter[key]]].flat(4);
    const newValue = [...oldValueFlat, valueStr].map((val) => `'${val}'`);
    await api.update(key, `[${newValue.join(", ")}]`, file);
  }
};
function openMenu(event, app, copyObj = void 0) {
  const tdEl = event.target;
  const menu = new import_obsidian3.Menu(app);
  if (copyObj) {
    menu.addItem(
      (item) => item.setTitle("Copy community").setIcon("graph").onClick(async () => {
        await copy(copyObj.toCopy);
      })
    );
  } else {
    menu.addItem(
      (item) => item.setTitle("Create Link: Current").setIcon("documents").onClick((e) => {
        try {
          const currFile = app.workspace.getActiveFile();
          const targetStr = tdEl.innerText;
          createOrUpdateYaml("key", targetStr, currFile, app);
          new import_obsidian3.Notice("Write Successful");
        } catch (error) {
          new import_obsidian3.Notice("Write failed");
        }
      })
    );
    menu.addItem(
      (item) => item.setTitle("Create Link: Target").setIcon("documents").onClick((e) => {
        const currStr = app.workspace.getActiveFile().basename;
        const { target } = event;
        const targetStr = target.innerText;
        const targetFile = app.metadataCache.getFirstLinkpathDest(
          targetStr,
          ""
        );
        if (!targetFile) {
          new import_obsidian3.Notice(`${targetStr} does not exist in your vault yet`);
          return;
        } else {
          createOrUpdateYaml("key", currStr, targetFile, app);
        }
      })
    );
  }
  menu.showAtMouseEvent(event);
}
function jumpToSelection(app, line, sentence) {
  const view = app.workspace.getActiveViewOfType(import_obsidian3.MarkdownView);
  if (view && view.getMode() === "source") {
    const { editor } = view;
    const lineStartPos = { ch: 0, line };
    const markStart = editor.posToOffset(lineStartPos);
    const markEnd = markStart + sentence.length;
    const markSel = {
      from: editor.offsetToPos(markStart),
      to: editor.offsetToPos(markEnd)
    };
    editor.setSelection(markSel.from, markSel.to);
    editor.scrollIntoView(markSel);
    const doc = editor.cm.getDoc();
    const marker = doc.markText(markSel.from, markSel.to, {
      className: "GA-highlight-sentence"
    });
    setTimeout(() => {
      marker.clear();
    }, 1e3);
  } else if (view && view.getMode() === "preview") {
  }
}
function getImgBufferPromise(app, fileName) {
  const file = app.metadataCache.getFirstLinkpathDest(fileName, "");
  return file ? app.vault.readBinary(file) : null;
}
function getCounts(arr) {
  const counts = {};
  for (const num of arr) {
    counts[num] = counts[num] ? counts[num] + 1 : 1;
  }
  return counts;
}
function getMaxKey(obj) {
  return Object.keys(obj).reduce(
    (a, b) => obj[a] === obj[b] ? Math.random() < 0.5 ? a : b : obj[a] > obj[b] ? a : b
  );
}
var isImg = (path) => IMG_EXTENSIONS.includes(path.split(".").last());
async function openOrSwitch2(app, dest, event, options = { createNewFile: true }) {
  const { workspace } = app;
  let destFile = app.metadataCache.getFirstLinkpathDest(dest, "");
  if (!destFile && options.createNewFile) {
    destFile = await createNewMDNote(app, dest);
  } else if (!destFile && !options.createNewFile) return;
  const leavesWithDestAlreadyOpen = [];
  workspace.iterateAllLeaves((leaf) => {
    var _a, _b;
    if (leaf.view instanceof import_obsidian3.MarkdownView) {
      if (((_b = (_a = leaf.view) == null ? void 0 : _a.file) == null ? void 0 : _b.basename) === dropExt(dest)) {
        leavesWithDestAlreadyOpen.push(leaf);
      }
    }
  });
  if (leavesWithDestAlreadyOpen.length > 0) {
    workspace.setActiveLeaf(leavesWithDestAlreadyOpen[0]);
  } else {
    const mode = app.vault.getConfig("defaultViewMode");
    const leaf = event.ctrlKey || event.getModifierState("Meta") ? workspace.splitActiveLeaf() : workspace.getUnpinnedLeaf();
    await leaf.openFile(destFile, { active: true, mode });
  }
}
function findSentence(sentences, link) {
  let aggrSentenceLength = 0;
  let count = 0;
  for (const sentence of sentences) {
    const nextLength = aggrSentenceLength + sentence.length;
    if (link.position.end.col <= nextLength) {
      return [count, aggrSentenceLength, nextLength];
    }
    aggrSentenceLength = nextLength;
    count += 1;
  }
  return [-1, 0, aggrSentenceLength];
}
function addPreCocitation(preCocitations, linkPath, measure, sentence, source, line) {
  preCocitations[linkPath][0] = Math.max(
    preCocitations[linkPath][0],
    measure
  );
  preCocitations[linkPath][1].push({
    sentence,
    measure,
    source,
    line
  });
}

// node_modules/.pnpm/svelte-icons@2.1.0/node_modules/svelte-icons/components/IconBase.svelte
function create_if_block(ctx) {
  let title_1;
  let t;
  return {
    c() {
      title_1 = svg_element("title");
      t = text(
        /*title*/
        ctx[0]
      );
    },
    m(target, anchor) {
      insert(target, title_1, anchor);
      append(title_1, t);
    },
    p(ctx2, dirty) {
      if (dirty & /*title*/
      1) set_data(
        t,
        /*title*/
        ctx2[0]
      );
    },
    d(detaching) {
      if (detaching) {
        detach(title_1);
      }
    }
  };
}
function create_fragment(ctx) {
  let svg;
  let if_block_anchor;
  let current;
  let if_block = (
    /*title*/
    ctx[0] && create_if_block(ctx)
  );
  const default_slot_template = (
    /*#slots*/
    ctx[3].default
  );
  const default_slot = create_slot(
    default_slot_template,
    ctx,
    /*$$scope*/
    ctx[2],
    null
  );
  return {
    c() {
      svg = svg_element("svg");
      if (if_block) if_block.c();
      if_block_anchor = empty();
      if (default_slot) default_slot.c();
      attr(svg, "xmlns", "http://www.w3.org/2000/svg");
      attr(
        svg,
        "viewBox",
        /*viewBox*/
        ctx[1]
      );
      attr(svg, "class", "svelte-c8tyih");
    },
    m(target, anchor) {
      insert(target, svg, anchor);
      if (if_block) if_block.m(svg, null);
      append(svg, if_block_anchor);
      if (default_slot) {
        default_slot.m(svg, null);
      }
      current = true;
    },
    p(ctx2, [dirty]) {
      if (
        /*title*/
        ctx2[0]
      ) {
        if (if_block) {
          if_block.p(ctx2, dirty);
        } else {
          if_block = create_if_block(ctx2);
          if_block.c();
          if_block.m(svg, if_block_anchor);
        }
      } else if (if_block) {
        if_block.d(1);
        if_block = null;
      }
      if (default_slot) {
        if (default_slot.p && (!current || dirty & /*$$scope*/
        4)) {
          update_slot_base(
            default_slot,
            default_slot_template,
            ctx2,
            /*$$scope*/
            ctx2[2],
            !current ? get_all_dirty_from_scope(
              /*$$scope*/
              ctx2[2]
            ) : get_slot_changes(
              default_slot_template,
              /*$$scope*/
              ctx2[2],
              dirty,
              null
            ),
            null
          );
        }
      }
      if (!current || dirty & /*viewBox*/
      2) {
        attr(
          svg,
          "viewBox",
          /*viewBox*/
          ctx2[1]
        );
      }
    },
    i(local) {
      if (current) return;
      transition_in(default_slot, local);
      current = true;
    },
    o(local) {
      transition_out(default_slot, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(svg);
      }
      if (if_block) if_block.d();
      if (default_slot) default_slot.d(detaching);
    }
  };
}
function instance($$self, $$props, $$invalidate) {
  let { $$slots: slots = {}, $$scope } = $$props;
  let { title = null } = $$props;
  let { viewBox } = $$props;
  $$self.$$set = ($$props2) => {
    if ("title" in $$props2) $$invalidate(0, title = $$props2.title);
    if ("viewBox" in $$props2) $$invalidate(1, viewBox = $$props2.viewBox);
    if ("$$scope" in $$props2) $$invalidate(2, $$scope = $$props2.$$scope);
  };
  return [title, viewBox, $$scope, slots];
}
var IconBase = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance, create_fragment, safe_not_equal, { title: 0, viewBox: 1 });
  }
};
var IconBase_default = IconBase;

// node_modules/.pnpm/svelte-icons@2.1.0/node_modules/svelte-icons/fa/FaLink.svelte
function create_default_slot(ctx) {
  let path;
  return {
    c() {
      path = svg_element("path");
      attr(path, "d", "M326.612 185.391c59.747 59.809 58.927 155.698.36 214.59-.11.12-.24.25-.36.37l-67.2 67.2c-59.27 59.27-155.699 59.262-214.96 0-59.27-59.26-59.27-155.7 0-214.96l37.106-37.106c9.84-9.84 26.786-3.3 27.294 10.606.648 17.722 3.826 35.527 9.69 52.721 1.986 5.822.567 12.262-3.783 16.612l-13.087 13.087c-28.026 28.026-28.905 73.66-1.155 101.96 28.024 28.579 74.086 28.749 102.325.51l67.2-67.19c28.191-28.191 28.073-73.757 0-101.83-3.701-3.694-7.429-6.564-10.341-8.569a16.037 16.037 0 0 1-6.947-12.606c-.396-10.567 3.348-21.456 11.698-29.806l21.054-21.055c5.521-5.521 14.182-6.199 20.584-1.731a152.482 152.482 0 0 1 20.522 17.197zM467.547 44.449c-59.261-59.262-155.69-59.27-214.96 0l-67.2 67.2c-.12.12-.25.25-.36.37-58.566 58.892-59.387 154.781.36 214.59a152.454 152.454 0 0 0 20.521 17.196c6.402 4.468 15.064 3.789 20.584-1.731l21.054-21.055c8.35-8.35 12.094-19.239 11.698-29.806a16.037 16.037 0 0 0-6.947-12.606c-2.912-2.005-6.64-4.875-10.341-8.569-28.073-28.073-28.191-73.639 0-101.83l67.2-67.19c28.239-28.239 74.3-28.069 102.325.51 27.75 28.3 26.872 73.934-1.155 101.96l-13.087 13.087c-4.35 4.35-5.769 10.79-3.783 16.612 5.864 17.194 9.042 34.999 9.69 52.721.509 13.906 17.454 20.446 27.294 10.606l37.106-37.106c59.271-59.259 59.271-155.699.001-214.959z");
    },
    m(target, anchor) {
      insert(target, path, anchor);
    },
    p: noop,
    d(detaching) {
      if (detaching) {
        detach(path);
      }
    }
  };
}
function create_fragment2(ctx) {
  let iconbase;
  let current;
  const iconbase_spread_levels = [
    { viewBox: "0 0 512 512" },
    /*$$props*/
    ctx[0]
  ];
  let iconbase_props = {
    $$slots: { default: [create_default_slot] },
    $$scope: { ctx }
  };
  for (let i = 0; i < iconbase_spread_levels.length; i += 1) {
    iconbase_props = assign(iconbase_props, iconbase_spread_levels[i]);
  }
  iconbase = new IconBase_default({ props: iconbase_props });
  return {
    c() {
      create_component(iconbase.$$.fragment);
    },
    m(target, anchor) {
      mount_component(iconbase, target, anchor);
      current = true;
    },
    p(ctx2, [dirty]) {
      const iconbase_changes = dirty & /*$$props*/
      1 ? get_spread_update(iconbase_spread_levels, [iconbase_spread_levels[0], get_spread_object(
        /*$$props*/
        ctx2[0]
      )]) : {};
      if (dirty & /*$$scope*/
      2) {
        iconbase_changes.$$scope = { dirty, ctx: ctx2 };
      }
      iconbase.$set(iconbase_changes);
    },
    i(local) {
      if (current) return;
      transition_in(iconbase.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(iconbase.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(iconbase, detaching);
    }
  };
}
function instance2($$self, $$props, $$invalidate) {
  $$self.$$set = ($$new_props) => {
    $$invalidate(0, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
  };
  $$props = exclude_internal_props($$props);
  return [$$props];
}
var FaLink = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance2, create_fragment2, safe_not_equal, {});
  }
};
var FaLink_default = FaLink;

// node_modules/.pnpm/svelte-infinite-scroll@2.0.1/node_modules/svelte-infinite-scroll/dist/index.mjs
function create_if_block2(ctx) {
  let div;
  return {
    c() {
      div = element("div");
      attr(div, "id", "svelte-infinite-scroll");
      set_style(div, "width", "0");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      ctx[11](div);
    },
    p: noop,
    d(detaching) {
      if (detaching) detach(div);
      ctx[11](null);
    }
  };
}
function create_fragment3(ctx) {
  let if_block_anchor;
  let if_block = !/*window*/
  ctx[1] && !/*elementScroll*/
  ctx[0] && create_if_block2(ctx);
  return {
    c() {
      if (if_block) if_block.c();
      if_block_anchor = empty();
    },
    m(target, anchor) {
      if (if_block) if_block.m(target, anchor);
      insert(target, if_block_anchor, anchor);
    },
    p(ctx2, [dirty]) {
      if (!/*window*/
      ctx2[1] && !/*elementScroll*/
      ctx2[0]) {
        if (if_block) {
          if_block.p(ctx2, dirty);
        } else {
          if_block = create_if_block2(ctx2);
          if_block.c();
          if_block.m(if_block_anchor.parentNode, if_block_anchor);
        }
      } else if (if_block) {
        if_block.d(1);
        if_block = null;
      }
    },
    i: noop,
    o: noop,
    d(detaching) {
      if (if_block) if_block.d(detaching);
      if (detaching) detach(if_block_anchor);
    }
  };
}
function instance3($$self, $$props, $$invalidate) {
  let { threshold = 0 } = $$props;
  let { horizontal = false } = $$props;
  let { elementScroll = null } = $$props;
  let { hasMore = true } = $$props;
  let { reverse = false } = $$props;
  let { window: window2 = false } = $$props;
  const dispatch = createEventDispatcher();
  let isLoadMore = false;
  let component;
  let beforeScrollHeight;
  let beforeScrollTop;
  let element2;
  const onScroll = (e) => {
    if (!hasMore) return;
    const target = e.target;
    const offset = calcOffset(target, reverse, horizontal);
    if (offset <= threshold) {
      if (!isLoadMore && hasMore) {
        dispatch("loadMore");
        $$invalidate(8, beforeScrollHeight = target.scrollHeight);
        $$invalidate(9, beforeScrollTop = target.scrollTop);
      }
      $$invalidate(7, isLoadMore = true);
    } else {
      $$invalidate(7, isLoadMore = false);
    }
  };
  const calcOffset = (target, reverse2, horizontal2) => {
    const element3 = target.documentElement ? target.documentElement : target;
    if (reverse2) {
      return horizontal2 ? element3.scrollLeft : element3.scrollTop;
    }
    return horizontal2 ? element3.scrollWidth - element3.clientWidth - element3.scrollLeft : element3.scrollHeight - element3.clientHeight - element3.scrollTop;
  };
  onMount(() => {
    if (window2) {
      $$invalidate(10, element2 = document);
    } else if (elementScroll) {
      $$invalidate(10, element2 = elementScroll);
    } else {
      $$invalidate(10, element2 = component.parentNode);
    }
  });
  onDestroy(() => {
    if (element2) {
      element2.removeEventListener("scroll", onScroll);
      element2.removeEventListener("resize", onScroll);
    }
  });
  function div_binding($$value) {
    binding_callbacks[$$value ? "unshift" : "push"](() => {
      component = $$value;
      $$invalidate(2, component);
    });
  }
  $$self.$$set = ($$props2) => {
    if ("threshold" in $$props2) $$invalidate(3, threshold = $$props2.threshold);
    if ("horizontal" in $$props2) $$invalidate(4, horizontal = $$props2.horizontal);
    if ("elementScroll" in $$props2) $$invalidate(0, elementScroll = $$props2.elementScroll);
    if ("hasMore" in $$props2) $$invalidate(5, hasMore = $$props2.hasMore);
    if ("reverse" in $$props2) $$invalidate(6, reverse = $$props2.reverse);
    if ("window" in $$props2) $$invalidate(1, window2 = $$props2.window);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*element, reverse*/
    1088) {
      if (element2) {
        if (reverse) {
          $$invalidate(10, element2.scrollTop = element2.scrollHeight, element2);
        }
        element2.addEventListener("scroll", onScroll);
        element2.addEventListener("resize", onScroll);
      }
    }
    if ($$self.$$.dirty & /*isLoadMore, reverse, element, beforeScrollHeight, beforeScrollTop*/
    1984) {
      if (isLoadMore && reverse) {
        $$invalidate(10, element2.scrollTop = element2.scrollHeight - beforeScrollHeight + beforeScrollTop, element2);
      }
    }
  };
  return [
    elementScroll,
    window2,
    component,
    threshold,
    horizontal,
    hasMore,
    reverse,
    isLoadMore,
    beforeScrollHeight,
    beforeScrollTop,
    element2,
    div_binding
  ];
}
var InfiniteScroll = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance3, create_fragment3, safe_not_equal, {
      threshold: 3,
      horizontal: 4,
      elementScroll: 0,
      hasMore: 5,
      reverse: 6,
      window: 1
    });
  }
};

// node_modules/.pnpm/svelte-icons@2.1.0/node_modules/svelte-icons/di/DiHtml5.svelte
function create_default_slot2(ctx) {
  let path;
  return {
    c() {
      path = svg_element("path");
      attr(path, "d", "M4.665 3.411l2.063 23.176 9.258 2.574 9.284-2.578 2.065-23.172h-22.671zM8.951 8.911l-0.068-0.763h7.107v2.842h-4.005l0.259 2.911h3.746v2.842h-6.341l-0.698-7.833zM22.518 14.665l-0.667 7.483-0.043 0.48-5.822 1.616-5.814-1.616-0.398-4.463h2.849l0.202 2.267 3.163 0.854 3.165-0.856 0.329-3.686h-3.485v-2.842h6.587l-0.069 0.763zM23.032 8.911l-0.129 1.441-0.057 0.639h-6.846v-2.842h7.1l-0.068 0.762z");
    },
    m(target, anchor) {
      insert(target, path, anchor);
    },
    p: noop,
    d(detaching) {
      if (detaching) {
        detach(path);
      }
    }
  };
}
function create_fragment4(ctx) {
  let iconbase;
  let current;
  const iconbase_spread_levels = [
    { viewBox: "0 0 32 32" },
    /*$$props*/
    ctx[0]
  ];
  let iconbase_props = {
    $$slots: { default: [create_default_slot2] },
    $$scope: { ctx }
  };
  for (let i = 0; i < iconbase_spread_levels.length; i += 1) {
    iconbase_props = assign(iconbase_props, iconbase_spread_levels[i]);
  }
  iconbase = new IconBase_default({ props: iconbase_props });
  return {
    c() {
      create_component(iconbase.$$.fragment);
    },
    m(target, anchor) {
      mount_component(iconbase, target, anchor);
      current = true;
    },
    p(ctx2, [dirty]) {
      const iconbase_changes = dirty & /*$$props*/
      1 ? get_spread_update(iconbase_spread_levels, [iconbase_spread_levels[0], get_spread_object(
        /*$$props*/
        ctx2[0]
      )]) : {};
      if (dirty & /*$$scope*/
      2) {
        iconbase_changes.$$scope = { dirty, ctx: ctx2 };
      }
      iconbase.$set(iconbase_changes);
    },
    i(local) {
      if (current) return;
      transition_in(iconbase.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(iconbase.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(iconbase, detaching);
    }
  };
}
function instance4($$self, $$props, $$invalidate) {
  $$self.$$set = ($$new_props) => {
    $$invalidate(0, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
  };
  $$props = exclude_internal_props($$props);
  return [$$props];
}
var DiHtml5 = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance4, create_fragment4, safe_not_equal, {});
  }
};
var DiHtml5_default = DiHtml5;

// node_modules/.pnpm/svelte-icons@2.1.0/node_modules/svelte-icons/fa/FaFile.svelte
function create_default_slot3(ctx) {
  let path;
  return {
    c() {
      path = svg_element("path");
      attr(path, "d", "M224 136V0H24C10.7 0 0 10.7 0 24v464c0 13.3 10.7 24 24 24h336c13.3 0 24-10.7 24-24V160H248c-13.2 0-24-10.8-24-24zm160-14.1v6.1H256V0h6.1c6.4 0 12.5 2.5 17 7l97.9 98c4.5 4.5 7 10.6 7 16.9z");
    },
    m(target, anchor) {
      insert(target, path, anchor);
    },
    p: noop,
    d(detaching) {
      if (detaching) {
        detach(path);
      }
    }
  };
}
function create_fragment5(ctx) {
  let iconbase;
  let current;
  const iconbase_spread_levels = [
    { viewBox: "0 0 384 512" },
    /*$$props*/
    ctx[0]
  ];
  let iconbase_props = {
    $$slots: { default: [create_default_slot3] },
    $$scope: { ctx }
  };
  for (let i = 0; i < iconbase_spread_levels.length; i += 1) {
    iconbase_props = assign(iconbase_props, iconbase_spread_levels[i]);
  }
  iconbase = new IconBase_default({ props: iconbase_props });
  return {
    c() {
      create_component(iconbase.$$.fragment);
    },
    m(target, anchor) {
      mount_component(iconbase, target, anchor);
      current = true;
    },
    p(ctx2, [dirty]) {
      const iconbase_changes = dirty & /*$$props*/
      1 ? get_spread_update(iconbase_spread_levels, [iconbase_spread_levels[0], get_spread_object(
        /*$$props*/
        ctx2[0]
      )]) : {};
      if (dirty & /*$$scope*/
      2) {
        iconbase_changes.$$scope = { dirty, ctx: ctx2 };
      }
      iconbase.$set(iconbase_changes);
    },
    i(local) {
      if (current) return;
      transition_in(iconbase.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(iconbase.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(iconbase, detaching);
    }
  };
}
function instance5($$self, $$props, $$invalidate) {
  $$self.$$set = ($$new_props) => {
    $$invalidate(0, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
  };
  $$props = exclude_internal_props($$props);
  return [$$props];
}
var FaFile = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance5, create_fragment5, safe_not_equal, {});
  }
};
var FaFile_default = FaFile;

// node_modules/.pnpm/svelte-icons@2.1.0/node_modules/svelte-icons/fa/FaFileAudio.svelte
function create_default_slot4(ctx) {
  let path;
  return {
    c() {
      path = svg_element("path");
      attr(path, "d", "M224 136V0H24C10.7 0 0 10.7 0 24v464c0 13.3 10.7 24 24 24h336c13.3 0 24-10.7 24-24V160H248c-13.2 0-24-10.8-24-24zm-64 268c0 10.7-12.9 16-20.5 8.5L104 376H76c-6.6 0-12-5.4-12-12v-56c0-6.6 5.4-12 12-12h28l35.5-36.5c7.6-7.6 20.5-2.2 20.5 8.5v136zm33.2-47.6c9.1-9.3 9.1-24.1 0-33.4-22.1-22.8 12.2-56.2 34.4-33.5 27.2 27.9 27.2 72.4 0 100.4-21.8 22.3-56.9-10.4-34.4-33.5zm86-117.1c54.4 55.9 54.4 144.8 0 200.8-21.8 22.4-57-10.3-34.4-33.5 36.2-37.2 36.3-96.5 0-133.8-22.1-22.8 12.3-56.3 34.4-33.5zM384 121.9v6.1H256V0h6.1c6.4 0 12.5 2.5 17 7l97.9 98c4.5 4.5 7 10.6 7 16.9z");
    },
    m(target, anchor) {
      insert(target, path, anchor);
    },
    p: noop,
    d(detaching) {
      if (detaching) {
        detach(path);
      }
    }
  };
}
function create_fragment6(ctx) {
  let iconbase;
  let current;
  const iconbase_spread_levels = [
    { viewBox: "0 0 384 512" },
    /*$$props*/
    ctx[0]
  ];
  let iconbase_props = {
    $$slots: { default: [create_default_slot4] },
    $$scope: { ctx }
  };
  for (let i = 0; i < iconbase_spread_levels.length; i += 1) {
    iconbase_props = assign(iconbase_props, iconbase_spread_levels[i]);
  }
  iconbase = new IconBase_default({ props: iconbase_props });
  return {
    c() {
      create_component(iconbase.$$.fragment);
    },
    m(target, anchor) {
      mount_component(iconbase, target, anchor);
      current = true;
    },
    p(ctx2, [dirty]) {
      const iconbase_changes = dirty & /*$$props*/
      1 ? get_spread_update(iconbase_spread_levels, [iconbase_spread_levels[0], get_spread_object(
        /*$$props*/
        ctx2[0]
      )]) : {};
      if (dirty & /*$$scope*/
      2) {
        iconbase_changes.$$scope = { dirty, ctx: ctx2 };
      }
      iconbase.$set(iconbase_changes);
    },
    i(local) {
      if (current) return;
      transition_in(iconbase.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(iconbase.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(iconbase, detaching);
    }
  };
}
function instance6($$self, $$props, $$invalidate) {
  $$self.$$set = ($$new_props) => {
    $$invalidate(0, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
  };
  $$props = exclude_internal_props($$props);
  return [$$props];
}
var FaFileAudio = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance6, create_fragment6, safe_not_equal, {});
  }
};
var FaFileAudio_default = FaFileAudio;

// node_modules/.pnpm/svelte-icons@2.1.0/node_modules/svelte-icons/fa/FaFileCode.svelte
function create_default_slot5(ctx) {
  let path;
  return {
    c() {
      path = svg_element("path");
      attr(path, "d", "M384 121.941V128H256V0h6.059c6.365 0 12.47 2.529 16.971 7.029l97.941 97.941A24.005 24.005 0 0 1 384 121.941zM248 160c-13.2 0-24-10.8-24-24V0H24C10.745 0 0 10.745 0 24v464c0 13.255 10.745 24 24 24h336c13.255 0 24-10.745 24-24V160H248zM123.206 400.505a5.4 5.4 0 0 1-7.633.246l-64.866-60.812a5.4 5.4 0 0 1 0-7.879l64.866-60.812a5.4 5.4 0 0 1 7.633.246l19.579 20.885a5.4 5.4 0 0 1-.372 7.747L101.65 336l40.763 35.874a5.4 5.4 0 0 1 .372 7.747l-19.579 20.884zm51.295 50.479l-27.453-7.97a5.402 5.402 0 0 1-3.681-6.692l61.44-211.626a5.402 5.402 0 0 1 6.692-3.681l27.452 7.97a5.4 5.4 0 0 1 3.68 6.692l-61.44 211.626a5.397 5.397 0 0 1-6.69 3.681zm160.792-111.045l-64.866 60.812a5.4 5.4 0 0 1-7.633-.246l-19.58-20.885a5.4 5.4 0 0 1 .372-7.747L284.35 336l-40.763-35.874a5.4 5.4 0 0 1-.372-7.747l19.58-20.885a5.4 5.4 0 0 1 7.633-.246l64.866 60.812a5.4 5.4 0 0 1-.001 7.879z");
    },
    m(target, anchor) {
      insert(target, path, anchor);
    },
    p: noop,
    d(detaching) {
      if (detaching) {
        detach(path);
      }
    }
  };
}
function create_fragment7(ctx) {
  let iconbase;
  let current;
  const iconbase_spread_levels = [
    { viewBox: "0 0 384 512" },
    /*$$props*/
    ctx[0]
  ];
  let iconbase_props = {
    $$slots: { default: [create_default_slot5] },
    $$scope: { ctx }
  };
  for (let i = 0; i < iconbase_spread_levels.length; i += 1) {
    iconbase_props = assign(iconbase_props, iconbase_spread_levels[i]);
  }
  iconbase = new IconBase_default({ props: iconbase_props });
  return {
    c() {
      create_component(iconbase.$$.fragment);
    },
    m(target, anchor) {
      mount_component(iconbase, target, anchor);
      current = true;
    },
    p(ctx2, [dirty]) {
      const iconbase_changes = dirty & /*$$props*/
      1 ? get_spread_update(iconbase_spread_levels, [iconbase_spread_levels[0], get_spread_object(
        /*$$props*/
        ctx2[0]
      )]) : {};
      if (dirty & /*$$scope*/
      2) {
        iconbase_changes.$$scope = { dirty, ctx: ctx2 };
      }
      iconbase.$set(iconbase_changes);
    },
    i(local) {
      if (current) return;
      transition_in(iconbase.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(iconbase.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(iconbase, detaching);
    }
  };
}
function instance7($$self, $$props, $$invalidate) {
  $$self.$$set = ($$new_props) => {
    $$invalidate(0, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
  };
  $$props = exclude_internal_props($$props);
  return [$$props];
}
var FaFileCode = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance7, create_fragment7, safe_not_equal, {});
  }
};
var FaFileCode_default = FaFileCode;

// node_modules/.pnpm/svelte-icons@2.1.0/node_modules/svelte-icons/fa/FaFileCsv.svelte
function create_default_slot6(ctx) {
  let path;
  return {
    c() {
      path = svg_element("path");
      attr(path, "d", "M224 136V0H24C10.7 0 0 10.7 0 24v464c0 13.3 10.7 24 24 24h336c13.3 0 24-10.7 24-24V160H248c-13.2 0-24-10.8-24-24zm-96 144c0 4.42-3.58 8-8 8h-8c-8.84 0-16 7.16-16 16v32c0 8.84 7.16 16 16 16h8c4.42 0 8 3.58 8 8v16c0 4.42-3.58 8-8 8h-8c-26.51 0-48-21.49-48-48v-32c0-26.51 21.49-48 48-48h8c4.42 0 8 3.58 8 8v16zm44.27 104H160c-4.42 0-8-3.58-8-8v-16c0-4.42 3.58-8 8-8h12.27c5.95 0 10.41-3.5 10.41-6.62 0-1.3-.75-2.66-2.12-3.84l-21.89-18.77c-8.47-7.22-13.33-17.48-13.33-28.14 0-21.3 19.02-38.62 42.41-38.62H200c4.42 0 8 3.58 8 8v16c0 4.42-3.58 8-8 8h-12.27c-5.95 0-10.41 3.5-10.41 6.62 0 1.3.75 2.66 2.12 3.84l21.89 18.77c8.47 7.22 13.33 17.48 13.33 28.14.01 21.29-19 38.62-42.39 38.62zM256 264v20.8c0 20.27 5.7 40.17 16 56.88 10.3-16.7 16-36.61 16-56.88V264c0-4.42 3.58-8 8-8h16c4.42 0 8 3.58 8 8v20.8c0 35.48-12.88 68.89-36.28 94.09-3.02 3.25-7.27 5.11-11.72 5.11s-8.7-1.86-11.72-5.11c-23.4-25.2-36.28-58.61-36.28-94.09V264c0-4.42 3.58-8 8-8h16c4.42 0 8 3.58 8 8zm121-159L279.1 7c-4.5-4.5-10.6-7-17-7H256v128h128v-6.1c0-6.3-2.5-12.4-7-16.9z");
    },
    m(target, anchor) {
      insert(target, path, anchor);
    },
    p: noop,
    d(detaching) {
      if (detaching) {
        detach(path);
      }
    }
  };
}
function create_fragment8(ctx) {
  let iconbase;
  let current;
  const iconbase_spread_levels = [
    { viewBox: "0 0 384 512" },
    /*$$props*/
    ctx[0]
  ];
  let iconbase_props = {
    $$slots: { default: [create_default_slot6] },
    $$scope: { ctx }
  };
  for (let i = 0; i < iconbase_spread_levels.length; i += 1) {
    iconbase_props = assign(iconbase_props, iconbase_spread_levels[i]);
  }
  iconbase = new IconBase_default({ props: iconbase_props });
  return {
    c() {
      create_component(iconbase.$$.fragment);
    },
    m(target, anchor) {
      mount_component(iconbase, target, anchor);
      current = true;
    },
    p(ctx2, [dirty]) {
      const iconbase_changes = dirty & /*$$props*/
      1 ? get_spread_update(iconbase_spread_levels, [iconbase_spread_levels[0], get_spread_object(
        /*$$props*/
        ctx2[0]
      )]) : {};
      if (dirty & /*$$scope*/
      2) {
        iconbase_changes.$$scope = { dirty, ctx: ctx2 };
      }
      iconbase.$set(iconbase_changes);
    },
    i(local) {
      if (current) return;
      transition_in(iconbase.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(iconbase.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(iconbase, detaching);
    }
  };
}
function instance8($$self, $$props, $$invalidate) {
  $$self.$$set = ($$new_props) => {
    $$invalidate(0, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
  };
  $$props = exclude_internal_props($$props);
  return [$$props];
}
var FaFileCsv = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance8, create_fragment8, safe_not_equal, {});
  }
};
var FaFileCsv_default = FaFileCsv;

// node_modules/.pnpm/svelte-icons@2.1.0/node_modules/svelte-icons/fa/FaFileExcel.svelte
function create_default_slot7(ctx) {
  let path;
  return {
    c() {
      path = svg_element("path");
      attr(path, "d", "M224 136V0H24C10.7 0 0 10.7 0 24v464c0 13.3 10.7 24 24 24h336c13.3 0 24-10.7 24-24V160H248c-13.2 0-24-10.8-24-24zm60.1 106.5L224 336l60.1 93.5c5.1 8-.6 18.5-10.1 18.5h-34.9c-4.4 0-8.5-2.4-10.6-6.3C208.9 405.5 192 373 192 373c-6.4 14.8-10 20-36.6 68.8-2.1 3.9-6.1 6.3-10.5 6.3H110c-9.5 0-15.2-10.5-10.1-18.5l60.3-93.5-60.3-93.5c-5.2-8 .6-18.5 10.1-18.5h34.8c4.4 0 8.5 2.4 10.6 6.3 26.1 48.8 20 33.6 36.6 68.5 0 0 6.1-11.7 36.6-68.5 2.1-3.9 6.2-6.3 10.6-6.3H274c9.5-.1 15.2 10.4 10.1 18.4zM384 121.9v6.1H256V0h6.1c6.4 0 12.5 2.5 17 7l97.9 98c4.5 4.5 7 10.6 7 16.9z");
    },
    m(target, anchor) {
      insert(target, path, anchor);
    },
    p: noop,
    d(detaching) {
      if (detaching) {
        detach(path);
      }
    }
  };
}
function create_fragment9(ctx) {
  let iconbase;
  let current;
  const iconbase_spread_levels = [
    { viewBox: "0 0 384 512" },
    /*$$props*/
    ctx[0]
  ];
  let iconbase_props = {
    $$slots: { default: [create_default_slot7] },
    $$scope: { ctx }
  };
  for (let i = 0; i < iconbase_spread_levels.length; i += 1) {
    iconbase_props = assign(iconbase_props, iconbase_spread_levels[i]);
  }
  iconbase = new IconBase_default({ props: iconbase_props });
  return {
    c() {
      create_component(iconbase.$$.fragment);
    },
    m(target, anchor) {
      mount_component(iconbase, target, anchor);
      current = true;
    },
    p(ctx2, [dirty]) {
      const iconbase_changes = dirty & /*$$props*/
      1 ? get_spread_update(iconbase_spread_levels, [iconbase_spread_levels[0], get_spread_object(
        /*$$props*/
        ctx2[0]
      )]) : {};
      if (dirty & /*$$scope*/
      2) {
        iconbase_changes.$$scope = { dirty, ctx: ctx2 };
      }
      iconbase.$set(iconbase_changes);
    },
    i(local) {
      if (current) return;
      transition_in(iconbase.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(iconbase.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(iconbase, detaching);
    }
  };
}
function instance9($$self, $$props, $$invalidate) {
  $$self.$$set = ($$new_props) => {
    $$invalidate(0, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
  };
  $$props = exclude_internal_props($$props);
  return [$$props];
}
var FaFileExcel = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance9, create_fragment9, safe_not_equal, {});
  }
};
var FaFileExcel_default = FaFileExcel;

// node_modules/.pnpm/svelte-icons@2.1.0/node_modules/svelte-icons/fa/FaFileImage.svelte
function create_default_slot8(ctx) {
  let path;
  return {
    c() {
      path = svg_element("path");
      attr(path, "d", "M384 121.941V128H256V0h6.059a24 24 0 0 1 16.97 7.029l97.941 97.941a24.002 24.002 0 0 1 7.03 16.971zM248 160c-13.2 0-24-10.8-24-24V0H24C10.745 0 0 10.745 0 24v464c0 13.255 10.745 24 24 24h336c13.255 0 24-10.745 24-24V160H248zm-135.455 16c26.51 0 48 21.49 48 48s-21.49 48-48 48-48-21.49-48-48 21.491-48 48-48zm208 240h-256l.485-48.485L104.545 328c4.686-4.686 11.799-4.201 16.485.485L160.545 368 264.06 264.485c4.686-4.686 12.284-4.686 16.971 0L320.545 304v112z");
    },
    m(target, anchor) {
      insert(target, path, anchor);
    },
    p: noop,
    d(detaching) {
      if (detaching) {
        detach(path);
      }
    }
  };
}
function create_fragment10(ctx) {
  let iconbase;
  let current;
  const iconbase_spread_levels = [
    { viewBox: "0 0 384 512" },
    /*$$props*/
    ctx[0]
  ];
  let iconbase_props = {
    $$slots: { default: [create_default_slot8] },
    $$scope: { ctx }
  };
  for (let i = 0; i < iconbase_spread_levels.length; i += 1) {
    iconbase_props = assign(iconbase_props, iconbase_spread_levels[i]);
  }
  iconbase = new IconBase_default({ props: iconbase_props });
  return {
    c() {
      create_component(iconbase.$$.fragment);
    },
    m(target, anchor) {
      mount_component(iconbase, target, anchor);
      current = true;
    },
    p(ctx2, [dirty]) {
      const iconbase_changes = dirty & /*$$props*/
      1 ? get_spread_update(iconbase_spread_levels, [iconbase_spread_levels[0], get_spread_object(
        /*$$props*/
        ctx2[0]
      )]) : {};
      if (dirty & /*$$scope*/
      2) {
        iconbase_changes.$$scope = { dirty, ctx: ctx2 };
      }
      iconbase.$set(iconbase_changes);
    },
    i(local) {
      if (current) return;
      transition_in(iconbase.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(iconbase.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(iconbase, detaching);
    }
  };
}
function instance10($$self, $$props, $$invalidate) {
  $$self.$$set = ($$new_props) => {
    $$invalidate(0, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
  };
  $$props = exclude_internal_props($$props);
  return [$$props];
}
var FaFileImage = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance10, create_fragment10, safe_not_equal, {});
  }
};
var FaFileImage_default = FaFileImage;

// node_modules/.pnpm/svelte-icons@2.1.0/node_modules/svelte-icons/fa/FaFilePdf.svelte
function create_default_slot9(ctx) {
  let path;
  return {
    c() {
      path = svg_element("path");
      attr(path, "d", "M181.9 256.1c-5-16-4.9-46.9-2-46.9 8.4 0 7.6 36.9 2 46.9zm-1.7 47.2c-7.7 20.2-17.3 43.3-28.4 62.7 18.3-7 39-17.2 62.9-21.9-12.7-9.6-24.9-23.4-34.5-40.8zM86.1 428.1c0 .8 13.2-5.4 34.9-40.2-6.7 6.3-29.1 24.5-34.9 40.2zM248 160h136v328c0 13.3-10.7 24-24 24H24c-13.3 0-24-10.7-24-24V24C0 10.7 10.7 0 24 0h200v136c0 13.2 10.8 24 24 24zm-8 171.8c-20-12.2-33.3-29-42.7-53.8 4.5-18.5 11.6-46.6 6.2-64.2-4.7-29.4-42.4-26.5-47.8-6.8-5 18.3-.4 44.1 8.1 77-11.6 27.6-28.7 64.6-40.8 85.8-.1 0-.1.1-.2.1-27.1 13.9-73.6 44.5-54.5 68 5.6 6.9 16 10 21.5 10 17.9 0 35.7-18 61.1-61.8 25.8-8.5 54.1-19.1 79-23.2 21.7 11.8 47.1 19.5 64 19.5 29.2 0 31.2-32 19.7-43.4-13.9-13.6-54.3-9.7-73.6-7.2zM377 105L279 7c-4.5-4.5-10.6-7-17-7h-6v128h128v-6.1c0-6.3-2.5-12.4-7-16.9zm-74.1 255.3c4.1-2.7-2.5-11.9-42.8-9 37.1 15.8 42.8 9 42.8 9z");
    },
    m(target, anchor) {
      insert(target, path, anchor);
    },
    p: noop,
    d(detaching) {
      if (detaching) {
        detach(path);
      }
    }
  };
}
function create_fragment11(ctx) {
  let iconbase;
  let current;
  const iconbase_spread_levels = [
    { viewBox: "0 0 384 512" },
    /*$$props*/
    ctx[0]
  ];
  let iconbase_props = {
    $$slots: { default: [create_default_slot9] },
    $$scope: { ctx }
  };
  for (let i = 0; i < iconbase_spread_levels.length; i += 1) {
    iconbase_props = assign(iconbase_props, iconbase_spread_levels[i]);
  }
  iconbase = new IconBase_default({ props: iconbase_props });
  return {
    c() {
      create_component(iconbase.$$.fragment);
    },
    m(target, anchor) {
      mount_component(iconbase, target, anchor);
      current = true;
    },
    p(ctx2, [dirty]) {
      const iconbase_changes = dirty & /*$$props*/
      1 ? get_spread_update(iconbase_spread_levels, [iconbase_spread_levels[0], get_spread_object(
        /*$$props*/
        ctx2[0]
      )]) : {};
      if (dirty & /*$$scope*/
      2) {
        iconbase_changes.$$scope = { dirty, ctx: ctx2 };
      }
      iconbase.$set(iconbase_changes);
    },
    i(local) {
      if (current) return;
      transition_in(iconbase.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(iconbase.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(iconbase, detaching);
    }
  };
}
function instance11($$self, $$props, $$invalidate) {
  $$self.$$set = ($$new_props) => {
    $$invalidate(0, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
  };
  $$props = exclude_internal_props($$props);
  return [$$props];
}
var FaFilePdf = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance11, create_fragment11, safe_not_equal, {});
  }
};
var FaFilePdf_default = FaFilePdf;

// node_modules/.pnpm/svelte-icons@2.1.0/node_modules/svelte-icons/fa/FaFilePowerpoint.svelte
function create_default_slot10(ctx) {
  let path;
  return {
    c() {
      path = svg_element("path");
      attr(path, "d", "M193.7 271.2c8.8 0 15.5 2.7 20.3 8.1 9.6 10.9 9.8 32.7-.2 44.1-4.9 5.6-11.9 8.5-21.1 8.5h-26.9v-60.7h27.9zM377 105L279 7c-4.5-4.5-10.6-7-17-7h-6v128h128v-6.1c0-6.3-2.5-12.4-7-16.9zm-153 31V0H24C10.7 0 0 10.7 0 24v464c0 13.3 10.7 24 24 24h336c13.3 0 24-10.7 24-24V160H248c-13.2 0-24-10.8-24-24zm53 165.2c0 90.3-88.8 77.6-111.1 77.6V436c0 6.6-5.4 12-12 12h-30.8c-6.6 0-12-5.4-12-12V236.2c0-6.6 5.4-12 12-12h81c44.5 0 72.9 32.8 72.9 77z");
    },
    m(target, anchor) {
      insert(target, path, anchor);
    },
    p: noop,
    d(detaching) {
      if (detaching) {
        detach(path);
      }
    }
  };
}
function create_fragment12(ctx) {
  let iconbase;
  let current;
  const iconbase_spread_levels = [
    { viewBox: "0 0 384 512" },
    /*$$props*/
    ctx[0]
  ];
  let iconbase_props = {
    $$slots: { default: [create_default_slot10] },
    $$scope: { ctx }
  };
  for (let i = 0; i < iconbase_spread_levels.length; i += 1) {
    iconbase_props = assign(iconbase_props, iconbase_spread_levels[i]);
  }
  iconbase = new IconBase_default({ props: iconbase_props });
  return {
    c() {
      create_component(iconbase.$$.fragment);
    },
    m(target, anchor) {
      mount_component(iconbase, target, anchor);
      current = true;
    },
    p(ctx2, [dirty]) {
      const iconbase_changes = dirty & /*$$props*/
      1 ? get_spread_update(iconbase_spread_levels, [iconbase_spread_levels[0], get_spread_object(
        /*$$props*/
        ctx2[0]
      )]) : {};
      if (dirty & /*$$scope*/
      2) {
        iconbase_changes.$$scope = { dirty, ctx: ctx2 };
      }
      iconbase.$set(iconbase_changes);
    },
    i(local) {
      if (current) return;
      transition_in(iconbase.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(iconbase.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(iconbase, detaching);
    }
  };
}
function instance12($$self, $$props, $$invalidate) {
  $$self.$$set = ($$new_props) => {
    $$invalidate(0, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
  };
  $$props = exclude_internal_props($$props);
  return [$$props];
}
var FaFilePowerpoint = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance12, create_fragment12, safe_not_equal, {});
  }
};
var FaFilePowerpoint_default = FaFilePowerpoint;

// node_modules/.pnpm/svelte-icons@2.1.0/node_modules/svelte-icons/fa/FaFileVideo.svelte
function create_default_slot11(ctx) {
  let path;
  return {
    c() {
      path = svg_element("path");
      attr(path, "d", "M384 121.941V128H256V0h6.059c6.365 0 12.47 2.529 16.971 7.029l97.941 97.941A24.005 24.005 0 0 1 384 121.941zM224 136V0H24C10.745 0 0 10.745 0 24v464c0 13.255 10.745 24 24 24h336c13.255 0 24-10.745 24-24V160H248c-13.2 0-24-10.8-24-24zm96 144.016v111.963c0 21.445-25.943 31.998-40.971 16.971L224 353.941V392c0 13.255-10.745 24-24 24H88c-13.255 0-24-10.745-24-24V280c0-13.255 10.745-24 24-24h112c13.255 0 24 10.745 24 24v38.059l55.029-55.013c15.011-15.01 40.971-4.491 40.971 16.97z");
    },
    m(target, anchor) {
      insert(target, path, anchor);
    },
    p: noop,
    d(detaching) {
      if (detaching) {
        detach(path);
      }
    }
  };
}
function create_fragment13(ctx) {
  let iconbase;
  let current;
  const iconbase_spread_levels = [
    { viewBox: "0 0 384 512" },
    /*$$props*/
    ctx[0]
  ];
  let iconbase_props = {
    $$slots: { default: [create_default_slot11] },
    $$scope: { ctx }
  };
  for (let i = 0; i < iconbase_spread_levels.length; i += 1) {
    iconbase_props = assign(iconbase_props, iconbase_spread_levels[i]);
  }
  iconbase = new IconBase_default({ props: iconbase_props });
  return {
    c() {
      create_component(iconbase.$$.fragment);
    },
    m(target, anchor) {
      mount_component(iconbase, target, anchor);
      current = true;
    },
    p(ctx2, [dirty]) {
      const iconbase_changes = dirty & /*$$props*/
      1 ? get_spread_update(iconbase_spread_levels, [iconbase_spread_levels[0], get_spread_object(
        /*$$props*/
        ctx2[0]
      )]) : {};
      if (dirty & /*$$scope*/
      2) {
        iconbase_changes.$$scope = { dirty, ctx: ctx2 };
      }
      iconbase.$set(iconbase_changes);
    },
    i(local) {
      if (current) return;
      transition_in(iconbase.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(iconbase.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(iconbase, detaching);
    }
  };
}
function instance13($$self, $$props, $$invalidate) {
  $$self.$$set = ($$new_props) => {
    $$invalidate(0, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
  };
  $$props = exclude_internal_props($$props);
  return [$$props];
}
var FaFileVideo = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance13, create_fragment13, safe_not_equal, {});
  }
};
var FaFileVideo_default = FaFileVideo;

// node_modules/.pnpm/svelte-icons@2.1.0/node_modules/svelte-icons/fa/FaFileWord.svelte
function create_default_slot12(ctx) {
  let path;
  return {
    c() {
      path = svg_element("path");
      attr(path, "d", "M224 136V0H24C10.7 0 0 10.7 0 24v464c0 13.3 10.7 24 24 24h336c13.3 0 24-10.7 24-24V160H248c-13.2 0-24-10.8-24-24zm57.1 120H305c7.7 0 13.4 7.1 11.7 14.7l-38 168c-1.2 5.5-6.1 9.3-11.7 9.3h-38c-5.5 0-10.3-3.8-11.6-9.1-25.8-103.5-20.8-81.2-25.6-110.5h-.5c-1.1 14.3-2.4 17.4-25.6 110.5-1.3 5.3-6.1 9.1-11.6 9.1H117c-5.6 0-10.5-3.9-11.7-9.4l-37.8-168c-1.7-7.5 4-14.6 11.7-14.6h24.5c5.7 0 10.7 4 11.8 9.7 15.6 78 20.1 109.5 21 122.2 1.6-10.2 7.3-32.7 29.4-122.7 1.3-5.4 6.1-9.1 11.7-9.1h29.1c5.6 0 10.4 3.8 11.7 9.2 24 100.4 28.8 124 29.6 129.4-.2-11.2-2.6-17.8 21.6-129.2 1-5.6 5.9-9.5 11.5-9.5zM384 121.9v6.1H256V0h6.1c6.4 0 12.5 2.5 17 7l97.9 98c4.5 4.5 7 10.6 7 16.9z");
    },
    m(target, anchor) {
      insert(target, path, anchor);
    },
    p: noop,
    d(detaching) {
      if (detaching) {
        detach(path);
      }
    }
  };
}
function create_fragment14(ctx) {
  let iconbase;
  let current;
  const iconbase_spread_levels = [
    { viewBox: "0 0 384 512" },
    /*$$props*/
    ctx[0]
  ];
  let iconbase_props = {
    $$slots: { default: [create_default_slot12] },
    $$scope: { ctx }
  };
  for (let i = 0; i < iconbase_spread_levels.length; i += 1) {
    iconbase_props = assign(iconbase_props, iconbase_spread_levels[i]);
  }
  iconbase = new IconBase_default({ props: iconbase_props });
  return {
    c() {
      create_component(iconbase.$$.fragment);
    },
    m(target, anchor) {
      mount_component(iconbase, target, anchor);
      current = true;
    },
    p(ctx2, [dirty]) {
      const iconbase_changes = dirty & /*$$props*/
      1 ? get_spread_update(iconbase_spread_levels, [iconbase_spread_levels[0], get_spread_object(
        /*$$props*/
        ctx2[0]
      )]) : {};
      if (dirty & /*$$scope*/
      2) {
        iconbase_changes.$$scope = { dirty, ctx: ctx2 };
      }
      iconbase.$set(iconbase_changes);
    },
    i(local) {
      if (current) return;
      transition_in(iconbase.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(iconbase.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(iconbase, detaching);
    }
  };
}
function instance14($$self, $$props, $$invalidate) {
  $$self.$$set = ($$new_props) => {
    $$invalidate(0, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
  };
  $$props = exclude_internal_props($$props);
  return [$$props];
}
var FaFileWord = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance14, create_fragment14, safe_not_equal, {});
  }
};
var FaFileWord_default = FaFileWord;

// node_modules/.pnpm/svelte-icons@2.1.0/node_modules/svelte-icons/fa/FaStickyNote.svelte
function create_default_slot13(ctx) {
  let path;
  return {
    c() {
      path = svg_element("path");
      attr(path, "d", "M312 320h136V56c0-13.3-10.7-24-24-24H24C10.7 32 0 42.7 0 56v400c0 13.3 10.7 24 24 24h264V344c0-13.2 10.8-24 24-24zm129 55l-98 98c-4.5 4.5-10.6 7-17 7h-6V352h128v6.1c0 6.3-2.5 12.4-7 16.9z");
    },
    m(target, anchor) {
      insert(target, path, anchor);
    },
    p: noop,
    d(detaching) {
      if (detaching) {
        detach(path);
      }
    }
  };
}
function create_fragment15(ctx) {
  let iconbase;
  let current;
  const iconbase_spread_levels = [
    { viewBox: "0 0 448 512" },
    /*$$props*/
    ctx[0]
  ];
  let iconbase_props = {
    $$slots: { default: [create_default_slot13] },
    $$scope: { ctx }
  };
  for (let i = 0; i < iconbase_spread_levels.length; i += 1) {
    iconbase_props = assign(iconbase_props, iconbase_spread_levels[i]);
  }
  iconbase = new IconBase_default({ props: iconbase_props });
  return {
    c() {
      create_component(iconbase.$$.fragment);
    },
    m(target, anchor) {
      mount_component(iconbase, target, anchor);
      current = true;
    },
    p(ctx2, [dirty]) {
      const iconbase_changes = dirty & /*$$props*/
      1 ? get_spread_update(iconbase_spread_levels, [iconbase_spread_levels[0], get_spread_object(
        /*$$props*/
        ctx2[0]
      )]) : {};
      if (dirty & /*$$scope*/
      2) {
        iconbase_changes.$$scope = { dirty, ctx: ctx2 };
      }
      iconbase.$set(iconbase_changes);
    },
    i(local) {
      if (current) return;
      transition_in(iconbase.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(iconbase.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(iconbase, detaching);
    }
  };
}
function instance15($$self, $$props, $$invalidate) {
  $$self.$$set = ($$new_props) => {
    $$invalidate(0, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
  };
  $$props = exclude_internal_props($$props);
  return [$$props];
}
var FaStickyNote = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance15, create_fragment15, safe_not_equal, {});
  }
};
var FaStickyNote_default = FaStickyNote;

// src/Components/ExtensionIcon.svelte
function create_if_block3(ctx) {
  let span;
  let show_if;
  let show_if_1;
  let show_if_2;
  let show_if_3;
  let show_if_4;
  let show_if_5;
  let show_if_6;
  let show_if_7;
  let show_if_8;
  let show_if_9;
  let show_if_10;
  let current_block_type_index;
  let if_block;
  let current;
  const if_block_creators = [
    create_if_block_1,
    create_if_block_2,
    create_if_block_3,
    create_if_block_4,
    create_if_block_5,
    create_if_block_6,
    create_if_block_7,
    create_if_block_8,
    create_if_block_9,
    create_if_block_10,
    create_if_block_11,
    create_else_block
  ];
  const if_blocks = [];
  function select_block_type(ctx2, dirty) {
    if (dirty & /*path*/
    1) show_if = null;
    if (dirty & /*path*/
    1) show_if_1 = null;
    if (dirty & /*path*/
    1) show_if_2 = null;
    if (dirty & /*path*/
    1) show_if_3 = null;
    if (dirty & /*path*/
    1) show_if_4 = null;
    if (dirty & /*path*/
    1) show_if_5 = null;
    if (dirty & /*path*/
    1) show_if_6 = null;
    if (dirty & /*path*/
    1) show_if_7 = null;
    if (dirty & /*path*/
    1) show_if_8 = null;
    if (dirty & /*path*/
    1) show_if_9 = null;
    if (dirty & /*path*/
    1) show_if_10 = null;
    if (show_if == null) show_if = !!isImg(
      /*path*/
      ctx2[0]
    );
    if (show_if) return 0;
    if (show_if_1 == null) show_if_1 = !!/*path*/
    ctx2[0].endsWith(".html");
    if (show_if_1) return 1;
    if (show_if_2 == null) show_if_2 = !!/*path*/
    (ctx2[0].endsWith(".xls") || /*path*/
    ctx2[0].endsWith(".xlsx"));
    if (show_if_2) return 2;
    if (show_if_3 == null) show_if_3 = !!/*path*/
    ctx2[0].endsWith(".csv");
    if (show_if_3) return 3;
    if (show_if_4 == null) show_if_4 = !!/*path*/
    ctx2[0].endsWith(".pdf");
    if (show_if_4) return 4;
    if (show_if_5 == null) show_if_5 = !!/*path*/
    ctx2[0].endsWith(".txt");
    if (show_if_5) return 5;
    if (show_if_6 == null) show_if_6 = !!/*path*/
    (ctx2[0].endsWith(".mp3") || /*path*/
    ctx2[0].endsWith("opus"));
    if (show_if_6) return 6;
    if (show_if_7 == null) show_if_7 = !!/*path*/
    (ctx2[0].endsWith(".mp4") || /*path*/
    ctx2[0].endsWith(".webm"));
    if (show_if_7) return 7;
    if (show_if_8 == null) show_if_8 = !!/*path*/
    (ctx2[0].endsWith(".docx") || /*path*/
    ctx2[0].endsWith(".doc"));
    if (show_if_8) return 8;
    if (show_if_9 == null) show_if_9 = !!/*path*/
    (ctx2[0].endsWith(".ppt") || /*path*/
    ctx2[0].endsWith(".pptx"));
    if (show_if_9) return 9;
    if (show_if_10 == null) show_if_10 = !!/*path*/
    (ctx2[0].endsWith(".js") || /*path*/
    ctx2[0].endsWith(".ts") || /*path*/
    ctx2[0].endsWith(".c") || /*path*/
    ctx2[0].endsWith(".py"));
    if (show_if_10) return 10;
    return 11;
  }
  current_block_type_index = select_block_type(ctx, -1);
  if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
  return {
    c() {
      span = element("span");
      if_block.c();
      attr(span, "class", ICON);
    },
    m(target, anchor) {
      insert(target, span, anchor);
      if_blocks[current_block_type_index].m(span, null);
      current = true;
    },
    p(ctx2, dirty) {
      let previous_block_index = current_block_type_index;
      current_block_type_index = select_block_type(ctx2, dirty);
      if (current_block_type_index !== previous_block_index) {
        group_outros();
        transition_out(if_blocks[previous_block_index], 1, 1, () => {
          if_blocks[previous_block_index] = null;
        });
        check_outros();
        if_block = if_blocks[current_block_type_index];
        if (!if_block) {
          if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx2);
          if_block.c();
        } else {
        }
        transition_in(if_block, 1);
        if_block.m(span, null);
      }
    },
    i(local) {
      if (current) return;
      transition_in(if_block);
      current = true;
    },
    o(local) {
      transition_out(if_block);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(span);
      }
      if_blocks[current_block_type_index].d();
    }
  };
}
function create_else_block(ctx) {
  let fafile;
  let current;
  fafile = new FaFile_default({});
  return {
    c() {
      create_component(fafile.$$.fragment);
    },
    m(target, anchor) {
      mount_component(fafile, target, anchor);
      current = true;
    },
    i(local) {
      if (current) return;
      transition_in(fafile.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(fafile.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(fafile, detaching);
    }
  };
}
function create_if_block_11(ctx) {
  let fafilecode;
  let current;
  fafilecode = new FaFileCode_default({});
  return {
    c() {
      create_component(fafilecode.$$.fragment);
    },
    m(target, anchor) {
      mount_component(fafilecode, target, anchor);
      current = true;
    },
    i(local) {
      if (current) return;
      transition_in(fafilecode.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(fafilecode.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(fafilecode, detaching);
    }
  };
}
function create_if_block_10(ctx) {
  let fafilepowerpoint;
  let current;
  fafilepowerpoint = new FaFilePowerpoint_default({});
  return {
    c() {
      create_component(fafilepowerpoint.$$.fragment);
    },
    m(target, anchor) {
      mount_component(fafilepowerpoint, target, anchor);
      current = true;
    },
    i(local) {
      if (current) return;
      transition_in(fafilepowerpoint.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(fafilepowerpoint.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(fafilepowerpoint, detaching);
    }
  };
}
function create_if_block_9(ctx) {
  let fafileword;
  let current;
  fafileword = new FaFileWord_default({});
  return {
    c() {
      create_component(fafileword.$$.fragment);
    },
    m(target, anchor) {
      mount_component(fafileword, target, anchor);
      current = true;
    },
    i(local) {
      if (current) return;
      transition_in(fafileword.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(fafileword.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(fafileword, detaching);
    }
  };
}
function create_if_block_8(ctx) {
  let fafilevideo;
  let current;
  fafilevideo = new FaFileVideo_default({});
  return {
    c() {
      create_component(fafilevideo.$$.fragment);
    },
    m(target, anchor) {
      mount_component(fafilevideo, target, anchor);
      current = true;
    },
    i(local) {
      if (current) return;
      transition_in(fafilevideo.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(fafilevideo.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(fafilevideo, detaching);
    }
  };
}
function create_if_block_7(ctx) {
  let fafileaudio;
  let current;
  fafileaudio = new FaFileAudio_default({});
  return {
    c() {
      create_component(fafileaudio.$$.fragment);
    },
    m(target, anchor) {
      mount_component(fafileaudio, target, anchor);
      current = true;
    },
    i(local) {
      if (current) return;
      transition_in(fafileaudio.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(fafileaudio.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(fafileaudio, detaching);
    }
  };
}
function create_if_block_6(ctx) {
  let fastickynote;
  let current;
  fastickynote = new FaStickyNote_default({});
  return {
    c() {
      create_component(fastickynote.$$.fragment);
    },
    m(target, anchor) {
      mount_component(fastickynote, target, anchor);
      current = true;
    },
    i(local) {
      if (current) return;
      transition_in(fastickynote.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(fastickynote.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(fastickynote, detaching);
    }
  };
}
function create_if_block_5(ctx) {
  let fafilepdf;
  let current;
  fafilepdf = new FaFilePdf_default({});
  return {
    c() {
      create_component(fafilepdf.$$.fragment);
    },
    m(target, anchor) {
      mount_component(fafilepdf, target, anchor);
      current = true;
    },
    i(local) {
      if (current) return;
      transition_in(fafilepdf.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(fafilepdf.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(fafilepdf, detaching);
    }
  };
}
function create_if_block_4(ctx) {
  let fafilecsv;
  let current;
  fafilecsv = new FaFileCsv_default({});
  return {
    c() {
      create_component(fafilecsv.$$.fragment);
    },
    m(target, anchor) {
      mount_component(fafilecsv, target, anchor);
      current = true;
    },
    i(local) {
      if (current) return;
      transition_in(fafilecsv.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(fafilecsv.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(fafilecsv, detaching);
    }
  };
}
function create_if_block_3(ctx) {
  let fafileexcel;
  let current;
  fafileexcel = new FaFileExcel_default({});
  return {
    c() {
      create_component(fafileexcel.$$.fragment);
    },
    m(target, anchor) {
      mount_component(fafileexcel, target, anchor);
      current = true;
    },
    i(local) {
      if (current) return;
      transition_in(fafileexcel.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(fafileexcel.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(fafileexcel, detaching);
    }
  };
}
function create_if_block_2(ctx) {
  let dihtml5;
  let current;
  dihtml5 = new DiHtml5_default({});
  return {
    c() {
      create_component(dihtml5.$$.fragment);
    },
    m(target, anchor) {
      mount_component(dihtml5, target, anchor);
      current = true;
    },
    i(local) {
      if (current) return;
      transition_in(dihtml5.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(dihtml5.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(dihtml5, detaching);
    }
  };
}
function create_if_block_1(ctx) {
  let fafileimage;
  let current;
  fafileimage = new FaFileImage_default({});
  return {
    c() {
      create_component(fafileimage.$$.fragment);
    },
    m(target, anchor) {
      mount_component(fafileimage, target, anchor);
      current = true;
    },
    i(local) {
      if (current) return;
      transition_in(fafileimage.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(fafileimage.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(fafileimage, detaching);
    }
  };
}
function create_fragment16(ctx) {
  let show_if = !/*path*/
  ctx[0].endsWith(".md");
  let if_block_anchor;
  let current;
  let if_block = show_if && create_if_block3(ctx);
  return {
    c() {
      if (if_block) if_block.c();
      if_block_anchor = empty();
    },
    m(target, anchor) {
      if (if_block) if_block.m(target, anchor);
      insert(target, if_block_anchor, anchor);
      current = true;
    },
    p(ctx2, [dirty]) {
      if (dirty & /*path*/
      1) show_if = !/*path*/
      ctx2[0].endsWith(".md");
      if (show_if) {
        if (if_block) {
          if_block.p(ctx2, dirty);
          if (dirty & /*path*/
          1) {
            transition_in(if_block, 1);
          }
        } else {
          if_block = create_if_block3(ctx2);
          if_block.c();
          transition_in(if_block, 1);
          if_block.m(if_block_anchor.parentNode, if_block_anchor);
        }
      } else if (if_block) {
        group_outros();
        transition_out(if_block, 1, 1, () => {
          if_block = null;
        });
        check_outros();
      }
    },
    i(local) {
      if (current) return;
      transition_in(if_block);
      current = true;
    },
    o(local) {
      transition_out(if_block);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(if_block_anchor);
      }
      if (if_block) if_block.d(detaching);
    }
  };
}
function instance16($$self, $$props, $$invalidate) {
  let { path } = $$props;
  $$self.$$set = ($$props2) => {
    if ("path" in $$props2) $$invalidate(0, path = $$props2.path);
  };
  return [path];
}
var ExtensionIcon = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance16, create_fragment16, safe_not_equal, { path: 0 });
  }
};
var ExtensionIcon_default = ExtensionIcon;

// src/Components/ImgThumbnail.svelte
function create_catch_block(ctx) {
  return { c: noop, m: noop, p: noop, d: noop };
}
function create_then_block(ctx) {
  let div;
  let img_1;
  let img_1_src_value;
  return {
    c() {
      div = element("div");
      img_1 = element("img");
      if (!src_url_equal(img_1.src, img_1_src_value = "data:image/jpg;base64, " + _arrayBufferToBase64(
        /*src*/
        ctx[1]
      ))) attr(img_1, "src", img_1_src_value);
      attr(img_1, "class", "svelte-ck1pnn");
      attr(div, "class", "GA-img svelte-ck1pnn");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      append(div, img_1);
    },
    p(ctx2, dirty) {
      if (dirty & /*img*/
      1 && !src_url_equal(img_1.src, img_1_src_value = "data:image/jpg;base64, " + _arrayBufferToBase64(
        /*src*/
        ctx2[1]
      ))) {
        attr(img_1, "src", img_1_src_value);
      }
    },
    d(detaching) {
      if (detaching) {
        detach(div);
      }
    }
  };
}
function create_pending_block(ctx) {
  return { c: noop, m: noop, p: noop, d: noop };
}
function create_fragment17(ctx) {
  let await_block_anchor;
  let promise;
  let info = {
    ctx,
    current: null,
    token: null,
    hasCatch: false,
    pending: create_pending_block,
    then: create_then_block,
    catch: create_catch_block,
    value: 1
  };
  handle_promise(promise = /*img*/
  ctx[0], info);
  return {
    c() {
      await_block_anchor = empty();
      info.block.c();
    },
    m(target, anchor) {
      insert(target, await_block_anchor, anchor);
      info.block.m(target, info.anchor = anchor);
      info.mount = () => await_block_anchor.parentNode;
      info.anchor = await_block_anchor;
    },
    p(new_ctx, [dirty]) {
      ctx = new_ctx;
      info.ctx = ctx;
      if (dirty & /*img*/
      1 && promise !== (promise = /*img*/
      ctx[0]) && handle_promise(promise, info)) {
      } else {
        update_await_block_branch(info, ctx, dirty);
      }
    },
    i: noop,
    o: noop,
    d(detaching) {
      if (detaching) {
        detach(await_block_anchor);
      }
      info.block.d(detaching);
      info.token = null;
      info = null;
    }
  };
}
function _arrayBufferToBase64(buffer) {
  var binary = "";
  var bytes = new Uint8Array(buffer);
  var len = bytes.byteLength;
  for (var i = 0; i < len; i++) {
    binary += String.fromCharCode(bytes[i]);
  }
  return window.btoa(binary);
}
function instance17($$self, $$props, $$invalidate) {
  let { img } = $$props;
  $$self.$$set = ($$props2) => {
    if ("img" in $$props2) $$invalidate(0, img = $$props2.img);
  };
  return [img];
}
var ImgThumbnail = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance17, create_fragment17, safe_not_equal, { img: 0 });
  }
};
var ImgThumbnail_default = ImgThumbnail;

// node_modules/.pnpm/svelte-icons@2.1.0/node_modules/svelte-icons/fa/FaCreativeCommonsZero.svelte
function create_default_slot14(ctx) {
  let path;
  return {
    c() {
      path = svg_element("path");
      attr(path, "d", "M247.6 8C389.4 8 496 118.1 496 256c0 147.1-118.5 248-248.4 248C113.6 504 0 394.5 0 256 0 123.1 104.7 8 247.6 8zm.8 44.7C130.2 52.7 44.7 150.6 44.7 256c0 109.8 91.2 202.8 203.7 202.8 103.2 0 202.8-81.1 202.8-202.8.1-113.8-90.2-203.3-202.8-203.3zm-.4 60.5c-81.9 0-102.5 77.3-102.5 142.8 0 65.5 20.6 142.8 102.5 142.8S350.5 321.5 350.5 256c0-65.5-20.6-142.8-102.5-142.8zm0 53.9c3.3 0 6.4.5 9.2 1.2 5.9 5.1 8.8 12.1 3.1 21.9l-54.5 100.2c-1.7-12.7-1.9-25.1-1.9-34.4 0-28.8 2-88.9 44.1-88.9zm40.8 46.2c2.9 15.4 3.3 31.4 3.3 42.7 0 28.9-2 88.9-44.1 88.9-13.5 0-32.6-7.7-20.1-26.4l60.9-105.2z");
    },
    m(target, anchor) {
      insert(target, path, anchor);
    },
    p: noop,
    d(detaching) {
      if (detaching) {
        detach(path);
      }
    }
  };
}
function create_fragment18(ctx) {
  let iconbase;
  let current;
  const iconbase_spread_levels = [
    { viewBox: "0 0 496 512" },
    /*$$props*/
    ctx[0]
  ];
  let iconbase_props = {
    $$slots: { default: [create_default_slot14] },
    $$scope: { ctx }
  };
  for (let i = 0; i < iconbase_spread_levels.length; i += 1) {
    iconbase_props = assign(iconbase_props, iconbase_spread_levels[i]);
  }
  iconbase = new IconBase_default({ props: iconbase_props });
  return {
    c() {
      create_component(iconbase.$$.fragment);
    },
    m(target, anchor) {
      mount_component(iconbase, target, anchor);
      current = true;
    },
    p(ctx2, [dirty]) {
      const iconbase_changes = dirty & /*$$props*/
      1 ? get_spread_update(iconbase_spread_levels, [iconbase_spread_levels[0], get_spread_object(
        /*$$props*/
        ctx2[0]
      )]) : {};
      if (dirty & /*$$scope*/
      2) {
        iconbase_changes.$$scope = { dirty, ctx: ctx2 };
      }
      iconbase.$set(iconbase_changes);
    },
    i(local) {
      if (current) return;
      transition_in(iconbase.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(iconbase.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(iconbase, detaching);
    }
  };
}
function instance18($$self, $$props, $$invalidate) {
  $$self.$$set = ($$new_props) => {
    $$invalidate(0, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
  };
  $$props = exclude_internal_props($$props);
  return [$$props];
}
var FaCreativeCommonsZero = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance18, create_fragment18, safe_not_equal, {});
  }
};
var FaCreativeCommonsZero_default = FaCreativeCommonsZero;

// node_modules/.pnpm/svelte-icons@2.1.0/node_modules/svelte-icons/fa/FaFire.svelte
function create_default_slot15(ctx) {
  let path;
  return {
    c() {
      path = svg_element("path");
      attr(path, "d", "M216 23.86c0-23.8-30.65-32.77-44.15-13.04C48 191.85 224 200 224 288c0 35.63-29.11 64.46-64.85 63.99-35.17-.45-63.15-29.77-63.15-64.94v-85.51c0-21.7-26.47-32.23-41.43-16.5C27.8 213.16 0 261.33 0 320c0 105.87 86.13 192 192 192s192-86.13 192-192c0-170.29-168-193-168-296.14z");
    },
    m(target, anchor) {
      insert(target, path, anchor);
    },
    p: noop,
    d(detaching) {
      if (detaching) {
        detach(path);
      }
    }
  };
}
function create_fragment19(ctx) {
  let iconbase;
  let current;
  const iconbase_spread_levels = [
    { viewBox: "0 0 384 512" },
    /*$$props*/
    ctx[0]
  ];
  let iconbase_props = {
    $$slots: { default: [create_default_slot15] },
    $$scope: { ctx }
  };
  for (let i = 0; i < iconbase_spread_levels.length; i += 1) {
    iconbase_props = assign(iconbase_props, iconbase_spread_levels[i]);
  }
  iconbase = new IconBase_default({ props: iconbase_props });
  return {
    c() {
      create_component(iconbase.$$.fragment);
    },
    m(target, anchor) {
      mount_component(iconbase, target, anchor);
      current = true;
    },
    p(ctx2, [dirty]) {
      const iconbase_changes = dirty & /*$$props*/
      1 ? get_spread_update(iconbase_spread_levels, [iconbase_spread_levels[0], get_spread_object(
        /*$$props*/
        ctx2[0]
      )]) : {};
      if (dirty & /*$$scope*/
      2) {
        iconbase_changes.$$scope = { dirty, ctx: ctx2 };
      }
      iconbase.$set(iconbase_changes);
    },
    i(local) {
      if (current) return;
      transition_in(iconbase.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(iconbase.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(iconbase, detaching);
    }
  };
}
function instance19($$self, $$props, $$invalidate) {
  $$self.$$set = ($$new_props) => {
    $$invalidate(0, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
  };
  $$props = exclude_internal_props($$props);
  return [$$props];
}
var FaFire = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance19, create_fragment19, safe_not_equal, {});
  }
};
var FaFire_default = FaFire;

// node_modules/.pnpm/svelte-icons@2.1.0/node_modules/svelte-icons/fa/FaRegSnowflake.svelte
function create_default_slot16(ctx) {
  let path;
  return {
    c() {
      path = svg_element("path");
      attr(path, "d", "M440.1 355.2l-39.2-23 34.1-9.3c8.4-2.3 13.4-11.1 11.1-19.6l-4.1-15.5c-2.2-8.5-10.9-13.6-19.3-11.3L343 298.2 271.2 256l71.9-42.2 79.7 21.7c8.4 2.3 17-2.8 19.3-11.3l4.1-15.5c2.2-8.5-2.7-17.3-11.1-19.6l-34.1-9.3 39.2-23c7.5-4.4 10.1-14.2 5.8-21.9l-7.9-13.9c-4.3-7.7-14-10.3-21.5-5.9l-39.2 23 9.1-34.7c2.2-8.5-2.7-17.3-11.1-19.6l-15.2-4.1c-8.4-2.3-17 2.8-19.3 11.3l-21.3 81-71.9 42.2v-84.5L306 70.4c6.1-6.2 6.1-16.4 0-22.6l-11.1-11.3c-6.1-6.2-16.1-6.2-22.2 0l-24.9 25.4V16c0-8.8-7-16-15.7-16h-15.7c-8.7 0-15.7 7.2-15.7 16v46.1l-24.9-25.4c-6.1-6.2-16.1-6.2-22.2 0L142.1 48c-6.1 6.2-6.1 16.4 0 22.6l58.3 59.3v84.5l-71.9-42.2-21.3-81c-2.2-8.5-10.9-13.6-19.3-11.3L72.7 84c-8.4 2.3-13.4 11.1-11.1 19.6l9.1 34.7-39.2-23c-7.5-4.4-17.1-1.8-21.5 5.9l-7.9 13.9c-4.3 7.7-1.8 17.4 5.8 21.9l39.2 23-34.1 9.1c-8.4 2.3-13.4 11.1-11.1 19.6L6 224.2c2.2 8.5 10.9 13.6 19.3 11.3l79.7-21.7 71.9 42.2-71.9 42.2-79.7-21.7c-8.4-2.3-17 2.8-19.3 11.3l-4.1 15.5c-2.2 8.5 2.7 17.3 11.1 19.6l34.1 9.3-39.2 23c-7.5 4.4-10.1 14.2-5.8 21.9L10 391c4.3 7.7 14 10.3 21.5 5.9l39.2-23-9.1 34.7c-2.2 8.5 2.7 17.3 11.1 19.6l15.2 4.1c8.4 2.3 17-2.8 19.3-11.3l21.3-81 71.9-42.2v84.5l-58.3 59.3c-6.1 6.2-6.1 16.4 0 22.6l11.1 11.3c6.1 6.2 16.1 6.2 22.2 0l24.9-25.4V496c0 8.8 7 16 15.7 16h15.7c8.7 0 15.7-7.2 15.7-16v-46.1l24.9 25.4c6.1 6.2 16.1 6.2 22.2 0l11.1-11.3c6.1-6.2 6.1-16.4 0-22.6l-58.3-59.3v-84.5l71.9 42.2 21.3 81c2.2 8.5 10.9 13.6 19.3 11.3L375 428c8.4-2.3 13.4-11.1 11.1-19.6l-9.1-34.7 39.2 23c7.5 4.4 17.1 1.8 21.5-5.9l7.9-13.9c4.6-7.5 2.1-17.3-5.5-21.7z");
    },
    m(target, anchor) {
      insert(target, path, anchor);
    },
    p: noop,
    d(detaching) {
      if (detaching) {
        detach(path);
      }
    }
  };
}
function create_fragment20(ctx) {
  let iconbase;
  let current;
  const iconbase_spread_levels = [
    { viewBox: "0 0 448 512" },
    /*$$props*/
    ctx[0]
  ];
  let iconbase_props = {
    $$slots: { default: [create_default_slot16] },
    $$scope: { ctx }
  };
  for (let i = 0; i < iconbase_spread_levels.length; i += 1) {
    iconbase_props = assign(iconbase_props, iconbase_spread_levels[i]);
  }
  iconbase = new IconBase_default({ props: iconbase_props });
  return {
    c() {
      create_component(iconbase.$$.fragment);
    },
    m(target, anchor) {
      mount_component(iconbase, target, anchor);
      current = true;
    },
    p(ctx2, [dirty]) {
      const iconbase_changes = dirty & /*$$props*/
      1 ? get_spread_update(iconbase_spread_levels, [iconbase_spread_levels[0], get_spread_object(
        /*$$props*/
        ctx2[0]
      )]) : {};
      if (dirty & /*$$scope*/
      2) {
        iconbase_changes.$$scope = { dirty, ctx: ctx2 };
      }
      iconbase.$set(iconbase_changes);
    },
    i(local) {
      if (current) return;
      transition_in(iconbase.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(iconbase.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(iconbase, detaching);
    }
  };
}
function instance20($$self, $$props, $$invalidate) {
  $$self.$$set = ($$new_props) => {
    $$invalidate(0, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
  };
  $$props = exclude_internal_props($$props);
  return [$$props];
}
var FaRegSnowflake = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance20, create_fragment20, safe_not_equal, {});
  }
};
var FaRegSnowflake_default = FaRegSnowflake;

// node_modules/.pnpm/svelte-icons@2.1.0/node_modules/svelte-icons/io/IoIosTrendingDown.svelte
function create_default_slot17(ctx) {
  let path;
  return {
    c() {
      path = svg_element("path");
      attr(path, "d", "M480 369.2V251.1c0-8.1-6.8-14.8-15.1-14.8s-15.1 6.6-15.1 14.8v81.7L300.5 181c-2.8-2.8-6.6-4.3-10.7-4.3-4 0-7.8 1.5-10.7 4.3l-85.9 84.1L57.5 132.3c-2.9-2.8-6.6-4.3-10.7-4.3-4 0-7.8 1.5-10.7 4.3-2.8 2.7-4.2 6.2-4.2 10.2 0 5.4 2.3 8.8 4.2 10.7l146.3 143.2c2.9 2.8 6.6 4.3 10.7 4.3 4 0 7.8-1.5 10.7-4.3l85.9-84.1 138 142.2H344c-8.3 0-15.1 6.6-15.1 14.8 0 8.1 6.8 14.8 15.1 14.8h120.8c8.4-.1 15.2-6.7 15.2-14.9z");
    },
    m(target, anchor) {
      insert(target, path, anchor);
    },
    p: noop,
    d(detaching) {
      if (detaching) {
        detach(path);
      }
    }
  };
}
function create_fragment21(ctx) {
  let iconbase;
  let current;
  const iconbase_spread_levels = [
    { viewBox: "0 0 512 512" },
    /*$$props*/
    ctx[0]
  ];
  let iconbase_props = {
    $$slots: { default: [create_default_slot17] },
    $$scope: { ctx }
  };
  for (let i = 0; i < iconbase_spread_levels.length; i += 1) {
    iconbase_props = assign(iconbase_props, iconbase_spread_levels[i]);
  }
  iconbase = new IconBase_default({ props: iconbase_props });
  return {
    c() {
      create_component(iconbase.$$.fragment);
    },
    m(target, anchor) {
      mount_component(iconbase, target, anchor);
      current = true;
    },
    p(ctx2, [dirty]) {
      const iconbase_changes = dirty & /*$$props*/
      1 ? get_spread_update(iconbase_spread_levels, [iconbase_spread_levels[0], get_spread_object(
        /*$$props*/
        ctx2[0]
      )]) : {};
      if (dirty & /*$$scope*/
      2) {
        iconbase_changes.$$scope = { dirty, ctx: ctx2 };
      }
      iconbase.$set(iconbase_changes);
    },
    i(local) {
      if (current) return;
      transition_in(iconbase.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(iconbase.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(iconbase, detaching);
    }
  };
}
function instance21($$self, $$props, $$invalidate) {
  $$self.$$set = ($$new_props) => {
    $$invalidate(0, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
  };
  $$props = exclude_internal_props($$props);
  return [$$props];
}
var IoIosTrendingDown = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance21, create_fragment21, safe_not_equal, {});
  }
};
var IoIosTrendingDown_default = IoIosTrendingDown;

// node_modules/.pnpm/svelte-icons@2.1.0/node_modules/svelte-icons/io/IoIosTrendingUp.svelte
function create_default_slot18(ctx) {
  let path;
  return {
    c() {
      path = svg_element("path");
      attr(path, "d", "M464.9 128H344.1c-8.3 0-15.1 6.6-15.1 14.8s6.8 14.8 15.1 14.8h83.7l-138 142.2-85.9-84.1c-2.9-2.8-6.6-4.3-10.7-4.3-4 0-7.8 1.5-10.7 4.3L36.2 358.8c-1.9 1.9-4.2 5.2-4.2 10.7 0 4.1 1.4 7.5 4.2 10.2 2.9 2.8 6.6 4.3 10.7 4.3 4 0 7.8-1.5 10.7-4.3L193.2 247l85.9 84.1c2.9 2.8 6.6 4.3 10.7 4.3 4 0 7.8-1.5 10.7-4.3l149.4-151.9v81.7c0 8.1 6.8 14.8 15.1 14.8s15.1-6.6 15.1-14.8V142.8c-.1-8.2-6.9-14.8-15.2-14.8z");
    },
    m(target, anchor) {
      insert(target, path, anchor);
    },
    p: noop,
    d(detaching) {
      if (detaching) {
        detach(path);
      }
    }
  };
}
function create_fragment22(ctx) {
  let iconbase;
  let current;
  const iconbase_spread_levels = [
    { viewBox: "0 0 512 512" },
    /*$$props*/
    ctx[0]
  ];
  let iconbase_props = {
    $$slots: { default: [create_default_slot18] },
    $$scope: { ctx }
  };
  for (let i = 0; i < iconbase_spread_levels.length; i += 1) {
    iconbase_props = assign(iconbase_props, iconbase_spread_levels[i]);
  }
  iconbase = new IconBase_default({ props: iconbase_props });
  return {
    c() {
      create_component(iconbase.$$.fragment);
    },
    m(target, anchor) {
      mount_component(iconbase, target, anchor);
      current = true;
    },
    p(ctx2, [dirty]) {
      const iconbase_changes = dirty & /*$$props*/
      1 ? get_spread_update(iconbase_spread_levels, [iconbase_spread_levels[0], get_spread_object(
        /*$$props*/
        ctx2[0]
      )]) : {};
      if (dirty & /*$$scope*/
      2) {
        iconbase_changes.$$scope = { dirty, ctx: ctx2 };
      }
      iconbase.$set(iconbase_changes);
    },
    i(local) {
      if (current) return;
      transition_in(iconbase.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(iconbase.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(iconbase, detaching);
    }
  };
}
function instance22($$self, $$props, $$invalidate) {
  $$self.$$set = ($$new_props) => {
    $$invalidate(0, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
  };
  $$props = exclude_internal_props($$props);
  return [$$props];
}
var IoIosTrendingUp = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance22, create_fragment22, safe_not_equal, {});
  }
};
var IoIosTrendingUp_default = IoIosTrendingUp;

// node_modules/.pnpm/svelte-icons@2.1.0/node_modules/svelte-icons/io/IoMdRefresh.svelte
function create_default_slot19(ctx) {
  let path;
  return {
    c() {
      path = svg_element("path");
      attr(path, "d", "M256 388c-72.597 0-132-59.405-132-132 0-72.601 59.403-132 132-132 36.3 0 69.299 15.4 92.406 39.601L278 234h154V80l-51.698 51.702C348.406 99.798 304.406 80 256 80c-96.797 0-176 79.203-176 176s78.094 176 176 176c81.045 0 148.287-54.134 169.401-128H378.85c-18.745 49.561-67.138 84-122.85 84z");
    },
    m(target, anchor) {
      insert(target, path, anchor);
    },
    p: noop,
    d(detaching) {
      if (detaching) {
        detach(path);
      }
    }
  };
}
function create_fragment23(ctx) {
  let iconbase;
  let current;
  const iconbase_spread_levels = [
    { viewBox: "0 0 512 512" },
    /*$$props*/
    ctx[0]
  ];
  let iconbase_props = {
    $$slots: { default: [create_default_slot19] },
    $$scope: { ctx }
  };
  for (let i = 0; i < iconbase_spread_levels.length; i += 1) {
    iconbase_props = assign(iconbase_props, iconbase_spread_levels[i]);
  }
  iconbase = new IconBase_default({ props: iconbase_props });
  return {
    c() {
      create_component(iconbase.$$.fragment);
    },
    m(target, anchor) {
      mount_component(iconbase, target, anchor);
      current = true;
    },
    p(ctx2, [dirty]) {
      const iconbase_changes = dirty & /*$$props*/
      1 ? get_spread_update(iconbase_spread_levels, [iconbase_spread_levels[0], get_spread_object(
        /*$$props*/
        ctx2[0]
      )]) : {};
      if (dirty & /*$$scope*/
      2) {
        iconbase_changes.$$scope = { dirty, ctx: ctx2 };
      }
      iconbase.$set(iconbase_changes);
    },
    i(local) {
      if (current) return;
      transition_in(iconbase.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(iconbase.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(iconbase, detaching);
    }
  };
}
function instance23($$self, $$props, $$invalidate) {
  $$self.$$set = ($$new_props) => {
    $$invalidate(0, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
  };
  $$props = exclude_internal_props($$props);
  return [$$props];
}
var IoMdRefresh = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance23, create_fragment23, safe_not_equal, {});
  }
};
var IoMdRefresh_default = IoMdRefresh;

// node_modules/.pnpm/svelte-icons@2.1.0/node_modules/svelte-icons/md/MdExposureZero.svelte
function create_default_slot20(ctx) {
  let path;
  return {
    c() {
      path = svg_element("path");
      attr(path, "d", "M16.14 12.5c0 1-.1 1.85-.3 2.55-.2.7-.48 1.27-.83 1.7-.36.44-.79.75-1.3.95-.51.2-1.07.3-1.7.3-.62 0-1.18-.1-1.69-.3-.51-.2-.95-.51-1.31-.95-.36-.44-.65-1.01-.85-1.7-.2-.7-.3-1.55-.3-2.55v-2.04c0-1 .1-1.85.3-2.55.2-.7.48-1.26.84-1.69.36-.43.8-.74 1.31-.93C10.81 5.1 11.38 5 12 5c.63 0 1.19.1 1.7.29.51.19.95.5 1.31.93.36.43.64.99.84 1.69.2.7.3 1.54.3 2.55v2.04zm-2.11-2.36c0-.64-.05-1.18-.13-1.62-.09-.44-.22-.79-.4-1.06-.17-.27-.39-.46-.64-.58-.25-.13-.54-.19-.86-.19-.32 0-.61.06-.86.18s-.47.31-.64.58c-.17.27-.31.62-.4 1.06s-.13.98-.13 1.62v2.67c0 .64.05 1.18.14 1.62.09.45.23.81.4 1.09s.39.48.64.61.54.19.87.19c.33 0 .62-.06.87-.19s.46-.33.63-.61c.17-.28.3-.64.39-1.09.09-.45.13-.99.13-1.62v-2.66z");
    },
    m(target, anchor) {
      insert(target, path, anchor);
    },
    p: noop,
    d(detaching) {
      if (detaching) {
        detach(path);
      }
    }
  };
}
function create_fragment24(ctx) {
  let iconbase;
  let current;
  const iconbase_spread_levels = [
    { viewBox: "0 0 24 24" },
    /*$$props*/
    ctx[0]
  ];
  let iconbase_props = {
    $$slots: { default: [create_default_slot20] },
    $$scope: { ctx }
  };
  for (let i = 0; i < iconbase_spread_levels.length; i += 1) {
    iconbase_props = assign(iconbase_props, iconbase_spread_levels[i]);
  }
  iconbase = new IconBase_default({ props: iconbase_props });
  return {
    c() {
      create_component(iconbase.$$.fragment);
    },
    m(target, anchor) {
      mount_component(iconbase, target, anchor);
      current = true;
    },
    p(ctx2, [dirty]) {
      const iconbase_changes = dirty & /*$$props*/
      1 ? get_spread_update(iconbase_spread_levels, [iconbase_spread_levels[0], get_spread_object(
        /*$$props*/
        ctx2[0]
      )]) : {};
      if (dirty & /*$$scope*/
      2) {
        iconbase_changes.$$scope = { dirty, ctx: ctx2 };
      }
      iconbase.$set(iconbase_changes);
    },
    i(local) {
      if (current) return;
      transition_in(iconbase.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(iconbase.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(iconbase, detaching);
    }
  };
}
function instance24($$self, $$props, $$invalidate) {
  $$self.$$set = ($$new_props) => {
    $$invalidate(0, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
  };
  $$props = exclude_internal_props($$props);
  return [$$props];
}
var MdExposureZero = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance24, create_fragment24, safe_not_equal, {});
  }
};
var MdExposureZero_default = MdExposureZero;

// node_modules/.pnpm/svelte-icons@2.1.0/node_modules/svelte-icons/fa/FaRegQuestionCircle.svelte
function create_default_slot21(ctx) {
  let path;
  return {
    c() {
      path = svg_element("path");
      attr(path, "d", "M256 8C119.043 8 8 119.083 8 256c0 136.997 111.043 248 248 248s248-111.003 248-248C504 119.083 392.957 8 256 8zm0 448c-110.532 0-200-89.431-200-200 0-110.495 89.472-200 200-200 110.491 0 200 89.471 200 200 0 110.53-89.431 200-200 200zm107.244-255.2c0 67.052-72.421 68.084-72.421 92.863V300c0 6.627-5.373 12-12 12h-45.647c-6.627 0-12-5.373-12-12v-8.659c0-35.745 27.1-50.034 47.579-61.516 17.561-9.845 28.324-16.541 28.324-29.579 0-17.246-21.999-28.693-39.784-28.693-23.189 0-33.894 10.977-48.942 29.969-4.057 5.12-11.46 6.071-16.666 2.124l-27.824-21.098c-5.107-3.872-6.251-11.066-2.644-16.363C184.846 131.491 214.94 112 261.794 112c49.071 0 101.45 38.304 101.45 88.8zM298 368c0 23.159-18.841 42-42 42s-42-18.841-42-42 18.841-42 42-42 42 18.841 42 42z");
    },
    m(target, anchor) {
      insert(target, path, anchor);
    },
    p: noop,
    d(detaching) {
      if (detaching) {
        detach(path);
      }
    }
  };
}
function create_fragment25(ctx) {
  let iconbase;
  let current;
  const iconbase_spread_levels = [
    { viewBox: "0 0 512 512" },
    /*$$props*/
    ctx[0]
  ];
  let iconbase_props = {
    $$slots: { default: [create_default_slot21] },
    $$scope: { ctx }
  };
  for (let i = 0; i < iconbase_spread_levels.length; i += 1) {
    iconbase_props = assign(iconbase_props, iconbase_spread_levels[i]);
  }
  iconbase = new IconBase_default({ props: iconbase_props });
  return {
    c() {
      create_component(iconbase.$$.fragment);
    },
    m(target, anchor) {
      mount_component(iconbase, target, anchor);
      current = true;
    },
    p(ctx2, [dirty]) {
      const iconbase_changes = dirty & /*$$props*/
      1 ? get_spread_update(iconbase_spread_levels, [iconbase_spread_levels[0], get_spread_object(
        /*$$props*/
        ctx2[0]
      )]) : {};
      if (dirty & /*$$scope*/
      2) {
        iconbase_changes.$$scope = { dirty, ctx: ctx2 };
      }
      iconbase.$set(iconbase_changes);
    },
    i(local) {
      if (current) return;
      transition_in(iconbase.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(iconbase.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(iconbase, detaching);
    }
  };
}
function instance25($$self, $$props, $$invalidate) {
  $$self.$$set = ($$new_props) => {
    $$invalidate(0, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
  };
  $$props = exclude_internal_props($$props);
  return [$$props];
}
var FaRegQuestionCircle = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance25, create_fragment25, safe_not_equal, {});
  }
};
var FaRegQuestionCircle_default = FaRegQuestionCircle;

// src/Components/InfoIcon.svelte
function create_fragment26(ctx) {
  let div;
  let faregquestioncircle;
  let div_aria_label_value;
  let current;
  faregquestioncircle = new FaRegQuestionCircle_default({});
  return {
    c() {
      div = element("div");
      create_component(faregquestioncircle.$$.fragment);
      attr(div, "class", "icon svelte-11amwf8");
      attr(div, "aria-label", div_aria_label_value = `Type: ${/*anl*/
      ctx[0]}

${/*desc*/
      ctx[1]}`);
    },
    m(target, anchor) {
      insert(target, div, anchor);
      mount_component(faregquestioncircle, div, null);
      current = true;
    },
    p: noop,
    i(local) {
      if (current) return;
      transition_in(faregquestioncircle.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(faregquestioncircle.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div);
      }
      destroy_component(faregquestioncircle);
    }
  };
}
function instance26($$self, $$props, $$invalidate) {
  let { currSubtypeInfo } = $$props;
  const { anl, desc } = currSubtypeInfo;
  $$self.$$set = ($$props2) => {
    if ("currSubtypeInfo" in $$props2) $$invalidate(2, currSubtypeInfo = $$props2.currSubtypeInfo);
  };
  return [anl, desc, currSubtypeInfo];
}
var InfoIcon = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance26, create_fragment26, safe_not_equal, { currSubtypeInfo: 2 });
  }
};
var InfoIcon_default = InfoIcon;

// node_modules/.pnpm/svelte-icons@2.1.0/node_modules/svelte-icons/go/GoSignOut.svelte
function create_default_slot22(ctx) {
  let path;
  return {
    c() {
      path = svg_element("path");
      attr(path, "d", "M12 9V7H8V5h4V3l4 3-4 3zm-2 3H6V3L2 1h8v3h1V1c0-.55-.45-1-1-1H1C.45 0 0 .45 0 1v11.38c0 .39.22.73.55.91L6 16.01V13h4c.55 0 1-.45 1-1V8h-1v4z");
    },
    m(target, anchor) {
      insert(target, path, anchor);
    },
    p: noop,
    d(detaching) {
      if (detaching) {
        detach(path);
      }
    }
  };
}
function create_fragment27(ctx) {
  let iconbase;
  let current;
  const iconbase_spread_levels = [
    { viewBox: "0 0 16 17" },
    /*$$props*/
    ctx[0]
  ];
  let iconbase_props = {
    $$slots: { default: [create_default_slot22] },
    $$scope: { ctx }
  };
  for (let i = 0; i < iconbase_spread_levels.length; i += 1) {
    iconbase_props = assign(iconbase_props, iconbase_spread_levels[i]);
  }
  iconbase = new IconBase_default({ props: iconbase_props });
  return {
    c() {
      create_component(iconbase.$$.fragment);
    },
    m(target, anchor) {
      mount_component(iconbase, target, anchor);
      current = true;
    },
    p(ctx2, [dirty]) {
      const iconbase_changes = dirty & /*$$props*/
      1 ? get_spread_update(iconbase_spread_levels, [iconbase_spread_levels[0], get_spread_object(
        /*$$props*/
        ctx2[0]
      )]) : {};
      if (dirty & /*$$scope*/
      2) {
        iconbase_changes.$$scope = { dirty, ctx: ctx2 };
      }
      iconbase.$set(iconbase_changes);
    },
    i(local) {
      if (current) return;
      transition_in(iconbase.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(iconbase.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(iconbase, detaching);
    }
  };
}
function instance27($$self, $$props, $$invalidate) {
  $$self.$$set = ($$new_props) => {
    $$invalidate(0, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
  };
  $$props = exclude_internal_props($$props);
  return [$$props];
}
var GoSignOut = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance27, create_fragment27, safe_not_equal, {});
  }
};
var GoSignOut_default = GoSignOut;

// node_modules/.pnpm/svelte-icons@2.1.0/node_modules/svelte-icons/go/GoSignIn.svelte
function create_default_slot23(ctx) {
  let path;
  return {
    c() {
      path = svg_element("path");
      attr(path, "d", "M7 6.75V12h4V8h1v4c0 .55-.45 1-1 1H7v3l-5.45-2.72c-.33-.17-.55-.52-.55-.91V1c0-.55.45-1 1-1h9c.55 0 1 .45 1 1v3h-1V1H3l4 2v2.25L10 3v2h4v2h-4v2L7 6.75z");
    },
    m(target, anchor) {
      insert(target, path, anchor);
    },
    p: noop,
    d(detaching) {
      if (detaching) {
        detach(path);
      }
    }
  };
}
function create_fragment28(ctx) {
  let iconbase;
  let current;
  const iconbase_spread_levels = [
    { viewBox: "0 0 14 16" },
    /*$$props*/
    ctx[0]
  ];
  let iconbase_props = {
    $$slots: { default: [create_default_slot23] },
    $$scope: { ctx }
  };
  for (let i = 0; i < iconbase_spread_levels.length; i += 1) {
    iconbase_props = assign(iconbase_props, iconbase_spread_levels[i]);
  }
  iconbase = new IconBase_default({ props: iconbase_props });
  return {
    c() {
      create_component(iconbase.$$.fragment);
    },
    m(target, anchor) {
      mount_component(iconbase, target, anchor);
      current = true;
    },
    p(ctx2, [dirty]) {
      const iconbase_changes = dirty & /*$$props*/
      1 ? get_spread_update(iconbase_spread_levels, [iconbase_spread_levels[0], get_spread_object(
        /*$$props*/
        ctx2[0]
      )]) : {};
      if (dirty & /*$$scope*/
      2) {
        iconbase_changes.$$scope = { dirty, ctx: ctx2 };
      }
      iconbase.$set(iconbase_changes);
    },
    i(local) {
      if (current) return;
      transition_in(iconbase.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(iconbase.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(iconbase, detaching);
    }
  };
}
function instance28($$self, $$props, $$invalidate) {
  $$self.$$set = ($$new_props) => {
    $$invalidate(0, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
  };
  $$props = exclude_internal_props($$props);
  return [$$props];
}
var GoSignIn = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance28, create_fragment28, safe_not_equal, {});
  }
};
var GoSignIn_default = GoSignIn;

// src/Components/SubtypeOptions.svelte
function create_if_block_62(ctx) {
  let span1;
  let span0;
  let current_block_type_index;
  let if_block;
  let span1_aria_label_value;
  let current;
  let mounted;
  let dispose;
  const if_block_creators = [create_if_block_72, create_else_block_3];
  const if_blocks = [];
  function select_block_type(ctx2, dirty) {
    if (
      /*noZero*/
      ctx2[0]
    ) return 0;
    return 1;
  }
  current_block_type_index = select_block_type(ctx, -1);
  if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
  return {
    c() {
      span1 = element("span");
      span0 = element("span");
      if_block.c();
      attr(span0, "class", "icon svelte-4mq5op");
      attr(span1, "class", "GA-Option-span svelte-4mq5op");
      attr(span1, "aria-label", span1_aria_label_value = /*noZero*/
      ctx[0] ? "Show Zeros" : "Hide Zeros");
    },
    m(target, anchor) {
      insert(target, span1, anchor);
      append(span1, span0);
      if_blocks[current_block_type_index].m(span0, null);
      current = true;
      if (!mounted) {
        dispose = listen(
          span1,
          "click",
          /*click_handler*/
          ctx[14]
        );
        mounted = true;
      }
    },
    p(ctx2, dirty) {
      let previous_block_index = current_block_type_index;
      current_block_type_index = select_block_type(ctx2, dirty);
      if (current_block_type_index !== previous_block_index) {
        group_outros();
        transition_out(if_blocks[previous_block_index], 1, 1, () => {
          if_blocks[previous_block_index] = null;
        });
        check_outros();
        if_block = if_blocks[current_block_type_index];
        if (!if_block) {
          if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx2);
          if_block.c();
        } else {
        }
        transition_in(if_block, 1);
        if_block.m(span0, null);
      }
      if (!current || dirty & /*noZero*/
      1 && span1_aria_label_value !== (span1_aria_label_value = /*noZero*/
      ctx2[0] ? "Show Zeros" : "Hide Zeros")) {
        attr(span1, "aria-label", span1_aria_label_value);
      }
    },
    i(local) {
      if (current) return;
      transition_in(if_block);
      current = true;
    },
    o(local) {
      transition_out(if_block);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(span1);
      }
      if_blocks[current_block_type_index].d();
      mounted = false;
      dispose();
    }
  };
}
function create_else_block_3(ctx) {
  let facreativecommonszero;
  let current;
  facreativecommonszero = new FaCreativeCommonsZero_default({});
  return {
    c() {
      create_component(facreativecommonszero.$$.fragment);
    },
    m(target, anchor) {
      mount_component(facreativecommonszero, target, anchor);
      current = true;
    },
    i(local) {
      if (current) return;
      transition_in(facreativecommonszero.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(facreativecommonszero.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(facreativecommonszero, detaching);
    }
  };
}
function create_if_block_72(ctx) {
  let mdexposurezero;
  let current;
  mdexposurezero = new MdExposureZero_default({});
  return {
    c() {
      create_component(mdexposurezero.$$.fragment);
    },
    m(target, anchor) {
      mount_component(mdexposurezero, target, anchor);
      current = true;
    },
    i(local) {
      if (current) return;
      transition_in(mdexposurezero.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(mdexposurezero.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(mdexposurezero, detaching);
    }
  };
}
function create_if_block_42(ctx) {
  let span1;
  let span0;
  let current_block_type_index;
  let if_block;
  let span1_aria_label_value;
  let current;
  let mounted;
  let dispose;
  const if_block_creators = [create_if_block_52, create_else_block_2];
  const if_blocks = [];
  function select_block_type_1(ctx2, dirty) {
    if (
      /*ascOrder*/
      ctx2[2]
    ) return 0;
    return 1;
  }
  current_block_type_index = select_block_type_1(ctx, -1);
  if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
  return {
    c() {
      span1 = element("span");
      span0 = element("span");
      if_block.c();
      attr(span0, "class", "icon svelte-4mq5op");
      attr(span1, "class", "GA-Option-span svelte-4mq5op");
      attr(span1, "aria-label", span1_aria_label_value = /*ascOrder*/
      ctx[2] ? "Ascending" : "Descending");
    },
    m(target, anchor) {
      insert(target, span1, anchor);
      append(span1, span0);
      if_blocks[current_block_type_index].m(span0, null);
      current = true;
      if (!mounted) {
        dispose = listen(
          span1,
          "click",
          /*click_handler_1*/
          ctx[15]
        );
        mounted = true;
      }
    },
    p(ctx2, dirty) {
      let previous_block_index = current_block_type_index;
      current_block_type_index = select_block_type_1(ctx2, dirty);
      if (current_block_type_index !== previous_block_index) {
        group_outros();
        transition_out(if_blocks[previous_block_index], 1, 1, () => {
          if_blocks[previous_block_index] = null;
        });
        check_outros();
        if_block = if_blocks[current_block_type_index];
        if (!if_block) {
          if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx2);
          if_block.c();
        } else {
        }
        transition_in(if_block, 1);
        if_block.m(span0, null);
      }
      if (!current || dirty & /*ascOrder*/
      4 && span1_aria_label_value !== (span1_aria_label_value = /*ascOrder*/
      ctx2[2] ? "Ascending" : "Descending")) {
        attr(span1, "aria-label", span1_aria_label_value);
      }
    },
    i(local) {
      if (current) return;
      transition_in(if_block);
      current = true;
    },
    o(local) {
      transition_out(if_block);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(span1);
      }
      if_blocks[current_block_type_index].d();
      mounted = false;
      dispose();
    }
  };
}
function create_else_block_2(ctx) {
  let ioiostrendingdown;
  let current;
  ioiostrendingdown = new IoIosTrendingDown_default({});
  return {
    c() {
      create_component(ioiostrendingdown.$$.fragment);
    },
    m(target, anchor) {
      mount_component(ioiostrendingdown, target, anchor);
      current = true;
    },
    i(local) {
      if (current) return;
      transition_in(ioiostrendingdown.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(ioiostrendingdown.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(ioiostrendingdown, detaching);
    }
  };
}
function create_if_block_52(ctx) {
  let ioiostrendingup;
  let current;
  ioiostrendingup = new IoIosTrendingUp_default({});
  return {
    c() {
      create_component(ioiostrendingup.$$.fragment);
    },
    m(target, anchor) {
      mount_component(ioiostrendingup, target, anchor);
      current = true;
    },
    i(local) {
      if (current) return;
      transition_in(ioiostrendingup.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(ioiostrendingup.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(ioiostrendingup, detaching);
    }
  };
}
function create_if_block_22(ctx) {
  let span1;
  let span0;
  let current_block_type_index;
  let if_block;
  let span1_aria_label_value;
  let current;
  let mounted;
  let dispose;
  const if_block_creators = [create_if_block_32, create_else_block_1];
  const if_blocks = [];
  function select_block_type_2(ctx2, dirty) {
    if (
      /*frozen*/
      ctx2[4]
    ) return 0;
    return 1;
  }
  current_block_type_index = select_block_type_2(ctx, -1);
  if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
  return {
    c() {
      span1 = element("span");
      span0 = element("span");
      if_block.c();
      attr(span0, "class", "icon svelte-4mq5op");
      attr(span1, "class", "GA-Option-span svelte-4mq5op");
      attr(span1, "aria-label", span1_aria_label_value = /*frozen*/
      ctx[4] ? `Frozen on: ${/*currFile*/
      ctx[3].basename}` : "Unfrozen");
    },
    m(target, anchor) {
      insert(target, span1, anchor);
      append(span1, span0);
      if_blocks[current_block_type_index].m(span0, null);
      current = true;
      if (!mounted) {
        dispose = listen(
          span1,
          "click",
          /*click_handler_2*/
          ctx[16]
        );
        mounted = true;
      }
    },
    p(ctx2, dirty) {
      let previous_block_index = current_block_type_index;
      current_block_type_index = select_block_type_2(ctx2, dirty);
      if (current_block_type_index !== previous_block_index) {
        group_outros();
        transition_out(if_blocks[previous_block_index], 1, 1, () => {
          if_blocks[previous_block_index] = null;
        });
        check_outros();
        if_block = if_blocks[current_block_type_index];
        if (!if_block) {
          if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx2);
          if_block.c();
        } else {
        }
        transition_in(if_block, 1);
        if_block.m(span0, null);
      }
      if (!current || dirty & /*frozen, currFile*/
      24 && span1_aria_label_value !== (span1_aria_label_value = /*frozen*/
      ctx2[4] ? `Frozen on: ${/*currFile*/
      ctx2[3].basename}` : "Unfrozen")) {
        attr(span1, "aria-label", span1_aria_label_value);
      }
    },
    i(local) {
      if (current) return;
      transition_in(if_block);
      current = true;
    },
    o(local) {
      transition_out(if_block);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(span1);
      }
      if_blocks[current_block_type_index].d();
      mounted = false;
      dispose();
    }
  };
}
function create_else_block_1(ctx) {
  let fafire;
  let current;
  fafire = new FaFire_default({});
  return {
    c() {
      create_component(fafire.$$.fragment);
    },
    m(target, anchor) {
      mount_component(fafire, target, anchor);
      current = true;
    },
    i(local) {
      if (current) return;
      transition_in(fafire.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(fafire.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(fafire, detaching);
    }
  };
}
function create_if_block_32(ctx) {
  let faregsnowflake;
  let current;
  faregsnowflake = new FaRegSnowflake_default({});
  return {
    c() {
      create_component(faregsnowflake.$$.fragment);
    },
    m(target, anchor) {
      mount_component(faregsnowflake, target, anchor);
      current = true;
    },
    i(local) {
      if (current) return;
      transition_in(faregsnowflake.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(faregsnowflake.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(faregsnowflake, detaching);
    }
  };
}
function create_if_block4(ctx) {
  let span1;
  let span0;
  let current_block_type_index;
  let if_block;
  let span1_aria_label_value;
  let current;
  let mounted;
  let dispose;
  const if_block_creators = [create_if_block_12, create_else_block2];
  const if_blocks = [];
  function select_block_type_3(ctx2, dirty) {
    if (
      /*sortBy*/
      ctx2[1]
    ) return 0;
    return 1;
  }
  current_block_type_index = select_block_type_3(ctx, -1);
  if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
  return {
    c() {
      span1 = element("span");
      span0 = element("span");
      if_block.c();
      attr(span0, "class", "icon svelte-4mq5op");
      attr(span1, "class", "GA-Option-span svelte-4mq5op");
      attr(span1, "aria-label", span1_aria_label_value = "Sort By: " + /*sortBy*/
      (ctx[1] ? "Authority" : "Hub"));
    },
    m(target, anchor) {
      insert(target, span1, anchor);
      append(span1, span0);
      if_blocks[current_block_type_index].m(span0, null);
      current = true;
      if (!mounted) {
        dispose = listen(
          span1,
          "click",
          /*click_handler_3*/
          ctx[17]
        );
        mounted = true;
      }
    },
    p(ctx2, dirty) {
      let previous_block_index = current_block_type_index;
      current_block_type_index = select_block_type_3(ctx2, dirty);
      if (current_block_type_index !== previous_block_index) {
        group_outros();
        transition_out(if_blocks[previous_block_index], 1, 1, () => {
          if_blocks[previous_block_index] = null;
        });
        check_outros();
        if_block = if_blocks[current_block_type_index];
        if (!if_block) {
          if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx2);
          if_block.c();
        } else {
        }
        transition_in(if_block, 1);
        if_block.m(span0, null);
      }
      if (!current || dirty & /*sortBy*/
      2 && span1_aria_label_value !== (span1_aria_label_value = "Sort By: " + /*sortBy*/
      (ctx2[1] ? "Authority" : "Hub"))) {
        attr(span1, "aria-label", span1_aria_label_value);
      }
    },
    i(local) {
      if (current) return;
      transition_in(if_block);
      current = true;
    },
    o(local) {
      transition_out(if_block);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(span1);
      }
      if_blocks[current_block_type_index].d();
      mounted = false;
      dispose();
    }
  };
}
function create_else_block2(ctx) {
  let gosignout;
  let current;
  gosignout = new GoSignOut_default({});
  return {
    c() {
      create_component(gosignout.$$.fragment);
    },
    m(target, anchor) {
      mount_component(gosignout, target, anchor);
      current = true;
    },
    i(local) {
      if (current) return;
      transition_in(gosignout.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(gosignout.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(gosignout, detaching);
    }
  };
}
function create_if_block_12(ctx) {
  let gosignin;
  let current;
  gosignin = new GoSignIn_default({});
  return {
    c() {
      create_component(gosignin.$$.fragment);
    },
    m(target, anchor) {
      mount_component(gosignin, target, anchor);
      current = true;
    },
    i(local) {
      if (current) return;
      transition_in(gosignin.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(gosignin.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(gosignin, detaching);
    }
  };
}
function create_fragment29(ctx) {
  let span2;
  let infoicon;
  let t0;
  let t1;
  let t2;
  let t3;
  let t4;
  let span1;
  let span0;
  let iomdrefresh;
  let current;
  let mounted;
  let dispose;
  infoicon = new InfoIcon_default({
    props: {
      currSubtypeInfo: (
        /*currSubtypeInfo*/
        ctx[10]
      )
    }
  });
  let if_block0 = (
    /*noZero*/
    ctx[0] !== void 0 && create_if_block_62(ctx)
  );
  let if_block1 = (
    /*ascOrder*/
    ctx[2] !== void 0 && create_if_block_42(ctx)
  );
  let if_block2 = (
    /*frozen*/
    ctx[4] !== void 0 && create_if_block_22(ctx)
  );
  let if_block3 = (
    /*sortBy*/
    ctx[1] !== void 0 && create_if_block4(ctx)
  );
  iomdrefresh = new IoMdRefresh_default({});
  return {
    c() {
      span2 = element("span");
      create_component(infoicon.$$.fragment);
      t0 = space();
      if (if_block0) if_block0.c();
      t1 = space();
      if (if_block1) if_block1.c();
      t2 = space();
      if (if_block2) if_block2.c();
      t3 = space();
      if (if_block3) if_block3.c();
      t4 = space();
      span1 = element("span");
      span0 = element("span");
      create_component(iomdrefresh.$$.fragment);
      attr(span0, "class", "icon svelte-4mq5op");
      attr(span1, "class", "GA-Option-span svelte-4mq5op");
      attr(span1, "aria-label", "Refresh Index");
      attr(span2, "class", "GA-Subtype-Options svelte-4mq5op");
    },
    m(target, anchor) {
      insert(target, span2, anchor);
      mount_component(infoicon, span2, null);
      append(span2, t0);
      if (if_block0) if_block0.m(span2, null);
      append(span2, t1);
      if (if_block1) if_block1.m(span2, null);
      append(span2, t2);
      if (if_block2) if_block2.m(span2, null);
      append(span2, t3);
      if (if_block3) if_block3.m(span2, null);
      append(span2, t4);
      append(span2, span1);
      append(span1, span0);
      mount_component(iomdrefresh, span0, null);
      current = true;
      if (!mounted) {
        dispose = listen(
          span1,
          "click",
          /*click_handler_4*/
          ctx[18]
        );
        mounted = true;
      }
    },
    p(ctx2, [dirty]) {
      const infoicon_changes = {};
      if (dirty & /*currSubtypeInfo*/
      1024) infoicon_changes.currSubtypeInfo = /*currSubtypeInfo*/
      ctx2[10];
      infoicon.$set(infoicon_changes);
      if (
        /*noZero*/
        ctx2[0] !== void 0
      ) {
        if (if_block0) {
          if_block0.p(ctx2, dirty);
          if (dirty & /*noZero*/
          1) {
            transition_in(if_block0, 1);
          }
        } else {
          if_block0 = create_if_block_62(ctx2);
          if_block0.c();
          transition_in(if_block0, 1);
          if_block0.m(span2, t1);
        }
      } else if (if_block0) {
        group_outros();
        transition_out(if_block0, 1, 1, () => {
          if_block0 = null;
        });
        check_outros();
      }
      if (
        /*ascOrder*/
        ctx2[2] !== void 0
      ) {
        if (if_block1) {
          if_block1.p(ctx2, dirty);
          if (dirty & /*ascOrder*/
          4) {
            transition_in(if_block1, 1);
          }
        } else {
          if_block1 = create_if_block_42(ctx2);
          if_block1.c();
          transition_in(if_block1, 1);
          if_block1.m(span2, t2);
        }
      } else if (if_block1) {
        group_outros();
        transition_out(if_block1, 1, 1, () => {
          if_block1 = null;
        });
        check_outros();
      }
      if (
        /*frozen*/
        ctx2[4] !== void 0
      ) {
        if (if_block2) {
          if_block2.p(ctx2, dirty);
          if (dirty & /*frozen*/
          16) {
            transition_in(if_block2, 1);
          }
        } else {
          if_block2 = create_if_block_22(ctx2);
          if_block2.c();
          transition_in(if_block2, 1);
          if_block2.m(span2, t3);
        }
      } else if (if_block2) {
        group_outros();
        transition_out(if_block2, 1, 1, () => {
          if_block2 = null;
        });
        check_outros();
      }
      if (
        /*sortBy*/
        ctx2[1] !== void 0
      ) {
        if (if_block3) {
          if_block3.p(ctx2, dirty);
          if (dirty & /*sortBy*/
          2) {
            transition_in(if_block3, 1);
          }
        } else {
          if_block3 = create_if_block4(ctx2);
          if_block3.c();
          transition_in(if_block3, 1);
          if_block3.m(span2, t4);
        }
      } else if (if_block3) {
        group_outros();
        transition_out(if_block3, 1, 1, () => {
          if_block3 = null;
        });
        check_outros();
      }
    },
    i(local) {
      if (current) return;
      transition_in(infoicon.$$.fragment, local);
      transition_in(if_block0);
      transition_in(if_block1);
      transition_in(if_block2);
      transition_in(if_block3);
      transition_in(iomdrefresh.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(infoicon.$$.fragment, local);
      transition_out(if_block0);
      transition_out(if_block1);
      transition_out(if_block2);
      transition_out(if_block3);
      transition_out(iomdrefresh.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(span2);
      }
      destroy_component(infoicon);
      if (if_block0) if_block0.d();
      if (if_block1) if_block1.d();
      if (if_block2) if_block2.d();
      if (if_block3) if_block3.d();
      destroy_component(iomdrefresh);
      mounted = false;
      dispose();
    }
  };
}
function instance29($$self, $$props, $$invalidate) {
  let { currSubtypeInfo } = $$props;
  let { noZero = void 0 } = $$props;
  let { sortBy = void 0 } = $$props;
  let { ascOrder = void 0 } = $$props;
  let { currFile = void 0 } = $$props;
  let { frozen = void 0 } = $$props;
  let { plugin } = $$props;
  let { app } = $$props;
  let { view } = $$props;
  let { blockSwitch } = $$props;
  let { newBatch } = $$props;
  let { visibleData } = $$props;
  let { promiseSortedResults } = $$props;
  let { page } = $$props;
  const click_handler = () => {
    $$invalidate(0, noZero = !noZero);
    if (!frozen) {
      $$invalidate(5, blockSwitch = true);
      $$invalidate(6, newBatch = []);
      $$invalidate(7, visibleData = []);
      $$invalidate(8, promiseSortedResults = null);
      $$invalidate(9, page = 0);
    }
  };
  const click_handler_1 = () => {
    $$invalidate(2, ascOrder = !ascOrder);
    if (!frozen) {
      $$invalidate(5, blockSwitch = true);
      $$invalidate(6, newBatch = []);
      $$invalidate(7, visibleData = []);
      $$invalidate(8, promiseSortedResults = null);
      $$invalidate(9, page = 0);
    }
  };
  const click_handler_2 = () => {
    $$invalidate(4, frozen = !frozen);
    if (!frozen && !currSubtypeInfo.global) {
      $$invalidate(5, blockSwitch = true);
      $$invalidate(6, newBatch = []);
      $$invalidate(7, visibleData = []);
      $$invalidate(8, promiseSortedResults = null);
      $$invalidate(9, page = 0);
      setTimeout(() => $$invalidate(3, currFile = app.workspace.getActiveFile()), 100);
    } else if (!frozen && currSubtypeInfo.global) {
      $$invalidate(5, blockSwitch = true);
      setTimeout(
        () => {
          $$invalidate(5, blockSwitch = false);
          $$invalidate(3, currFile = app.workspace.getActiveFile());
        },
        100
      );
      $$invalidate(6, newBatch = []);
    }
  };
  const click_handler_3 = () => {
    $$invalidate(1, sortBy = !sortBy);
    if (!frozen) {
      $$invalidate(5, blockSwitch = true);
      $$invalidate(6, newBatch = []);
      $$invalidate(7, visibleData = []);
      $$invalidate(8, promiseSortedResults = null);
      $$invalidate(9, page = 0);
    }
  };
  const click_handler_4 = async () => {
    await plugin.refreshGraph();
    await view.draw(currSubtypeInfo.subtype);
  };
  $$self.$$set = ($$props2) => {
    if ("currSubtypeInfo" in $$props2) $$invalidate(10, currSubtypeInfo = $$props2.currSubtypeInfo);
    if ("noZero" in $$props2) $$invalidate(0, noZero = $$props2.noZero);
    if ("sortBy" in $$props2) $$invalidate(1, sortBy = $$props2.sortBy);
    if ("ascOrder" in $$props2) $$invalidate(2, ascOrder = $$props2.ascOrder);
    if ("currFile" in $$props2) $$invalidate(3, currFile = $$props2.currFile);
    if ("frozen" in $$props2) $$invalidate(4, frozen = $$props2.frozen);
    if ("plugin" in $$props2) $$invalidate(11, plugin = $$props2.plugin);
    if ("app" in $$props2) $$invalidate(12, app = $$props2.app);
    if ("view" in $$props2) $$invalidate(13, view = $$props2.view);
    if ("blockSwitch" in $$props2) $$invalidate(5, blockSwitch = $$props2.blockSwitch);
    if ("newBatch" in $$props2) $$invalidate(6, newBatch = $$props2.newBatch);
    if ("visibleData" in $$props2) $$invalidate(7, visibleData = $$props2.visibleData);
    if ("promiseSortedResults" in $$props2) $$invalidate(8, promiseSortedResults = $$props2.promiseSortedResults);
    if ("page" in $$props2) $$invalidate(9, page = $$props2.page);
  };
  return [
    noZero,
    sortBy,
    ascOrder,
    currFile,
    frozen,
    blockSwitch,
    newBatch,
    visibleData,
    promiseSortedResults,
    page,
    currSubtypeInfo,
    plugin,
    app,
    view,
    click_handler,
    click_handler_1,
    click_handler_2,
    click_handler_3,
    click_handler_4
  ];
}
var SubtypeOptions = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance29, create_fragment29, safe_not_equal, {
      currSubtypeInfo: 10,
      noZero: 0,
      sortBy: 1,
      ascOrder: 2,
      currFile: 3,
      frozen: 4,
      plugin: 11,
      app: 12,
      view: 13,
      blockSwitch: 5,
      newBatch: 6,
      visibleData: 7,
      promiseSortedResults: 8,
      page: 9
    });
  }
};
var SubtypeOptions_default = SubtypeOptions;

// src/Components/Louvain.svelte
function get_each_context(ctx, list, i) {
  const child_ctx = ctx.slice();
  child_ctx[32] = list[i];
  return child_ctx;
}
function create_if_block5(ctx) {
  let await_block_anchor;
  let promise;
  let current;
  let info = {
    ctx,
    current: null,
    token: null,
    hasCatch: false,
    pending: create_pending_block2,
    then: create_then_block2,
    catch: create_catch_block2,
    value: 31,
    blocks: [, , ,]
  };
  handle_promise(promise = /*promiseSortedResults*/
  ctx[12], info);
  return {
    c() {
      await_block_anchor = empty();
      info.block.c();
    },
    m(target, anchor) {
      insert(target, await_block_anchor, anchor);
      info.block.m(target, info.anchor = anchor);
      info.mount = () => await_block_anchor.parentNode;
      info.anchor = await_block_anchor;
      current = true;
    },
    p(new_ctx, dirty) {
      ctx = new_ctx;
      info.ctx = ctx;
      if (dirty[0] & /*promiseSortedResults*/
      4096 && promise !== (promise = /*promiseSortedResults*/
      ctx[12]) && handle_promise(promise, info)) {
      } else {
        update_await_block_branch(info, ctx, dirty);
      }
    },
    i(local) {
      if (current) return;
      transition_in(info.block);
      current = true;
    },
    o(local) {
      for (let i = 0; i < 3; i += 1) {
        const block = info.blocks[i];
        transition_out(block);
      }
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(await_block_anchor);
      }
      info.block.d(detaching);
      info.token = null;
      info = null;
    }
  };
}
function create_catch_block2(ctx) {
  return {
    c: noop,
    m: noop,
    p: noop,
    i: noop,
    o: noop,
    d: noop
  };
}
function create_then_block2(ctx) {
  let previous_key = (
    /*sortedResults*/
    ctx[31]
  );
  let key_block_anchor;
  let current;
  let key_block = create_key_block(ctx);
  return {
    c() {
      key_block.c();
      key_block_anchor = empty();
    },
    m(target, anchor) {
      key_block.m(target, anchor);
      insert(target, key_block_anchor, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      if (dirty[0] & /*promiseSortedResults*/
      4096 && safe_not_equal(previous_key, previous_key = /*sortedResults*/
      ctx2[31])) {
        group_outros();
        transition_out(key_block, 1, 1, noop);
        check_outros();
        key_block = create_key_block(ctx2);
        key_block.c();
        transition_in(key_block, 1);
        key_block.m(key_block_anchor.parentNode, key_block_anchor);
      } else {
        key_block.p(ctx2, dirty);
      }
    },
    i(local) {
      if (current) return;
      transition_in(key_block);
      current = true;
    },
    o(local) {
      transition_out(key_block);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(key_block_anchor);
      }
      key_block.d(detaching);
    }
  };
}
function create_if_block_13(ctx) {
  let div;
  let span1;
  let t0;
  let extensionicon;
  let t1;
  let span0;
  let t2_value = presentPath(
    /*node*/
    ctx[32].to
  ) + "";
  let t2;
  let span0_class_value;
  let t3;
  let show_if = isImg(
    /*node*/
    ctx[32].to
  );
  let div_class_value;
  let current;
  let mounted;
  let dispose;
  let if_block0 = (
    /*node*/
    ctx[32].linked && create_if_block_33(ctx)
  );
  extensionicon = new ExtensionIcon_default({ props: { path: (
    /*node*/
    ctx[32].to
  ) } });
  let if_block1 = show_if && create_if_block_23(ctx);
  function mouseover_handler2(...args) {
    return (
      /*mouseover_handler*/
      ctx[26](
        /*node*/
        ctx[32],
        ...args
      )
    );
  }
  function click_handler(...args) {
    return (
      /*click_handler*/
      ctx[27](
        /*node*/
        ctx[32],
        ...args
      )
    );
  }
  return {
    c() {
      div = element("div");
      span1 = element("span");
      if (if_block0) if_block0.c();
      t0 = space();
      create_component(extensionicon.$$.fragment);
      t1 = space();
      span0 = element("span");
      t2 = text(t2_value);
      t3 = space();
      if (if_block1) if_block1.c();
      attr(span0, "class", span0_class_value = "internal-link " + /*node*/
      (ctx[32].resolved ? "" : "is-unresolved") + " svelte-wz9hy3");
      attr(div, "class", div_class_value = "" + /*node*/
      (ctx[32].linked ? LINKED : NOT_LINKED) + " " + classExt(
        /*node*/
        ctx[32].to
      ) + " svelte-wz9hy3");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      append(div, span1);
      if (if_block0) if_block0.m(span1, null);
      append(span1, t0);
      mount_component(extensionicon, span1, null);
      append(span1, t1);
      append(span1, span0);
      append(span0, t2);
      append(span1, t3);
      if (if_block1) if_block1.m(span1, null);
      current = true;
      if (!mounted) {
        dispose = [
          listen(
            span1,
            "contextmenu",
            /*contextmenu_handler*/
            ctx[25]
          ),
          listen(span1, "mouseover", mouseover_handler2),
          listen(div, "click", click_handler)
        ];
        mounted = true;
      }
    },
    p(new_ctx, dirty) {
      ctx = new_ctx;
      if (
        /*node*/
        ctx[32].linked
      ) {
        if (if_block0) {
          if (dirty[0] & /*visibleData*/
          64) {
            transition_in(if_block0, 1);
          }
        } else {
          if_block0 = create_if_block_33(ctx);
          if_block0.c();
          transition_in(if_block0, 1);
          if_block0.m(span1, t0);
        }
      } else if (if_block0) {
        group_outros();
        transition_out(if_block0, 1, 1, () => {
          if_block0 = null;
        });
        check_outros();
      }
      const extensionicon_changes = {};
      if (dirty[0] & /*visibleData*/
      64) extensionicon_changes.path = /*node*/
      ctx[32].to;
      extensionicon.$set(extensionicon_changes);
      if ((!current || dirty[0] & /*visibleData*/
      64) && t2_value !== (t2_value = presentPath(
        /*node*/
        ctx[32].to
      ) + "")) set_data(t2, t2_value);
      if (!current || dirty[0] & /*visibleData*/
      64 && span0_class_value !== (span0_class_value = "internal-link " + /*node*/
      (ctx[32].resolved ? "" : "is-unresolved") + " svelte-wz9hy3")) {
        attr(span0, "class", span0_class_value);
      }
      if (dirty[0] & /*visibleData*/
      64) show_if = isImg(
        /*node*/
        ctx[32].to
      );
      if (show_if) {
        if (if_block1) {
          if_block1.p(ctx, dirty);
          if (dirty[0] & /*visibleData*/
          64) {
            transition_in(if_block1, 1);
          }
        } else {
          if_block1 = create_if_block_23(ctx);
          if_block1.c();
          transition_in(if_block1, 1);
          if_block1.m(span1, null);
        }
      } else if (if_block1) {
        group_outros();
        transition_out(if_block1, 1, 1, () => {
          if_block1 = null;
        });
        check_outros();
      }
      if (!current || dirty[0] & /*visibleData*/
      64 && div_class_value !== (div_class_value = "" + /*node*/
      (ctx[32].linked ? LINKED : NOT_LINKED) + " " + classExt(
        /*node*/
        ctx[32].to
      ) + " svelte-wz9hy3")) {
        attr(div, "class", div_class_value);
      }
    },
    i(local) {
      if (current) return;
      transition_in(if_block0);
      transition_in(extensionicon.$$.fragment, local);
      transition_in(if_block1);
      current = true;
    },
    o(local) {
      transition_out(if_block0);
      transition_out(extensionicon.$$.fragment, local);
      transition_out(if_block1);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div);
      }
      if (if_block0) if_block0.d();
      destroy_component(extensionicon);
      if (if_block1) if_block1.d();
      mounted = false;
      run_all(dispose);
    }
  };
}
function create_if_block_33(ctx) {
  let span;
  let falink;
  let span_class_value;
  let current;
  falink = new FaLink_default({});
  return {
    c() {
      span = element("span");
      create_component(falink.$$.fragment);
      attr(span, "class", span_class_value = null_to_empty(ICON) + " svelte-wz9hy3");
    },
    m(target, anchor) {
      insert(target, span, anchor);
      mount_component(falink, span, null);
      current = true;
    },
    i(local) {
      if (current) return;
      transition_in(falink.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(falink.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(span);
      }
      destroy_component(falink);
    }
  };
}
function create_if_block_23(ctx) {
  let imgthumbnail;
  let current;
  imgthumbnail = new ImgThumbnail_default({ props: { img: (
    /*node*/
    ctx[32].img
  ) } });
  return {
    c() {
      create_component(imgthumbnail.$$.fragment);
    },
    m(target, anchor) {
      mount_component(imgthumbnail, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const imgthumbnail_changes = {};
      if (dirty[0] & /*visibleData*/
      64) imgthumbnail_changes.img = /*node*/
      ctx2[32].img;
      imgthumbnail.$set(imgthumbnail_changes);
    },
    i(local) {
      if (current) return;
      transition_in(imgthumbnail.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(imgthumbnail.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(imgthumbnail, detaching);
    }
  };
}
function create_each_block(ctx) {
  let if_block_anchor;
  let current;
  let if_block = (
    /*node*/
    ctx[32].to !== /*currNode*/
    ctx[7] && /*node*/
    ctx[32] !== void 0 && create_if_block_13(ctx)
  );
  return {
    c() {
      if (if_block) if_block.c();
      if_block_anchor = empty();
    },
    m(target, anchor) {
      if (if_block) if_block.m(target, anchor);
      insert(target, if_block_anchor, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      if (
        /*node*/
        ctx2[32].to !== /*currNode*/
        ctx2[7] && /*node*/
        ctx2[32] !== void 0
      ) {
        if (if_block) {
          if_block.p(ctx2, dirty);
          if (dirty[0] & /*visibleData, currNode*/
          192) {
            transition_in(if_block, 1);
          }
        } else {
          if_block = create_if_block_13(ctx2);
          if_block.c();
          transition_in(if_block, 1);
          if_block.m(if_block_anchor.parentNode, if_block_anchor);
        }
      } else if (if_block) {
        group_outros();
        transition_out(if_block, 1, 1, () => {
          if_block = null;
        });
        check_outros();
      }
    },
    i(local) {
      if (current) return;
      transition_in(if_block);
      current = true;
    },
    o(local) {
      transition_out(if_block);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(if_block_anchor);
      }
      if (if_block) if_block.d(detaching);
    }
  };
}
function create_key_block(ctx) {
  let t0;
  let infinitescroll;
  let t1;
  let t2_value = (
    /*visibleData*/
    ctx[6].length + ""
  );
  let t2;
  let t3;
  let t4_value = (
    /*sortedResults*/
    ctx[31].length + ""
  );
  let t4;
  let current;
  let each_value = ensure_array_like(
    /*visibleData*/
    ctx[6]
  );
  let each_blocks = [];
  for (let i = 0; i < each_value.length; i += 1) {
    each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
  }
  const out = (i) => transition_out(each_blocks[i], 1, 1, () => {
    each_blocks[i] = null;
  });
  function loadMore_handler() {
    return (
      /*loadMore_handler*/
      ctx[28](
        /*sortedResults*/
        ctx[31]
      )
    );
  }
  infinitescroll = new InfiniteScroll({
    props: {
      hasMore: (
        /*sortedResults*/
        ctx[31].length > /*visibleData*/
        ctx[6].length
      ),
      threshold: 100,
      elementScroll: (
        /*current_component*/
        ctx[9].parentNode
      )
    }
  });
  infinitescroll.$on("loadMore", loadMore_handler);
  return {
    c() {
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].c();
      }
      t0 = space();
      create_component(infinitescroll.$$.fragment);
      t1 = space();
      t2 = text(t2_value);
      t3 = text(" / ");
      t4 = text(t4_value);
    },
    m(target, anchor) {
      for (let i = 0; i < each_blocks.length; i += 1) {
        if (each_blocks[i]) {
          each_blocks[i].m(target, anchor);
        }
      }
      insert(target, t0, anchor);
      mount_component(infinitescroll, target, anchor);
      insert(target, t1, anchor);
      insert(target, t2, anchor);
      insert(target, t3, anchor);
      insert(target, t4, anchor);
      current = true;
    },
    p(new_ctx, dirty) {
      ctx = new_ctx;
      if (dirty[0] & /*visibleData, app, view, currNode*/
      197) {
        each_value = ensure_array_like(
          /*visibleData*/
          ctx[6]
        );
        let i;
        for (i = 0; i < each_value.length; i += 1) {
          const child_ctx = get_each_context(ctx, each_value, i);
          if (each_blocks[i]) {
            each_blocks[i].p(child_ctx, dirty);
            transition_in(each_blocks[i], 1);
          } else {
            each_blocks[i] = create_each_block(child_ctx);
            each_blocks[i].c();
            transition_in(each_blocks[i], 1);
            each_blocks[i].m(t0.parentNode, t0);
          }
        }
        group_outros();
        for (i = each_value.length; i < each_blocks.length; i += 1) {
          out(i);
        }
        check_outros();
      }
      const infinitescroll_changes = {};
      if (dirty[0] & /*promiseSortedResults, visibleData*/
      4160) infinitescroll_changes.hasMore = /*sortedResults*/
      ctx[31].length > /*visibleData*/
      ctx[6].length;
      if (dirty[0] & /*current_component*/
      512) infinitescroll_changes.elementScroll = /*current_component*/
      ctx[9].parentNode;
      infinitescroll.$set(infinitescroll_changes);
      if ((!current || dirty[0] & /*visibleData*/
      64) && t2_value !== (t2_value = /*visibleData*/
      ctx[6].length + "")) set_data(t2, t2_value);
      if ((!current || dirty[0] & /*promiseSortedResults*/
      4096) && t4_value !== (t4_value = /*sortedResults*/
      ctx[31].length + "")) set_data(t4, t4_value);
    },
    i(local) {
      if (current) return;
      for (let i = 0; i < each_value.length; i += 1) {
        transition_in(each_blocks[i]);
      }
      transition_in(infinitescroll.$$.fragment, local);
      current = true;
    },
    o(local) {
      each_blocks = each_blocks.filter(Boolean);
      for (let i = 0; i < each_blocks.length; i += 1) {
        transition_out(each_blocks[i]);
      }
      transition_out(infinitescroll.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(t0);
        detach(t1);
        detach(t2);
        detach(t3);
        detach(t4);
      }
      destroy_each(each_blocks, detaching);
      destroy_component(infinitescroll, detaching);
    }
  };
}
function create_pending_block2(ctx) {
  return {
    c: noop,
    m: noop,
    p: noop,
    i: noop,
    o: noop,
    d: noop
  };
}
function create_fragment30(ctx) {
  let subtypeoptions;
  let updating_currSubtypeInfo;
  let updating_currFile;
  let updating_frozen;
  let updating_blockSwitch;
  let updating_newBatch;
  let updating_visibleData;
  let updating_promiseSortedResults;
  let updating_page;
  let t0;
  let label;
  let t2;
  let input;
  let t3;
  let div;
  let current;
  let mounted;
  let dispose;
  function subtypeoptions_currSubtypeInfo_binding(value) {
    ctx[16](value);
  }
  function subtypeoptions_currFile_binding(value) {
    ctx[17](value);
  }
  function subtypeoptions_frozen_binding(value) {
    ctx[18](value);
  }
  function subtypeoptions_blockSwitch_binding(value) {
    ctx[19](value);
  }
  function subtypeoptions_newBatch_binding(value) {
    ctx[20](value);
  }
  function subtypeoptions_visibleData_binding(value) {
    ctx[21](value);
  }
  function subtypeoptions_promiseSortedResults_binding(value) {
    ctx[22](value);
  }
  function subtypeoptions_page_binding(value) {
    ctx[23](value);
  }
  let subtypeoptions_props = {
    app: (
      /*app*/
      ctx[0]
    ),
    plugin: (
      /*plugin*/
      ctx[1]
    ),
    view: (
      /*view*/
      ctx[2]
    )
  };
  if (
    /*currSubtypeInfo*/
    ctx[13] !== void 0
  ) {
    subtypeoptions_props.currSubtypeInfo = /*currSubtypeInfo*/
    ctx[13];
  }
  if (
    /*currFile*/
    ctx[3] !== void 0
  ) {
    subtypeoptions_props.currFile = /*currFile*/
    ctx[3];
  }
  if (
    /*frozen*/
    ctx[8] !== void 0
  ) {
    subtypeoptions_props.frozen = /*frozen*/
    ctx[8];
  }
  if (
    /*blockSwitch*/
    ctx[11] !== void 0
  ) {
    subtypeoptions_props.blockSwitch = /*blockSwitch*/
    ctx[11];
  }
  if (
    /*newBatch*/
    ctx[5] !== void 0
  ) {
    subtypeoptions_props.newBatch = /*newBatch*/
    ctx[5];
  }
  if (
    /*visibleData*/
    ctx[6] !== void 0
  ) {
    subtypeoptions_props.visibleData = /*visibleData*/
    ctx[6];
  }
  if (
    /*promiseSortedResults*/
    ctx[12] !== void 0
  ) {
    subtypeoptions_props.promiseSortedResults = /*promiseSortedResults*/
    ctx[12];
  }
  if (
    /*page*/
    ctx[10] !== void 0
  ) {
    subtypeoptions_props.page = /*page*/
    ctx[10];
  }
  subtypeoptions = new SubtypeOptions_default({ props: subtypeoptions_props });
  binding_callbacks.push(() => bind(subtypeoptions, "currSubtypeInfo", subtypeoptions_currSubtypeInfo_binding));
  binding_callbacks.push(() => bind(subtypeoptions, "currFile", subtypeoptions_currFile_binding));
  binding_callbacks.push(() => bind(subtypeoptions, "frozen", subtypeoptions_frozen_binding));
  binding_callbacks.push(() => bind(subtypeoptions, "blockSwitch", subtypeoptions_blockSwitch_binding));
  binding_callbacks.push(() => bind(subtypeoptions, "newBatch", subtypeoptions_newBatch_binding));
  binding_callbacks.push(() => bind(subtypeoptions, "visibleData", subtypeoptions_visibleData_binding));
  binding_callbacks.push(() => bind(subtypeoptions, "promiseSortedResults", subtypeoptions_promiseSortedResults_binding));
  binding_callbacks.push(() => bind(subtypeoptions, "page", subtypeoptions_page_binding));
  let if_block = (
    /*promiseSortedResults*/
    ctx[12] && create_if_block5(ctx)
  );
  return {
    c() {
      create_component(subtypeoptions.$$.fragment);
      t0 = space();
      label = element("label");
      label.textContent = "Resolution:";
      t2 = space();
      input = element("input");
      t3 = space();
      div = element("div");
      if (if_block) if_block.c();
      attr(label, "for", "resolution");
      attr(input, "name", "resolution");
      attr(input, "type", "range");
      attr(input, "min", "1");
      attr(input, "max", "20");
      input.value = /*resolution*/
      ctx[4];
      attr(div, "class", "GA-Results svelte-wz9hy3");
    },
    m(target, anchor) {
      mount_component(subtypeoptions, target, anchor);
      insert(target, t0, anchor);
      insert(target, label, anchor);
      insert(target, t2, anchor);
      insert(target, input, anchor);
      insert(target, t3, anchor);
      insert(target, div, anchor);
      if (if_block) if_block.m(div, null);
      ctx[29](div);
      current = true;
      if (!mounted) {
        dispose = listen(
          input,
          "change",
          /*change_handler*/
          ctx[24]
        );
        mounted = true;
      }
    },
    p(ctx2, dirty) {
      const subtypeoptions_changes = {};
      if (dirty[0] & /*app*/
      1) subtypeoptions_changes.app = /*app*/
      ctx2[0];
      if (dirty[0] & /*plugin*/
      2) subtypeoptions_changes.plugin = /*plugin*/
      ctx2[1];
      if (dirty[0] & /*view*/
      4) subtypeoptions_changes.view = /*view*/
      ctx2[2];
      if (!updating_currSubtypeInfo && dirty[0] & /*currSubtypeInfo*/
      8192) {
        updating_currSubtypeInfo = true;
        subtypeoptions_changes.currSubtypeInfo = /*currSubtypeInfo*/
        ctx2[13];
        add_flush_callback(() => updating_currSubtypeInfo = false);
      }
      if (!updating_currFile && dirty[0] & /*currFile*/
      8) {
        updating_currFile = true;
        subtypeoptions_changes.currFile = /*currFile*/
        ctx2[3];
        add_flush_callback(() => updating_currFile = false);
      }
      if (!updating_frozen && dirty[0] & /*frozen*/
      256) {
        updating_frozen = true;
        subtypeoptions_changes.frozen = /*frozen*/
        ctx2[8];
        add_flush_callback(() => updating_frozen = false);
      }
      if (!updating_blockSwitch && dirty[0] & /*blockSwitch*/
      2048) {
        updating_blockSwitch = true;
        subtypeoptions_changes.blockSwitch = /*blockSwitch*/
        ctx2[11];
        add_flush_callback(() => updating_blockSwitch = false);
      }
      if (!updating_newBatch && dirty[0] & /*newBatch*/
      32) {
        updating_newBatch = true;
        subtypeoptions_changes.newBatch = /*newBatch*/
        ctx2[5];
        add_flush_callback(() => updating_newBatch = false);
      }
      if (!updating_visibleData && dirty[0] & /*visibleData*/
      64) {
        updating_visibleData = true;
        subtypeoptions_changes.visibleData = /*visibleData*/
        ctx2[6];
        add_flush_callback(() => updating_visibleData = false);
      }
      if (!updating_promiseSortedResults && dirty[0] & /*promiseSortedResults*/
      4096) {
        updating_promiseSortedResults = true;
        subtypeoptions_changes.promiseSortedResults = /*promiseSortedResults*/
        ctx2[12];
        add_flush_callback(() => updating_promiseSortedResults = false);
      }
      if (!updating_page && dirty[0] & /*page*/
      1024) {
        updating_page = true;
        subtypeoptions_changes.page = /*page*/
        ctx2[10];
        add_flush_callback(() => updating_page = false);
      }
      subtypeoptions.$set(subtypeoptions_changes);
      if (!current || dirty[0] & /*resolution*/
      16) {
        input.value = /*resolution*/
        ctx2[4];
      }
      if (
        /*promiseSortedResults*/
        ctx2[12]
      ) {
        if (if_block) {
          if_block.p(ctx2, dirty);
          if (dirty[0] & /*promiseSortedResults*/
          4096) {
            transition_in(if_block, 1);
          }
        } else {
          if_block = create_if_block5(ctx2);
          if_block.c();
          transition_in(if_block, 1);
          if_block.m(div, null);
        }
      } else if (if_block) {
        group_outros();
        transition_out(if_block, 1, 1, () => {
          if_block = null;
        });
        check_outros();
      }
    },
    i(local) {
      if (current) return;
      transition_in(subtypeoptions.$$.fragment, local);
      transition_in(if_block);
      current = true;
    },
    o(local) {
      transition_out(subtypeoptions.$$.fragment, local);
      transition_out(if_block);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(t0);
        detach(label);
        detach(t2);
        detach(input);
        detach(t3);
        detach(div);
      }
      destroy_component(subtypeoptions, detaching);
      if (if_block) if_block.d();
      ctx[29](null);
      mounted = false;
      dispose();
    }
  };
}
var size = 50;
function instance30($$self, $$props, $$invalidate) {
  let currSubtypeInfo;
  let currNode;
  let promiseSortedResults;
  let { app } = $$props;
  let { plugin } = $$props;
  let { settings } = $$props;
  let { view } = $$props;
  let { currSubtype } = $$props;
  let frozen = false;
  let currFile = app.workspace.getActiveFile();
  let resolution = 10;
  let current_component2;
  let newBatch = [];
  let visibleData = [];
  let page = 0;
  let blockSwitch = false;
  let { resolvedLinks } = app.metadataCache;
  app.workspace.on("active-leaf-change", () => {
    if (!frozen) {
      $$invalidate(11, blockSwitch = true);
      $$invalidate(5, newBatch = []);
      $$invalidate(6, visibleData = []);
      $$invalidate(12, promiseSortedResults = null);
      $$invalidate(10, page = 0);
      setTimeout(() => $$invalidate(3, currFile = app.workspace.getActiveFile()), 100);
    }
  });
  onMount(() => {
    $$invalidate(7, currNode = currFile === null || currFile === void 0 ? void 0 : currFile.path);
  });
  onMount(() => {
    $$invalidate(3, currFile = app.workspace.getActiveFile());
  });
  function subtypeoptions_currSubtypeInfo_binding(value) {
    currSubtypeInfo = value;
    $$invalidate(13, currSubtypeInfo), $$invalidate(15, currSubtype);
  }
  function subtypeoptions_currFile_binding(value) {
    currFile = value;
    $$invalidate(3, currFile);
  }
  function subtypeoptions_frozen_binding(value) {
    frozen = value;
    $$invalidate(8, frozen);
  }
  function subtypeoptions_blockSwitch_binding(value) {
    blockSwitch = value;
    $$invalidate(11, blockSwitch), $$invalidate(1, plugin), $$invalidate(7, currNode), $$invalidate(4, resolution), $$invalidate(0, app), $$invalidate(30, resolvedLinks), $$invalidate(3, currFile);
  }
  function subtypeoptions_newBatch_binding(value) {
    newBatch = value;
    $$invalidate(5, newBatch), $$invalidate(1, plugin), $$invalidate(7, currNode), $$invalidate(4, resolution), $$invalidate(0, app), $$invalidate(30, resolvedLinks), $$invalidate(3, currFile);
  }
  function subtypeoptions_visibleData_binding(value) {
    visibleData = value;
    $$invalidate(6, visibleData), $$invalidate(5, newBatch), $$invalidate(1, plugin), $$invalidate(7, currNode), $$invalidate(4, resolution), $$invalidate(0, app), $$invalidate(30, resolvedLinks), $$invalidate(3, currFile);
  }
  function subtypeoptions_promiseSortedResults_binding(value) {
    promiseSortedResults = value;
    $$invalidate(12, promiseSortedResults), $$invalidate(1, plugin), $$invalidate(7, currNode), $$invalidate(4, resolution), $$invalidate(0, app), $$invalidate(30, resolvedLinks), $$invalidate(3, currFile);
  }
  function subtypeoptions_page_binding(value) {
    page = value;
    $$invalidate(10, page);
  }
  const change_handler = (e) => {
    const value = Number.parseInt(e.target.value);
    if (!frozen) {
      $$invalidate(11, blockSwitch = true);
      $$invalidate(5, newBatch = []);
      $$invalidate(6, visibleData = []);
      $$invalidate(12, promiseSortedResults = null);
      $$invalidate(10, page = 0);
    }
    console.log({ value });
    $$invalidate(4, resolution = value);
  };
  const contextmenu_handler = (e) => openMenu(e, app);
  const mouseover_handler2 = (node, e) => hoverPreview(e, view, dropPath(node.to));
  const click_handler = async (node, e) => await openOrSwitch2(app, node.to, e);
  const loadMore_handler = (sortedResults) => {
    if (!blockSwitch) {
      $$invalidate(10, page++, page);
      $$invalidate(5, newBatch = sortedResults.slice(size * page, size * (page + 1) - 1));
      console.log({ newBatch });
    }
  };
  function div_binding($$value) {
    binding_callbacks[$$value ? "unshift" : "push"](() => {
      current_component2 = $$value;
      $$invalidate(9, current_component2);
    });
  }
  $$self.$$set = ($$props2) => {
    if ("app" in $$props2) $$invalidate(0, app = $$props2.app);
    if ("plugin" in $$props2) $$invalidate(1, plugin = $$props2.plugin);
    if ("settings" in $$props2) $$invalidate(14, settings = $$props2.settings);
    if ("view" in $$props2) $$invalidate(2, view = $$props2.view);
    if ("currSubtype" in $$props2) $$invalidate(15, currSubtype = $$props2.currSubtype);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty[0] & /*currSubtype*/
    32768) {
      $: $$invalidate(13, currSubtypeInfo = ANALYSIS_TYPES.find((sub) => sub.subtype === currSubtype));
    }
    if ($$self.$$.dirty[0] & /*currFile*/
    8) {
      $: $$invalidate(7, currNode = currFile === null || currFile === void 0 ? void 0 : currFile.path);
    }
    if ($$self.$$.dirty[0] & /*plugin, currNode, resolution, app*/
    147) {
      $: $$invalidate(12, promiseSortedResults = !plugin.g || !currNode ? null : plugin.g.algs["Louvain"](currNode, { resolution }).then((results) => {
        const componentResults = [];
        results.forEach((to) => {
          const resolved = !to.endsWith(".md") || isInVault(app, to);
          const linked = isLinked(resolvedLinks, currNode, to, false);
          const img = plugin.settings.showImgThumbnails && isImg(to) ? getImgBufferPromise(app, to) : null;
          componentResults.push({ linked, to, resolved, img });
        });
        return componentResults;
      }).then((res) => {
        $$invalidate(5, newBatch = res.slice(0, size));
        setTimeout(
          () => {
            $$invalidate(11, blockSwitch = false);
          },
          100
        );
        return res;
      }));
    }
    if ($$self.$$.dirty[0] & /*visibleData, newBatch*/
    96) {
      $: $$invalidate(6, visibleData = [...visibleData, ...newBatch]);
    }
  };
  return [
    app,
    plugin,
    view,
    currFile,
    resolution,
    newBatch,
    visibleData,
    currNode,
    frozen,
    current_component2,
    page,
    blockSwitch,
    promiseSortedResults,
    currSubtypeInfo,
    settings,
    currSubtype,
    subtypeoptions_currSubtypeInfo_binding,
    subtypeoptions_currFile_binding,
    subtypeoptions_frozen_binding,
    subtypeoptions_blockSwitch_binding,
    subtypeoptions_newBatch_binding,
    subtypeoptions_visibleData_binding,
    subtypeoptions_promiseSortedResults_binding,
    subtypeoptions_page_binding,
    change_handler,
    contextmenu_handler,
    mouseover_handler2,
    click_handler,
    loadMore_handler,
    div_binding
  ];
}
var Louvain = class extends SvelteComponent {
  constructor(options) {
    super();
    init(
      this,
      options,
      instance30,
      create_fragment30,
      safe_not_equal,
      {
        app: 0,
        plugin: 1,
        settings: 14,
        view: 2,
        currSubtype: 15
      },
      null,
      [-1, -1]
    );
  }
};
var Louvain_default = Louvain;

// node_modules/.pnpm/tslib@2.8.1/node_modules/tslib/tslib.es6.mjs
function __awaiter(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
}

// src/Components/RenderedMarkdown.svelte
var import_obsidian4 = require("obsidian");
function create_fragment31(ctx) {
  let div;
  let mounted;
  let dispose;
  return {
    c() {
      div = element("div");
      attr(div, "class", "CC-sentence svelte-13nx250");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      ctx[5](div);
      if (!mounted) {
        dispose = listen(
          div,
          "click",
          /*click_handler*/
          ctx[6]
        );
        mounted = true;
      }
    },
    p: noop,
    i: noop,
    o: noop,
    d(detaching) {
      if (detaching) {
        detach(div);
      }
      ctx[5](null);
      mounted = false;
      dispose();
    }
  };
}
function instance31($$self, $$props, $$invalidate) {
  let { sentence } = $$props;
  let { sourcePath } = $$props;
  let { app } = $$props;
  let { line } = $$props;
  let renderedSentence = sentence[0] + "==" + sentence[1] + "==" + sentence[2];
  if (sentence.length === 5) {
    renderedSentence = renderedSentence + "==" + sentence[3] + "==" + sentence[4];
  }
  renderedSentence = renderedSentence.trim();
  let el;
  onMount(() => __awaiter(void 0, void 0, void 0, function* () {
    import_obsidian4.MarkdownRenderer.renderMarkdown(renderedSentence, el, sourcePath, null);
    for (let markedEl of el.getElementsByTagName("mark")) {
      markedEl.classList.add("CC-mark");
    }
    for (let markedEl of el.getElementsByTagName("ol")) {
      markedEl.classList.add("CC-edit");
    }
    for (let markedEl of el.getElementsByTagName("hr")) {
      markedEl.classList.add("CC-hr");
    }
  }));
  function div_binding($$value) {
    binding_callbacks[$$value ? "unshift" : "push"](() => {
      el = $$value;
      $$invalidate(4, el);
    });
  }
  const click_handler = async (e) => {
    await openOrSwitch2(app, sourcePath, e);
    jumpToSelection(app, line, sentence.join(""));
  };
  $$self.$$set = ($$props2) => {
    if ("sentence" in $$props2) $$invalidate(0, sentence = $$props2.sentence);
    if ("sourcePath" in $$props2) $$invalidate(1, sourcePath = $$props2.sourcePath);
    if ("app" in $$props2) $$invalidate(2, app = $$props2.app);
    if ("line" in $$props2) $$invalidate(3, line = $$props2.line);
  };
  return [sentence, sourcePath, app, line, el, div_binding, click_handler];
}
var RenderedMarkdown = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance31, create_fragment31, safe_not_equal, {
      sentence: 0,
      sourcePath: 1,
      app: 2,
      line: 3
    });
  }
};
var RenderedMarkdown_default = RenderedMarkdown;

// src/Components/CoCitations.svelte
function get_each_context2(ctx, list, i) {
  const child_ctx = ctx.slice();
  child_ctx[33] = list[i];
  return child_ctx;
}
function get_each_context_1(ctx, list, i) {
  const child_ctx = ctx.slice();
  child_ctx[36] = list[i];
  return child_ctx;
}
function create_if_block6(ctx) {
  let await_block_anchor;
  let promise;
  let current;
  let info = {
    ctx,
    current: null,
    token: null,
    hasCatch: false,
    pending: create_pending_block3,
    then: create_then_block3,
    catch: create_catch_block3,
    value: 32,
    blocks: [, , ,]
  };
  handle_promise(promise = /*promiseSortedResults*/
  ctx[12], info);
  return {
    c() {
      await_block_anchor = empty();
      info.block.c();
    },
    m(target, anchor) {
      insert(target, await_block_anchor, anchor);
      info.block.m(target, info.anchor = anchor);
      info.mount = () => await_block_anchor.parentNode;
      info.anchor = await_block_anchor;
      current = true;
    },
    p(new_ctx, dirty) {
      ctx = new_ctx;
      info.ctx = ctx;
      if (dirty[0] & /*promiseSortedResults*/
      4096 && promise !== (promise = /*promiseSortedResults*/
      ctx[12]) && handle_promise(promise, info)) {
      } else {
        update_await_block_branch(info, ctx, dirty);
      }
    },
    i(local) {
      if (current) return;
      transition_in(info.block);
      current = true;
    },
    o(local) {
      for (let i = 0; i < 3; i += 1) {
        const block = info.blocks[i];
        transition_out(block);
      }
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(await_block_anchor);
      }
      info.block.d(detaching);
      info.token = null;
      info = null;
    }
  };
}
function create_catch_block3(ctx) {
  return {
    c: noop,
    m: noop,
    p: noop,
    i: noop,
    o: noop,
    d: noop
  };
}
function create_then_block3(ctx) {
  let previous_key = (
    /*sortedResults*/
    ctx[32]
  );
  let key_block_anchor;
  let current;
  let key_block = create_key_block2(ctx);
  return {
    c() {
      key_block.c();
      key_block_anchor = empty();
    },
    m(target, anchor) {
      key_block.m(target, anchor);
      insert(target, key_block_anchor, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      if (dirty[0] & /*promiseSortedResults*/
      4096 && safe_not_equal(previous_key, previous_key = /*sortedResults*/
      ctx2[32])) {
        group_outros();
        transition_out(key_block, 1, 1, noop);
        check_outros();
        key_block = create_key_block2(ctx2);
        key_block.c();
        transition_in(key_block, 1);
        key_block.m(key_block_anchor.parentNode, key_block_anchor);
      } else {
        key_block.p(ctx2, dirty);
      }
    },
    i(local) {
      if (current) return;
      transition_in(key_block);
      current = true;
    },
    o(local) {
      transition_out(key_block);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(key_block_anchor);
      }
      key_block.d(detaching);
    }
  };
}
function create_if_block_14(ctx) {
  let div1;
  let details;
  let summary;
  let span2;
  let span0;
  let current_block_type_index;
  let if_block;
  let span0_class_value;
  let t0;
  let span1;
  let t1_value = roundNumber(
    /*node*/
    ctx[33].measure,
    3
  ) + "";
  let t1;
  let span1_class_value;
  let t2;
  let div0;
  let current;
  let mounted;
  let dispose;
  const if_block_creators = [create_if_block_24, create_else_block3];
  const if_blocks = [];
  function select_block_type(ctx2, dirty) {
    if (
      /*node*/
      ctx2[33].to[0] === "#"
    ) return 0;
    return 1;
  }
  current_block_type_index = select_block_type(ctx, [-1, -1]);
  if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
  function click_handler(...args) {
    return (
      /*click_handler*/
      ctx[24](
        /*node*/
        ctx[33],
        ...args
      )
    );
  }
  function mouseover_handler2(...args) {
    return (
      /*mouseover_handler*/
      ctx[26](
        /*node*/
        ctx[33],
        ...args
      )
    );
  }
  let each_value_1 = ensure_array_like(
    /*node*/
    ctx[33].coCitations
  );
  let each_blocks = [];
  for (let i = 0; i < each_value_1.length; i += 1) {
    each_blocks[i] = create_each_block_1(get_each_context_1(ctx, each_value_1, i));
  }
  const out = (i) => transition_out(each_blocks[i], 1, 1, () => {
    each_blocks[i] = null;
  });
  return {
    c() {
      div1 = element("div");
      details = element("details");
      summary = element("summary");
      span2 = element("span");
      span0 = element("span");
      if_block.c();
      t0 = space();
      span1 = element("span");
      t1 = text(t1_value);
      t2 = space();
      div0 = element("div");
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].c();
      }
      attr(span0, "class", span0_class_value = "" + classExt(
        /*node*/
        ctx[33].to
      ) + " " + /*node*/
      (ctx[33].linked ? LINKED : NOT_LINKED) + " " + NODE + " svelte-1mj33xs");
      attr(span1, "class", span1_class_value = null_to_empty(MEASURE) + " svelte-1mj33xs");
      attr(span2, "class", "top-row svelte-1mj33xs");
      attr(div0, "class", "GA-details");
      attr(div1, "class", "GA-CC");
    },
    m(target, anchor) {
      insert(target, div1, anchor);
      append(div1, details);
      append(details, summary);
      append(summary, span2);
      append(span2, span0);
      if_blocks[current_block_type_index].m(span0, null);
      append(span2, t0);
      append(span2, span1);
      append(span1, t1);
      append(details, t2);
      append(details, div0);
      for (let i = 0; i < each_blocks.length; i += 1) {
        if (each_blocks[i]) {
          each_blocks[i].m(div0, null);
        }
      }
      current = true;
      if (!mounted) {
        dispose = [
          listen(span0, "click", click_handler),
          listen(
            span0,
            "contextmenu",
            /*contextmenu_handler*/
            ctx[25]
          ),
          listen(span0, "mouseover", mouseover_handler2)
        ];
        mounted = true;
      }
    },
    p(new_ctx, dirty) {
      ctx = new_ctx;
      let previous_block_index = current_block_type_index;
      current_block_type_index = select_block_type(ctx, dirty);
      if (current_block_type_index === previous_block_index) {
        if_blocks[current_block_type_index].p(ctx, dirty);
      } else {
        group_outros();
        transition_out(if_blocks[previous_block_index], 1, 1, () => {
          if_blocks[previous_block_index] = null;
        });
        check_outros();
        if_block = if_blocks[current_block_type_index];
        if (!if_block) {
          if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
          if_block.c();
        } else {
          if_block.p(ctx, dirty);
        }
        transition_in(if_block, 1);
        if_block.m(span0, null);
      }
      if (!current || dirty[0] & /*visibleData*/
      32 && span0_class_value !== (span0_class_value = "" + classExt(
        /*node*/
        ctx[33].to
      ) + " " + /*node*/
      (ctx[33].linked ? LINKED : NOT_LINKED) + " " + NODE + " svelte-1mj33xs")) {
        attr(span0, "class", span0_class_value);
      }
      if ((!current || dirty[0] & /*visibleData*/
      32) && t1_value !== (t1_value = roundNumber(
        /*node*/
        ctx[33].measure,
        3
      ) + "")) set_data(t1, t1_value);
      if (dirty[0] & /*visibleData, app, view*/
      37) {
        each_value_1 = ensure_array_like(
          /*node*/
          ctx[33].coCitations
        );
        let i;
        for (i = 0; i < each_value_1.length; i += 1) {
          const child_ctx = get_each_context_1(ctx, each_value_1, i);
          if (each_blocks[i]) {
            each_blocks[i].p(child_ctx, dirty);
            transition_in(each_blocks[i], 1);
          } else {
            each_blocks[i] = create_each_block_1(child_ctx);
            each_blocks[i].c();
            transition_in(each_blocks[i], 1);
            each_blocks[i].m(div0, null);
          }
        }
        group_outros();
        for (i = each_value_1.length; i < each_blocks.length; i += 1) {
          out(i);
        }
        check_outros();
      }
    },
    i(local) {
      if (current) return;
      transition_in(if_block);
      for (let i = 0; i < each_value_1.length; i += 1) {
        transition_in(each_blocks[i]);
      }
      current = true;
    },
    o(local) {
      transition_out(if_block);
      each_blocks = each_blocks.filter(Boolean);
      for (let i = 0; i < each_blocks.length; i += 1) {
        transition_out(each_blocks[i]);
      }
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div1);
      }
      if_blocks[current_block_type_index].d();
      destroy_each(each_blocks, detaching);
      mounted = false;
      run_all(dispose);
    }
  };
}
function create_else_block3(ctx) {
  let t0;
  let extensionicon;
  let t1;
  let span;
  let t2_value = presentPath(
    /*node*/
    ctx[33].to
  ) + "";
  let t2;
  let span_class_value;
  let t3;
  let show_if = (
    /*plugin*/
    ctx[1].settings.showImgThumbnails && isImg(
      /*node*/
      ctx[33].to
    )
  );
  let if_block1_anchor;
  let current;
  let if_block0 = (
    /*node*/
    ctx[33].linked && create_if_block_43(ctx)
  );
  extensionicon = new ExtensionIcon_default({ props: { path: (
    /*node*/
    ctx[33].to
  ) } });
  let if_block1 = show_if && create_if_block_34(ctx);
  return {
    c() {
      if (if_block0) if_block0.c();
      t0 = space();
      create_component(extensionicon.$$.fragment);
      t1 = space();
      span = element("span");
      t2 = text(t2_value);
      t3 = space();
      if (if_block1) if_block1.c();
      if_block1_anchor = empty();
      attr(span, "class", span_class_value = "internal-link " + /*node*/
      (ctx[33].resolved ? "" : "is-unresolved") + " svelte-1mj33xs");
    },
    m(target, anchor) {
      if (if_block0) if_block0.m(target, anchor);
      insert(target, t0, anchor);
      mount_component(extensionicon, target, anchor);
      insert(target, t1, anchor);
      insert(target, span, anchor);
      append(span, t2);
      insert(target, t3, anchor);
      if (if_block1) if_block1.m(target, anchor);
      insert(target, if_block1_anchor, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      if (
        /*node*/
        ctx2[33].linked
      ) {
        if (if_block0) {
          if (dirty[0] & /*visibleData*/
          32) {
            transition_in(if_block0, 1);
          }
        } else {
          if_block0 = create_if_block_43(ctx2);
          if_block0.c();
          transition_in(if_block0, 1);
          if_block0.m(t0.parentNode, t0);
        }
      } else if (if_block0) {
        group_outros();
        transition_out(if_block0, 1, 1, () => {
          if_block0 = null;
        });
        check_outros();
      }
      const extensionicon_changes = {};
      if (dirty[0] & /*visibleData*/
      32) extensionicon_changes.path = /*node*/
      ctx2[33].to;
      extensionicon.$set(extensionicon_changes);
      if ((!current || dirty[0] & /*visibleData*/
      32) && t2_value !== (t2_value = presentPath(
        /*node*/
        ctx2[33].to
      ) + "")) set_data(t2, t2_value);
      if (!current || dirty[0] & /*visibleData*/
      32 && span_class_value !== (span_class_value = "internal-link " + /*node*/
      (ctx2[33].resolved ? "" : "is-unresolved") + " svelte-1mj33xs")) {
        attr(span, "class", span_class_value);
      }
      if (dirty[0] & /*plugin, visibleData*/
      34) show_if = /*plugin*/
      ctx2[1].settings.showImgThumbnails && isImg(
        /*node*/
        ctx2[33].to
      );
      if (show_if) {
        if (if_block1) {
          if_block1.p(ctx2, dirty);
          if (dirty[0] & /*plugin, visibleData*/
          34) {
            transition_in(if_block1, 1);
          }
        } else {
          if_block1 = create_if_block_34(ctx2);
          if_block1.c();
          transition_in(if_block1, 1);
          if_block1.m(if_block1_anchor.parentNode, if_block1_anchor);
        }
      } else if (if_block1) {
        group_outros();
        transition_out(if_block1, 1, 1, () => {
          if_block1 = null;
        });
        check_outros();
      }
    },
    i(local) {
      if (current) return;
      transition_in(if_block0);
      transition_in(extensionicon.$$.fragment, local);
      transition_in(if_block1);
      current = true;
    },
    o(local) {
      transition_out(if_block0);
      transition_out(extensionicon.$$.fragment, local);
      transition_out(if_block1);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(t0);
        detach(t1);
        detach(span);
        detach(t3);
        detach(if_block1_anchor);
      }
      if (if_block0) if_block0.d(detaching);
      destroy_component(extensionicon, detaching);
      if (if_block1) if_block1.d(detaching);
    }
  };
}
function create_if_block_24(ctx) {
  let a;
  let t_value = (
    /*node*/
    ctx[33].to + ""
  );
  let t;
  return {
    c() {
      a = element("a");
      t = text(t_value);
      attr(a, "class", "tag svelte-1mj33xs");
    },
    m(target, anchor) {
      insert(target, a, anchor);
      append(a, t);
    },
    p(ctx2, dirty) {
      if (dirty[0] & /*visibleData*/
      32 && t_value !== (t_value = /*node*/
      ctx2[33].to + "")) set_data(t, t_value);
    },
    i: noop,
    o: noop,
    d(detaching) {
      if (detaching) {
        detach(a);
      }
    }
  };
}
function create_if_block_43(ctx) {
  let span;
  let falink;
  let span_class_value;
  let current;
  falink = new FaLink_default({});
  return {
    c() {
      span = element("span");
      create_component(falink.$$.fragment);
      attr(span, "class", span_class_value = null_to_empty(ICON) + " svelte-1mj33xs");
    },
    m(target, anchor) {
      insert(target, span, anchor);
      mount_component(falink, span, null);
      current = true;
    },
    i(local) {
      if (current) return;
      transition_in(falink.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(falink.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(span);
      }
      destroy_component(falink);
    }
  };
}
function create_if_block_34(ctx) {
  let imgthumbnail;
  let current;
  imgthumbnail = new ImgThumbnail_default({
    props: {
      img: getImgBufferPromise(
        /*app*/
        ctx[0],
        /*node*/
        ctx[33].to
      )
    }
  });
  return {
    c() {
      create_component(imgthumbnail.$$.fragment);
    },
    m(target, anchor) {
      mount_component(imgthumbnail, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const imgthumbnail_changes = {};
      if (dirty[0] & /*app, visibleData*/
      33) imgthumbnail_changes.img = getImgBufferPromise(
        /*app*/
        ctx2[0],
        /*node*/
        ctx2[33].to
      );
      imgthumbnail.$set(imgthumbnail_changes);
    },
    i(local) {
      if (current) return;
      transition_in(imgthumbnail.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(imgthumbnail.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(imgthumbnail, detaching);
    }
  };
}
function create_each_block_1(ctx) {
  let div;
  let span0;
  let t0_value = presentPath(
    /*coCite*/
    ctx[36].source
  ) + "";
  let t0;
  let span0_class_value;
  let t1;
  let span1;
  let t2_value = roundNumber(
    /*coCite*/
    ctx[36].measure,
    3
  ) + "";
  let t2;
  let span1_class_value;
  let t3;
  let renderedmarkdown;
  let current;
  let mounted;
  let dispose;
  function click_handler_1(...args) {
    return (
      /*click_handler_1*/
      ctx[27](
        /*coCite*/
        ctx[36],
        ...args
      )
    );
  }
  function mouseover_handler_1(...args) {
    return (
      /*mouseover_handler_1*/
      ctx[29](
        /*coCite*/
        ctx[36],
        ...args
      )
    );
  }
  renderedmarkdown = new RenderedMarkdown_default({
    props: {
      sentence: (
        /*coCite*/
        ctx[36].sentence
      ),
      sourcePath: (
        /*coCite*/
        ctx[36].source
      ),
      app: (
        /*app*/
        ctx[0]
      ),
      line: (
        /*coCite*/
        ctx[36].line
      )
    }
  });
  return {
    c() {
      div = element("div");
      span0 = element("span");
      t0 = text(t0_value);
      t1 = space();
      span1 = element("span");
      t2 = text(t2_value);
      t3 = space();
      create_component(renderedmarkdown.$$.fragment);
      attr(span0, "class", span0_class_value = "internal-link " + NODE + " svelte-1mj33xs");
      attr(span1, "class", span1_class_value = null_to_empty(MEASURE) + " svelte-1mj33xs");
      attr(div, "class", "CC-item svelte-1mj33xs");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      append(div, span0);
      append(span0, t0);
      append(div, t1);
      append(div, span1);
      append(span1, t2);
      insert(target, t3, anchor);
      mount_component(renderedmarkdown, target, anchor);
      current = true;
      if (!mounted) {
        dispose = [
          listen(span0, "click", click_handler_1),
          listen(
            span0,
            "contextmenu",
            /*contextmenu_handler_1*/
            ctx[28]
          ),
          listen(span0, "mouseover", mouseover_handler_1)
        ];
        mounted = true;
      }
    },
    p(new_ctx, dirty) {
      ctx = new_ctx;
      if ((!current || dirty[0] & /*visibleData*/
      32) && t0_value !== (t0_value = presentPath(
        /*coCite*/
        ctx[36].source
      ) + "")) set_data(t0, t0_value);
      if ((!current || dirty[0] & /*visibleData*/
      32) && t2_value !== (t2_value = roundNumber(
        /*coCite*/
        ctx[36].measure,
        3
      ) + "")) set_data(t2, t2_value);
      const renderedmarkdown_changes = {};
      if (dirty[0] & /*visibleData*/
      32) renderedmarkdown_changes.sentence = /*coCite*/
      ctx[36].sentence;
      if (dirty[0] & /*visibleData*/
      32) renderedmarkdown_changes.sourcePath = /*coCite*/
      ctx[36].source;
      if (dirty[0] & /*app*/
      1) renderedmarkdown_changes.app = /*app*/
      ctx[0];
      if (dirty[0] & /*visibleData*/
      32) renderedmarkdown_changes.line = /*coCite*/
      ctx[36].line;
      renderedmarkdown.$set(renderedmarkdown_changes);
    },
    i(local) {
      if (current) return;
      transition_in(renderedmarkdown.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(renderedmarkdown.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div);
        detach(t3);
      }
      destroy_component(renderedmarkdown, detaching);
      mounted = false;
      run_all(dispose);
    }
  };
}
function create_each_block2(ctx) {
  let if_block_anchor;
  let current;
  let if_block = (
    /*node*/
    ctx[33].to !== /*currNode*/
    ctx[3] && /*node*/
    ctx[33] !== void 0 && create_if_block_14(ctx)
  );
  return {
    c() {
      if (if_block) if_block.c();
      if_block_anchor = empty();
    },
    m(target, anchor) {
      if (if_block) if_block.m(target, anchor);
      insert(target, if_block_anchor, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      if (
        /*node*/
        ctx2[33].to !== /*currNode*/
        ctx2[3] && /*node*/
        ctx2[33] !== void 0
      ) {
        if (if_block) {
          if_block.p(ctx2, dirty);
          if (dirty[0] & /*visibleData, currNode*/
          40) {
            transition_in(if_block, 1);
          }
        } else {
          if_block = create_if_block_14(ctx2);
          if_block.c();
          transition_in(if_block, 1);
          if_block.m(if_block_anchor.parentNode, if_block_anchor);
        }
      } else if (if_block) {
        group_outros();
        transition_out(if_block, 1, 1, () => {
          if_block = null;
        });
        check_outros();
      }
    },
    i(local) {
      if (current) return;
      transition_in(if_block);
      current = true;
    },
    o(local) {
      transition_out(if_block);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(if_block_anchor);
      }
      if (if_block) if_block.d(detaching);
    }
  };
}
function create_key_block2(ctx) {
  let t0;
  let infinitescroll;
  let t1;
  let t2_value = (
    /*visibleData*/
    ctx[5].length + ""
  );
  let t2;
  let t3;
  let t4_value = (
    /*sortedResults*/
    ctx[32].length + ""
  );
  let t4;
  let current;
  let each_value = ensure_array_like(
    /*visibleData*/
    ctx[5]
  );
  let each_blocks = [];
  for (let i = 0; i < each_value.length; i += 1) {
    each_blocks[i] = create_each_block2(get_each_context2(ctx, each_value, i));
  }
  const out = (i) => transition_out(each_blocks[i], 1, 1, () => {
    each_blocks[i] = null;
  });
  function loadMore_handler() {
    return (
      /*loadMore_handler*/
      ctx[30](
        /*sortedResults*/
        ctx[32]
      )
    );
  }
  infinitescroll = new InfiniteScroll({
    props: {
      hasMore: (
        /*sortedResults*/
        ctx[32].length > /*visibleData*/
        ctx[5].length
      ),
      threshold: 100,
      elementScroll: (
        /*current_component*/
        ctx[9].parentNode
      )
    }
  });
  infinitescroll.$on("loadMore", loadMore_handler);
  return {
    c() {
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].c();
      }
      t0 = space();
      create_component(infinitescroll.$$.fragment);
      t1 = space();
      t2 = text(t2_value);
      t3 = text(" / ");
      t4 = text(t4_value);
    },
    m(target, anchor) {
      for (let i = 0; i < each_blocks.length; i += 1) {
        if (each_blocks[i]) {
          each_blocks[i].m(target, anchor);
        }
      }
      insert(target, t0, anchor);
      mount_component(infinitescroll, target, anchor);
      insert(target, t1, anchor);
      insert(target, t2, anchor);
      insert(target, t3, anchor);
      insert(target, t4, anchor);
      current = true;
    },
    p(new_ctx, dirty) {
      ctx = new_ctx;
      if (dirty[0] & /*visibleData, app, view, plugin, currNode*/
      47) {
        each_value = ensure_array_like(
          /*visibleData*/
          ctx[5]
        );
        let i;
        for (i = 0; i < each_value.length; i += 1) {
          const child_ctx = get_each_context2(ctx, each_value, i);
          if (each_blocks[i]) {
            each_blocks[i].p(child_ctx, dirty);
            transition_in(each_blocks[i], 1);
          } else {
            each_blocks[i] = create_each_block2(child_ctx);
            each_blocks[i].c();
            transition_in(each_blocks[i], 1);
            each_blocks[i].m(t0.parentNode, t0);
          }
        }
        group_outros();
        for (i = each_value.length; i < each_blocks.length; i += 1) {
          out(i);
        }
        check_outros();
      }
      const infinitescroll_changes = {};
      if (dirty[0] & /*promiseSortedResults, visibleData*/
      4128) infinitescroll_changes.hasMore = /*sortedResults*/
      ctx[32].length > /*visibleData*/
      ctx[5].length;
      if (dirty[0] & /*current_component*/
      512) infinitescroll_changes.elementScroll = /*current_component*/
      ctx[9].parentNode;
      infinitescroll.$set(infinitescroll_changes);
      if ((!current || dirty[0] & /*visibleData*/
      32) && t2_value !== (t2_value = /*visibleData*/
      ctx[5].length + "")) set_data(t2, t2_value);
      if ((!current || dirty[0] & /*promiseSortedResults*/
      4096) && t4_value !== (t4_value = /*sortedResults*/
      ctx[32].length + "")) set_data(t4, t4_value);
    },
    i(local) {
      if (current) return;
      for (let i = 0; i < each_value.length; i += 1) {
        transition_in(each_blocks[i]);
      }
      transition_in(infinitescroll.$$.fragment, local);
      current = true;
    },
    o(local) {
      each_blocks = each_blocks.filter(Boolean);
      for (let i = 0; i < each_blocks.length; i += 1) {
        transition_out(each_blocks[i]);
      }
      transition_out(infinitescroll.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(t0);
        detach(t1);
        detach(t2);
        detach(t3);
        detach(t4);
      }
      destroy_each(each_blocks, detaching);
      destroy_component(infinitescroll, detaching);
    }
  };
}
function create_pending_block3(ctx) {
  return {
    c: noop,
    m: noop,
    p: noop,
    i: noop,
    o: noop,
    d: noop
  };
}
function create_fragment32(ctx) {
  let subtypeoptions;
  let updating_ascOrder;
  let updating_frozen;
  let updating_currFile;
  let updating_blockSwitch;
  let updating_newBatch;
  let updating_visibleData;
  let updating_promiseSortedResults;
  let updating_page;
  let t;
  let div;
  let current;
  function subtypeoptions_ascOrder_binding(value) {
    ctx[16](value);
  }
  function subtypeoptions_frozen_binding(value) {
    ctx[17](value);
  }
  function subtypeoptions_currFile_binding(value) {
    ctx[18](value);
  }
  function subtypeoptions_blockSwitch_binding(value) {
    ctx[19](value);
  }
  function subtypeoptions_newBatch_binding(value) {
    ctx[20](value);
  }
  function subtypeoptions_visibleData_binding(value) {
    ctx[21](value);
  }
  function subtypeoptions_promiseSortedResults_binding(value) {
    ctx[22](value);
  }
  function subtypeoptions_page_binding(value) {
    ctx[23](value);
  }
  let subtypeoptions_props = {
    currSubtypeInfo: (
      /*currSubtypeInfo*/
      ctx[13]
    ),
    app: (
      /*app*/
      ctx[0]
    ),
    plugin: (
      /*plugin*/
      ctx[1]
    ),
    view: (
      /*view*/
      ctx[2]
    )
  };
  if (
    /*ascOrder*/
    ctx[7] !== void 0
  ) {
    subtypeoptions_props.ascOrder = /*ascOrder*/
    ctx[7];
  }
  if (
    /*frozen*/
    ctx[8] !== void 0
  ) {
    subtypeoptions_props.frozen = /*frozen*/
    ctx[8];
  }
  if (
    /*currFile*/
    ctx[6] !== void 0
  ) {
    subtypeoptions_props.currFile = /*currFile*/
    ctx[6];
  }
  if (
    /*blockSwitch*/
    ctx[11] !== void 0
  ) {
    subtypeoptions_props.blockSwitch = /*blockSwitch*/
    ctx[11];
  }
  if (
    /*newBatch*/
    ctx[4] !== void 0
  ) {
    subtypeoptions_props.newBatch = /*newBatch*/
    ctx[4];
  }
  if (
    /*visibleData*/
    ctx[5] !== void 0
  ) {
    subtypeoptions_props.visibleData = /*visibleData*/
    ctx[5];
  }
  if (
    /*promiseSortedResults*/
    ctx[12] !== void 0
  ) {
    subtypeoptions_props.promiseSortedResults = /*promiseSortedResults*/
    ctx[12];
  }
  if (
    /*page*/
    ctx[10] !== void 0
  ) {
    subtypeoptions_props.page = /*page*/
    ctx[10];
  }
  subtypeoptions = new SubtypeOptions_default({ props: subtypeoptions_props });
  binding_callbacks.push(() => bind(subtypeoptions, "ascOrder", subtypeoptions_ascOrder_binding));
  binding_callbacks.push(() => bind(subtypeoptions, "frozen", subtypeoptions_frozen_binding));
  binding_callbacks.push(() => bind(subtypeoptions, "currFile", subtypeoptions_currFile_binding));
  binding_callbacks.push(() => bind(subtypeoptions, "blockSwitch", subtypeoptions_blockSwitch_binding));
  binding_callbacks.push(() => bind(subtypeoptions, "newBatch", subtypeoptions_newBatch_binding));
  binding_callbacks.push(() => bind(subtypeoptions, "visibleData", subtypeoptions_visibleData_binding));
  binding_callbacks.push(() => bind(subtypeoptions, "promiseSortedResults", subtypeoptions_promiseSortedResults_binding));
  binding_callbacks.push(() => bind(subtypeoptions, "page", subtypeoptions_page_binding));
  let if_block = (
    /*promiseSortedResults*/
    ctx[12] && create_if_block6(ctx)
  );
  return {
    c() {
      create_component(subtypeoptions.$$.fragment);
      t = space();
      div = element("div");
      if (if_block) if_block.c();
      attr(div, "class", "GA-CCs svelte-1mj33xs");
    },
    m(target, anchor) {
      mount_component(subtypeoptions, target, anchor);
      insert(target, t, anchor);
      insert(target, div, anchor);
      if (if_block) if_block.m(div, null);
      ctx[31](div);
      current = true;
    },
    p(ctx2, dirty) {
      const subtypeoptions_changes = {};
      if (dirty[0] & /*currSubtypeInfo*/
      8192) subtypeoptions_changes.currSubtypeInfo = /*currSubtypeInfo*/
      ctx2[13];
      if (dirty[0] & /*app*/
      1) subtypeoptions_changes.app = /*app*/
      ctx2[0];
      if (dirty[0] & /*plugin*/
      2) subtypeoptions_changes.plugin = /*plugin*/
      ctx2[1];
      if (dirty[0] & /*view*/
      4) subtypeoptions_changes.view = /*view*/
      ctx2[2];
      if (!updating_ascOrder && dirty[0] & /*ascOrder*/
      128) {
        updating_ascOrder = true;
        subtypeoptions_changes.ascOrder = /*ascOrder*/
        ctx2[7];
        add_flush_callback(() => updating_ascOrder = false);
      }
      if (!updating_frozen && dirty[0] & /*frozen*/
      256) {
        updating_frozen = true;
        subtypeoptions_changes.frozen = /*frozen*/
        ctx2[8];
        add_flush_callback(() => updating_frozen = false);
      }
      if (!updating_currFile && dirty[0] & /*currFile*/
      64) {
        updating_currFile = true;
        subtypeoptions_changes.currFile = /*currFile*/
        ctx2[6];
        add_flush_callback(() => updating_currFile = false);
      }
      if (!updating_blockSwitch && dirty[0] & /*blockSwitch*/
      2048) {
        updating_blockSwitch = true;
        subtypeoptions_changes.blockSwitch = /*blockSwitch*/
        ctx2[11];
        add_flush_callback(() => updating_blockSwitch = false);
      }
      if (!updating_newBatch && dirty[0] & /*newBatch*/
      16) {
        updating_newBatch = true;
        subtypeoptions_changes.newBatch = /*newBatch*/
        ctx2[4];
        add_flush_callback(() => updating_newBatch = false);
      }
      if (!updating_visibleData && dirty[0] & /*visibleData*/
      32) {
        updating_visibleData = true;
        subtypeoptions_changes.visibleData = /*visibleData*/
        ctx2[5];
        add_flush_callback(() => updating_visibleData = false);
      }
      if (!updating_promiseSortedResults && dirty[0] & /*promiseSortedResults*/
      4096) {
        updating_promiseSortedResults = true;
        subtypeoptions_changes.promiseSortedResults = /*promiseSortedResults*/
        ctx2[12];
        add_flush_callback(() => updating_promiseSortedResults = false);
      }
      if (!updating_page && dirty[0] & /*page*/
      1024) {
        updating_page = true;
        subtypeoptions_changes.page = /*page*/
        ctx2[10];
        add_flush_callback(() => updating_page = false);
      }
      subtypeoptions.$set(subtypeoptions_changes);
      if (
        /*promiseSortedResults*/
        ctx2[12]
      ) {
        if (if_block) {
          if_block.p(ctx2, dirty);
          if (dirty[0] & /*promiseSortedResults*/
          4096) {
            transition_in(if_block, 1);
          }
        } else {
          if_block = create_if_block6(ctx2);
          if_block.c();
          transition_in(if_block, 1);
          if_block.m(div, null);
        }
      } else if (if_block) {
        group_outros();
        transition_out(if_block, 1, 1, () => {
          if_block = null;
        });
        check_outros();
      }
    },
    i(local) {
      if (current) return;
      transition_in(subtypeoptions.$$.fragment, local);
      transition_in(if_block);
      current = true;
    },
    o(local) {
      transition_out(subtypeoptions.$$.fragment, local);
      transition_out(if_block);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(t);
        detach(div);
      }
      destroy_component(subtypeoptions, detaching);
      if (if_block) if_block.d();
      ctx[31](null);
    }
  };
}
var size2 = 50;
function instance32($$self, $$props, $$invalidate) {
  let currSubtypeInfo;
  let promiseSortedResults;
  let { app } = $$props;
  let { plugin } = $$props;
  let { settings } = $$props;
  let { view } = $$props;
  let { currSubtype } = $$props;
  let frozen = false;
  let currNode;
  let current_component2;
  let newBatch = [];
  let visibleData = [];
  let page = 0;
  let blockSwitch = false;
  let currFile = app.workspace.getActiveFile();
  app.workspace.on("active-leaf-change", () => {
    if (!frozen) {
      $$invalidate(11, blockSwitch = true);
      $$invalidate(4, newBatch = []);
      $$invalidate(5, visibleData = []);
      $$invalidate(12, promiseSortedResults = null);
      $$invalidate(10, page = 0);
      setTimeout(() => $$invalidate(6, currFile = app.workspace.getActiveFile()), 100);
    }
  });
  let ascOrder = false;
  onMount(() => {
    $$invalidate(6, currFile = app.workspace.getActiveFile());
    debug(settings, { promiseSortedResults });
  });
  function subtypeoptions_ascOrder_binding(value) {
    ascOrder = value;
    $$invalidate(7, ascOrder);
  }
  function subtypeoptions_frozen_binding(value) {
    frozen = value;
    $$invalidate(8, frozen);
  }
  function subtypeoptions_currFile_binding(value) {
    currFile = value;
    $$invalidate(6, currFile);
  }
  function subtypeoptions_blockSwitch_binding(value) {
    blockSwitch = value;
    $$invalidate(11, blockSwitch), $$invalidate(3, currNode), $$invalidate(1, plugin), $$invalidate(7, ascOrder), $$invalidate(0, app), $$invalidate(14, settings), $$invalidate(6, currFile);
  }
  function subtypeoptions_newBatch_binding(value) {
    newBatch = value;
    $$invalidate(4, newBatch), $$invalidate(3, currNode), $$invalidate(1, plugin), $$invalidate(7, ascOrder), $$invalidate(0, app), $$invalidate(14, settings), $$invalidate(6, currFile);
  }
  function subtypeoptions_visibleData_binding(value) {
    visibleData = value;
    $$invalidate(5, visibleData), $$invalidate(4, newBatch), $$invalidate(3, currNode), $$invalidate(1, plugin), $$invalidate(7, ascOrder), $$invalidate(0, app), $$invalidate(14, settings), $$invalidate(6, currFile);
  }
  function subtypeoptions_promiseSortedResults_binding(value) {
    promiseSortedResults = value;
    $$invalidate(12, promiseSortedResults), $$invalidate(3, currNode), $$invalidate(1, plugin), $$invalidate(7, ascOrder), $$invalidate(0, app), $$invalidate(14, settings), $$invalidate(6, currFile);
  }
  function subtypeoptions_page_binding(value) {
    page = value;
    $$invalidate(10, page);
  }
  const click_handler = async (node, e) => {
    if (node.to[0] !== "#") {
      await openOrSwitch2(app, node.to, e);
    }
  };
  const contextmenu_handler = (e) => openMenu(e, app);
  const mouseover_handler2 = (node, e) => hoverPreview2(e, view, dropPath(node.to));
  const click_handler_1 = async (coCite, e) => await openOrSwitch2(app, coCite.source, e);
  const contextmenu_handler_1 = (e) => openMenu(e, app);
  const mouseover_handler_1 = (coCite, e) => hoverPreview2(e, view, dropPath(coCite.source));
  const loadMore_handler = (sortedResults) => {
    if (!blockSwitch) {
      $$invalidate(10, page++, page);
      $$invalidate(4, newBatch = sortedResults.slice(size2 * page, size2 * (page + 1) - 1));
    }
  };
  function div_binding($$value) {
    binding_callbacks[$$value ? "unshift" : "push"](() => {
      current_component2 = $$value;
      $$invalidate(9, current_component2);
    });
  }
  $$self.$$set = ($$props2) => {
    if ("app" in $$props2) $$invalidate(0, app = $$props2.app);
    if ("plugin" in $$props2) $$invalidate(1, plugin = $$props2.plugin);
    if ("settings" in $$props2) $$invalidate(14, settings = $$props2.settings);
    if ("view" in $$props2) $$invalidate(2, view = $$props2.view);
    if ("currSubtype" in $$props2) $$invalidate(15, currSubtype = $$props2.currSubtype);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty[0] & /*currSubtype*/
    32768) {
      $: $$invalidate(13, currSubtypeInfo = ANALYSIS_TYPES.find((sub) => sub.subtype === currSubtype));
    }
    if ($$self.$$.dirty[0] & /*currFile*/
    64) {
      $: $$invalidate(3, currNode = currFile === null || currFile === void 0 ? void 0 : currFile.path);
    }
    if ($$self.$$.dirty[0] & /*currNode, plugin, ascOrder, app, settings*/
    16523) {
      $: $$invalidate(12, promiseSortedResults = !currNode || !plugin.g ? null : plugin.g.algs["Co-Citations"](currNode).then((ccMap) => {
        Object.values(ccMap).forEach((value) => {
          value.coCitations = value.coCitations.sort((a, b) => {
            return a.measure > b.measure ? -1 : 1;
          });
        });
        const greater = ascOrder ? 1 : -1;
        const lesser = ascOrder ? -1 : 1;
        const sortedCites = [];
        Object.keys(ccMap).forEach((to) => {
          let { coCitations, measure, resolved } = ccMap[to];
          if (measure !== 0 && measure !== Infinity) {
            sortedCites.push({
              measure,
              coCitations,
              linked: looserIsLinked(app, to, currNode, false),
              resolved,
              to
            });
          }
        });
        sortedCites.sort((a, b) => {
          return a.measure > b.measure ? greater : a.measure !== b.measure || presentPath(a.to).toLowerCase() > presentPath(b.to).toLowerCase() ? lesser : greater;
        });
        return sortedCites;
      }).then((res) => {
        $$invalidate(4, newBatch = res.slice(0, size2));
        debug(settings, { res });
        setTimeout(
          () => {
            $$invalidate(11, blockSwitch = false);
          },
          100
        );
        return res;
      }));
    }
    if ($$self.$$.dirty[0] & /*visibleData, newBatch*/
    48) {
      $: $$invalidate(5, visibleData = [...visibleData, ...newBatch]);
    }
  };
  return [
    app,
    plugin,
    view,
    currNode,
    newBatch,
    visibleData,
    currFile,
    ascOrder,
    frozen,
    current_component2,
    page,
    blockSwitch,
    promiseSortedResults,
    currSubtypeInfo,
    settings,
    currSubtype,
    subtypeoptions_ascOrder_binding,
    subtypeoptions_frozen_binding,
    subtypeoptions_currFile_binding,
    subtypeoptions_blockSwitch_binding,
    subtypeoptions_newBatch_binding,
    subtypeoptions_visibleData_binding,
    subtypeoptions_promiseSortedResults_binding,
    subtypeoptions_page_binding,
    click_handler,
    contextmenu_handler,
    mouseover_handler2,
    click_handler_1,
    contextmenu_handler_1,
    mouseover_handler_1,
    loadMore_handler,
    div_binding
  ];
}
var CoCitations = class extends SvelteComponent {
  constructor(options) {
    super();
    init(
      this,
      options,
      instance32,
      create_fragment32,
      safe_not_equal,
      {
        app: 0,
        plugin: 1,
        settings: 14,
        view: 2,
        currSubtype: 15
      },
      null,
      [-1, -1]
    );
  }
};
var CoCitations_default = CoCitations;

// src/Components/LabelPropagation.svelte
function get_each_context3(ctx, list, i) {
  const child_ctx = ctx.slice();
  child_ctx[32] = list[i];
  return child_ctx;
}
function get_each_context_12(ctx, list, i) {
  const child_ctx = ctx.slice();
  child_ctx[35] = list[i];
  return child_ctx;
}
function create_if_block7(ctx) {
  let await_block_anchor;
  let promise;
  let current;
  let info = {
    ctx,
    current: null,
    token: null,
    hasCatch: false,
    pending: create_pending_block4,
    then: create_then_block4,
    catch: create_catch_block4,
    value: 31,
    blocks: [, , ,]
  };
  handle_promise(promise = /*promiseSortedResults*/
  ctx[10], info);
  return {
    c() {
      await_block_anchor = empty();
      info.block.c();
    },
    m(target, anchor) {
      insert(target, await_block_anchor, anchor);
      info.block.m(target, info.anchor = anchor);
      info.mount = () => await_block_anchor.parentNode;
      info.anchor = await_block_anchor;
      current = true;
    },
    p(new_ctx, dirty) {
      ctx = new_ctx;
      info.ctx = ctx;
      if (dirty[0] & /*promiseSortedResults*/
      1024 && promise !== (promise = /*promiseSortedResults*/
      ctx[10]) && handle_promise(promise, info)) {
      } else {
        update_await_block_branch(info, ctx, dirty);
      }
    },
    i(local) {
      if (current) return;
      transition_in(info.block);
      current = true;
    },
    o(local) {
      for (let i = 0; i < 3; i += 1) {
        const block = info.blocks[i];
        transition_out(block);
      }
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(await_block_anchor);
      }
      info.block.d(detaching);
      info.token = null;
      info = null;
    }
  };
}
function create_catch_block4(ctx) {
  return {
    c: noop,
    m: noop,
    p: noop,
    i: noop,
    o: noop,
    d: noop
  };
}
function create_then_block4(ctx) {
  let previous_key = (
    /*sortedResults*/
    ctx[31]
  );
  let key_block_anchor;
  let current;
  let key_block = create_key_block3(ctx);
  return {
    c() {
      key_block.c();
      key_block_anchor = empty();
    },
    m(target, anchor) {
      key_block.m(target, anchor);
      insert(target, key_block_anchor, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      if (dirty[0] & /*promiseSortedResults*/
      1024 && safe_not_equal(previous_key, previous_key = /*sortedResults*/
      ctx2[31])) {
        group_outros();
        transition_out(key_block, 1, 1, noop);
        check_outros();
        key_block = create_key_block3(ctx2);
        key_block.c();
        transition_in(key_block, 1);
        key_block.m(key_block_anchor.parentNode, key_block_anchor);
      } else {
        key_block.p(ctx2, dirty);
      }
    },
    i(local) {
      if (current) return;
      transition_in(key_block);
      current = true;
    },
    o(local) {
      transition_out(key_block);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(key_block_anchor);
      }
      key_block.d(detaching);
    }
  };
}
function create_if_block_25(ctx) {
  let span;
  let falink;
  let span_class_value;
  let current;
  falink = new FaLink_default({});
  return {
    c() {
      span = element("span");
      create_component(falink.$$.fragment);
      attr(span, "class", span_class_value = null_to_empty(ICON) + " svelte-1c0lzel");
    },
    m(target, anchor) {
      insert(target, span, anchor);
      mount_component(falink, span, null);
      current = true;
    },
    i(local) {
      if (current) return;
      transition_in(falink.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(falink.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(span);
      }
      destroy_component(falink);
    }
  };
}
function create_if_block_15(ctx) {
  let imgthumbnail;
  let current;
  imgthumbnail = new ImgThumbnail_default({
    props: {
      img: getImgBufferPromise(
        /*app*/
        ctx[0],
        /*member*/
        ctx[35]
      )
    }
  });
  return {
    c() {
      create_component(imgthumbnail.$$.fragment);
    },
    m(target, anchor) {
      mount_component(imgthumbnail, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const imgthumbnail_changes = {};
      if (dirty[0] & /*app, visibleData*/
      33) imgthumbnail_changes.img = getImgBufferPromise(
        /*app*/
        ctx2[0],
        /*member*/
        ctx2[35]
      );
      imgthumbnail.$set(imgthumbnail_changes);
    },
    i(local) {
      if (current) return;
      transition_in(imgthumbnail.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(imgthumbnail.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(imgthumbnail, detaching);
    }
  };
}
function create_each_block_12(ctx) {
  let div;
  let show_if_1 = isLinked(
    /*resolvedLinks*/
    ctx[13],
    /*comm*/
    ctx[32].label,
    /*member*/
    ctx[35],
    false
  );
  let t0;
  let extensionicon;
  let t1;
  let span;
  let t2_value = presentPath(
    /*member*/
    ctx[35]
  ) + "";
  let t2;
  let span_class_value;
  let t3;
  let show_if = (
    /*plugin*/
    ctx[1].settings.showImgThumbnails && isImg(
      /*member*/
      ctx[35]
    )
  );
  let div_class_value;
  let current;
  let mounted;
  let dispose;
  let if_block0 = show_if_1 && create_if_block_25(ctx);
  extensionicon = new ExtensionIcon_default({ props: { path: (
    /*member*/
    ctx[35]
  ) } });
  let if_block1 = show_if && create_if_block_15(ctx);
  function click_handler(...args) {
    return (
      /*click_handler*/
      ctx[26](
        /*member*/
        ctx[35],
        ...args
      )
    );
  }
  function mouseover_handler2(...args) {
    return (
      /*mouseover_handler*/
      ctx[27](
        /*member*/
        ctx[35],
        ...args
      )
    );
  }
  return {
    c() {
      div = element("div");
      if (if_block0) if_block0.c();
      t0 = space();
      create_component(extensionicon.$$.fragment);
      t1 = space();
      span = element("span");
      t2 = text(t2_value);
      t3 = space();
      if (if_block1) if_block1.c();
      attr(span, "class", span_class_value = "internal-link " + /*currNode*/
      (ctx[11] === /*member*/
      ctx[35] ? "currNode" : "") + " svelte-1c0lzel");
      attr(div, "class", div_class_value = "" + NODE + " " + classLinked(
        /*resolvedLinks*/
        ctx[13],
        /*comm*/
        ctx[32].label,
        /*member*/
        ctx[35]
      ) + " " + classResolved(
        /*app*/
        ctx[0],
        /*member*/
        ctx[35]
      ) + " " + classExt(
        /*member*/
        ctx[35]
      ) + " svelte-1c0lzel");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      if (if_block0) if_block0.m(div, null);
      append(div, t0);
      mount_component(extensionicon, div, null);
      append(div, t1);
      append(div, span);
      append(span, t2);
      append(div, t3);
      if (if_block1) if_block1.m(div, null);
      current = true;
      if (!mounted) {
        dispose = [
          listen(div, "click", click_handler),
          listen(div, "mouseover", mouseover_handler2)
        ];
        mounted = true;
      }
    },
    p(new_ctx, dirty) {
      ctx = new_ctx;
      if (dirty[0] & /*visibleData*/
      32) show_if_1 = isLinked(
        /*resolvedLinks*/
        ctx[13],
        /*comm*/
        ctx[32].label,
        /*member*/
        ctx[35],
        false
      );
      if (show_if_1) {
        if (if_block0) {
          if (dirty[0] & /*visibleData*/
          32) {
            transition_in(if_block0, 1);
          }
        } else {
          if_block0 = create_if_block_25(ctx);
          if_block0.c();
          transition_in(if_block0, 1);
          if_block0.m(div, t0);
        }
      } else if (if_block0) {
        group_outros();
        transition_out(if_block0, 1, 1, () => {
          if_block0 = null;
        });
        check_outros();
      }
      const extensionicon_changes = {};
      if (dirty[0] & /*visibleData*/
      32) extensionicon_changes.path = /*member*/
      ctx[35];
      extensionicon.$set(extensionicon_changes);
      if ((!current || dirty[0] & /*visibleData*/
      32) && t2_value !== (t2_value = presentPath(
        /*member*/
        ctx[35]
      ) + "")) set_data(t2, t2_value);
      if (!current || dirty[0] & /*currNode, visibleData*/
      2080 && span_class_value !== (span_class_value = "internal-link " + /*currNode*/
      (ctx[11] === /*member*/
      ctx[35] ? "currNode" : "") + " svelte-1c0lzel")) {
        attr(span, "class", span_class_value);
      }
      if (dirty[0] & /*plugin, visibleData*/
      34) show_if = /*plugin*/
      ctx[1].settings.showImgThumbnails && isImg(
        /*member*/
        ctx[35]
      );
      if (show_if) {
        if (if_block1) {
          if_block1.p(ctx, dirty);
          if (dirty[0] & /*plugin, visibleData*/
          34) {
            transition_in(if_block1, 1);
          }
        } else {
          if_block1 = create_if_block_15(ctx);
          if_block1.c();
          transition_in(if_block1, 1);
          if_block1.m(div, null);
        }
      } else if (if_block1) {
        group_outros();
        transition_out(if_block1, 1, 1, () => {
          if_block1 = null;
        });
        check_outros();
      }
      if (!current || dirty[0] & /*visibleData, app*/
      33 && div_class_value !== (div_class_value = "" + NODE + " " + classLinked(
        /*resolvedLinks*/
        ctx[13],
        /*comm*/
        ctx[32].label,
        /*member*/
        ctx[35]
      ) + " " + classResolved(
        /*app*/
        ctx[0],
        /*member*/
        ctx[35]
      ) + " " + classExt(
        /*member*/
        ctx[35]
      ) + " svelte-1c0lzel")) {
        attr(div, "class", div_class_value);
      }
    },
    i(local) {
      if (current) return;
      transition_in(if_block0);
      transition_in(extensionicon.$$.fragment, local);
      transition_in(if_block1);
      current = true;
    },
    o(local) {
      transition_out(if_block0);
      transition_out(extensionicon.$$.fragment, local);
      transition_out(if_block1);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div);
      }
      if (if_block0) if_block0.d();
      destroy_component(extensionicon);
      if (if_block1) if_block1.d();
      mounted = false;
      run_all(dispose);
    }
  };
}
function create_each_block3(ctx) {
  let div1;
  let details;
  let summary;
  let span2;
  let span0;
  let t0_value = presentPath(
    /*comm*/
    ctx[32].label
  ) + "";
  let t0;
  let t1;
  let span1;
  let t2_value = (
    /*comm*/
    ctx[32].comm.length + ""
  );
  let t2;
  let span1_class_value;
  let span2_class_value;
  let t3;
  let div0;
  let current;
  let mounted;
  let dispose;
  function contextmenu_handler(...args) {
    return (
      /*contextmenu_handler*/
      ctx[25](
        /*comm*/
        ctx[32],
        ...args
      )
    );
  }
  let each_value_1 = ensure_array_like(
    /*comm*/
    ctx[32].comm
  );
  let each_blocks = [];
  for (let i = 0; i < each_value_1.length; i += 1) {
    each_blocks[i] = create_each_block_12(get_each_context_12(ctx, each_value_1, i));
  }
  const out = (i) => transition_out(each_blocks[i], 1, 1, () => {
    each_blocks[i] = null;
  });
  return {
    c() {
      div1 = element("div");
      details = element("details");
      summary = element("summary");
      span2 = element("span");
      span0 = element("span");
      t0 = text(t0_value);
      t1 = space();
      span1 = element("span");
      t2 = text(t2_value);
      t3 = space();
      div0 = element("div");
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].c();
      }
      attr(span0, "class", "svelte-1c0lzel");
      attr(span1, "class", span1_class_value = null_to_empty(MEASURE) + " svelte-1c0lzel");
      attr(span2, "class", span2_class_value = "top-row " + /*comm*/
      (ctx[32].comm.includes(
        /*currNode*/
        ctx[11]
      ) ? "currComm" : "") + " svelte-1c0lzel");
      attr(summary, "class", "tree-item-inner");
      attr(div0, "class", "GA-details  svelte-1c0lzel");
      attr(details, "class", "tree-item-self");
      attr(div1, "class", "GA-CC");
    },
    m(target, anchor) {
      insert(target, div1, anchor);
      append(div1, details);
      append(details, summary);
      append(summary, span2);
      append(span2, span0);
      append(span0, t0);
      append(span2, t1);
      append(span2, span1);
      append(span1, t2);
      append(details, t3);
      append(details, div0);
      for (let i = 0; i < each_blocks.length; i += 1) {
        if (each_blocks[i]) {
          each_blocks[i].m(div0, null);
        }
      }
      current = true;
      if (!mounted) {
        dispose = listen(summary, "contextmenu", contextmenu_handler);
        mounted = true;
      }
    },
    p(new_ctx, dirty) {
      ctx = new_ctx;
      if ((!current || dirty[0] & /*visibleData*/
      32) && t0_value !== (t0_value = presentPath(
        /*comm*/
        ctx[32].label
      ) + "")) set_data(t0, t0_value);
      if ((!current || dirty[0] & /*visibleData*/
      32) && t2_value !== (t2_value = /*comm*/
      ctx[32].comm.length + "")) set_data(t2, t2_value);
      if (!current || dirty[0] & /*visibleData, currNode*/
      2080 && span2_class_value !== (span2_class_value = "top-row " + /*comm*/
      (ctx[32].comm.includes(
        /*currNode*/
        ctx[11]
      ) ? "currComm" : "") + " svelte-1c0lzel")) {
        attr(span2, "class", span2_class_value);
      }
      if (dirty[0] & /*resolvedLinks, visibleData, app, view, plugin, currNode*/
      10279) {
        each_value_1 = ensure_array_like(
          /*comm*/
          ctx[32].comm
        );
        let i;
        for (i = 0; i < each_value_1.length; i += 1) {
          const child_ctx = get_each_context_12(ctx, each_value_1, i);
          if (each_blocks[i]) {
            each_blocks[i].p(child_ctx, dirty);
            transition_in(each_blocks[i], 1);
          } else {
            each_blocks[i] = create_each_block_12(child_ctx);
            each_blocks[i].c();
            transition_in(each_blocks[i], 1);
            each_blocks[i].m(div0, null);
          }
        }
        group_outros();
        for (i = each_value_1.length; i < each_blocks.length; i += 1) {
          out(i);
        }
        check_outros();
      }
    },
    i(local) {
      if (current) return;
      for (let i = 0; i < each_value_1.length; i += 1) {
        transition_in(each_blocks[i]);
      }
      current = true;
    },
    o(local) {
      each_blocks = each_blocks.filter(Boolean);
      for (let i = 0; i < each_blocks.length; i += 1) {
        transition_out(each_blocks[i]);
      }
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div1);
      }
      destroy_each(each_blocks, detaching);
      mounted = false;
      dispose();
    }
  };
}
function create_key_block3(ctx) {
  let t0;
  let infinitescroll;
  let t1;
  let t2_value = (
    /*visibleData*/
    ctx[5].length + ""
  );
  let t2;
  let t3;
  let t4_value = (
    /*sortedResults*/
    ctx[31].length + ""
  );
  let t4;
  let current;
  let each_value = ensure_array_like(
    /*visibleData*/
    ctx[5]
  );
  let each_blocks = [];
  for (let i = 0; i < each_value.length; i += 1) {
    each_blocks[i] = create_each_block3(get_each_context3(ctx, each_value, i));
  }
  const out = (i) => transition_out(each_blocks[i], 1, 1, () => {
    each_blocks[i] = null;
  });
  function loadMore_handler() {
    return (
      /*loadMore_handler*/
      ctx[28](
        /*sortedResults*/
        ctx[31]
      )
    );
  }
  infinitescroll = new InfiniteScroll({
    props: {
      hasMore: (
        /*sortedResults*/
        ctx[31].length > /*visibleData*/
        ctx[5].length
      ),
      threshold: 100,
      elementScroll: (
        /*current_component*/
        ctx[7].parentNode
      )
    }
  });
  infinitescroll.$on("loadMore", loadMore_handler);
  return {
    c() {
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].c();
      }
      t0 = space();
      create_component(infinitescroll.$$.fragment);
      t1 = space();
      t2 = text(t2_value);
      t3 = text(" / ");
      t4 = text(t4_value);
    },
    m(target, anchor) {
      for (let i = 0; i < each_blocks.length; i += 1) {
        if (each_blocks[i]) {
          each_blocks[i].m(target, anchor);
        }
      }
      insert(target, t0, anchor);
      mount_component(infinitescroll, target, anchor);
      insert(target, t1, anchor);
      insert(target, t2, anchor);
      insert(target, t3, anchor);
      insert(target, t4, anchor);
      current = true;
    },
    p(new_ctx, dirty) {
      ctx = new_ctx;
      if (dirty[0] & /*visibleData, resolvedLinks, app, view, plugin, currNode*/
      10279) {
        each_value = ensure_array_like(
          /*visibleData*/
          ctx[5]
        );
        let i;
        for (i = 0; i < each_value.length; i += 1) {
          const child_ctx = get_each_context3(ctx, each_value, i);
          if (each_blocks[i]) {
            each_blocks[i].p(child_ctx, dirty);
            transition_in(each_blocks[i], 1);
          } else {
            each_blocks[i] = create_each_block3(child_ctx);
            each_blocks[i].c();
            transition_in(each_blocks[i], 1);
            each_blocks[i].m(t0.parentNode, t0);
          }
        }
        group_outros();
        for (i = each_value.length; i < each_blocks.length; i += 1) {
          out(i);
        }
        check_outros();
      }
      const infinitescroll_changes = {};
      if (dirty[0] & /*promiseSortedResults, visibleData*/
      1056) infinitescroll_changes.hasMore = /*sortedResults*/
      ctx[31].length > /*visibleData*/
      ctx[5].length;
      if (dirty[0] & /*current_component*/
      128) infinitescroll_changes.elementScroll = /*current_component*/
      ctx[7].parentNode;
      infinitescroll.$set(infinitescroll_changes);
      if ((!current || dirty[0] & /*visibleData*/
      32) && t2_value !== (t2_value = /*visibleData*/
      ctx[5].length + "")) set_data(t2, t2_value);
      if ((!current || dirty[0] & /*promiseSortedResults*/
      1024) && t4_value !== (t4_value = /*sortedResults*/
      ctx[31].length + "")) set_data(t4, t4_value);
    },
    i(local) {
      if (current) return;
      for (let i = 0; i < each_value.length; i += 1) {
        transition_in(each_blocks[i]);
      }
      transition_in(infinitescroll.$$.fragment, local);
      current = true;
    },
    o(local) {
      each_blocks = each_blocks.filter(Boolean);
      for (let i = 0; i < each_blocks.length; i += 1) {
        transition_out(each_blocks[i]);
      }
      transition_out(infinitescroll.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(t0);
        detach(t1);
        detach(t2);
        detach(t3);
        detach(t4);
      }
      destroy_each(each_blocks, detaching);
      destroy_component(infinitescroll, detaching);
    }
  };
}
function create_pending_block4(ctx) {
  return {
    c: noop,
    m: noop,
    p: noop,
    i: noop,
    o: noop,
    d: noop
  };
}
function create_fragment33(ctx) {
  let div1;
  let div0;
  let span;
  let subtypeoptions;
  let updating_currSubtypeInfo;
  let updating_ascOrder;
  let updating_blockSwitch;
  let updating_newBatch;
  let updating_visibleData;
  let updating_promiseSortedResults;
  let updating_page;
  let t0;
  let label;
  let t2;
  let input;
  let t3;
  let current;
  let mounted;
  let dispose;
  function subtypeoptions_currSubtypeInfo_binding(value) {
    ctx[17](value);
  }
  function subtypeoptions_ascOrder_binding(value) {
    ctx[18](value);
  }
  function subtypeoptions_blockSwitch_binding(value) {
    ctx[19](value);
  }
  function subtypeoptions_newBatch_binding(value) {
    ctx[20](value);
  }
  function subtypeoptions_visibleData_binding(value) {
    ctx[21](value);
  }
  function subtypeoptions_promiseSortedResults_binding(value) {
    ctx[22](value);
  }
  function subtypeoptions_page_binding(value) {
    ctx[23](value);
  }
  let subtypeoptions_props = {
    plugin: (
      /*plugin*/
      ctx[1]
    ),
    view: (
      /*view*/
      ctx[2]
    ),
    app: (
      /*app*/
      ctx[0]
    )
  };
  if (
    /*currSubtypeInfo*/
    ctx[12] !== void 0
  ) {
    subtypeoptions_props.currSubtypeInfo = /*currSubtypeInfo*/
    ctx[12];
  }
  if (
    /*ascOrder*/
    ctx[3] !== void 0
  ) {
    subtypeoptions_props.ascOrder = /*ascOrder*/
    ctx[3];
  }
  if (
    /*blockSwitch*/
    ctx[9] !== void 0
  ) {
    subtypeoptions_props.blockSwitch = /*blockSwitch*/
    ctx[9];
  }
  if (
    /*newBatch*/
    ctx[4] !== void 0
  ) {
    subtypeoptions_props.newBatch = /*newBatch*/
    ctx[4];
  }
  if (
    /*visibleData*/
    ctx[5] !== void 0
  ) {
    subtypeoptions_props.visibleData = /*visibleData*/
    ctx[5];
  }
  if (
    /*promiseSortedResults*/
    ctx[10] !== void 0
  ) {
    subtypeoptions_props.promiseSortedResults = /*promiseSortedResults*/
    ctx[10];
  }
  if (
    /*page*/
    ctx[8] !== void 0
  ) {
    subtypeoptions_props.page = /*page*/
    ctx[8];
  }
  subtypeoptions = new SubtypeOptions_default({ props: subtypeoptions_props });
  binding_callbacks.push(() => bind(subtypeoptions, "currSubtypeInfo", subtypeoptions_currSubtypeInfo_binding));
  binding_callbacks.push(() => bind(subtypeoptions, "ascOrder", subtypeoptions_ascOrder_binding));
  binding_callbacks.push(() => bind(subtypeoptions, "blockSwitch", subtypeoptions_blockSwitch_binding));
  binding_callbacks.push(() => bind(subtypeoptions, "newBatch", subtypeoptions_newBatch_binding));
  binding_callbacks.push(() => bind(subtypeoptions, "visibleData", subtypeoptions_visibleData_binding));
  binding_callbacks.push(() => bind(subtypeoptions, "promiseSortedResults", subtypeoptions_promiseSortedResults_binding));
  binding_callbacks.push(() => bind(subtypeoptions, "page", subtypeoptions_page_binding));
  let if_block = (
    /*promiseSortedResults*/
    ctx[10] && create_if_block7(ctx)
  );
  return {
    c() {
      div1 = element("div");
      div0 = element("div");
      span = element("span");
      create_component(subtypeoptions.$$.fragment);
      t0 = space();
      label = element("label");
      label.textContent = "Iterations:";
      t2 = space();
      input = element("input");
      t3 = space();
      if (if_block) if_block.c();
      attr(label, "for", "iterations");
      attr(input, "name", "iterations");
      attr(input, "type", "range");
      attr(input, "min", "1");
      attr(input, "max", "30");
      input.value = /*its*/
      ctx[6];
      attr(div1, "class", "GA-CCs svelte-1c0lzel");
    },
    m(target, anchor) {
      insert(target, div1, anchor);
      append(div1, div0);
      append(div0, span);
      mount_component(subtypeoptions, span, null);
      append(span, t0);
      append(span, label);
      append(span, t2);
      append(span, input);
      append(div1, t3);
      if (if_block) if_block.m(div1, null);
      ctx[29](div1);
      current = true;
      if (!mounted) {
        dispose = listen(
          input,
          "change",
          /*change_handler*/
          ctx[24]
        );
        mounted = true;
      }
    },
    p(ctx2, dirty) {
      const subtypeoptions_changes = {};
      if (dirty[0] & /*plugin*/
      2) subtypeoptions_changes.plugin = /*plugin*/
      ctx2[1];
      if (dirty[0] & /*view*/
      4) subtypeoptions_changes.view = /*view*/
      ctx2[2];
      if (dirty[0] & /*app*/
      1) subtypeoptions_changes.app = /*app*/
      ctx2[0];
      if (!updating_currSubtypeInfo && dirty[0] & /*currSubtypeInfo*/
      4096) {
        updating_currSubtypeInfo = true;
        subtypeoptions_changes.currSubtypeInfo = /*currSubtypeInfo*/
        ctx2[12];
        add_flush_callback(() => updating_currSubtypeInfo = false);
      }
      if (!updating_ascOrder && dirty[0] & /*ascOrder*/
      8) {
        updating_ascOrder = true;
        subtypeoptions_changes.ascOrder = /*ascOrder*/
        ctx2[3];
        add_flush_callback(() => updating_ascOrder = false);
      }
      if (!updating_blockSwitch && dirty[0] & /*blockSwitch*/
      512) {
        updating_blockSwitch = true;
        subtypeoptions_changes.blockSwitch = /*blockSwitch*/
        ctx2[9];
        add_flush_callback(() => updating_blockSwitch = false);
      }
      if (!updating_newBatch && dirty[0] & /*newBatch*/
      16) {
        updating_newBatch = true;
        subtypeoptions_changes.newBatch = /*newBatch*/
        ctx2[4];
        add_flush_callback(() => updating_newBatch = false);
      }
      if (!updating_visibleData && dirty[0] & /*visibleData*/
      32) {
        updating_visibleData = true;
        subtypeoptions_changes.visibleData = /*visibleData*/
        ctx2[5];
        add_flush_callback(() => updating_visibleData = false);
      }
      if (!updating_promiseSortedResults && dirty[0] & /*promiseSortedResults*/
      1024) {
        updating_promiseSortedResults = true;
        subtypeoptions_changes.promiseSortedResults = /*promiseSortedResults*/
        ctx2[10];
        add_flush_callback(() => updating_promiseSortedResults = false);
      }
      if (!updating_page && dirty[0] & /*page*/
      256) {
        updating_page = true;
        subtypeoptions_changes.page = /*page*/
        ctx2[8];
        add_flush_callback(() => updating_page = false);
      }
      subtypeoptions.$set(subtypeoptions_changes);
      if (!current || dirty[0] & /*its*/
      64) {
        input.value = /*its*/
        ctx2[6];
      }
      if (
        /*promiseSortedResults*/
        ctx2[10]
      ) {
        if (if_block) {
          if_block.p(ctx2, dirty);
          if (dirty[0] & /*promiseSortedResults*/
          1024) {
            transition_in(if_block, 1);
          }
        } else {
          if_block = create_if_block7(ctx2);
          if_block.c();
          transition_in(if_block, 1);
          if_block.m(div1, null);
        }
      } else if (if_block) {
        group_outros();
        transition_out(if_block, 1, 1, () => {
          if_block = null;
        });
        check_outros();
      }
    },
    i(local) {
      if (current) return;
      transition_in(subtypeoptions.$$.fragment, local);
      transition_in(if_block);
      current = true;
    },
    o(local) {
      transition_out(subtypeoptions.$$.fragment, local);
      transition_out(if_block);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div1);
      }
      destroy_component(subtypeoptions);
      if (if_block) if_block.d();
      ctx[29](null);
      mounted = false;
      dispose();
    }
  };
}
var size3 = 50;
function instance33($$self, $$props, $$invalidate) {
  let currSubtypeInfo;
  let currNode;
  let promiseSortedResults;
  let { app } = $$props;
  let { plugin } = $$props;
  let { settings } = $$props;
  let { view } = $$props;
  let { currSubtype } = $$props;
  let { resolvedLinks } = app.metadataCache;
  let ascOrder = false;
  let current_component2;
  let newBatch = [];
  let visibleData = [];
  let page = 0;
  let blockSwitch = false;
  let currFile = app.workspace.getActiveFile();
  app.workspace.on("active-leaf-change", () => {
    $$invalidate(9, blockSwitch = true);
    setTimeout(
      () => {
        $$invalidate(9, blockSwitch = false);
        $$invalidate(16, currFile = app.workspace.getActiveFile());
      },
      100
    );
    $$invalidate(4, newBatch = []);
  });
  let its = 20;
  const iterationsArr = Array(50).fill(0).map((i, j) => j + 1);
  onMount(() => {
    $$invalidate(16, currFile = app.workspace.getActiveFile());
  });
  function subtypeoptions_currSubtypeInfo_binding(value) {
    currSubtypeInfo = value;
    $$invalidate(12, currSubtypeInfo), $$invalidate(15, currSubtype);
  }
  function subtypeoptions_ascOrder_binding(value) {
    ascOrder = value;
    $$invalidate(3, ascOrder);
  }
  function subtypeoptions_blockSwitch_binding(value) {
    blockSwitch = value;
    $$invalidate(9, blockSwitch), $$invalidate(1, plugin), $$invalidate(15, currSubtype), $$invalidate(6, its), $$invalidate(3, ascOrder);
  }
  function subtypeoptions_newBatch_binding(value) {
    newBatch = value;
    $$invalidate(4, newBatch), $$invalidate(1, plugin), $$invalidate(15, currSubtype), $$invalidate(6, its), $$invalidate(3, ascOrder);
  }
  function subtypeoptions_visibleData_binding(value) {
    visibleData = value;
    $$invalidate(5, visibleData), $$invalidate(4, newBatch), $$invalidate(1, plugin), $$invalidate(15, currSubtype), $$invalidate(6, its), $$invalidate(3, ascOrder);
  }
  function subtypeoptions_promiseSortedResults_binding(value) {
    promiseSortedResults = value;
    $$invalidate(10, promiseSortedResults), $$invalidate(1, plugin), $$invalidate(15, currSubtype), $$invalidate(6, its), $$invalidate(3, ascOrder);
  }
  function subtypeoptions_page_binding(value) {
    page = value;
    $$invalidate(8, page);
  }
  const change_handler = (e) => {
    const value = Number.parseInt(e.target.value);
    $$invalidate(9, blockSwitch = true);
    $$invalidate(5, visibleData = []);
    $$invalidate(10, promiseSortedResults = null);
    $$invalidate(8, page = 0);
    setTimeout(
      () => {
        $$invalidate(9, blockSwitch = false);
      },
      100
    );
    $$invalidate(4, newBatch = []);
    $$invalidate(6, its = value);
  };
  const contextmenu_handler = (comm, e) => openMenu(e, app, { toCopy: comm.comm.join("\n") });
  const click_handler = async (member, e) => await openOrSwitch2(app, member, e);
  const mouseover_handler2 = (member, e) => hoverPreview(e, view, member);
  const loadMore_handler = (sortedResults) => {
    if (!blockSwitch) {
      $$invalidate(8, page++, page);
      $$invalidate(4, newBatch = sortedResults.slice(size3 * page, size3 * (page + 1) - 1));
      console.log({ newBatch });
    }
  };
  function div1_binding($$value) {
    binding_callbacks[$$value ? "unshift" : "push"](() => {
      current_component2 = $$value;
      $$invalidate(7, current_component2);
    });
  }
  $$self.$$set = ($$props2) => {
    if ("app" in $$props2) $$invalidate(0, app = $$props2.app);
    if ("plugin" in $$props2) $$invalidate(1, plugin = $$props2.plugin);
    if ("settings" in $$props2) $$invalidate(14, settings = $$props2.settings);
    if ("view" in $$props2) $$invalidate(2, view = $$props2.view);
    if ("currSubtype" in $$props2) $$invalidate(15, currSubtype = $$props2.currSubtype);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty[0] & /*currSubtype*/
    32768) {
      $: $$invalidate(12, currSubtypeInfo = ANALYSIS_TYPES.find((sub) => sub.subtype === currSubtype));
    }
    if ($$self.$$.dirty[0] & /*currFile*/
    65536) {
      $: $$invalidate(11, currNode = currFile === null || currFile === void 0 ? void 0 : currFile.path);
    }
    if ($$self.$$.dirty[0] & /*plugin, currSubtype, its, ascOrder*/
    32842) {
      $: $$invalidate(10, promiseSortedResults = !plugin.g ? null : plugin.g.algs[currSubtype]("", { iterations: its }).then((comms) => {
        const greater = ascOrder ? 1 : -1;
        const lesser = ascOrder ? -1 : 1;
        const componentResults = [];
        Object.keys(comms).forEach((label) => {
          let comm = comms[label];
          if (comm.length > 1) {
            componentResults.push({ label, comm });
          }
        });
        componentResults.sort((a, b) => a.comm.length > b.comm.length ? greater : lesser);
        return componentResults;
      }).then((res) => {
        $$invalidate(4, newBatch = res.slice(0, size3));
        setTimeout(
          () => {
            $$invalidate(9, blockSwitch = false);
          },
          100
        );
        return res;
      }));
    }
    if ($$self.$$.dirty[0] & /*visibleData, newBatch*/
    48) {
      $: $$invalidate(5, visibleData = [...visibleData, ...newBatch]);
    }
  };
  return [
    app,
    plugin,
    view,
    ascOrder,
    newBatch,
    visibleData,
    its,
    current_component2,
    page,
    blockSwitch,
    promiseSortedResults,
    currNode,
    currSubtypeInfo,
    resolvedLinks,
    settings,
    currSubtype,
    currFile,
    subtypeoptions_currSubtypeInfo_binding,
    subtypeoptions_ascOrder_binding,
    subtypeoptions_blockSwitch_binding,
    subtypeoptions_newBatch_binding,
    subtypeoptions_visibleData_binding,
    subtypeoptions_promiseSortedResults_binding,
    subtypeoptions_page_binding,
    change_handler,
    contextmenu_handler,
    click_handler,
    mouseover_handler2,
    loadMore_handler,
    div1_binding
  ];
}
var LabelPropagation = class extends SvelteComponent {
  constructor(options) {
    super();
    init(
      this,
      options,
      instance33,
      create_fragment33,
      safe_not_equal,
      {
        app: 0,
        plugin: 1,
        settings: 14,
        view: 2,
        currSubtype: 15
      },
      null,
      [-1, -1]
    );
  }
};
var LabelPropagation_default = LabelPropagation;

// node_modules/.pnpm/svelte-icons@2.1.0/node_modules/svelte-icons/fa/FaGlobeAfrica.svelte
function create_default_slot24(ctx) {
  let path;
  return {
    c() {
      path = svg_element("path");
      attr(path, "d", "M248 8C111.03 8 0 119.03 0 256s111.03 248 248 248 248-111.03 248-248S384.97 8 248 8zm160 215.5v6.93c0 5.87-3.32 11.24-8.57 13.86l-15.39 7.7a15.485 15.485 0 0 1-15.53-.97l-18.21-12.14a15.52 15.52 0 0 0-13.5-1.81l-2.65.88c-9.7 3.23-13.66 14.79-7.99 23.3l13.24 19.86c2.87 4.31 7.71 6.9 12.89 6.9h8.21c8.56 0 15.5 6.94 15.5 15.5v11.34c0 3.35-1.09 6.62-3.1 9.3l-18.74 24.98c-1.42 1.9-2.39 4.1-2.83 6.43l-4.3 22.83c-.62 3.29-2.29 6.29-4.76 8.56a159.608 159.608 0 0 0-25 29.16l-13.03 19.55a27.756 27.756 0 0 1-23.09 12.36c-10.51 0-20.12-5.94-24.82-15.34a78.902 78.902 0 0 1-8.33-35.29V367.5c0-8.56-6.94-15.5-15.5-15.5h-25.88c-14.49 0-28.38-5.76-38.63-16a54.659 54.659 0 0 1-16-38.63v-14.06c0-17.19 8.1-33.38 21.85-43.7l27.58-20.69a54.663 54.663 0 0 1 32.78-10.93h.89c8.48 0 16.85 1.97 24.43 5.77l14.72 7.36c3.68 1.84 7.93 2.14 11.83.84l47.31-15.77c6.33-2.11 10.6-8.03 10.6-14.7 0-8.56-6.94-15.5-15.5-15.5h-10.09c-4.11 0-8.05-1.63-10.96-4.54l-6.92-6.92a15.493 15.493 0 0 0-10.96-4.54H199.5c-8.56 0-15.5-6.94-15.5-15.5v-4.4c0-7.11 4.84-13.31 11.74-15.04l14.45-3.61c3.74-.94 7-3.23 9.14-6.44l8.08-12.11c2.87-4.31 7.71-6.9 12.89-6.9h24.21c8.56 0 15.5-6.94 15.5-15.5v-21.7C359.23 71.63 422.86 131.02 441.93 208H423.5c-8.56 0-15.5 6.94-15.5 15.5z");
    },
    m(target, anchor) {
      insert(target, path, anchor);
    },
    p: noop,
    d(detaching) {
      if (detaching) {
        detach(path);
      }
    }
  };
}
function create_fragment34(ctx) {
  let iconbase;
  let current;
  const iconbase_spread_levels = [
    { viewBox: "0 0 496 512" },
    /*$$props*/
    ctx[0]
  ];
  let iconbase_props = {
    $$slots: { default: [create_default_slot24] },
    $$scope: { ctx }
  };
  for (let i = 0; i < iconbase_spread_levels.length; i += 1) {
    iconbase_props = assign(iconbase_props, iconbase_spread_levels[i]);
  }
  iconbase = new IconBase_default({ props: iconbase_props });
  return {
    c() {
      create_component(iconbase.$$.fragment);
    },
    m(target, anchor) {
      mount_component(iconbase, target, anchor);
      current = true;
    },
    p(ctx2, [dirty]) {
      const iconbase_changes = dirty & /*$$props*/
      1 ? get_spread_update(iconbase_spread_levels, [iconbase_spread_levels[0], get_spread_object(
        /*$$props*/
        ctx2[0]
      )]) : {};
      if (dirty & /*$$scope*/
      2) {
        iconbase_changes.$$scope = { dirty, ctx: ctx2 };
      }
      iconbase.$set(iconbase_changes);
    },
    i(local) {
      if (current) return;
      transition_in(iconbase.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(iconbase.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(iconbase, detaching);
    }
  };
}
function instance34($$self, $$props, $$invalidate) {
  $$self.$$set = ($$new_props) => {
    $$invalidate(0, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
  };
  $$props = exclude_internal_props($$props);
  return [$$props];
}
var FaGlobeAfrica = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance34, create_fragment34, safe_not_equal, {});
  }
};
var FaGlobeAfrica_default = FaGlobeAfrica;

// node_modules/.pnpm/svelte-icons@2.1.0/node_modules/svelte-icons/io/IoIosChatbubbles.svelte
function create_default_slot25(ctx) {
  let path0;
  let t;
  let path1;
  return {
    c() {
      path0 = svg_element("path");
      t = space();
      path1 = svg_element("path");
      attr(path0, "d", "M431 320.6c0-4.4 1.2-8.6 3.3-12.2.6-1.1 1.4-2.1 2.1-3.1 17.4-26 27.6-57.1 27.6-90.3.3-92.2-77.5-167-173.7-167-83.9 0-153.9 57.1-170.3 132.9-2.4 11.1-3.7 22.4-3.7 34.2 0 92.3 74.8 169.1 171 169.1 15.3 0 35.9-4.6 47.2-7.7 11.3-3.1 22.5-7.2 25.4-8.3 2.9-1.1 6.1-1.7 9.3-1.7 3.6 0 7 .7 10.1 2l56.7 20.1s2.4 1 3.9 1c4.4 0 8-3.5 8-8 0-1-.5-2.7-.5-2.7L431 320.6z");
      attr(path1, "d", "M318.5 392.5c-3.6 1-8.2 2.1-13.2 3.2-10.5 2.2-23.9 4.5-34 4.5-96.2 0-171-76.8-171-169.1 0-6.6.7-15 1.5-21.4.6-4.3 1.3-8.6 2.3-12.8 1-4.5 2.2-9 3.5-13.4l-8 7.1C66.8 219.2 48 260 48 302.5c0 29.3 8.5 57.5 24.8 82 2.3 3.5 3.6 6.2 3.2 8-.4 1.8-11.9 62-11.9 62-.6 2.9.5 5.8 2.7 7.7 1.5 1.2 3.3 1.8 5.1 1.8 1 0 2-.2 2.9-.6l56.1-22.1c1.8-.7 3.7-1.1 5.7-1.1 0 0 2.4-.2 6.3 1.3 18.9 7.4 39.8 12 60.7 12 46.6 0 90.4-20.1 120.1-55.1 0 0 3.2-4.4 6.9-9.6-3.7 1.3-7.9 2.6-12.1 3.7z");
    },
    m(target, anchor) {
      insert(target, path0, anchor);
      insert(target, t, anchor);
      insert(target, path1, anchor);
    },
    p: noop,
    d(detaching) {
      if (detaching) {
        detach(path0);
        detach(t);
        detach(path1);
      }
    }
  };
}
function create_fragment35(ctx) {
  let iconbase;
  let current;
  const iconbase_spread_levels = [
    { viewBox: "0 0 512 512" },
    /*$$props*/
    ctx[0]
  ];
  let iconbase_props = {
    $$slots: { default: [create_default_slot25] },
    $$scope: { ctx }
  };
  for (let i = 0; i < iconbase_spread_levels.length; i += 1) {
    iconbase_props = assign(iconbase_props, iconbase_spread_levels[i]);
  }
  iconbase = new IconBase_default({ props: iconbase_props });
  return {
    c() {
      create_component(iconbase.$$.fragment);
    },
    m(target, anchor) {
      mount_component(iconbase, target, anchor);
      current = true;
    },
    p(ctx2, [dirty]) {
      const iconbase_changes = dirty & /*$$props*/
      1 ? get_spread_update(iconbase_spread_levels, [iconbase_spread_levels[0], get_spread_object(
        /*$$props*/
        ctx2[0]
      )]) : {};
      if (dirty & /*$$scope*/
      2) {
        iconbase_changes.$$scope = { dirty, ctx: ctx2 };
      }
      iconbase.$set(iconbase_changes);
    },
    i(local) {
      if (current) return;
      transition_in(iconbase.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(iconbase.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(iconbase, detaching);
    }
  };
}
function instance35($$self, $$props, $$invalidate) {
  $$self.$$set = ($$new_props) => {
    $$invalidate(0, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
  };
  $$props = exclude_internal_props($$props);
  return [$$props];
}
var IoIosChatbubbles = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance35, create_fragment35, safe_not_equal, {});
  }
};
var IoIosChatbubbles_default = IoIosChatbubbles;

// src/Components/ScrollSelector.svelte
function get_each_context4(ctx, list, i) {
  const child_ctx = ctx.slice();
  child_ctx[3] = list[i];
  return child_ctx;
}
function create_if_block8(ctx) {
  let previous_key = (
    /*view*/
    ctx[1].plugin.settings.algsToShow
  );
  let key_block_anchor;
  let current;
  let key_block = create_key_block4(ctx);
  return {
    c() {
      key_block.c();
      key_block_anchor = empty();
    },
    m(target, anchor) {
      key_block.m(target, anchor);
      insert(target, key_block_anchor, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      if (dirty & /*view*/
      2 && safe_not_equal(previous_key, previous_key = /*view*/
      ctx2[1].plugin.settings.algsToShow)) {
        group_outros();
        transition_out(key_block, 1, 1, noop);
        check_outros();
        key_block = create_key_block4(ctx2);
        key_block.c();
        transition_in(key_block, 1);
        key_block.m(key_block_anchor.parentNode, key_block_anchor);
      } else {
        key_block.p(ctx2, dirty);
      }
    },
    i(local) {
      if (current) return;
      transition_in(key_block);
      current = true;
    },
    o(local) {
      transition_out(key_block);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(key_block_anchor);
      }
      key_block.d(detaching);
    }
  };
}
function create_if_block_16(ctx) {
  let button;
  let t0;
  let t1;
  let t2_value = (
    /*sub*/
    ctx[3].subtype + ""
  );
  let t2;
  let t3;
  let button_class_value;
  let current;
  let mounted;
  let dispose;
  let if_block0 = (
    /*sub*/
    ctx[3].global && create_if_block_35(ctx)
  );
  let if_block1 = (
    /*sub*/
    ctx[3].nlp && create_if_block_26(ctx)
  );
  function click_handler() {
    return (
      /*click_handler*/
      ctx[2](
        /*sub*/
        ctx[3]
      )
    );
  }
  return {
    c() {
      button = element("button");
      if (if_block0) if_block0.c();
      t0 = space();
      if (if_block1) if_block1.c();
      t1 = space();
      t2 = text(t2_value);
      t3 = space();
      attr(button, "class", button_class_value = "item GA-Button " + /*currSubtype*/
      (ctx[0] === /*sub*/
      ctx[3].subtype ? "currSubtype" : "") + " svelte-z95de7");
    },
    m(target, anchor) {
      insert(target, button, anchor);
      if (if_block0) if_block0.m(button, null);
      append(button, t0);
      if (if_block1) if_block1.m(button, null);
      append(button, t1);
      append(button, t2);
      append(button, t3);
      current = true;
      if (!mounted) {
        dispose = listen(button, "click", click_handler);
        mounted = true;
      }
    },
    p(new_ctx, dirty) {
      ctx = new_ctx;
      if (!current || dirty & /*currSubtype*/
      1 && button_class_value !== (button_class_value = "item GA-Button " + /*currSubtype*/
      (ctx[0] === /*sub*/
      ctx[3].subtype ? "currSubtype" : "") + " svelte-z95de7")) {
        attr(button, "class", button_class_value);
      }
    },
    i(local) {
      if (current) return;
      transition_in(if_block0);
      transition_in(if_block1);
      current = true;
    },
    o(local) {
      transition_out(if_block0);
      transition_out(if_block1);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(button);
      }
      if (if_block0) if_block0.d();
      if (if_block1) if_block1.d();
      mounted = false;
      dispose();
    }
  };
}
function create_if_block_35(ctx) {
  let span;
  let faglobeafrica;
  let span_class_value;
  let current;
  faglobeafrica = new FaGlobeAfrica_default({});
  return {
    c() {
      span = element("span");
      create_component(faglobeafrica.$$.fragment);
      attr(span, "class", span_class_value = null_to_empty(ICON) + " svelte-z95de7");
    },
    m(target, anchor) {
      insert(target, span, anchor);
      mount_component(faglobeafrica, span, null);
      current = true;
    },
    i(local) {
      if (current) return;
      transition_in(faglobeafrica.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(faglobeafrica.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(span);
      }
      destroy_component(faglobeafrica);
    }
  };
}
function create_if_block_26(ctx) {
  let span;
  let ioioschatbubbles;
  let span_class_value;
  let current;
  ioioschatbubbles = new IoIosChatbubbles_default({});
  return {
    c() {
      span = element("span");
      create_component(ioioschatbubbles.$$.fragment);
      attr(span, "class", span_class_value = null_to_empty(ICON) + " svelte-z95de7");
    },
    m(target, anchor) {
      insert(target, span, anchor);
      mount_component(ioioschatbubbles, span, null);
      current = true;
    },
    i(local) {
      if (current) return;
      transition_in(ioioschatbubbles.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(ioioschatbubbles.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(span);
      }
      destroy_component(ioioschatbubbles);
    }
  };
}
function create_each_block4(ctx) {
  let show_if = (
    /*view*/
    ctx[1].plugin.settings.algsToShow.includes(
      /*sub*/
      ctx[3].subtype
    )
  );
  let if_block_anchor;
  let current;
  let if_block = show_if && create_if_block_16(ctx);
  return {
    c() {
      if (if_block) if_block.c();
      if_block_anchor = empty();
    },
    m(target, anchor) {
      if (if_block) if_block.m(target, anchor);
      insert(target, if_block_anchor, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      if (dirty & /*view*/
      2) show_if = /*view*/
      ctx2[1].plugin.settings.algsToShow.includes(
        /*sub*/
        ctx2[3].subtype
      );
      if (show_if) {
        if (if_block) {
          if_block.p(ctx2, dirty);
          if (dirty & /*view*/
          2) {
            transition_in(if_block, 1);
          }
        } else {
          if_block = create_if_block_16(ctx2);
          if_block.c();
          transition_in(if_block, 1);
          if_block.m(if_block_anchor.parentNode, if_block_anchor);
        }
      } else if (if_block) {
        group_outros();
        transition_out(if_block, 1, 1, () => {
          if_block = null;
        });
        check_outros();
      }
    },
    i(local) {
      if (current) return;
      transition_in(if_block);
      current = true;
    },
    o(local) {
      transition_out(if_block);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(if_block_anchor);
      }
      if (if_block) if_block.d(detaching);
    }
  };
}
function create_key_block4(ctx) {
  let div1;
  let div0;
  let current;
  let mounted;
  let dispose;
  let each_value = ensure_array_like(ANALYSIS_TYPES);
  let each_blocks = [];
  for (let i = 0; i < each_value.length; i += 1) {
    each_blocks[i] = create_each_block4(get_each_context4(ctx, each_value, i));
  }
  const out = (i) => transition_out(each_blocks[i], 1, 1, () => {
    each_blocks[i] = null;
  });
  return {
    c() {
      div1 = element("div");
      div0 = element("div");
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].c();
      }
      attr(div0, "class", "container svelte-z95de7");
      attr(div1, "class", "scrollContainer");
    },
    m(target, anchor) {
      insert(target, div1, anchor);
      append(div1, div0);
      for (let i = 0; i < each_blocks.length; i += 1) {
        if (each_blocks[i]) {
          each_blocks[i].m(div0, null);
        }
      }
      current = true;
      if (!mounted) {
        dispose = listen(div1, "mouseover", mouseover_handler);
        mounted = true;
      }
    },
    p(ctx2, dirty) {
      if (dirty & /*currSubtype, view*/
      3) {
        each_value = ensure_array_like(ANALYSIS_TYPES);
        let i;
        for (i = 0; i < each_value.length; i += 1) {
          const child_ctx = get_each_context4(ctx2, each_value, i);
          if (each_blocks[i]) {
            each_blocks[i].p(child_ctx, dirty);
            transition_in(each_blocks[i], 1);
          } else {
            each_blocks[i] = create_each_block4(child_ctx);
            each_blocks[i].c();
            transition_in(each_blocks[i], 1);
            each_blocks[i].m(div0, null);
          }
        }
        group_outros();
        for (i = each_value.length; i < each_blocks.length; i += 1) {
          out(i);
        }
        check_outros();
      }
    },
    i(local) {
      if (current) return;
      for (let i = 0; i < each_value.length; i += 1) {
        transition_in(each_blocks[i]);
      }
      current = true;
    },
    o(local) {
      each_blocks = each_blocks.filter(Boolean);
      for (let i = 0; i < each_blocks.length; i += 1) {
        transition_out(each_blocks[i]);
      }
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div1);
      }
      destroy_each(each_blocks, detaching);
      mounted = false;
      dispose();
    }
  };
}
function create_fragment36(ctx) {
  let if_block_anchor;
  let current;
  let if_block = (
    /*view*/
    ctx[1].plugin.settings.algsToShow.length > 1 && create_if_block8(ctx)
  );
  return {
    c() {
      if (if_block) if_block.c();
      if_block_anchor = empty();
    },
    m(target, anchor) {
      if (if_block) if_block.m(target, anchor);
      insert(target, if_block_anchor, anchor);
      current = true;
    },
    p(ctx2, [dirty]) {
      if (
        /*view*/
        ctx2[1].plugin.settings.algsToShow.length > 1
      ) {
        if (if_block) {
          if_block.p(ctx2, dirty);
          if (dirty & /*view*/
          2) {
            transition_in(if_block, 1);
          }
        } else {
          if_block = create_if_block8(ctx2);
          if_block.c();
          transition_in(if_block, 1);
          if_block.m(if_block_anchor.parentNode, if_block_anchor);
        }
      } else if (if_block) {
        group_outros();
        transition_out(if_block, 1, 1, () => {
          if_block = null;
        });
        check_outros();
      }
    },
    i(local) {
      if (current) return;
      transition_in(if_block);
      current = true;
    },
    o(local) {
      transition_out(if_block);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(if_block_anchor);
      }
      if (if_block) if_block.d(detaching);
    }
  };
}
var mouseover_handler = function() {
  this.ariaLabel = "`Shift + Scroll` to scroll sideways";
};
function instance36($$self, $$props, $$invalidate) {
  let { currSubtype } = $$props;
  let { view } = $$props;
  const click_handler = (sub) => {
    $$invalidate(0, currSubtype = sub.subtype);
    $$invalidate(1, view.currSubtype = sub.subtype, view);
  };
  $$self.$$set = ($$props2) => {
    if ("currSubtype" in $$props2) $$invalidate(0, currSubtype = $$props2.currSubtype);
    if ("view" in $$props2) $$invalidate(1, view = $$props2.view);
  };
  return [currSubtype, view, click_handler];
}
var ScrollSelector = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance36, create_fragment36, safe_not_equal, { currSubtype: 0, view: 1 });
  }
};
var ScrollSelector_default = ScrollSelector;

// src/Components/TableComponent.svelte
function get_each_context5(ctx, list, i) {
  const child_ctx = ctx.slice();
  child_ctx[35] = list[i];
  return child_ctx;
}
function create_if_block9(ctx) {
  let await_block_anchor;
  let promise;
  let current;
  let info = {
    ctx,
    current: null,
    token: null,
    hasCatch: false,
    pending: create_pending_block5,
    then: create_then_block5,
    catch: create_catch_block5,
    value: 34,
    blocks: [, , ,]
  };
  handle_promise(promise = /*promiseSortedResults*/
  ctx[13], info);
  return {
    c() {
      await_block_anchor = empty();
      info.block.c();
    },
    m(target, anchor) {
      insert(target, await_block_anchor, anchor);
      info.block.m(target, info.anchor = anchor);
      info.mount = () => await_block_anchor.parentNode;
      info.anchor = await_block_anchor;
      current = true;
    },
    p(new_ctx, dirty) {
      ctx = new_ctx;
      info.ctx = ctx;
      if (dirty[0] & /*promiseSortedResults*/
      8192 && promise !== (promise = /*promiseSortedResults*/
      ctx[13]) && handle_promise(promise, info)) {
      } else {
        update_await_block_branch(info, ctx, dirty);
      }
    },
    i(local) {
      if (current) return;
      transition_in(info.block);
      current = true;
    },
    o(local) {
      for (let i = 0; i < 3; i += 1) {
        const block = info.blocks[i];
        transition_out(block);
      }
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(await_block_anchor);
      }
      info.block.d(detaching);
      info.token = null;
      info = null;
    }
  };
}
function create_catch_block5(ctx) {
  return {
    c: noop,
    m: noop,
    p: noop,
    i: noop,
    o: noop,
    d: noop
  };
}
function create_then_block5(ctx) {
  let previous_key = (
    /*sortedResults*/
    ctx[34]
  );
  let key_block_anchor;
  let current;
  let key_block = create_key_block5(ctx);
  return {
    c() {
      key_block.c();
      key_block_anchor = empty();
    },
    m(target, anchor) {
      key_block.m(target, anchor);
      insert(target, key_block_anchor, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      if (dirty[0] & /*promiseSortedResults*/
      8192 && safe_not_equal(previous_key, previous_key = /*sortedResults*/
      ctx2[34])) {
        group_outros();
        transition_out(key_block, 1, 1, noop);
        check_outros();
        key_block = create_key_block5(ctx2);
        key_block.c();
        transition_in(key_block, 1);
        key_block.m(key_block_anchor.parentNode, key_block_anchor);
      } else {
        key_block.p(ctx2, dirty);
      }
    },
    i(local) {
      if (current) return;
      transition_in(key_block);
      current = true;
    },
    o(local) {
      transition_out(key_block);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(key_block_anchor);
      }
      key_block.d(detaching);
    }
  };
}
function create_if_block_17(ctx) {
  let tr;
  let td0;
  let t0;
  let extensionicon;
  let t1;
  let span;
  let t2_value = presentPath(
    /*node*/
    ctx[35].to
  ) + "";
  let t2;
  let span_class_value;
  let t3;
  let show_if = isImg(
    /*node*/
    ctx[35].to
  );
  let td0_aria_label_value;
  let t4;
  let td1;
  let t5_value = (
    /*node*/
    ctx[35].measure + ""
  );
  let t5;
  let td1_class_value;
  let tr_class_value;
  let current;
  let mounted;
  let dispose;
  let if_block0 = (
    /*node*/
    ctx[35].linked && create_if_block_36(ctx)
  );
  extensionicon = new ExtensionIcon_default({ props: { path: (
    /*node*/
    ctx[35].to
  ) } });
  let if_block1 = show_if && create_if_block_27(ctx);
  function click_handler(...args) {
    return (
      /*click_handler*/
      ctx[27](
        /*node*/
        ctx[35],
        ...args
      )
    );
  }
  function mouseover_handler2(...args) {
    return (
      /*mouseover_handler*/
      ctx[29](
        /*node*/
        ctx[35],
        ...args
      )
    );
  }
  return {
    c() {
      tr = element("tr");
      td0 = element("td");
      if (if_block0) if_block0.c();
      t0 = space();
      create_component(extensionicon.$$.fragment);
      t1 = space();
      span = element("span");
      t2 = text(t2_value);
      t3 = space();
      if (if_block1) if_block1.c();
      t4 = space();
      td1 = element("td");
      t5 = text(t5_value);
      attr(span, "class", span_class_value = "internal-link " + /*node*/
      (ctx[35].resolved ? "" : "is-unresolved") + " svelte-1d9aab");
      attr(td0, "aria-label", td0_aria_label_value = /*node*/
      ctx[35].extra.map(presentPath).join("\n"));
      attr(td0, "aria-label-position", "left");
      attr(td0, "class", "svelte-1d9aab");
      attr(td1, "class", td1_class_value = null_to_empty(MEASURE) + " svelte-1d9aab");
      attr(tr, "class", tr_class_value = /*node*/
      (ctx[35].linked ? LINKED : NOT_LINKED) + " " + classExt(
        /*node*/
        ctx[35].to
      ) + " svelte-1d9aab");
    },
    m(target, anchor) {
      insert(target, tr, anchor);
      append(tr, td0);
      if (if_block0) if_block0.m(td0, null);
      append(td0, t0);
      mount_component(extensionicon, td0, null);
      append(td0, t1);
      append(td0, span);
      append(span, t2);
      append(td0, t3);
      if (if_block1) if_block1.m(td0, null);
      append(tr, t4);
      append(tr, td1);
      append(td1, t5);
      current = true;
      if (!mounted) {
        dispose = [
          listen(td0, "click", click_handler),
          listen(
            td0,
            "contextmenu",
            /*contextmenu_handler*/
            ctx[28]
          ),
          listen(td0, "mouseover", mouseover_handler2)
        ];
        mounted = true;
      }
    },
    p(new_ctx, dirty) {
      ctx = new_ctx;
      if (
        /*node*/
        ctx[35].linked
      ) {
        if (if_block0) {
          if (dirty[0] & /*visibleData*/
          128) {
            transition_in(if_block0, 1);
          }
        } else {
          if_block0 = create_if_block_36(ctx);
          if_block0.c();
          transition_in(if_block0, 1);
          if_block0.m(td0, t0);
        }
      } else if (if_block0) {
        group_outros();
        transition_out(if_block0, 1, 1, () => {
          if_block0 = null;
        });
        check_outros();
      }
      const extensionicon_changes = {};
      if (dirty[0] & /*visibleData*/
      128) extensionicon_changes.path = /*node*/
      ctx[35].to;
      extensionicon.$set(extensionicon_changes);
      if ((!current || dirty[0] & /*visibleData*/
      128) && t2_value !== (t2_value = presentPath(
        /*node*/
        ctx[35].to
      ) + "")) set_data(t2, t2_value);
      if (!current || dirty[0] & /*visibleData*/
      128 && span_class_value !== (span_class_value = "internal-link " + /*node*/
      (ctx[35].resolved ? "" : "is-unresolved") + " svelte-1d9aab")) {
        attr(span, "class", span_class_value);
      }
      if (dirty[0] & /*visibleData*/
      128) show_if = isImg(
        /*node*/
        ctx[35].to
      );
      if (show_if) {
        if (if_block1) {
          if_block1.p(ctx, dirty);
          if (dirty[0] & /*visibleData*/
          128) {
            transition_in(if_block1, 1);
          }
        } else {
          if_block1 = create_if_block_27(ctx);
          if_block1.c();
          transition_in(if_block1, 1);
          if_block1.m(td0, null);
        }
      } else if (if_block1) {
        group_outros();
        transition_out(if_block1, 1, 1, () => {
          if_block1 = null;
        });
        check_outros();
      }
      if (!current || dirty[0] & /*visibleData*/
      128 && td0_aria_label_value !== (td0_aria_label_value = /*node*/
      ctx[35].extra.map(presentPath).join("\n"))) {
        attr(td0, "aria-label", td0_aria_label_value);
      }
      if ((!current || dirty[0] & /*visibleData*/
      128) && t5_value !== (t5_value = /*node*/
      ctx[35].measure + "")) set_data(t5, t5_value);
      if (!current || dirty[0] & /*visibleData*/
      128 && tr_class_value !== (tr_class_value = /*node*/
      (ctx[35].linked ? LINKED : NOT_LINKED) + " " + classExt(
        /*node*/
        ctx[35].to
      ) + " svelte-1d9aab")) {
        attr(tr, "class", tr_class_value);
      }
    },
    i(local) {
      if (current) return;
      transition_in(if_block0);
      transition_in(extensionicon.$$.fragment, local);
      transition_in(if_block1);
      current = true;
    },
    o(local) {
      transition_out(if_block0);
      transition_out(extensionicon.$$.fragment, local);
      transition_out(if_block1);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(tr);
      }
      if (if_block0) if_block0.d();
      destroy_component(extensionicon);
      if (if_block1) if_block1.d();
      mounted = false;
      run_all(dispose);
    }
  };
}
function create_if_block_36(ctx) {
  let span;
  let falink;
  let span_class_value;
  let current;
  falink = new FaLink_default({});
  return {
    c() {
      span = element("span");
      create_component(falink.$$.fragment);
      attr(span, "class", span_class_value = null_to_empty(ICON) + " svelte-1d9aab");
    },
    m(target, anchor) {
      insert(target, span, anchor);
      mount_component(falink, span, null);
      current = true;
    },
    i(local) {
      if (current) return;
      transition_in(falink.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(falink.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(span);
      }
      destroy_component(falink);
    }
  };
}
function create_if_block_27(ctx) {
  let imgthumbnail;
  let current;
  imgthumbnail = new ImgThumbnail_default({ props: { img: (
    /*node*/
    ctx[35].img
  ) } });
  return {
    c() {
      create_component(imgthumbnail.$$.fragment);
    },
    m(target, anchor) {
      mount_component(imgthumbnail, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const imgthumbnail_changes = {};
      if (dirty[0] & /*visibleData*/
      128) imgthumbnail_changes.img = /*node*/
      ctx2[35].img;
      imgthumbnail.$set(imgthumbnail_changes);
    },
    i(local) {
      if (current) return;
      transition_in(imgthumbnail.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(imgthumbnail.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(imgthumbnail, detaching);
    }
  };
}
function create_each_block5(ctx) {
  let if_block_anchor;
  let current;
  let if_block = (
    /*currSubtypeInfo*/
    (ctx[14].global || /*node*/
    ctx[35].to !== /*currNode*/
    ctx[8]) && /*node*/
    ctx[35] !== void 0 && create_if_block_17(ctx)
  );
  return {
    c() {
      if (if_block) if_block.c();
      if_block_anchor = empty();
    },
    m(target, anchor) {
      if (if_block) if_block.m(target, anchor);
      insert(target, if_block_anchor, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      if (
        /*currSubtypeInfo*/
        (ctx2[14].global || /*node*/
        ctx2[35].to !== /*currNode*/
        ctx2[8]) && /*node*/
        ctx2[35] !== void 0
      ) {
        if (if_block) {
          if_block.p(ctx2, dirty);
          if (dirty[0] & /*currSubtypeInfo, visibleData, currNode*/
          16768) {
            transition_in(if_block, 1);
          }
        } else {
          if_block = create_if_block_17(ctx2);
          if_block.c();
          transition_in(if_block, 1);
          if_block.m(if_block_anchor.parentNode, if_block_anchor);
        }
      } else if (if_block) {
        group_outros();
        transition_out(if_block, 1, 1, () => {
          if_block = null;
        });
        check_outros();
      }
    },
    i(local) {
      if (current) return;
      transition_in(if_block);
      current = true;
    },
    o(local) {
      transition_out(if_block);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(if_block_anchor);
      }
      if (if_block) if_block.d(detaching);
    }
  };
}
function create_key_block5(ctx) {
  let t0;
  let infinitescroll;
  let t1;
  let t2_value = (
    /*visibleData*/
    ctx[7].length + ""
  );
  let t2;
  let t3;
  let t4_value = (
    /*sortedResults*/
    ctx[34].length + ""
  );
  let t4;
  let current;
  let each_value = ensure_array_like(
    /*visibleData*/
    ctx[7]
  );
  let each_blocks = [];
  for (let i = 0; i < each_value.length; i += 1) {
    each_blocks[i] = create_each_block5(get_each_context5(ctx, each_value, i));
  }
  const out = (i) => transition_out(each_blocks[i], 1, 1, () => {
    each_blocks[i] = null;
  });
  function loadMore_handler() {
    return (
      /*loadMore_handler*/
      ctx[30](
        /*sortedResults*/
        ctx[34]
      )
    );
  }
  infinitescroll = new InfiniteScroll({
    props: {
      hasMore: (
        /*sortedResults*/
        ctx[34].length > /*visibleData*/
        ctx[7].length
      ),
      threshold: 100,
      elementScroll: (
        /*current_component*/
        ctx[10].parentNode
      )
    }
  });
  infinitescroll.$on("loadMore", loadMore_handler);
  return {
    c() {
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].c();
      }
      t0 = space();
      create_component(infinitescroll.$$.fragment);
      t1 = space();
      t2 = text(t2_value);
      t3 = text(" / ");
      t4 = text(t4_value);
    },
    m(target, anchor) {
      for (let i = 0; i < each_blocks.length; i += 1) {
        if (each_blocks[i]) {
          each_blocks[i].m(target, anchor);
        }
      }
      insert(target, t0, anchor);
      mount_component(infinitescroll, target, anchor);
      insert(target, t1, anchor);
      insert(target, t2, anchor);
      insert(target, t3, anchor);
      insert(target, t4, anchor);
      current = true;
    },
    p(new_ctx, dirty) {
      ctx = new_ctx;
      if (dirty[0] & /*visibleData, app, view, currSubtypeInfo, currNode*/
      16773) {
        each_value = ensure_array_like(
          /*visibleData*/
          ctx[7]
        );
        let i;
        for (i = 0; i < each_value.length; i += 1) {
          const child_ctx = get_each_context5(ctx, each_value, i);
          if (each_blocks[i]) {
            each_blocks[i].p(child_ctx, dirty);
            transition_in(each_blocks[i], 1);
          } else {
            each_blocks[i] = create_each_block5(child_ctx);
            each_blocks[i].c();
            transition_in(each_blocks[i], 1);
            each_blocks[i].m(t0.parentNode, t0);
          }
        }
        group_outros();
        for (i = each_value.length; i < each_blocks.length; i += 1) {
          out(i);
        }
        check_outros();
      }
      const infinitescroll_changes = {};
      if (dirty[0] & /*promiseSortedResults, visibleData*/
      8320) infinitescroll_changes.hasMore = /*sortedResults*/
      ctx[34].length > /*visibleData*/
      ctx[7].length;
      if (dirty[0] & /*current_component*/
      1024) infinitescroll_changes.elementScroll = /*current_component*/
      ctx[10].parentNode;
      infinitescroll.$set(infinitescroll_changes);
      if ((!current || dirty[0] & /*visibleData*/
      128) && t2_value !== (t2_value = /*visibleData*/
      ctx[7].length + "")) set_data(t2, t2_value);
      if ((!current || dirty[0] & /*promiseSortedResults*/
      8192) && t4_value !== (t4_value = /*sortedResults*/
      ctx[34].length + "")) set_data(t4, t4_value);
    },
    i(local) {
      if (current) return;
      for (let i = 0; i < each_value.length; i += 1) {
        transition_in(each_blocks[i]);
      }
      transition_in(infinitescroll.$$.fragment, local);
      current = true;
    },
    o(local) {
      each_blocks = each_blocks.filter(Boolean);
      for (let i = 0; i < each_blocks.length; i += 1) {
        transition_out(each_blocks[i]);
      }
      transition_out(infinitescroll.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(t0);
        detach(t1);
        detach(t2);
        detach(t3);
        detach(t4);
      }
      destroy_each(each_blocks, detaching);
      destroy_component(infinitescroll, detaching);
    }
  };
}
function create_pending_block5(ctx) {
  return {
    c: noop,
    m: noop,
    p: noop,
    i: noop,
    o: noop,
    d: noop
  };
}
function create_fragment37(ctx) {
  let subtypeoptions;
  let updating_currSubtypeInfo;
  let updating_noZero;
  let updating_ascOrder;
  let updating_currFile;
  let updating_frozen;
  let updating_blockSwitch;
  let updating_newBatch;
  let updating_visibleData;
  let updating_promiseSortedResults;
  let updating_page;
  let t0;
  let table;
  let thead;
  let t4;
  let current;
  function subtypeoptions_currSubtypeInfo_binding(value) {
    ctx[17](value);
  }
  function subtypeoptions_noZero_binding(value) {
    ctx[18](value);
  }
  function subtypeoptions_ascOrder_binding(value) {
    ctx[19](value);
  }
  function subtypeoptions_currFile_binding(value) {
    ctx[20](value);
  }
  function subtypeoptions_frozen_binding(value) {
    ctx[21](value);
  }
  function subtypeoptions_blockSwitch_binding(value) {
    ctx[22](value);
  }
  function subtypeoptions_newBatch_binding(value) {
    ctx[23](value);
  }
  function subtypeoptions_visibleData_binding(value) {
    ctx[24](value);
  }
  function subtypeoptions_promiseSortedResults_binding(value) {
    ctx[25](value);
  }
  function subtypeoptions_page_binding(value) {
    ctx[26](value);
  }
  let subtypeoptions_props = {
    app: (
      /*app*/
      ctx[0]
    ),
    plugin: (
      /*plugin*/
      ctx[1]
    ),
    view: (
      /*view*/
      ctx[2]
    )
  };
  if (
    /*currSubtypeInfo*/
    ctx[14] !== void 0
  ) {
    subtypeoptions_props.currSubtypeInfo = /*currSubtypeInfo*/
    ctx[14];
  }
  if (
    /*noZero*/
    ctx[4] !== void 0
  ) {
    subtypeoptions_props.noZero = /*noZero*/
    ctx[4];
  }
  if (
    /*ascOrder*/
    ctx[3] !== void 0
  ) {
    subtypeoptions_props.ascOrder = /*ascOrder*/
    ctx[3];
  }
  if (
    /*currFile*/
    ctx[5] !== void 0
  ) {
    subtypeoptions_props.currFile = /*currFile*/
    ctx[5];
  }
  if (
    /*frozen*/
    ctx[9] !== void 0
  ) {
    subtypeoptions_props.frozen = /*frozen*/
    ctx[9];
  }
  if (
    /*blockSwitch*/
    ctx[12] !== void 0
  ) {
    subtypeoptions_props.blockSwitch = /*blockSwitch*/
    ctx[12];
  }
  if (
    /*newBatch*/
    ctx[6] !== void 0
  ) {
    subtypeoptions_props.newBatch = /*newBatch*/
    ctx[6];
  }
  if (
    /*visibleData*/
    ctx[7] !== void 0
  ) {
    subtypeoptions_props.visibleData = /*visibleData*/
    ctx[7];
  }
  if (
    /*promiseSortedResults*/
    ctx[13] !== void 0
  ) {
    subtypeoptions_props.promiseSortedResults = /*promiseSortedResults*/
    ctx[13];
  }
  if (
    /*page*/
    ctx[11] !== void 0
  ) {
    subtypeoptions_props.page = /*page*/
    ctx[11];
  }
  subtypeoptions = new SubtypeOptions_default({ props: subtypeoptions_props });
  binding_callbacks.push(() => bind(subtypeoptions, "currSubtypeInfo", subtypeoptions_currSubtypeInfo_binding));
  binding_callbacks.push(() => bind(subtypeoptions, "noZero", subtypeoptions_noZero_binding));
  binding_callbacks.push(() => bind(subtypeoptions, "ascOrder", subtypeoptions_ascOrder_binding));
  binding_callbacks.push(() => bind(subtypeoptions, "currFile", subtypeoptions_currFile_binding));
  binding_callbacks.push(() => bind(subtypeoptions, "frozen", subtypeoptions_frozen_binding));
  binding_callbacks.push(() => bind(subtypeoptions, "blockSwitch", subtypeoptions_blockSwitch_binding));
  binding_callbacks.push(() => bind(subtypeoptions, "newBatch", subtypeoptions_newBatch_binding));
  binding_callbacks.push(() => bind(subtypeoptions, "visibleData", subtypeoptions_visibleData_binding));
  binding_callbacks.push(() => bind(subtypeoptions, "promiseSortedResults", subtypeoptions_promiseSortedResults_binding));
  binding_callbacks.push(() => bind(subtypeoptions, "page", subtypeoptions_page_binding));
  let if_block = (
    /*promiseSortedResults*/
    ctx[13] && create_if_block9(ctx)
  );
  return {
    c() {
      create_component(subtypeoptions.$$.fragment);
      t0 = space();
      table = element("table");
      thead = element("thead");
      thead.innerHTML = `<tr class="svelte-1d9aab"><th scope="col">Note</th> <th scope="col">Value</th></tr>`;
      t4 = space();
      if (if_block) if_block.c();
      attr(table, "class", "GA-table markdown-preview-view svelte-1d9aab");
    },
    m(target, anchor) {
      mount_component(subtypeoptions, target, anchor);
      insert(target, t0, anchor);
      insert(target, table, anchor);
      append(table, thead);
      append(table, t4);
      if (if_block) if_block.m(table, null);
      ctx[31](table);
      current = true;
    },
    p(ctx2, dirty) {
      const subtypeoptions_changes = {};
      if (dirty[0] & /*app*/
      1) subtypeoptions_changes.app = /*app*/
      ctx2[0];
      if (dirty[0] & /*plugin*/
      2) subtypeoptions_changes.plugin = /*plugin*/
      ctx2[1];
      if (dirty[0] & /*view*/
      4) subtypeoptions_changes.view = /*view*/
      ctx2[2];
      if (!updating_currSubtypeInfo && dirty[0] & /*currSubtypeInfo*/
      16384) {
        updating_currSubtypeInfo = true;
        subtypeoptions_changes.currSubtypeInfo = /*currSubtypeInfo*/
        ctx2[14];
        add_flush_callback(() => updating_currSubtypeInfo = false);
      }
      if (!updating_noZero && dirty[0] & /*noZero*/
      16) {
        updating_noZero = true;
        subtypeoptions_changes.noZero = /*noZero*/
        ctx2[4];
        add_flush_callback(() => updating_noZero = false);
      }
      if (!updating_ascOrder && dirty[0] & /*ascOrder*/
      8) {
        updating_ascOrder = true;
        subtypeoptions_changes.ascOrder = /*ascOrder*/
        ctx2[3];
        add_flush_callback(() => updating_ascOrder = false);
      }
      if (!updating_currFile && dirty[0] & /*currFile*/
      32) {
        updating_currFile = true;
        subtypeoptions_changes.currFile = /*currFile*/
        ctx2[5];
        add_flush_callback(() => updating_currFile = false);
      }
      if (!updating_frozen && dirty[0] & /*frozen*/
      512) {
        updating_frozen = true;
        subtypeoptions_changes.frozen = /*frozen*/
        ctx2[9];
        add_flush_callback(() => updating_frozen = false);
      }
      if (!updating_blockSwitch && dirty[0] & /*blockSwitch*/
      4096) {
        updating_blockSwitch = true;
        subtypeoptions_changes.blockSwitch = /*blockSwitch*/
        ctx2[12];
        add_flush_callback(() => updating_blockSwitch = false);
      }
      if (!updating_newBatch && dirty[0] & /*newBatch*/
      64) {
        updating_newBatch = true;
        subtypeoptions_changes.newBatch = /*newBatch*/
        ctx2[6];
        add_flush_callback(() => updating_newBatch = false);
      }
      if (!updating_visibleData && dirty[0] & /*visibleData*/
      128) {
        updating_visibleData = true;
        subtypeoptions_changes.visibleData = /*visibleData*/
        ctx2[7];
        add_flush_callback(() => updating_visibleData = false);
      }
      if (!updating_promiseSortedResults && dirty[0] & /*promiseSortedResults*/
      8192) {
        updating_promiseSortedResults = true;
        subtypeoptions_changes.promiseSortedResults = /*promiseSortedResults*/
        ctx2[13];
        add_flush_callback(() => updating_promiseSortedResults = false);
      }
      if (!updating_page && dirty[0] & /*page*/
      2048) {
        updating_page = true;
        subtypeoptions_changes.page = /*page*/
        ctx2[11];
        add_flush_callback(() => updating_page = false);
      }
      subtypeoptions.$set(subtypeoptions_changes);
      if (
        /*promiseSortedResults*/
        ctx2[13]
      ) {
        if (if_block) {
          if_block.p(ctx2, dirty);
          if (dirty[0] & /*promiseSortedResults*/
          8192) {
            transition_in(if_block, 1);
          }
        } else {
          if_block = create_if_block9(ctx2);
          if_block.c();
          transition_in(if_block, 1);
          if_block.m(table, null);
        }
      } else if (if_block) {
        group_outros();
        transition_out(if_block, 1, 1, () => {
          if_block = null;
        });
        check_outros();
      }
    },
    i(local) {
      if (current) return;
      transition_in(subtypeoptions.$$.fragment, local);
      transition_in(if_block);
      current = true;
    },
    o(local) {
      transition_out(subtypeoptions.$$.fragment, local);
      transition_out(if_block);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(t0);
        detach(table);
      }
      destroy_component(subtypeoptions, detaching);
      if (if_block) if_block.d();
      ctx[31](null);
    }
  };
}
var size4 = 50;
function instance37($$self, $$props, $$invalidate) {
  let currSubtypeInfo;
  let currNode;
  let promiseSortedResults;
  let { app } = $$props;
  let { plugin } = $$props;
  let { settings } = $$props;
  let { view } = $$props;
  let { currSubtype } = $$props;
  let frozen = false;
  let ascOrder = false;
  let { noInfinity, noZero } = settings;
  let currFile = app.workspace.getActiveFile();
  let current_component2;
  let newBatch = [];
  let visibleData = [];
  let page = 0;
  let blockSwitch = false;
  let { resolvedLinks } = app.metadataCache;
  app.workspace.on("active-leaf-change", () => {
    if (!frozen && !currSubtypeInfo.global) {
      $$invalidate(12, blockSwitch = true);
      $$invalidate(6, newBatch = []);
      $$invalidate(7, visibleData = []);
      $$invalidate(13, promiseSortedResults = null);
      $$invalidate(11, page = 0);
      setTimeout(() => $$invalidate(5, currFile = app.workspace.getActiveFile()), 100);
    }
  });
  onMount(() => {
    $$invalidate(8, currNode = currFile === null || currFile === void 0 ? void 0 : currFile.path);
  });
  onMount(() => {
    $$invalidate(5, currFile = app.workspace.getActiveFile());
  });
  function subtypeoptions_currSubtypeInfo_binding(value) {
    currSubtypeInfo = value;
    $$invalidate(14, currSubtypeInfo), $$invalidate(16, currSubtype);
  }
  function subtypeoptions_noZero_binding(value) {
    noZero = value;
    $$invalidate(4, noZero);
  }
  function subtypeoptions_ascOrder_binding(value) {
    ascOrder = value;
    $$invalidate(3, ascOrder);
  }
  function subtypeoptions_currFile_binding(value) {
    currFile = value;
    $$invalidate(5, currFile);
  }
  function subtypeoptions_frozen_binding(value) {
    frozen = value;
    $$invalidate(9, frozen);
  }
  function subtypeoptions_blockSwitch_binding(value) {
    blockSwitch = value;
    $$invalidate(12, blockSwitch), $$invalidate(1, plugin), $$invalidate(8, currNode), $$invalidate(16, currSubtype), $$invalidate(3, ascOrder), $$invalidate(32, noInfinity), $$invalidate(4, noZero), $$invalidate(0, app), $$invalidate(33, resolvedLinks), $$invalidate(5, currFile);
  }
  function subtypeoptions_newBatch_binding(value) {
    newBatch = value;
    $$invalidate(6, newBatch), $$invalidate(1, plugin), $$invalidate(8, currNode), $$invalidate(16, currSubtype), $$invalidate(3, ascOrder), $$invalidate(32, noInfinity), $$invalidate(4, noZero), $$invalidate(0, app), $$invalidate(33, resolvedLinks), $$invalidate(5, currFile);
  }
  function subtypeoptions_visibleData_binding(value) {
    visibleData = value;
    $$invalidate(7, visibleData), $$invalidate(6, newBatch), $$invalidate(1, plugin), $$invalidate(8, currNode), $$invalidate(16, currSubtype), $$invalidate(3, ascOrder), $$invalidate(32, noInfinity), $$invalidate(4, noZero), $$invalidate(0, app), $$invalidate(33, resolvedLinks), $$invalidate(5, currFile);
  }
  function subtypeoptions_promiseSortedResults_binding(value) {
    promiseSortedResults = value;
    $$invalidate(13, promiseSortedResults), $$invalidate(1, plugin), $$invalidate(8, currNode), $$invalidate(16, currSubtype), $$invalidate(3, ascOrder), $$invalidate(32, noInfinity), $$invalidate(4, noZero), $$invalidate(0, app), $$invalidate(33, resolvedLinks), $$invalidate(5, currFile);
  }
  function subtypeoptions_page_binding(value) {
    page = value;
    $$invalidate(11, page);
  }
  const click_handler = async (node, e) => await openOrSwitch2(app, node.to, e);
  const contextmenu_handler = (e) => openMenu(e, app);
  const mouseover_handler2 = (node, e) => hoverPreview(e, view, dropPath(node.to));
  const loadMore_handler = (sortedResults) => {
    if (!blockSwitch) {
      $$invalidate(11, page++, page);
      $$invalidate(6, newBatch = sortedResults.slice(size4 * page, size4 * (page + 1) - 1));
      console.log({ newBatch });
    }
  };
  function table_binding($$value) {
    binding_callbacks[$$value ? "unshift" : "push"](() => {
      current_component2 = $$value;
      $$invalidate(10, current_component2);
    });
  }
  $$self.$$set = ($$props2) => {
    if ("app" in $$props2) $$invalidate(0, app = $$props2.app);
    if ("plugin" in $$props2) $$invalidate(1, plugin = $$props2.plugin);
    if ("settings" in $$props2) $$invalidate(15, settings = $$props2.settings);
    if ("view" in $$props2) $$invalidate(2, view = $$props2.view);
    if ("currSubtype" in $$props2) $$invalidate(16, currSubtype = $$props2.currSubtype);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty[0] & /*currSubtype*/
    65536) {
      $: $$invalidate(14, currSubtypeInfo = ANALYSIS_TYPES.find((sub) => sub.subtype === currSubtype));
    }
    if ($$self.$$.dirty[0] & /*currFile*/
    32) {
      $: $$invalidate(8, currNode = currFile === null || currFile === void 0 ? void 0 : currFile.path);
    }
    if ($$self.$$.dirty[0] & /*plugin, currNode, currSubtype, ascOrder, noZero, app*/
    65819) {
      $: $$invalidate(13, promiseSortedResults = !plugin.g || !currNode ? null : plugin.g.algs[currSubtype](currNode).then((results) => {
        const greater = ascOrder ? 1 : -1;
        const lesser = ascOrder ? -1 : 1;
        const componentResults = [];
        plugin.g.forEachNode((to) => {
          const { measure, extra } = results[to];
          if (!(noInfinity && measure === Infinity) && !(noZero && measure === 0)) {
            const resolved = !to.endsWith(".md") || isInVault(app, to);
            const linked = isLinked(resolvedLinks, currNode, to, false);
            const img = plugin.settings.showImgThumbnails && isImg(to) ? getImgBufferPromise(app, to) : null;
            componentResults.push({
              measure,
              linked,
              to,
              resolved,
              extra,
              img
            });
          }
        });
        componentResults.sort((a, b) => {
          var _a, _b;
          return a.measure === b.measure ? ((_a = a.extra) === null || _a === void 0 ? void 0 : _a.length) > ((_b = b.extra) === null || _b === void 0 ? void 0 : _b.length) ? greater : lesser : a.measure > b.measure ? greater : lesser;
        });
        return componentResults;
      }).then((res) => {
        $$invalidate(6, newBatch = res.slice(0, size4));
        setTimeout(
          () => {
            $$invalidate(12, blockSwitch = false);
          },
          100
        );
        return res;
      }));
    }
    if ($$self.$$.dirty[0] & /*visibleData, newBatch*/
    192) {
      $: $$invalidate(7, visibleData = [...visibleData, ...newBatch]);
    }
  };
  return [
    app,
    plugin,
    view,
    ascOrder,
    noZero,
    currFile,
    newBatch,
    visibleData,
    currNode,
    frozen,
    current_component2,
    page,
    blockSwitch,
    promiseSortedResults,
    currSubtypeInfo,
    settings,
    currSubtype,
    subtypeoptions_currSubtypeInfo_binding,
    subtypeoptions_noZero_binding,
    subtypeoptions_ascOrder_binding,
    subtypeoptions_currFile_binding,
    subtypeoptions_frozen_binding,
    subtypeoptions_blockSwitch_binding,
    subtypeoptions_newBatch_binding,
    subtypeoptions_visibleData_binding,
    subtypeoptions_promiseSortedResults_binding,
    subtypeoptions_page_binding,
    click_handler,
    contextmenu_handler,
    mouseover_handler2,
    loadMore_handler,
    table_binding
  ];
}
var TableComponent = class extends SvelteComponent {
  constructor(options) {
    super();
    init(
      this,
      options,
      instance37,
      create_fragment37,
      safe_not_equal,
      {
        app: 0,
        plugin: 1,
        settings: 15,
        view: 2,
        currSubtype: 16
      },
      null,
      [-1, -1]
    );
  }
};
var TableComponent_default = TableComponent;

// src/Components/HITS.svelte
function get_each_context6(ctx, list, i) {
  const child_ctx = ctx.slice();
  child_ctx[34] = list[i];
  return child_ctx;
}
function create_if_block10(ctx) {
  let await_block_anchor;
  let promise;
  let current;
  let info = {
    ctx,
    current: null,
    token: null,
    hasCatch: false,
    pending: create_pending_block6,
    then: create_then_block6,
    catch: create_catch_block6,
    value: 33,
    blocks: [, , ,]
  };
  handle_promise(promise = /*promiseSortedResults*/
  ctx[12], info);
  return {
    c() {
      await_block_anchor = empty();
      info.block.c();
    },
    m(target, anchor) {
      insert(target, await_block_anchor, anchor);
      info.block.m(target, info.anchor = anchor);
      info.mount = () => await_block_anchor.parentNode;
      info.anchor = await_block_anchor;
      current = true;
    },
    p(new_ctx, dirty) {
      ctx = new_ctx;
      info.ctx = ctx;
      if (dirty[0] & /*promiseSortedResults*/
      4096 && promise !== (promise = /*promiseSortedResults*/
      ctx[12]) && handle_promise(promise, info)) {
      } else {
        update_await_block_branch(info, ctx, dirty);
      }
    },
    i(local) {
      if (current) return;
      transition_in(info.block);
      current = true;
    },
    o(local) {
      for (let i = 0; i < 3; i += 1) {
        const block = info.blocks[i];
        transition_out(block);
      }
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(await_block_anchor);
      }
      info.block.d(detaching);
      info.token = null;
      info = null;
    }
  };
}
function create_catch_block6(ctx) {
  return {
    c: noop,
    m: noop,
    p: noop,
    i: noop,
    o: noop,
    d: noop
  };
}
function create_then_block6(ctx) {
  let previous_key = (
    /*sortedResults*/
    ctx[33]
  );
  let key_block_anchor;
  let current;
  let key_block = create_key_block6(ctx);
  return {
    c() {
      key_block.c();
      key_block_anchor = empty();
    },
    m(target, anchor) {
      key_block.m(target, anchor);
      insert(target, key_block_anchor, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      if (dirty[0] & /*promiseSortedResults*/
      4096 && safe_not_equal(previous_key, previous_key = /*sortedResults*/
      ctx2[33])) {
        group_outros();
        transition_out(key_block, 1, 1, noop);
        check_outros();
        key_block = create_key_block6(ctx2);
        key_block.c();
        transition_in(key_block, 1);
        key_block.m(key_block_anchor.parentNode, key_block_anchor);
      } else {
        key_block.p(ctx2, dirty);
      }
    },
    i(local) {
      if (current) return;
      transition_in(key_block);
      current = true;
    },
    o(local) {
      transition_out(key_block);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(key_block_anchor);
      }
      key_block.d(detaching);
    }
  };
}
function create_if_block_18(ctx) {
  let tr;
  let td0;
  let extensionicon;
  let t0;
  let span;
  let t1_value = presentPath(
    /*node*/
    ctx[34].to
  ) + "";
  let t1;
  let span_class_value;
  let t2;
  let show_if = isImg(
    /*node*/
    ctx[34].to
  );
  let t3;
  let td1;
  let t4_value = (
    /*node*/
    ctx[34].authority + ""
  );
  let t4;
  let td1_class_value;
  let t5;
  let td2;
  let t6_value = (
    /*node*/
    ctx[34].hub + ""
  );
  let t6;
  let td2_class_value;
  let tr_class_value;
  let current;
  let mounted;
  let dispose;
  extensionicon = new ExtensionIcon_default({ props: { path: (
    /*node*/
    ctx[34].to
  ) } });
  let if_block = show_if && create_if_block_28(ctx);
  function click_handler(...args) {
    return (
      /*click_handler*/
      ctx[27](
        /*node*/
        ctx[34],
        ...args
      )
    );
  }
  function mouseover_handler2(...args) {
    return (
      /*mouseover_handler*/
      ctx[29](
        /*node*/
        ctx[34],
        ...args
      )
    );
  }
  return {
    c() {
      tr = element("tr");
      td0 = element("td");
      create_component(extensionicon.$$.fragment);
      t0 = space();
      span = element("span");
      t1 = text(t1_value);
      t2 = space();
      if (if_block) if_block.c();
      t3 = space();
      td1 = element("td");
      t4 = text(t4_value);
      t5 = space();
      td2 = element("td");
      t6 = text(t6_value);
      attr(span, "class", span_class_value = "internal-link " + /*node*/
      (ctx[34].resolved ? "" : "is-unresolved") + " " + /*currNode*/
      (ctx[13] === /*node*/
      ctx[34].to ? "currNode" : "") + " svelte-6qr5sj");
      attr(td0, "class", "svelte-6qr5sj");
      attr(td1, "class", td1_class_value = null_to_empty(MEASURE) + " svelte-6qr5sj");
      attr(td2, "class", td2_class_value = null_to_empty(MEASURE) + " svelte-6qr5sj");
      attr(tr, "class", tr_class_value = "" + classExt(
        /*node*/
        ctx[34].to
      ) + " svelte-6qr5sj");
    },
    m(target, anchor) {
      insert(target, tr, anchor);
      append(tr, td0);
      mount_component(extensionicon, td0, null);
      append(td0, t0);
      append(td0, span);
      append(span, t1);
      append(td0, t2);
      if (if_block) if_block.m(td0, null);
      append(tr, t3);
      append(tr, td1);
      append(td1, t4);
      append(tr, t5);
      append(tr, td2);
      append(td2, t6);
      current = true;
      if (!mounted) {
        dispose = [
          listen(td0, "click", click_handler),
          listen(
            td0,
            "contextmenu",
            /*contextmenu_handler*/
            ctx[28]
          ),
          listen(td0, "mouseover", mouseover_handler2)
        ];
        mounted = true;
      }
    },
    p(new_ctx, dirty) {
      ctx = new_ctx;
      const extensionicon_changes = {};
      if (dirty[0] & /*visibleData*/
      128) extensionicon_changes.path = /*node*/
      ctx[34].to;
      extensionicon.$set(extensionicon_changes);
      if ((!current || dirty[0] & /*visibleData*/
      128) && t1_value !== (t1_value = presentPath(
        /*node*/
        ctx[34].to
      ) + "")) set_data(t1, t1_value);
      if (!current || dirty[0] & /*visibleData, currNode*/
      8320 && span_class_value !== (span_class_value = "internal-link " + /*node*/
      (ctx[34].resolved ? "" : "is-unresolved") + " " + /*currNode*/
      (ctx[13] === /*node*/
      ctx[34].to ? "currNode" : "") + " svelte-6qr5sj")) {
        attr(span, "class", span_class_value);
      }
      if (dirty[0] & /*visibleData*/
      128) show_if = isImg(
        /*node*/
        ctx[34].to
      );
      if (show_if) {
        if (if_block) {
          if_block.p(ctx, dirty);
          if (dirty[0] & /*visibleData*/
          128) {
            transition_in(if_block, 1);
          }
        } else {
          if_block = create_if_block_28(ctx);
          if_block.c();
          transition_in(if_block, 1);
          if_block.m(td0, null);
        }
      } else if (if_block) {
        group_outros();
        transition_out(if_block, 1, 1, () => {
          if_block = null;
        });
        check_outros();
      }
      if ((!current || dirty[0] & /*visibleData*/
      128) && t4_value !== (t4_value = /*node*/
      ctx[34].authority + "")) set_data(t4, t4_value);
      if ((!current || dirty[0] & /*visibleData*/
      128) && t6_value !== (t6_value = /*node*/
      ctx[34].hub + "")) set_data(t6, t6_value);
      if (!current || dirty[0] & /*visibleData*/
      128 && tr_class_value !== (tr_class_value = "" + classExt(
        /*node*/
        ctx[34].to
      ) + " svelte-6qr5sj")) {
        attr(tr, "class", tr_class_value);
      }
    },
    i(local) {
      if (current) return;
      transition_in(extensionicon.$$.fragment, local);
      transition_in(if_block);
      current = true;
    },
    o(local) {
      transition_out(extensionicon.$$.fragment, local);
      transition_out(if_block);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(tr);
      }
      destroy_component(extensionicon);
      if (if_block) if_block.d();
      mounted = false;
      run_all(dispose);
    }
  };
}
function create_if_block_28(ctx) {
  let imgthumbnail;
  let current;
  imgthumbnail = new ImgThumbnail_default({ props: { img: (
    /*node*/
    ctx[34].img
  ) } });
  return {
    c() {
      create_component(imgthumbnail.$$.fragment);
    },
    m(target, anchor) {
      mount_component(imgthumbnail, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const imgthumbnail_changes = {};
      if (dirty[0] & /*visibleData*/
      128) imgthumbnail_changes.img = /*node*/
      ctx2[34].img;
      imgthumbnail.$set(imgthumbnail_changes);
    },
    i(local) {
      if (current) return;
      transition_in(imgthumbnail.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(imgthumbnail.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(imgthumbnail, detaching);
    }
  };
}
function create_each_block6(ctx) {
  let if_block_anchor;
  let current;
  let if_block = (
    /*node*/
    ctx[34] !== void 0 && create_if_block_18(ctx)
  );
  return {
    c() {
      if (if_block) if_block.c();
      if_block_anchor = empty();
    },
    m(target, anchor) {
      if (if_block) if_block.m(target, anchor);
      insert(target, if_block_anchor, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      if (
        /*node*/
        ctx2[34] !== void 0
      ) {
        if (if_block) {
          if_block.p(ctx2, dirty);
          if (dirty[0] & /*visibleData*/
          128) {
            transition_in(if_block, 1);
          }
        } else {
          if_block = create_if_block_18(ctx2);
          if_block.c();
          transition_in(if_block, 1);
          if_block.m(if_block_anchor.parentNode, if_block_anchor);
        }
      } else if (if_block) {
        group_outros();
        transition_out(if_block, 1, 1, () => {
          if_block = null;
        });
        check_outros();
      }
    },
    i(local) {
      if (current) return;
      transition_in(if_block);
      current = true;
    },
    o(local) {
      transition_out(if_block);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(if_block_anchor);
      }
      if (if_block) if_block.d(detaching);
    }
  };
}
function create_key_block6(ctx) {
  let t0;
  let infinitescroll;
  let t1;
  let t2_value = (
    /*visibleData*/
    ctx[7].length + ""
  );
  let t2;
  let t3;
  let t4_value = (
    /*sortedResults*/
    ctx[33].length + ""
  );
  let t4;
  let current;
  let each_value = ensure_array_like(
    /*visibleData*/
    ctx[7]
  );
  let each_blocks = [];
  for (let i = 0; i < each_value.length; i += 1) {
    each_blocks[i] = create_each_block6(get_each_context6(ctx, each_value, i));
  }
  const out = (i) => transition_out(each_blocks[i], 1, 1, () => {
    each_blocks[i] = null;
  });
  function loadMore_handler() {
    return (
      /*loadMore_handler*/
      ctx[30](
        /*sortedResults*/
        ctx[33]
      )
    );
  }
  infinitescroll = new InfiniteScroll({
    props: {
      hasMore: (
        /*sortedResults*/
        ctx[33].length > /*visibleData*/
        ctx[7].length
      ),
      threshold: 100,
      elementScroll: (
        /*current_component*/
        ctx[9].parentNode
      )
    }
  });
  infinitescroll.$on("loadMore", loadMore_handler);
  return {
    c() {
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].c();
      }
      t0 = space();
      create_component(infinitescroll.$$.fragment);
      t1 = space();
      t2 = text(t2_value);
      t3 = text(" / ");
      t4 = text(t4_value);
    },
    m(target, anchor) {
      for (let i = 0; i < each_blocks.length; i += 1) {
        if (each_blocks[i]) {
          each_blocks[i].m(target, anchor);
        }
      }
      insert(target, t0, anchor);
      mount_component(infinitescroll, target, anchor);
      insert(target, t1, anchor);
      insert(target, t2, anchor);
      insert(target, t3, anchor);
      insert(target, t4, anchor);
      current = true;
    },
    p(new_ctx, dirty) {
      ctx = new_ctx;
      if (dirty[0] & /*visibleData, app, view, currNode*/
      8325) {
        each_value = ensure_array_like(
          /*visibleData*/
          ctx[7]
        );
        let i;
        for (i = 0; i < each_value.length; i += 1) {
          const child_ctx = get_each_context6(ctx, each_value, i);
          if (each_blocks[i]) {
            each_blocks[i].p(child_ctx, dirty);
            transition_in(each_blocks[i], 1);
          } else {
            each_blocks[i] = create_each_block6(child_ctx);
            each_blocks[i].c();
            transition_in(each_blocks[i], 1);
            each_blocks[i].m(t0.parentNode, t0);
          }
        }
        group_outros();
        for (i = each_value.length; i < each_blocks.length; i += 1) {
          out(i);
        }
        check_outros();
      }
      const infinitescroll_changes = {};
      if (dirty[0] & /*promiseSortedResults, visibleData*/
      4224) infinitescroll_changes.hasMore = /*sortedResults*/
      ctx[33].length > /*visibleData*/
      ctx[7].length;
      if (dirty[0] & /*current_component*/
      512) infinitescroll_changes.elementScroll = /*current_component*/
      ctx[9].parentNode;
      infinitescroll.$set(infinitescroll_changes);
      if ((!current || dirty[0] & /*visibleData*/
      128) && t2_value !== (t2_value = /*visibleData*/
      ctx[7].length + "")) set_data(t2, t2_value);
      if ((!current || dirty[0] & /*promiseSortedResults*/
      4096) && t4_value !== (t4_value = /*sortedResults*/
      ctx[33].length + "")) set_data(t4, t4_value);
    },
    i(local) {
      if (current) return;
      for (let i = 0; i < each_value.length; i += 1) {
        transition_in(each_blocks[i]);
      }
      transition_in(infinitescroll.$$.fragment, local);
      current = true;
    },
    o(local) {
      each_blocks = each_blocks.filter(Boolean);
      for (let i = 0; i < each_blocks.length; i += 1) {
        transition_out(each_blocks[i]);
      }
      transition_out(infinitescroll.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(t0);
        detach(t1);
        detach(t2);
        detach(t3);
        detach(t4);
      }
      destroy_each(each_blocks, detaching);
      destroy_component(infinitescroll, detaching);
    }
  };
}
function create_pending_block6(ctx) {
  return {
    c: noop,
    m: noop,
    p: noop,
    i: noop,
    o: noop,
    d: noop
  };
}
function create_fragment38(ctx) {
  let subtypeoptions;
  let updating_currSubtypeInfo;
  let updating_noZero;
  let updating_ascOrder;
  let updating_sortBy;
  let updating_currFile;
  let updating_blockSwitch;
  let updating_newBatch;
  let updating_visibleData;
  let updating_promiseSortedResults;
  let updating_page;
  let t0;
  let table;
  let thead;
  let t6;
  let current;
  function subtypeoptions_currSubtypeInfo_binding(value) {
    ctx[17](value);
  }
  function subtypeoptions_noZero_binding(value) {
    ctx[18](value);
  }
  function subtypeoptions_ascOrder_binding(value) {
    ctx[19](value);
  }
  function subtypeoptions_sortBy_binding(value) {
    ctx[20](value);
  }
  function subtypeoptions_currFile_binding(value) {
    ctx[21](value);
  }
  function subtypeoptions_blockSwitch_binding(value) {
    ctx[22](value);
  }
  function subtypeoptions_newBatch_binding(value) {
    ctx[23](value);
  }
  function subtypeoptions_visibleData_binding(value) {
    ctx[24](value);
  }
  function subtypeoptions_promiseSortedResults_binding(value) {
    ctx[25](value);
  }
  function subtypeoptions_page_binding(value) {
    ctx[26](value);
  }
  let subtypeoptions_props = {
    app: (
      /*app*/
      ctx[0]
    ),
    plugin: (
      /*plugin*/
      ctx[1]
    ),
    view: (
      /*view*/
      ctx[2]
    )
  };
  if (
    /*currSubtypeInfo*/
    ctx[14] !== void 0
  ) {
    subtypeoptions_props.currSubtypeInfo = /*currSubtypeInfo*/
    ctx[14];
  }
  if (
    /*noZero*/
    ctx[8] !== void 0
  ) {
    subtypeoptions_props.noZero = /*noZero*/
    ctx[8];
  }
  if (
    /*ascOrder*/
    ctx[4] !== void 0
  ) {
    subtypeoptions_props.ascOrder = /*ascOrder*/
    ctx[4];
  }
  if (
    /*sortBy*/
    ctx[3] !== void 0
  ) {
    subtypeoptions_props.sortBy = /*sortBy*/
    ctx[3];
  }
  if (
    /*currFile*/
    ctx[5] !== void 0
  ) {
    subtypeoptions_props.currFile = /*currFile*/
    ctx[5];
  }
  if (
    /*blockSwitch*/
    ctx[11] !== void 0
  ) {
    subtypeoptions_props.blockSwitch = /*blockSwitch*/
    ctx[11];
  }
  if (
    /*newBatch*/
    ctx[6] !== void 0
  ) {
    subtypeoptions_props.newBatch = /*newBatch*/
    ctx[6];
  }
  if (
    /*visibleData*/
    ctx[7] !== void 0
  ) {
    subtypeoptions_props.visibleData = /*visibleData*/
    ctx[7];
  }
  if (
    /*promiseSortedResults*/
    ctx[12] !== void 0
  ) {
    subtypeoptions_props.promiseSortedResults = /*promiseSortedResults*/
    ctx[12];
  }
  if (
    /*page*/
    ctx[10] !== void 0
  ) {
    subtypeoptions_props.page = /*page*/
    ctx[10];
  }
  subtypeoptions = new SubtypeOptions_default({ props: subtypeoptions_props });
  binding_callbacks.push(() => bind(subtypeoptions, "currSubtypeInfo", subtypeoptions_currSubtypeInfo_binding));
  binding_callbacks.push(() => bind(subtypeoptions, "noZero", subtypeoptions_noZero_binding));
  binding_callbacks.push(() => bind(subtypeoptions, "ascOrder", subtypeoptions_ascOrder_binding));
  binding_callbacks.push(() => bind(subtypeoptions, "sortBy", subtypeoptions_sortBy_binding));
  binding_callbacks.push(() => bind(subtypeoptions, "currFile", subtypeoptions_currFile_binding));
  binding_callbacks.push(() => bind(subtypeoptions, "blockSwitch", subtypeoptions_blockSwitch_binding));
  binding_callbacks.push(() => bind(subtypeoptions, "newBatch", subtypeoptions_newBatch_binding));
  binding_callbacks.push(() => bind(subtypeoptions, "visibleData", subtypeoptions_visibleData_binding));
  binding_callbacks.push(() => bind(subtypeoptions, "promiseSortedResults", subtypeoptions_promiseSortedResults_binding));
  binding_callbacks.push(() => bind(subtypeoptions, "page", subtypeoptions_page_binding));
  let if_block = (
    /*promiseSortedResults*/
    ctx[12] && create_if_block10(ctx)
  );
  return {
    c() {
      create_component(subtypeoptions.$$.fragment);
      t0 = space();
      table = element("table");
      thead = element("thead");
      thead.innerHTML = `<tr class="svelte-6qr5sj"><th scope="col">Note</th> <th scope="col">Authority</th> <th scope="col">Hub</th></tr>`;
      t6 = space();
      if (if_block) if_block.c();
      attr(table, "class", "GA-table markdown-preview-view svelte-6qr5sj");
    },
    m(target, anchor) {
      mount_component(subtypeoptions, target, anchor);
      insert(target, t0, anchor);
      insert(target, table, anchor);
      append(table, thead);
      append(table, t6);
      if (if_block) if_block.m(table, null);
      ctx[31](table);
      current = true;
    },
    p(ctx2, dirty) {
      const subtypeoptions_changes = {};
      if (dirty[0] & /*app*/
      1) subtypeoptions_changes.app = /*app*/
      ctx2[0];
      if (dirty[0] & /*plugin*/
      2) subtypeoptions_changes.plugin = /*plugin*/
      ctx2[1];
      if (dirty[0] & /*view*/
      4) subtypeoptions_changes.view = /*view*/
      ctx2[2];
      if (!updating_currSubtypeInfo && dirty[0] & /*currSubtypeInfo*/
      16384) {
        updating_currSubtypeInfo = true;
        subtypeoptions_changes.currSubtypeInfo = /*currSubtypeInfo*/
        ctx2[14];
        add_flush_callback(() => updating_currSubtypeInfo = false);
      }
      if (!updating_noZero && dirty[0] & /*noZero*/
      256) {
        updating_noZero = true;
        subtypeoptions_changes.noZero = /*noZero*/
        ctx2[8];
        add_flush_callback(() => updating_noZero = false);
      }
      if (!updating_ascOrder && dirty[0] & /*ascOrder*/
      16) {
        updating_ascOrder = true;
        subtypeoptions_changes.ascOrder = /*ascOrder*/
        ctx2[4];
        add_flush_callback(() => updating_ascOrder = false);
      }
      if (!updating_sortBy && dirty[0] & /*sortBy*/
      8) {
        updating_sortBy = true;
        subtypeoptions_changes.sortBy = /*sortBy*/
        ctx2[3];
        add_flush_callback(() => updating_sortBy = false);
      }
      if (!updating_currFile && dirty[0] & /*currFile*/
      32) {
        updating_currFile = true;
        subtypeoptions_changes.currFile = /*currFile*/
        ctx2[5];
        add_flush_callback(() => updating_currFile = false);
      }
      if (!updating_blockSwitch && dirty[0] & /*blockSwitch*/
      2048) {
        updating_blockSwitch = true;
        subtypeoptions_changes.blockSwitch = /*blockSwitch*/
        ctx2[11];
        add_flush_callback(() => updating_blockSwitch = false);
      }
      if (!updating_newBatch && dirty[0] & /*newBatch*/
      64) {
        updating_newBatch = true;
        subtypeoptions_changes.newBatch = /*newBatch*/
        ctx2[6];
        add_flush_callback(() => updating_newBatch = false);
      }
      if (!updating_visibleData && dirty[0] & /*visibleData*/
      128) {
        updating_visibleData = true;
        subtypeoptions_changes.visibleData = /*visibleData*/
        ctx2[7];
        add_flush_callback(() => updating_visibleData = false);
      }
      if (!updating_promiseSortedResults && dirty[0] & /*promiseSortedResults*/
      4096) {
        updating_promiseSortedResults = true;
        subtypeoptions_changes.promiseSortedResults = /*promiseSortedResults*/
        ctx2[12];
        add_flush_callback(() => updating_promiseSortedResults = false);
      }
      if (!updating_page && dirty[0] & /*page*/
      1024) {
        updating_page = true;
        subtypeoptions_changes.page = /*page*/
        ctx2[10];
        add_flush_callback(() => updating_page = false);
      }
      subtypeoptions.$set(subtypeoptions_changes);
      if (
        /*promiseSortedResults*/
        ctx2[12]
      ) {
        if (if_block) {
          if_block.p(ctx2, dirty);
          if (dirty[0] & /*promiseSortedResults*/
          4096) {
            transition_in(if_block, 1);
          }
        } else {
          if_block = create_if_block10(ctx2);
          if_block.c();
          transition_in(if_block, 1);
          if_block.m(table, null);
        }
      } else if (if_block) {
        group_outros();
        transition_out(if_block, 1, 1, () => {
          if_block = null;
        });
        check_outros();
      }
    },
    i(local) {
      if (current) return;
      transition_in(subtypeoptions.$$.fragment, local);
      transition_in(if_block);
      current = true;
    },
    o(local) {
      transition_out(subtypeoptions.$$.fragment, local);
      transition_out(if_block);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(t0);
        detach(table);
      }
      destroy_component(subtypeoptions, detaching);
      if (if_block) if_block.d();
      ctx[31](null);
    }
  };
}
var size5 = 50;
function instance38($$self, $$props, $$invalidate) {
  let currSubtypeInfo;
  let currNode;
  let promiseSortedResults;
  let { app } = $$props;
  let { plugin } = $$props;
  let { settings } = $$props;
  let { view } = $$props;
  let { currSubtype } = $$props;
  let sortBy = true;
  let ascOrder = false;
  let { noInfinity, noZero } = settings;
  let currFile = app.workspace.getActiveFile();
  let current_component2;
  let newBatch = [];
  let visibleData = [];
  let page = 0;
  let blockSwitch = false;
  app.workspace.on("active-leaf-change", () => {
    $$invalidate(11, blockSwitch = true);
    setTimeout(
      () => {
        $$invalidate(11, blockSwitch = false);
        $$invalidate(5, currFile = app.workspace.getActiveFile());
      },
      100
    );
    $$invalidate(6, newBatch = []);
  });
  onMount(() => {
  });
  onMount(() => {
    $$invalidate(5, currFile = app.workspace.getActiveFile());
  });
  function subtypeoptions_currSubtypeInfo_binding(value) {
    currSubtypeInfo = value;
    $$invalidate(14, currSubtypeInfo), $$invalidate(16, currSubtype);
  }
  function subtypeoptions_noZero_binding(value) {
    noZero = value;
    $$invalidate(8, noZero);
  }
  function subtypeoptions_ascOrder_binding(value) {
    ascOrder = value;
    $$invalidate(4, ascOrder);
  }
  function subtypeoptions_sortBy_binding(value) {
    sortBy = value;
    $$invalidate(3, sortBy);
  }
  function subtypeoptions_currFile_binding(value) {
    currFile = value;
    $$invalidate(5, currFile);
  }
  function subtypeoptions_blockSwitch_binding(value) {
    blockSwitch = value;
    $$invalidate(11, blockSwitch), $$invalidate(1, plugin), $$invalidate(0, app), $$invalidate(4, ascOrder), $$invalidate(3, sortBy);
  }
  function subtypeoptions_newBatch_binding(value) {
    newBatch = value;
    $$invalidate(6, newBatch), $$invalidate(1, plugin), $$invalidate(0, app), $$invalidate(4, ascOrder), $$invalidate(3, sortBy);
  }
  function subtypeoptions_visibleData_binding(value) {
    visibleData = value;
    $$invalidate(7, visibleData), $$invalidate(6, newBatch), $$invalidate(1, plugin), $$invalidate(0, app), $$invalidate(4, ascOrder), $$invalidate(3, sortBy);
  }
  function subtypeoptions_promiseSortedResults_binding(value) {
    promiseSortedResults = value;
    $$invalidate(12, promiseSortedResults), $$invalidate(1, plugin), $$invalidate(0, app), $$invalidate(4, ascOrder), $$invalidate(3, sortBy);
  }
  function subtypeoptions_page_binding(value) {
    page = value;
    $$invalidate(10, page);
  }
  const click_handler = async (node, e) => await openOrSwitch2(app, node.to, e);
  const contextmenu_handler = (e) => openMenu(e, app);
  const mouseover_handler2 = (node, e) => hoverPreview(e, view, dropPath(node.to));
  const loadMore_handler = (sortedResults) => {
    if (!blockSwitch) {
      $$invalidate(10, page++, page);
      $$invalidate(6, newBatch = sortedResults.slice(size5 * page, size5 * (page + 1) - 1));
      console.log({ newBatch });
    }
  };
  function table_binding($$value) {
    binding_callbacks[$$value ? "unshift" : "push"](() => {
      current_component2 = $$value;
      $$invalidate(9, current_component2);
    });
  }
  $$self.$$set = ($$props2) => {
    if ("app" in $$props2) $$invalidate(0, app = $$props2.app);
    if ("plugin" in $$props2) $$invalidate(1, plugin = $$props2.plugin);
    if ("settings" in $$props2) $$invalidate(15, settings = $$props2.settings);
    if ("view" in $$props2) $$invalidate(2, view = $$props2.view);
    if ("currSubtype" in $$props2) $$invalidate(16, currSubtype = $$props2.currSubtype);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty[0] & /*currSubtype*/
    65536) {
      $: $$invalidate(14, currSubtypeInfo = ANALYSIS_TYPES.find((sub) => sub.subtype === currSubtype));
    }
    if ($$self.$$.dirty[0] & /*currFile*/
    32) {
      $: $$invalidate(13, currNode = currFile === null || currFile === void 0 ? void 0 : currFile.path);
    }
    if ($$self.$$.dirty[0] & /*plugin, app, ascOrder, sortBy*/
    27) {
      $: $$invalidate(12, promiseSortedResults = !plugin.g ? null : plugin.g.algs["HITS"]("").then((results) => {
        console.log("hits");
        const componentResults = [];
        plugin.g.forEachNode((to) => {
          const authority = roundNumber(results.authorities[to]);
          const hub = roundNumber(results.hubs[to]);
          if (!(authority === 0 && hub === 0)) {
            const resolved = !to.endsWith(".md") || isInVault(app, to);
            const img = plugin.settings.showImgThumbnails && isImg(to) ? getImgBufferPromise(app, to) : null;
            componentResults.push({ authority, hub, to, resolved, img });
          }
        });
        const greater = ascOrder ? 1 : -1;
        const lesser = ascOrder ? -1 : 1;
        componentResults.sort((a, b) => {
          return sortBy ? a.authority > b.authority ? greater : lesser : a.hub > b.hub ? greater : lesser;
        });
        return componentResults;
      }).then((res) => {
        $$invalidate(6, newBatch = res.slice(0, size5));
        setTimeout(
          () => {
            $$invalidate(11, blockSwitch = false);
          },
          100
        );
        return res;
      }));
    }
    if ($$self.$$.dirty[0] & /*visibleData, newBatch*/
    192) {
      $: $$invalidate(7, visibleData = [...visibleData, ...newBatch]);
    }
  };
  return [
    app,
    plugin,
    view,
    sortBy,
    ascOrder,
    currFile,
    newBatch,
    visibleData,
    noZero,
    current_component2,
    page,
    blockSwitch,
    promiseSortedResults,
    currNode,
    currSubtypeInfo,
    settings,
    currSubtype,
    subtypeoptions_currSubtypeInfo_binding,
    subtypeoptions_noZero_binding,
    subtypeoptions_ascOrder_binding,
    subtypeoptions_sortBy_binding,
    subtypeoptions_currFile_binding,
    subtypeoptions_blockSwitch_binding,
    subtypeoptions_newBatch_binding,
    subtypeoptions_visibleData_binding,
    subtypeoptions_promiseSortedResults_binding,
    subtypeoptions_page_binding,
    click_handler,
    contextmenu_handler,
    mouseover_handler2,
    loadMore_handler,
    table_binding
  ];
}
var HITS = class extends SvelteComponent {
  constructor(options) {
    super();
    init(
      this,
      options,
      instance38,
      create_fragment38,
      safe_not_equal,
      {
        app: 0,
        plugin: 1,
        settings: 15,
        view: 2,
        currSubtype: 16
      },
      null,
      [-1, -1]
    );
  }
};
var HITS_default = HITS;

// src/Components/AnalysisComponent.svelte
function create_if_block_102(ctx) {
  let hits2;
  let current;
  const hits_spread_levels = [
    /*props*/
    ctx[2]
  ];
  let hits_props = {};
  for (let i = 0; i < hits_spread_levels.length; i += 1) {
    hits_props = assign(hits_props, hits_spread_levels[i]);
  }
  hits2 = new HITS_default({ props: hits_props });
  return {
    c() {
      create_component(hits2.$$.fragment);
    },
    m(target, anchor) {
      mount_component(hits2, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const hits_changes = dirty & /*props*/
      4 ? get_spread_update(hits_spread_levels, [get_spread_object(
        /*props*/
        ctx2[2]
      )]) : {};
      hits2.$set(hits_changes);
    },
    i(local) {
      if (current) return;
      transition_in(hits2.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(hits2.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(hits2, detaching);
    }
  };
}
function create_if_block_92(ctx) {
  let louvain2;
  let current;
  const louvain_spread_levels = [
    /*props*/
    ctx[2]
  ];
  let louvain_props = {};
  for (let i = 0; i < louvain_spread_levels.length; i += 1) {
    louvain_props = assign(louvain_props, louvain_spread_levels[i]);
  }
  louvain2 = new Louvain_default({ props: louvain_props });
  return {
    c() {
      create_component(louvain2.$$.fragment);
    },
    m(target, anchor) {
      mount_component(louvain2, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const louvain_changes = dirty & /*props*/
      4 ? get_spread_update(louvain_spread_levels, [get_spread_object(
        /*props*/
        ctx2[2]
      )]) : {};
      louvain2.$set(louvain_changes);
    },
    i(local) {
      if (current) return;
      transition_in(louvain2.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(louvain2.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(louvain2, detaching);
    }
  };
}
function create_if_block_82(ctx) {
  let tablecomponent;
  let current;
  const tablecomponent_spread_levels = [
    /*props*/
    ctx[2]
  ];
  let tablecomponent_props = {};
  for (let i = 0; i < tablecomponent_spread_levels.length; i += 1) {
    tablecomponent_props = assign(tablecomponent_props, tablecomponent_spread_levels[i]);
  }
  tablecomponent = new TableComponent_default({ props: tablecomponent_props });
  return {
    c() {
      create_component(tablecomponent.$$.fragment);
    },
    m(target, anchor) {
      mount_component(tablecomponent, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const tablecomponent_changes = dirty & /*props*/
      4 ? get_spread_update(tablecomponent_spread_levels, [get_spread_object(
        /*props*/
        ctx2[2]
      )]) : {};
      tablecomponent.$set(tablecomponent_changes);
    },
    i(local) {
      if (current) return;
      transition_in(tablecomponent.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(tablecomponent.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(tablecomponent, detaching);
    }
  };
}
function create_if_block_73(ctx) {
  let tablecomponent;
  let current;
  const tablecomponent_spread_levels = [
    /*props*/
    ctx[2]
  ];
  let tablecomponent_props = {};
  for (let i = 0; i < tablecomponent_spread_levels.length; i += 1) {
    tablecomponent_props = assign(tablecomponent_props, tablecomponent_spread_levels[i]);
  }
  tablecomponent = new TableComponent_default({ props: tablecomponent_props });
  return {
    c() {
      create_component(tablecomponent.$$.fragment);
    },
    m(target, anchor) {
      mount_component(tablecomponent, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const tablecomponent_changes = dirty & /*props*/
      4 ? get_spread_update(tablecomponent_spread_levels, [get_spread_object(
        /*props*/
        ctx2[2]
      )]) : {};
      tablecomponent.$set(tablecomponent_changes);
    },
    i(local) {
      if (current) return;
      transition_in(tablecomponent.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(tablecomponent.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(tablecomponent, detaching);
    }
  };
}
function create_if_block_63(ctx) {
  let tablecomponent;
  let current;
  const tablecomponent_spread_levels = [
    /*props*/
    ctx[2]
  ];
  let tablecomponent_props = {};
  for (let i = 0; i < tablecomponent_spread_levels.length; i += 1) {
    tablecomponent_props = assign(tablecomponent_props, tablecomponent_spread_levels[i]);
  }
  tablecomponent = new TableComponent_default({ props: tablecomponent_props });
  return {
    c() {
      create_component(tablecomponent.$$.fragment);
    },
    m(target, anchor) {
      mount_component(tablecomponent, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const tablecomponent_changes = dirty & /*props*/
      4 ? get_spread_update(tablecomponent_spread_levels, [get_spread_object(
        /*props*/
        ctx2[2]
      )]) : {};
      tablecomponent.$set(tablecomponent_changes);
    },
    i(local) {
      if (current) return;
      transition_in(tablecomponent.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(tablecomponent.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(tablecomponent, detaching);
    }
  };
}
function create_if_block_53(ctx) {
  let tablecomponent;
  let current;
  const tablecomponent_spread_levels = [
    /*props*/
    ctx[2]
  ];
  let tablecomponent_props = {};
  for (let i = 0; i < tablecomponent_spread_levels.length; i += 1) {
    tablecomponent_props = assign(tablecomponent_props, tablecomponent_spread_levels[i]);
  }
  tablecomponent = new TableComponent_default({ props: tablecomponent_props });
  return {
    c() {
      create_component(tablecomponent.$$.fragment);
    },
    m(target, anchor) {
      mount_component(tablecomponent, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const tablecomponent_changes = dirty & /*props*/
      4 ? get_spread_update(tablecomponent_spread_levels, [get_spread_object(
        /*props*/
        ctx2[2]
      )]) : {};
      tablecomponent.$set(tablecomponent_changes);
    },
    i(local) {
      if (current) return;
      transition_in(tablecomponent.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(tablecomponent.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(tablecomponent, detaching);
    }
  };
}
function create_if_block_44(ctx) {
  let tablecomponent;
  let current;
  const tablecomponent_spread_levels = [
    /*props*/
    ctx[2]
  ];
  let tablecomponent_props = {};
  for (let i = 0; i < tablecomponent_spread_levels.length; i += 1) {
    tablecomponent_props = assign(tablecomponent_props, tablecomponent_spread_levels[i]);
  }
  tablecomponent = new TableComponent_default({ props: tablecomponent_props });
  return {
    c() {
      create_component(tablecomponent.$$.fragment);
    },
    m(target, anchor) {
      mount_component(tablecomponent, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const tablecomponent_changes = dirty & /*props*/
      4 ? get_spread_update(tablecomponent_spread_levels, [get_spread_object(
        /*props*/
        ctx2[2]
      )]) : {};
      tablecomponent.$set(tablecomponent_changes);
    },
    i(local) {
      if (current) return;
      transition_in(tablecomponent.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(tablecomponent.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(tablecomponent, detaching);
    }
  };
}
function create_if_block_37(ctx) {
  let labelpropagation;
  let current;
  const labelpropagation_spread_levels = [
    /*props*/
    ctx[2]
  ];
  let labelpropagation_props = {};
  for (let i = 0; i < labelpropagation_spread_levels.length; i += 1) {
    labelpropagation_props = assign(labelpropagation_props, labelpropagation_spread_levels[i]);
  }
  labelpropagation = new LabelPropagation_default({ props: labelpropagation_props });
  return {
    c() {
      create_component(labelpropagation.$$.fragment);
    },
    m(target, anchor) {
      mount_component(labelpropagation, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const labelpropagation_changes = dirty & /*props*/
      4 ? get_spread_update(labelpropagation_spread_levels, [get_spread_object(
        /*props*/
        ctx2[2]
      )]) : {};
      labelpropagation.$set(labelpropagation_changes);
    },
    i(local) {
      if (current) return;
      transition_in(labelpropagation.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(labelpropagation.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(labelpropagation, detaching);
    }
  };
}
function create_if_block_29(ctx) {
  let cocitations;
  let current;
  const cocitations_spread_levels = [
    /*props*/
    ctx[2]
  ];
  let cocitations_props = {};
  for (let i = 0; i < cocitations_spread_levels.length; i += 1) {
    cocitations_props = assign(cocitations_props, cocitations_spread_levels[i]);
  }
  cocitations = new CoCitations_default({ props: cocitations_props });
  return {
    c() {
      create_component(cocitations.$$.fragment);
    },
    m(target, anchor) {
      mount_component(cocitations, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const cocitations_changes = dirty & /*props*/
      4 ? get_spread_update(cocitations_spread_levels, [get_spread_object(
        /*props*/
        ctx2[2]
      )]) : {};
      cocitations.$set(cocitations_changes);
    },
    i(local) {
      if (current) return;
      transition_in(cocitations.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(cocitations.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(cocitations, detaching);
    }
  };
}
function create_if_block_19(ctx) {
  let tablecomponent;
  let current;
  const tablecomponent_spread_levels = [
    /*props*/
    ctx[2]
  ];
  let tablecomponent_props = {};
  for (let i = 0; i < tablecomponent_spread_levels.length; i += 1) {
    tablecomponent_props = assign(tablecomponent_props, tablecomponent_spread_levels[i]);
  }
  tablecomponent = new TableComponent_default({ props: tablecomponent_props });
  return {
    c() {
      create_component(tablecomponent.$$.fragment);
    },
    m(target, anchor) {
      mount_component(tablecomponent, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const tablecomponent_changes = dirty & /*props*/
      4 ? get_spread_update(tablecomponent_spread_levels, [get_spread_object(
        /*props*/
        ctx2[2]
      )]) : {};
      tablecomponent.$set(tablecomponent_changes);
    },
    i(local) {
      if (current) return;
      transition_in(tablecomponent.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(tablecomponent.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(tablecomponent, detaching);
    }
  };
}
function create_if_block11(ctx) {
  let tablecomponent;
  let current;
  const tablecomponent_spread_levels = [
    /*props*/
    ctx[2]
  ];
  let tablecomponent_props = {};
  for (let i = 0; i < tablecomponent_spread_levels.length; i += 1) {
    tablecomponent_props = assign(tablecomponent_props, tablecomponent_spread_levels[i]);
  }
  tablecomponent = new TableComponent_default({ props: tablecomponent_props });
  return {
    c() {
      create_component(tablecomponent.$$.fragment);
    },
    m(target, anchor) {
      mount_component(tablecomponent, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const tablecomponent_changes = dirty & /*props*/
      4 ? get_spread_update(tablecomponent_spread_levels, [get_spread_object(
        /*props*/
        ctx2[2]
      )]) : {};
      tablecomponent.$set(tablecomponent_changes);
    },
    i(local) {
      if (current) return;
      transition_in(tablecomponent.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(tablecomponent.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(tablecomponent, detaching);
    }
  };
}
function create_fragment39(ctx) {
  let scrollselector;
  let updating_currSubtype;
  let t;
  let current_block_type_index;
  let if_block;
  let if_block_anchor;
  let current;
  function scrollselector_currSubtype_binding(value) {
    ctx[6](value);
  }
  let scrollselector_props = { view: (
    /*view*/
    ctx[1]
  ) };
  if (
    /*currSubtype*/
    ctx[0] !== void 0
  ) {
    scrollselector_props.currSubtype = /*currSubtype*/
    ctx[0];
  }
  scrollselector = new ScrollSelector_default({ props: scrollselector_props });
  binding_callbacks.push(() => bind(scrollselector, "currSubtype", scrollselector_currSubtype_binding));
  const if_block_creators = [
    create_if_block11,
    create_if_block_19,
    create_if_block_29,
    create_if_block_37,
    create_if_block_44,
    create_if_block_53,
    create_if_block_63,
    create_if_block_73,
    create_if_block_82,
    create_if_block_92,
    create_if_block_102
  ];
  const if_blocks = [];
  function select_block_type(ctx2, dirty) {
    if (
      /*currSubtype*/
      ctx2[0] === "Adamic Adar"
    ) return 0;
    if (
      /*currSubtype*/
      ctx2[0] === "Jaccard"
    ) return 1;
    if (
      /*currSubtype*/
      ctx2[0] === "Co-Citations"
    ) return 2;
    if (
      /*currSubtype*/
      ctx2[0] === "Label Propagation"
    ) return 3;
    if (
      /*currSubtype*/
      ctx2[0] === "Overlap"
    ) return 4;
    if (
      /*currSubtype*/
      ctx2[0] === "Clustering Coefficient"
    ) return 5;
    if (
      /*currSubtype*/
      ctx2[0] === "BoW"
    ) return 6;
    if (
      /*currSubtype*/
      ctx2[0] === "Otsuka-Chiai"
    ) return 7;
    if (
      /*currSubtype*/
      ctx2[0] === "Sentiment"
    ) return 8;
    if (
      /*currSubtype*/
      ctx2[0] === "Louvain"
    ) return 9;
    if (
      /*currSubtype*/
      ctx2[0] === "HITS"
    ) return 10;
    return -1;
  }
  if (~(current_block_type_index = select_block_type(ctx, -1))) {
    if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
  }
  return {
    c() {
      create_component(scrollselector.$$.fragment);
      t = space();
      if (if_block) if_block.c();
      if_block_anchor = empty();
    },
    m(target, anchor) {
      mount_component(scrollselector, target, anchor);
      insert(target, t, anchor);
      if (~current_block_type_index) {
        if_blocks[current_block_type_index].m(target, anchor);
      }
      insert(target, if_block_anchor, anchor);
      current = true;
    },
    p(ctx2, [dirty]) {
      const scrollselector_changes = {};
      if (dirty & /*view*/
      2) scrollselector_changes.view = /*view*/
      ctx2[1];
      if (!updating_currSubtype && dirty & /*currSubtype*/
      1) {
        updating_currSubtype = true;
        scrollselector_changes.currSubtype = /*currSubtype*/
        ctx2[0];
        add_flush_callback(() => updating_currSubtype = false);
      }
      scrollselector.$set(scrollselector_changes);
      let previous_block_index = current_block_type_index;
      current_block_type_index = select_block_type(ctx2, dirty);
      if (current_block_type_index === previous_block_index) {
        if (~current_block_type_index) {
          if_blocks[current_block_type_index].p(ctx2, dirty);
        }
      } else {
        if (if_block) {
          group_outros();
          transition_out(if_blocks[previous_block_index], 1, 1, () => {
            if_blocks[previous_block_index] = null;
          });
          check_outros();
        }
        if (~current_block_type_index) {
          if_block = if_blocks[current_block_type_index];
          if (!if_block) {
            if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx2);
            if_block.c();
          } else {
            if_block.p(ctx2, dirty);
          }
          transition_in(if_block, 1);
          if_block.m(if_block_anchor.parentNode, if_block_anchor);
        } else {
          if_block = null;
        }
      }
    },
    i(local) {
      if (current) return;
      transition_in(scrollselector.$$.fragment, local);
      transition_in(if_block);
      current = true;
    },
    o(local) {
      transition_out(scrollselector.$$.fragment, local);
      transition_out(if_block);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(t);
        detach(if_block_anchor);
      }
      destroy_component(scrollselector, detaching);
      if (~current_block_type_index) {
        if_blocks[current_block_type_index].d(detaching);
      }
    }
  };
}
function instance39($$self, $$props, $$invalidate) {
  let props;
  let { app } = $$props;
  let { plugin } = $$props;
  let { settings } = $$props;
  let { view } = $$props;
  let { currSubtype } = $$props;
  function scrollselector_currSubtype_binding(value) {
    currSubtype = value;
    $$invalidate(0, currSubtype);
  }
  $$self.$$set = ($$props2) => {
    if ("app" in $$props2) $$invalidate(3, app = $$props2.app);
    if ("plugin" in $$props2) $$invalidate(4, plugin = $$props2.plugin);
    if ("settings" in $$props2) $$invalidate(5, settings = $$props2.settings);
    if ("view" in $$props2) $$invalidate(1, view = $$props2.view);
    if ("currSubtype" in $$props2) $$invalidate(0, currSubtype = $$props2.currSubtype);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*app, plugin, settings, view, currSubtype*/
    59) {
      $: $$invalidate(2, props = { app, plugin, settings, view, currSubtype });
    }
  };
  return [
    currSubtype,
    view,
    props,
    app,
    plugin,
    settings,
    scrollselector_currSubtype_binding
  ];
}
var AnalysisComponent = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance39, create_fragment39, safe_not_equal, {
      app: 3,
      plugin: 4,
      settings: 5,
      view: 1,
      currSubtype: 0
    });
  }
};
var AnalysisComponent_default = AnalysisComponent;

// src/AnalysisView.ts
var AnalysisView = class extends import_obsidian5.ItemView {
  constructor(leaf, plugin, currSubtype) {
    super(leaf);
    this.icon = "GA-ICON";
    this.plugin = plugin;
    this.currSubtype = currSubtype;
  }
  async onload() {
    super.onload();
  }
  getViewType() {
    return VIEW_TYPE_GRAPH_ANALYSIS;
  }
  getDisplayText() {
    return "Graph Analysis";
  }
  async onOpen() {
    var _a;
    await this.draw((_a = this.currSubtype) != null ? _a : this.plugin.settings.defaultSubtypeType);
  }
  onClose() {
    return Promise.resolve();
  }
  async draw(currSubtype) {
    var _a;
    const { app, contentEl } = this;
    const { settings } = this.plugin;
    contentEl.empty();
    contentEl.addClass("GA-View");
    (_a = this.component) == null ? void 0 : _a.$destroy();
    this.component = new AnalysisComponent_default({
      target: contentEl,
      props: {
        app,
        plugin: this.plugin,
        settings,
        view: this,
        currSubtype
      }
    });
  }
};

// src/MyGraph.ts
var import_graphology = __toESM(require_graphology_umd_min(), 1);
var import_graphology_communities_louvain = __toESM(require_graphology_communities_louvain(), 1);
var import_hits = __toESM(require_hits(), 1);
var import_obsidian6 = require("obsidian");
var import_obsidian7 = require("obsidian");
var import_sbd = __toESM(require_tokenizer(), 1);

// src/GeneralGraphFn.ts
function intersection(nodes1, nodes2) {
  var _a;
  return (_a = nodes1 == null ? void 0 : nodes1.filter((node1) => nodes2.includes(node1))) != null ? _a : [];
}
function clusteringCoefficient(g, u) {
  const triangles = findTrianglesForNode(g, u);
  const deg = g.neighbors(u).length;
  if (deg === 0 || deg === 1) return { coeff: 0, triangles };
  const coeff = 2 * triangles.length / (deg * (deg - 1));
  return { coeff, triangles };
}
function findTrianglesForNode(g, u) {
  const triangles = [];
  g.neighbors(u).forEach((v) => {
    ;
    g.neighbors(v).forEach((w) => {
      if (g.hasEdge(u, v) && g.hasEdge(u, w) && g.hasEdge(v, w)) {
        triangles.push([v, w]);
      }
    });
  });
  return triangles;
}
function gatherCommunities(labeledNodes) {
  const communities = {};
  Object.entries(labeledNodes).forEach(
    (labeledNode) => {
      const [node, label] = labeledNode;
      if (communities[label] === void 0) {
        communities[label] = [node];
      } else {
        communities[label].push(node);
      }
    }
  );
  return communities;
}

// src/MyGraph.ts
var similarity = __toESM(require_similarity(), 1);
var MyGraph = class extends import_graphology.default {
  constructor(app, settings) {
    super();
    this.algs = {
      Jaccard: async (a) => {
        const Na = this.neighbors(a);
        const results = {};
        this.forEachNode((to) => {
          const Nb = this.neighbors(to);
          const Nab = intersection(Na, Nb);
          const denom = Na.length + Nb.length - Nab.length;
          let measure = denom !== 0 ? roundNumber(Nab.length / denom) : Infinity;
          results[to] = { measure, extra: Nab };
        });
        return results;
      },
      HITS: async (a) => {
        return (0, import_hits.default)(this);
      },
      Overlap: async (a) => {
        const results = {};
        const Na = this.neighbors(a);
        this.forEachNode((to) => {
          const Nb = this.neighbors(to);
          const Nab = intersection(Na, Nb);
          let measure = Na.length !== 0 && Nb.length !== 0 ? (
            // The square weights the final result by the number of nodes in the overlap
            roundNumber(Nab.length ** 2 / Math.min(Na.length, Nb.length))
          ) : Infinity;
          results[to] = { measure, extra: Nab };
        });
        return results;
      },
      "Adamic Adar": async (a) => {
        const results = {};
        const Na = this.neighbors(a);
        this.forEachNode((to) => {
          const Nb = this.neighbors(to);
          const Nab = intersection(Na, Nb);
          let measure = Infinity;
          if (Nab.length) {
            const neighbours = Nab.map(
              (n) => this.outNeighbors(n).length
            );
            measure = roundNumber(
              sum(neighbours.map((neighbour) => 1 / Math.log(neighbour)))
            );
          }
          results[to] = { measure, extra: Nab };
        });
        return results;
      },
      // 'Common Neighbours': async (a: string): Promise<ResultMap> => {
      //   const Na = this.neighbors(a)
      //   const results: ResultMap = {}
      //   this.forEachNode((to) => {
      //     const Nb = this.neighbors(to)
      //     const Nab = intersection(Na, Nb)
      //     const measure = Nab.length
      //     results[to] = { measure, extra: Nab }
      //   })
      //   return results
      // },
      "Co-Citations": async (a) => {
        const mdCache = this.app.metadataCache;
        const results = {};
        const { settings } = this;
        this.forEachInNeighbor(a, async (pre) => {
          const file = mdCache.getFirstLinkpathDest(pre, "");
          if (!file) return;
          const cache = mdCache.getFileCache(file);
          const preCocitations = {};
          const allLinks = [...cache.links];
          if (cache.embeds) {
            allLinks.push(...cache.embeds);
          }
          const ownLinks = allLinks.filter((link) => {
            const linkFile = mdCache.getFirstLinkpathDest(
              (0, import_obsidian7.getLinkpath)(link.link),
              file.path
            );
            if (!linkFile) return false;
            const extensionQ = settings.allFileExtensions || linkFile.extension === "md";
            return linkFile.path === a && extensionQ;
          });
          const cachedRead = await this.app.vault.cachedRead(file);
          const lines = cachedRead.split("\n");
          const ownSentences = ownLinks.map((link) => {
            let line = lines[link.position.end.line];
            const sentences = import_sbd.default.sentences(line, {
              preserve_whitespace: true
            });
            let [linkSentence, linkSentenceStart, linkSentenceEnd] = findSentence(sentences, link);
            return { sentences, link, line: link.position.end.line, linkSentence, linkSentenceStart, linkSentenceEnd };
          });
          const ownListItems = cache.listItems ? cache.listItems.filter((listItem) => {
            return ownLinks.find((link) => link.position.start.line >= listItem.position.start.line && link.position.end.line <= listItem.position.end.line);
          }) : [];
          const ownSections = ownLinks.map(
            (link) => cache.sections.find(
              (section) => section.position.start.line <= link.position.start.line && section.position.end.line >= link.position.end.line
            )
          );
          let minHeadingLevel = 7;
          let maxHeadingLevel = 0;
          const ownHeadings = [];
          ownLinks.forEach((link) => {
            if (!cache.headings) return;
            cache.headings.forEach((heading, index) => {
              minHeadingLevel = Math.min(minHeadingLevel, heading.level);
              maxHeadingLevel = Math.max(maxHeadingLevel, heading.level);
              if (heading.position.start.line <= link.position.start.line) {
                for (const j of Array(cache.headings.length - index - 1).keys()) {
                  let nextHeading = cache.headings[j + index + 1];
                  if (nextHeading.level >= heading.level) {
                    if (nextHeading.position.start.line <= link.position.start.line)
                      return;
                    ownHeadings.push([heading, nextHeading.position.start.line]);
                    return;
                  }
                }
                ownHeadings.push([heading, 1e11]);
              }
            });
          });
          minHeadingLevel = cache.headings && cache.headings.length > 0 ? minHeadingLevel : 0;
          maxHeadingLevel = cache.headings && cache.headings.length > 0 ? maxHeadingLevel : 0;
          const minScore = 1 / Math.pow(2, 4 + maxHeadingLevel - minHeadingLevel);
          const coCiteCandidates = [...allLinks];
          if (cache.tags && settings.coTags) {
            coCiteCandidates.push(...cache.tags);
          }
          coCiteCandidates.forEach((item) => {
            var _a, _b, _c;
            let linkPath = null;
            if ("link" in item) {
              const linkFile = mdCache.getFirstLinkpathDest(
                (_b = (0, import_obsidian7.getLinkpath)((_a = item == null ? void 0 : item.link) != null ? _a : "")) != null ? _b : "",
                file.path
              );
              if (!linkFile) {
                linkPath = item.link;
              } else if (!settings.allFileExtensions && linkFile.extension !== "md") {
                return;
              } else {
                linkPath = linkFile.path;
                if (linkPath === a) return;
              }
            } else if ("tag" in item) {
              linkPath = item.tag;
            } else return;
            if (!(linkPath in preCocitations)) {
              preCocitations[linkPath] = [0, []];
            }
            const lineContent = lines[item.position.start.line];
            let hasOwnLine = false;
            ownSentences.forEach((lineSentence) => {
              if (item.position.start.line === lineSentence.line) {
                const [itemSentence, itemSentenceStart, itemSentenceEnd] = findSentence(lineSentence.sentences, item);
                const ownLink = lineSentence.link;
                const m1Start = Math.min(
                  item.position.start.col,
                  ownLink.position.start.col
                );
                const m1End = Math.min(
                  item.position.end.col,
                  ownLink.position.end.col
                );
                const m2Start = Math.max(
                  item.position.start.col,
                  ownLink.position.start.col
                );
                const m2End = Math.max(
                  item.position.end.col,
                  ownLink.position.end.col
                );
                const slicedSentence = [
                  lineContent.slice(Math.min(itemSentenceStart, lineSentence.linkSentenceStart), m1Start),
                  lineContent.slice(m1Start, m1End),
                  lineContent.slice(m1End, m2Start),
                  lineContent.slice(m2Start, m2End),
                  lineContent.slice(m2End, Math.max(itemSentenceEnd, lineSentence.linkSentenceEnd))
                ];
                let measure = 1 / 2;
                const sentenceDist = Math.abs(itemSentence - lineSentence.linkSentence);
                if (sentenceDist === 0) {
                  measure = 1;
                } else if (sentenceDist === 1) {
                  measure = 0.85;
                } else if (sentenceDist === 2) {
                  measure = 0.7;
                } else if (sentenceDist === 3) {
                  measure = 0.6;
                }
                preCocitations[linkPath][0] = Math.max(measure, preCocitations[linkPath][0]);
                preCocitations[linkPath][1].push({
                  sentence: slicedSentence,
                  measure,
                  source: pre,
                  line: lineSentence.line
                });
                hasOwnLine = true;
              }
            });
            if (hasOwnLine) return;
            const sentence = [
              lineContent.slice(0, item.position.start.col),
              lineContent.slice(item.position.start.col, item.position.end.col),
              lineContent.slice(item.position.end.col, lineContent.length)
            ];
            const listItem = (_c = cache == null ? void 0 : cache.listItems) == null ? void 0 : _c.find(
              (listItem2) => item.position.start.line >= listItem2.position.start.line && item.position.end.line <= listItem2.position.end.line
            );
            let foundHierarchy = false;
            if (listItem) {
              ownListItems.forEach((ownListItem) => {
                if (ownListItem.parent === listItem.parent) {
                  addPreCocitation(preCocitations, linkPath, 0.4, sentence, pre, item.position.start.line);
                  foundHierarchy = true;
                  return;
                }
                const findInHierarchy = function(from, to) {
                  let iterListItem = from;
                  let distance = 1;
                  while (iterListItem.parent > 0) {
                    if (iterListItem.parent === to.position.start.line) {
                      let measure = 0.3;
                      if (distance === 1) {
                        measure = 0.6;
                      } else if (distance === 2) {
                        measure = 0.5;
                      } else if (distance === 3) {
                        measure = 0.4;
                      } else if (distance === 4) {
                        measure = 0.35;
                      }
                      addPreCocitation(preCocitations, linkPath, measure, sentence, pre, item.position.start.line);
                      return true;
                    }
                    distance += 1;
                    iterListItem = cache.listItems.find((litem) => iterListItem.parent === litem.position.start.line);
                  }
                  return false;
                };
                if (findInHierarchy(ownListItem, listItem) || findInHierarchy(listItem, ownListItem)) {
                  foundHierarchy = true;
                }
              });
            }
            if (foundHierarchy) return;
            const sameParagraph = ownSections.find(
              (section) => section.position.start.line <= item.position.start.line && section.position.end.line >= item.position.end.line
            );
            if (sameParagraph) {
              addPreCocitation(preCocitations, linkPath, 1 / 4, sentence, pre, item.position.start.line);
              return;
            }
            const headingMatches = ownHeadings.filter(
              ([heading, end]) => heading.position.start.line <= item.position.start.line && end > item.position.end.line
            );
            if (headingMatches.length > 0) {
              const bestLevel = Math.max(
                ...headingMatches.map(([heading, _]) => heading.level)
              );
              const score = 1 / Math.pow(2, 3 + maxHeadingLevel - bestLevel);
              addPreCocitation(preCocitations, linkPath, score, sentence, pre, item.position.start.line);
              return;
            }
            addPreCocitation(preCocitations, linkPath, minScore, sentence, pre, item.position.start.line);
          });
          if (settings.coTags) {
            (0, import_obsidian7.getAllTags)(cache).forEach((tag) => {
              if (!(tag in preCocitations)) {
                preCocitations[tag] = [
                  minScore,
                  [
                    {
                      measure: minScore,
                      sentence: ["", "", ""],
                      source: pre,
                      line: 0
                    }
                  ]
                ];
              }
            });
          }
          for (let key in preCocitations) {
            const file2 = mdCache.getFirstLinkpathDest(key, "");
            let name = null;
            let resolved = true;
            if (file2) {
              name = file2.path;
            } else if (key[0] === "#") {
              name = key;
            } else if (settings.addUnresolved) {
              name = key + ".md";
              resolved = false;
            } else {
              continue;
            }
            let cocitation = preCocitations[key];
            if (name in results) {
              results[name].measure += cocitation[0];
              results[name].coCitations.push(...cocitation[1]);
            } else {
              results[name] = {
                measure: cocitation[0],
                coCitations: cocitation[1],
                resolved
              };
            }
          }
        });
        results[a] = { measure: 0, coCitations: [], resolved: true };
        return results;
      },
      "Label Propagation": async (a, options) => {
        let labeledNodes = {};
        this.forEachNode((node) => {
          labeledNodes[node] = node;
        });
        for (let i = 0; i < options.iterations; i++) {
          const newLabeledNodes = {};
          this.forEachNode((node) => {
            const neighbours = this.neighbors(node);
            if (neighbours.length) {
              const neighbourLabels = neighbours.map(
                // Take the label from the not-yet-updated-labels
                (neighbour) => labeledNodes[neighbour]
              );
              const counts = getCounts(neighbourLabels);
              newLabeledNodes[node] = getMaxKey(counts);
            }
          });
          labeledNodes = newLabeledNodes;
        }
        return gatherCommunities(labeledNodes);
      },
      Louvain: async (a, options = { resolution: 10 }) => {
        const labelledNodes = (0, import_graphology_communities_louvain.default)(this, options);
        const labelOfA = labelledNodes[a];
        const currComm = [];
        this.forEachNode((node) => {
          if (labelledNodes[node] === labelOfA) {
            currComm.push(node);
          }
        });
        return currComm;
      },
      "Clustering Coefficient": async (a) => {
        const results = {};
        this.forEachNode((to) => {
          const { coeff, triangles } = clusteringCoefficient(this, to);
          results[to] = {
            measure: roundNumber(coeff),
            extra: triangles.map((group) => group.join(", "))
          };
        });
        return results;
      },
      BoW: async (a) => {
        const results = {};
        const nlp = getNLPPlugin(this.app);
        if (!nlp) return results;
        const { Docs } = nlp;
        const sourceBoW = nlp.getNoStopBoW(Docs[a]);
        this.forEachNode(async (to) => {
          const targetDoc = Docs[to];
          if (!targetDoc) {
            results[to] = { measure: 0, extra: [] };
          }
          const targetBoW = nlp.getNoStopBoW(Docs[to]);
          const measure = similarity.bow.cosine(sourceBoW, targetBoW);
          results[to] = {
            measure,
            extra: []
          };
        });
        return results;
      },
      // Tversky: async (a: string): Promise<ResultMap> => {
      //   const results: ResultMap = {}
      //   const nlp = getNLPPlugin(this.app)
      //   if (!nlp) return results
      //   const { Docs } = nlp
      //   const sourceSet = nlp.getNoStopSet(Docs[a])
      //   this.forEachNode(async (to: string) => {
      //     const targetDoc = Docs[to]
      //     if (!targetDoc) {
      //       results[to] = { measure: 0, extra: [] }
      //     }
      //     const targetSet = nlp.getNoStopSet(Docs[to])
      //     const measure = similarity.set.tversky(sourceSet, targetSet)
      //     results[to] = {
      //       measure,
      //       extra: [],
      //     }
      //   })
      //   return results
      // },
      "Otsuka-Chiai": async (a) => {
        const results = {};
        const nlp = getNLPPlugin(this.app);
        if (!nlp) return results;
        const { Docs } = nlp;
        const sourceSet = nlp.getNoStopSet(Docs[a]);
        this.forEachNode(async (to) => {
          const targetDoc = Docs[to];
          if (!targetDoc) {
            results[to] = { measure: 0, extra: [] };
          }
          const targetSet = nlp.getNoStopSet(Docs[to]);
          const measure = similarity.set.oo(sourceSet, targetSet);
          results[to] = {
            measure,
            extra: []
          };
        });
        return results;
      },
      Sentiment: async (a) => {
        const results = {};
        const nlp = getNLPPlugin(this.app);
        if (!nlp) return results;
        const { Docs } = nlp;
        this.forEachNode((node) => {
          const doc = Docs[node];
          if (!doc) {
            results[node] = { measure: 0, extra: [] };
            return;
          }
          const measure = nlp.getAvgSentimentFromDoc(doc);
          results[node] = { measure, extra: [] };
        });
        return results;
      }
      // 'Closeness': (a: string) => {
      //     const paths = graphlib.alg.dijkstra(this, a);
      //     const results: number[] = []
      //     const nNodes = this.nodes().length
      //     const distances = [];
      //     for (const to in paths) {
      //         const dist = paths[to].distance;
      //         if (dist < Infinity) {
      //             distances.push(dist);
      //         }
      //     }
      //     if (distances.length > 0) {
      //         closeness = roundNumber((nNodes - 1) / sum(distances));
      //     } else {
      //         closeness = 0;
      //     }
      //     return results
      // },
    };
    this.app = app;
    this.settings = settings;
  }
  async initGraph() {
    var _a, _b;
    const { resolvedLinks, unresolvedLinks } = this.app.metadataCache;
    const { exclusionRegex, exclusionTags, allFileExtensions, addUnresolved } = this.settings;
    const regex = new RegExp(exclusionRegex, "i");
    let i = 0;
    const includeTag = (tags) => exclusionTags.length === 0 || !tags || tags.findIndex((t) => exclusionTags.includes(t.tag)) === -1;
    const includeRegex = (node) => exclusionRegex === "" || !regex.test(node);
    const includeExt = (node) => allFileExtensions || node.endsWith("md");
    for (const source in resolvedLinks) {
      const tags = (_a = this.app.metadataCache.getCache(source)) == null ? void 0 : _a.tags;
      if (includeTag(tags) && includeRegex(source) && includeExt(source)) {
        if (!this.hasNode(source)) {
          this.addNode(source, { i });
          i++;
        }
        for (const dest in resolvedLinks[source]) {
          const tags2 = (_b = this.app.metadataCache.getCache(dest)) == null ? void 0 : _b.tags;
          if (includeTag(tags2) && includeRegex(dest) && includeExt(dest)) {
            if (!this.hasNode(dest)) {
              this.addNode(dest, { i });
              i++;
            }
            this.addEdge(source, dest, { resolved: true });
          }
        }
      }
    }
    if (addUnresolved) {
      for (const source in unresolvedLinks) {
        if (includeRegex(source)) {
          if (!this.hasNode(source)) {
            this.addNode(source, { i });
            i++;
          }
          for (const dest in unresolvedLinks[source]) {
            const destMD = dest + ".md";
            if (includeRegex(destMD)) {
              if (!this.hasNode(destMD)) {
                this.addNode(destMD, { i });
                i++;
              }
              this.addEdge(source, destMD, { resolved: false });
            }
          }
        }
      }
    }
    return this;
  }
};
function getNLPPlugin(app) {
  var _a;
  const { nlp } = app.plugins.plugins;
  if (!nlp) {
    new import_obsidian6.Notice(
      "The NLP plugin must be installed & enabled to use the \u{1F4AC} algorithms."
    );
    return null;
  } else if (!((_a = nlp == null ? void 0 : nlp.settings) == null ? void 0 : _a.refreshDocsOnLoad)) {
    new import_obsidian6.Notice('In the NLP plugin, enable the setting "Refresh Docs on load".');
    return null;
  } else return nlp;
}

// src/Settings.ts
var import_obsidian8 = require("obsidian");

// src/Components/Checkboxes.svelte
function get_each_context7(ctx, list, i) {
  const child_ctx = ctx.slice();
  child_ctx[10] = list[i];
  return child_ctx;
}
function create_each_block7(ctx) {
  let div;
  let label;
  let input;
  let input_value_value;
  let value_has_changed = false;
  let t0;
  let t1_value = (
    /*option*/
    ctx[10] + ""
  );
  let t1;
  let t2;
  let binding_group;
  let mounted;
  let dispose;
  binding_group = init_binding_group(
    /*$$binding_groups*/
    ctx[8][0]
  );
  return {
    c() {
      div = element("div");
      label = element("label");
      input = element("input");
      t0 = space();
      t1 = text(t1_value);
      t2 = space();
      attr(input, "type", "checkbox");
      input.__value = input_value_value = /*option*/
      ctx[10];
      set_input_value(input, input.__value);
      binding_group.p(input);
    },
    m(target, anchor) {
      insert(target, div, anchor);
      append(div, label);
      append(label, input);
      input.checked = ~/*selected*/
      (ctx[1] || []).indexOf(input.__value);
      append(label, t0);
      append(label, t1);
      append(div, t2);
      if (!mounted) {
        dispose = [
          listen(
            input,
            "change",
            /*input_change_handler*/
            ctx[7]
          ),
          listen(
            input,
            "change",
            /*change_handler*/
            ctx[9]
          )
        ];
        mounted = true;
      }
    },
    p(ctx2, dirty) {
      if (dirty & /*options*/
      1 && input_value_value !== (input_value_value = /*option*/
      ctx2[10])) {
        input.__value = input_value_value;
        set_input_value(input, input.__value);
        value_has_changed = true;
      }
      if (value_has_changed || dirty & /*selected, options*/
      3) {
        input.checked = ~/*selected*/
        (ctx2[1] || []).indexOf(input.__value);
      }
      if (dirty & /*options*/
      1 && t1_value !== (t1_value = /*option*/
      ctx2[10] + "")) set_data(t1, t1_value);
    },
    d(detaching) {
      if (detaching) {
        detach(div);
      }
      binding_group.r();
      mounted = false;
      run_all(dispose);
    }
  };
}
function create_fragment40(ctx) {
  let div0;
  let button;
  let t0;
  let t1_value = (
    /*toNone*/
    ctx[2] ? "None" : "All"
  );
  let t1;
  let t2;
  let div1;
  let mounted;
  let dispose;
  let each_value = ensure_array_like(
    /*options*/
    ctx[0]
  );
  let each_blocks = [];
  for (let i = 0; i < each_value.length; i += 1) {
    each_blocks[i] = create_each_block7(get_each_context7(ctx, each_value, i));
  }
  return {
    c() {
      div0 = element("div");
      button = element("button");
      t0 = text("Select ");
      t1 = text(t1_value);
      t2 = space();
      div1 = element("div");
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].c();
      }
      attr(div1, "class", "grid svelte-x906hs");
    },
    m(target, anchor) {
      insert(target, div0, anchor);
      append(div0, button);
      append(button, t0);
      append(button, t1);
      insert(target, t2, anchor);
      insert(target, div1, anchor);
      for (let i = 0; i < each_blocks.length; i += 1) {
        if (each_blocks[i]) {
          each_blocks[i].m(div1, null);
        }
      }
      if (!mounted) {
        dispose = listen(
          button,
          "click",
          /*click_handler*/
          ctx[6]
        );
        mounted = true;
      }
    },
    p(ctx2, [dirty]) {
      if (dirty & /*toNone*/
      4 && t1_value !== (t1_value = /*toNone*/
      ctx2[2] ? "None" : "All")) set_data(t1, t1_value);
      if (dirty & /*options, selected, save*/
      11) {
        each_value = ensure_array_like(
          /*options*/
          ctx2[0]
        );
        let i;
        for (i = 0; i < each_value.length; i += 1) {
          const child_ctx = get_each_context7(ctx2, each_value, i);
          if (each_blocks[i]) {
            each_blocks[i].p(child_ctx, dirty);
          } else {
            each_blocks[i] = create_each_block7(child_ctx);
            each_blocks[i].c();
            each_blocks[i].m(div1, null);
          }
        }
        for (; i < each_blocks.length; i += 1) {
          each_blocks[i].d(1);
        }
        each_blocks.length = each_value.length;
      }
    },
    i: noop,
    o: noop,
    d(detaching) {
      if (detaching) {
        detach(div0);
        detach(t2);
        detach(div1);
      }
      destroy_each(each_blocks, detaching);
      mounted = false;
      dispose();
    }
  };
}
function instance40($$self, $$props, $$invalidate) {
  let { plugin } = $$props;
  let { settingName } = $$props;
  let { options } = $$props;
  let selected = plugin.settings[settingName];
  let toNone = selected.length === 0 ? false : true;
  function save() {
    return __awaiter(this, void 0, void 0, function* () {
      if (plugin.settings[settingName] === void 0) {
        return console.log(settingName + " not found in BC settings");
      }
      $$invalidate(4, plugin.settings[settingName] = selected, plugin);
      yield plugin.saveSettings();
    });
  }
  const $$binding_groups = [[]];
  const click_handler = async () => {
    if (toNone) $$invalidate(1, selected = []);
    else $$invalidate(1, selected = options);
    await save();
  };
  function input_change_handler() {
    selected = get_binding_group_value($$binding_groups[0], this.__value, this.checked);
    $$invalidate(1, selected);
  }
  const change_handler = async () => save();
  $$self.$$set = ($$props2) => {
    if ("plugin" in $$props2) $$invalidate(4, plugin = $$props2.plugin);
    if ("settingName" in $$props2) $$invalidate(5, settingName = $$props2.settingName);
    if ("options" in $$props2) $$invalidate(0, options = $$props2.options);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*selected*/
    2) {
      $: $$invalidate(2, toNone = selected.length === 0 ? false : true);
    }
  };
  return [
    options,
    selected,
    toNone,
    save,
    plugin,
    settingName,
    click_handler,
    input_change_handler,
    $$binding_groups,
    change_handler
  ];
}
var Checkboxes = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance40, create_fragment40, safe_not_equal, { plugin: 4, settingName: 5, options: 0 });
  }
};
var Checkboxes_default = Checkboxes;

// src/Settings.ts
var SampleSettingTab = class extends import_obsidian8.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const plugin = this.plugin;
    let { containerEl } = this;
    const { settings } = plugin;
    containerEl.empty();
    containerEl.createEl("h3", { text: "Analysis Defaults" });
    new import_obsidian8.Setting(containerEl).setName("Default Analysis Type").setDesc("Which analysis type to show on startup").addDropdown((dd) => {
      dd.setValue(settings.defaultSubtypeType);
      const dict = {};
      settings.algsToShow.forEach((subtype) => {
        dict[subtype] = subtype;
      });
      dd.addOptions(dict).onChange(async (option) => {
        settings.defaultSubtypeType = option;
        await plugin.saveSettings();
      });
    });
    containerEl.createEl("h3", { text: "Algorithms to Show" });
    new Checkboxes_default({
      target: containerEl,
      props: {
        options: ANALYSIS_TYPES.map((type) => type.subtype),
        plugin,
        settingName: "algsToShow"
      }
    });
    new import_obsidian8.Setting(containerEl).setName("Exclude Infinity").setDesc("Whether to exclude Infinite values by default").addToggle(
      (toggle) => toggle.setValue(settings.noInfinity).onChange(async (value) => {
        settings.noInfinity = value;
        await plugin.saveSettings();
      })
    );
    new import_obsidian8.Setting(containerEl).setName("Exclude Zero").setDesc("Whether to exclude Zero by default").addToggle(
      (toggle) => toggle.setValue(settings.noZero).onChange(async (value) => {
        settings.noZero = value;
        await plugin.saveSettings();
      })
    );
    new import_obsidian8.Setting(containerEl).setName("Include All File Extensions").setDesc(
      "Whether to also show files with non-md extensions in the analyses."
    ).addToggle(
      (toggle) => toggle.setValue(settings.allFileExtensions).onChange(async (value) => {
        settings.allFileExtensions = value;
        await plugin.saveSettings();
      })
    );
    new import_obsidian8.Setting(containerEl).setName("Show Thumbnails for Images").setDesc(
      "Whether to show small thumbnails for images (if all file extensions are included)."
    ).addToggle(
      (toggle) => toggle.setValue(settings.showImgThumbnails).onChange(async (value) => {
        settings.showImgThumbnails = value;
        await plugin.saveSettings();
      })
    );
    new import_obsidian8.Setting(containerEl).setName("Include tags (Co-Citations)").setDesc(
      "Whether to also show the tags that are co-cited in the co-citations algorithm."
    ).addToggle(
      (toggle) => toggle.setValue(settings.coTags).onChange(async (value) => {
        settings.coTags = value;
        await plugin.saveSettings();
      })
    );
    new import_obsidian8.Setting(containerEl).setName("Include Unresolved Links").setDesc("Whether to also show links that have not yet been created.").addToggle(
      (toggle) => toggle.setValue(settings.addUnresolved).onChange(async (value) => {
        settings.addUnresolved = value;
        await plugin.saveSettings();
      })
    );
    new import_obsidian8.Setting(containerEl).setName("Exclusion Tags").setDesc(
      "A comma-separated list of tags. Any note with any of these tags won't be included in the graph. Include the `#` in each tag"
    ).addText((tc) => {
      tc.setValue(settings.exclusionTags.join(", "));
      tc.inputEl.onblur = async () => {
        const { value } = tc.inputEl;
        const splits = value.split(",").map((s) => s.trim());
        if (value !== "" && !splits.every((t) => t.startsWith("#"))) {
          new import_obsidian8.Notice("Every tag must start with '#'");
          return;
        }
        settings.exclusionTags = splits;
        await plugin.saveSettings();
      };
    });
    new import_obsidian8.Setting(containerEl).setName("Exclusion Regex").setDesc(
      createFragment((el) => {
        el.createEl("p", {
          text: "Regex to exclude values from analysis. If a file name matches this regex, it won't be added to the graph."
        });
        const span = el.createSpan();
        span.createSpan({ text: "Default is " });
        span.createEl("code", { text: "(?:)" });
        span.createSpan({ text: " or " });
        span.createEl("code", { text: "''" });
        span.createSpan({
          text: " (empty string). Either option will allow all notes through the filter (regular Graph Anlaysis behaviour)."
        });
        el.createEl("p", {
          text: 'Remeber that the regex will be tested against the full file path of each note (not just the basename). So you may need to include "folders/" and ".md" for some regexes.'
        });
      })
    ).addText((textComp) => {
      textComp.setValue(settings.exclusionRegex);
      textComp.inputEl.onblur = async () => {
        const value = textComp.getValue();
        try {
          new RegExp(value);
          settings.exclusionRegex = value;
          await plugin.saveSettings();
          await this.plugin.refreshGraph();
        } catch (e) {
          new import_obsidian8.Notice(
            `${value} is not a valid regular expression. Make sure you have closed all brackets, and escaped any characters where necessary.`
          );
        }
      };
    });
    containerEl.createEl("h3", { text: "Debugging Options" });
    new import_obsidian8.Setting(containerEl).setName("Debug Mode").setDesc(
      "Toggling this on will enable a few console logs to appear when using the graph analysis view."
    ).addToggle(
      (toggle) => toggle.setValue(settings.debugMode).onChange(async (value) => {
        settings.debugMode = value;
        await plugin.saveSettings();
      })
    );
    new import_obsidian8.Setting(containerEl).setName("Super Debug Mode").setDesc("Toggling this on will enable ALOT of console logs").addToggle(
      (toggle) => toggle.setValue(settings.superDebugMode).onChange(async (value) => {
        settings.superDebugMode = value;
        await plugin.saveSettings();
      })
    );
  }
};

// src/main.ts
var GraphAnalysisPlugin = class extends import_obsidian9.Plugin {
  constructor() {
    super(...arguments);
    this.getCurrentView = async (openIfNot = true) => {
      var _a, _b;
      const view = (_b = (_a = this.app.workspace.getLeavesOfType(
        VIEW_TYPE_GRAPH_ANALYSIS
      )) == null ? void 0 : _a[0]) == null ? void 0 : _b.view;
      if (view) return view;
      else if (openIfNot) {
        return await openView(this.app, VIEW_TYPE_GRAPH_ANALYSIS, AnalysisView);
      } else return null;
    };
  }
  async onload() {
    console.log("loading graph analysis plugin");
    await this.loadSettings();
    (0, import_obsidian9.addIcon)("GA-ICON", iconSVG);
    this.addCommand({
      id: "show-graph-analysis-view",
      name: "Open Graph Analysis View",
      checkCallback: (checking) => {
        let checkResult = this.app.workspace.getLeavesOfType(VIEW_TYPE_GRAPH_ANALYSIS).length === 0;
        if (checkResult) {
          if (!checking) {
            openView(this.app, VIEW_TYPE_GRAPH_ANALYSIS, AnalysisView);
          }
          return true;
        }
      }
    });
    this.addCommand({
      id: "refresh-analysis-view",
      name: "Refresh Graph Analysis View",
      callback: async () => {
        await this.refreshGraph();
        const currView = await this.getCurrentView();
        await currView.draw(currView.currSubtype);
      }
    });
    ANALYSIS_TYPES.forEach((sub) => {
      this.addCommand({
        id: `open-${sub.subtype}`,
        name: `Open ${sub.subtype}`,
        callback: async () => {
          const currView = await this.getCurrentView();
          await currView.draw(sub.subtype);
        }
      });
    });
    this.addSettingTab(new SampleSettingTab(this.app, this));
    this.registerView(
      VIEW_TYPE_GRAPH_ANALYSIS,
      (leaf) => new AnalysisView(leaf, this, null)
    );
    this.app.workspace.onLayoutReady(async () => {
      const noFiles = this.app.vault.getMarkdownFiles().length;
      while (!this.resolvedLinksComplete(noFiles)) {
        await wait(1e3);
      }
      await this.refreshGraph();
      await openView(this.app, VIEW_TYPE_GRAPH_ANALYSIS, AnalysisView);
    });
  }
  resolvedLinksComplete(noFiles) {
    const { resolvedLinks } = this.app.metadataCache;
    return Object.keys(resolvedLinks).length === noFiles;
  }
  async refreshGraph() {
    try {
      console.time("Initialise Graph");
      this.g = new MyGraph(this.app, this.settings);
      await this.g.initGraph();
      debug(this.settings, { g: this.g });
      console.timeEnd("Initialise Graph");
      new import_obsidian9.Notice("Index Refreshed");
    } catch (error) {
      console.log(error);
      new import_obsidian9.Notice(
        "An error occured with Graph Analysis, please check the console."
      );
    }
  }
  onunload() {
    console.log("unloading graph analysis plugin");
    this.app.workspace.getLeavesOfType(VIEW_TYPE_GRAPH_ANALYSIS).forEach((leaf) => {
      leaf.view.unload();
      leaf.detach();
    });
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};
/*! Bundled license information:

feather-icons/dist/feather.js:
  (*!
    Copyright (c) 2016 Jed Watson.
    Licensed under the MIT License (MIT), see
    http://jedwatson.github.io/classnames
  *)
*/
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsid2VicGFjazovL2ZlYXRoZXIvd2VicGFjay91bml2ZXJzYWxNb2R1bGVEZWZpbml0aW9uIiwgIndlYnBhY2s6Ly9mZWF0aGVyL3dlYnBhY2svYm9vdHN0cmFwIiwgIndlYnBhY2s6Ly9mZWF0aGVyL25vZGVfbW9kdWxlcy9jbGFzc25hbWVzL2RlZHVwZS5qcyIsICJ3ZWJwYWNrOi8vZmVhdGhlci9ub2RlX21vZHVsZXMvY29yZS1qcy9lcy9hcnJheS9mcm9tLmpzIiwgIndlYnBhY2s6Ly9mZWF0aGVyL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9hLWZ1bmN0aW9uLmpzIiwgIndlYnBhY2s6Ly9mZWF0aGVyL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9hbi1vYmplY3QuanMiLCAid2VicGFjazovL2ZlYXRoZXIvbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2FycmF5LWZyb20uanMiLCAid2VicGFjazovL2ZlYXRoZXIvbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2FycmF5LWluY2x1ZGVzLmpzIiwgIndlYnBhY2s6Ly9mZWF0aGVyL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9iaW5kLWNvbnRleHQuanMiLCAid2VicGFjazovL2ZlYXRoZXIvbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2NhbGwtd2l0aC1zYWZlLWl0ZXJhdGlvbi1jbG9zaW5nLmpzIiwgIndlYnBhY2s6Ly9mZWF0aGVyL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9jaGVjay1jb3JyZWN0bmVzcy1vZi1pdGVyYXRpb24uanMiLCAid2VicGFjazovL2ZlYXRoZXIvbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2NsYXNzb2YtcmF3LmpzIiwgIndlYnBhY2s6Ly9mZWF0aGVyL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9jbGFzc29mLmpzIiwgIndlYnBhY2s6Ly9mZWF0aGVyL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9jb3B5LWNvbnN0cnVjdG9yLXByb3BlcnRpZXMuanMiLCAid2VicGFjazovL2ZlYXRoZXIvbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2NvcnJlY3QtcHJvdG90eXBlLWdldHRlci5qcyIsICJ3ZWJwYWNrOi8vZmVhdGhlci9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvY3JlYXRlLWl0ZXJhdG9yLWNvbnN0cnVjdG9yLmpzIiwgIndlYnBhY2s6Ly9mZWF0aGVyL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9jcmVhdGUtcHJvcGVydHktZGVzY3JpcHRvci5qcyIsICJ3ZWJwYWNrOi8vZmVhdGhlci9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvY3JlYXRlLXByb3BlcnR5LmpzIiwgIndlYnBhY2s6Ly9mZWF0aGVyL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9kZWZpbmUtaXRlcmF0b3IuanMiLCAid2VicGFjazovL2ZlYXRoZXIvbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2Rlc2NyaXB0b3JzLmpzIiwgIndlYnBhY2s6Ly9mZWF0aGVyL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9kb2N1bWVudC1jcmVhdGUtZWxlbWVudC5qcyIsICJ3ZWJwYWNrOi8vZmVhdGhlci9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZW51bS1idWcta2V5cy5qcyIsICJ3ZWJwYWNrOi8vZmVhdGhlci9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZXhwb3J0LmpzIiwgIndlYnBhY2s6Ly9mZWF0aGVyL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9mYWlscy5qcyIsICJ3ZWJwYWNrOi8vZmVhdGhlci9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZnVuY3Rpb24tdG8tc3RyaW5nLmpzIiwgIndlYnBhY2s6Ly9mZWF0aGVyL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9nZXQtaXRlcmF0b3ItbWV0aG9kLmpzIiwgIndlYnBhY2s6Ly9mZWF0aGVyL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9nbG9iYWwuanMiLCAid2VicGFjazovL2ZlYXRoZXIvbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2hhcy5qcyIsICJ3ZWJwYWNrOi8vZmVhdGhlci9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaGlkZGVuLWtleXMuanMiLCAid2VicGFjazovL2ZlYXRoZXIvbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2hpZGUuanMiLCAid2VicGFjazovL2ZlYXRoZXIvbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2h0bWwuanMiLCAid2VicGFjazovL2ZlYXRoZXIvbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2llOC1kb20tZGVmaW5lLmpzIiwgIndlYnBhY2s6Ly9mZWF0aGVyL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9pbmRleGVkLW9iamVjdC5qcyIsICJ3ZWJwYWNrOi8vZmVhdGhlci9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaW50ZXJuYWwtc3RhdGUuanMiLCAid2VicGFjazovL2ZlYXRoZXIvbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2lzLWFycmF5LWl0ZXJhdG9yLW1ldGhvZC5qcyIsICJ3ZWJwYWNrOi8vZmVhdGhlci9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaXMtZm9yY2VkLmpzIiwgIndlYnBhY2s6Ly9mZWF0aGVyL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9pcy1vYmplY3QuanMiLCAid2VicGFjazovL2ZlYXRoZXIvbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2lzLXB1cmUuanMiLCAid2VicGFjazovL2ZlYXRoZXIvbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2l0ZXJhdG9ycy1jb3JlLmpzIiwgIndlYnBhY2s6Ly9mZWF0aGVyL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9pdGVyYXRvcnMuanMiLCAid2VicGFjazovL2ZlYXRoZXIvbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL25hdGl2ZS1zeW1ib2wuanMiLCAid2VicGFjazovL2ZlYXRoZXIvbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL25hdGl2ZS13ZWFrLW1hcC5qcyIsICJ3ZWJwYWNrOi8vZmVhdGhlci9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvb2JqZWN0LWNyZWF0ZS5qcyIsICJ3ZWJwYWNrOi8vZmVhdGhlci9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0aWVzLmpzIiwgIndlYnBhY2s6Ly9mZWF0aGVyL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnR5LmpzIiwgIndlYnBhY2s6Ly9mZWF0aGVyL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yLmpzIiwgIndlYnBhY2s6Ly9mZWF0aGVyL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1uYW1lcy5qcyIsICJ3ZWJwYWNrOi8vZmVhdGhlci9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktc3ltYm9scy5qcyIsICJ3ZWJwYWNrOi8vZmVhdGhlci9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvb2JqZWN0LWdldC1wcm90b3R5cGUtb2YuanMiLCAid2VicGFjazovL2ZlYXRoZXIvbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL29iamVjdC1rZXlzLWludGVybmFsLmpzIiwgIndlYnBhY2s6Ly9mZWF0aGVyL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vYmplY3Qta2V5cy5qcyIsICJ3ZWJwYWNrOi8vZmVhdGhlci9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvb2JqZWN0LXByb3BlcnR5LWlzLWVudW1lcmFibGUuanMiLCAid2VicGFjazovL2ZlYXRoZXIvbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL29iamVjdC1zZXQtcHJvdG90eXBlLW9mLmpzIiwgIndlYnBhY2s6Ly9mZWF0aGVyL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vd24ta2V5cy5qcyIsICJ3ZWJwYWNrOi8vZmVhdGhlci9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvcGF0aC5qcyIsICJ3ZWJwYWNrOi8vZmVhdGhlci9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvcmVkZWZpbmUuanMiLCAid2VicGFjazovL2ZlYXRoZXIvbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3JlcXVpcmUtb2JqZWN0LWNvZXJjaWJsZS5qcyIsICJ3ZWJwYWNrOi8vZmVhdGhlci9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvc2V0LWdsb2JhbC5qcyIsICJ3ZWJwYWNrOi8vZmVhdGhlci9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvc2V0LXRvLXN0cmluZy10YWcuanMiLCAid2VicGFjazovL2ZlYXRoZXIvbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3NoYXJlZC1rZXkuanMiLCAid2VicGFjazovL2ZlYXRoZXIvbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3NoYXJlZC5qcyIsICJ3ZWJwYWNrOi8vZmVhdGhlci9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvc3RyaW5nLWF0LmpzIiwgIndlYnBhY2s6Ly9mZWF0aGVyL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy90by1hYnNvbHV0ZS1pbmRleC5qcyIsICJ3ZWJwYWNrOi8vZmVhdGhlci9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvdG8taW5kZXhlZC1vYmplY3QuanMiLCAid2VicGFjazovL2ZlYXRoZXIvbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3RvLWludGVnZXIuanMiLCAid2VicGFjazovL2ZlYXRoZXIvbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3RvLWxlbmd0aC5qcyIsICJ3ZWJwYWNrOi8vZmVhdGhlci9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvdG8tb2JqZWN0LmpzIiwgIndlYnBhY2s6Ly9mZWF0aGVyL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy90by1wcmltaXRpdmUuanMiLCAid2VicGFjazovL2ZlYXRoZXIvbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3VpZC5qcyIsICJ3ZWJwYWNrOi8vZmVhdGhlci9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvdmFsaWRhdGUtc2V0LXByb3RvdHlwZS1vZi1hcmd1bWVudHMuanMiLCAid2VicGFjazovL2ZlYXRoZXIvbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sLmpzIiwgIndlYnBhY2s6Ly9mZWF0aGVyL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZnJvbS5qcyIsICJ3ZWJwYWNrOi8vZmVhdGhlci9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnN0cmluZy5pdGVyYXRvci5qcyIsICJ3ZWJwYWNrOi8vZmVhdGhlci8od2VicGFjaykvYnVpbGRpbi9nbG9iYWwuanMiLCAid2VicGFjazovL2ZlYXRoZXIvc3JjL2ljb24uanMiLCAid2VicGFjazovL2ZlYXRoZXIvc3JjL2ljb25zLmpzIiwgIndlYnBhY2s6Ly9mZWF0aGVyL3NyYy9pbmRleC5qcyIsICJ3ZWJwYWNrOi8vZmVhdGhlci9zcmMvcmVwbGFjZS5qcyIsICJ3ZWJwYWNrOi8vZmVhdGhlci9zcmMvdG8tc3ZnLmpzIiwgIm5vZGVfbW9kdWxlcy8ucG5wbS9ncmFwaG9sb2d5QDAuMjMuMl9ncmFwaG9sb2d5LXR5cGVzQDAuMjQuOC9ub2RlX21vZHVsZXMvZ3JhcGhvbG9neS9kaXN0L2dyYXBob2xvZ3kudW1kLm1pbi5qcyIsICJub2RlX21vZHVsZXMvLnBucG0vZ3JhcGhvbG9neS11dGlsc0AyLjUuMl9ncmFwaG9sb2d5LXR5cGVzQDAuMjQuOC9ub2RlX21vZHVsZXMvZ3JhcGhvbG9neS11dGlscy9kZWZhdWx0cy5qcyIsICJub2RlX21vZHVsZXMvLnBucG0vZ3JhcGhvbG9neS11dGlsc0AyLjUuMl9ncmFwaG9sb2d5LXR5cGVzQDAuMjQuOC9ub2RlX21vZHVsZXMvZ3JhcGhvbG9neS11dGlscy9pcy1ncmFwaC5qcyIsICJub2RlX21vZHVsZXMvLnBucG0vZ3JhcGhvbG9neS11dGlsc0AyLjUuMl9ncmFwaG9sb2d5LXR5cGVzQDAuMjQuOC9ub2RlX21vZHVsZXMvZ3JhcGhvbG9neS11dGlscy9pbmZlci10eXBlLmpzIiwgIm5vZGVfbW9kdWxlcy8ucG5wbS9vYmxpdGVyYXRvckAyLjAuNS9ub2RlX21vZHVsZXMvb2JsaXRlcmF0b3IvaXRlcmF0b3IuanMiLCAibm9kZV9tb2R1bGVzLy5wbnBtL21uZW1vbmlzdEAwLjM4LjUvbm9kZV9tb2R1bGVzL21uZW1vbmlzdC91dGlscy90eXBlZC1hcnJheXMuanMiLCAibm9kZV9tb2R1bGVzLy5wbnBtL21uZW1vbmlzdEAwLjM4LjUvbm9kZV9tb2R1bGVzL21uZW1vbmlzdC9zcGFyc2UtbWFwLmpzIiwgIm5vZGVfbW9kdWxlcy8ucG5wbS9tbmVtb25pc3RAMC4zOC41L25vZGVfbW9kdWxlcy9tbmVtb25pc3Qvc3BhcnNlLXF1ZXVlLXNldC5qcyIsICJub2RlX21vZHVsZXMvLnBucG0vcGFuZGVtb25pdW1AMi40LjEvbm9kZV9tb2R1bGVzL3BhbmRlbW9uaXVtL3JhbmRvbS1pbmRleC5qcyIsICJub2RlX21vZHVsZXMvLnBucG0vbW5lbW9uaXN0QDAuMzkuOC9ub2RlX21vZHVsZXMvbW5lbW9uaXN0L3V0aWxzL3R5cGVkLWFycmF5cy5qcyIsICJub2RlX21vZHVsZXMvLnBucG0vZ3JhcGhvbG9neS11dGlsc0AyLjUuMl9ncmFwaG9sb2d5LXR5cGVzQDAuMjQuOC9ub2RlX21vZHVsZXMvZ3JhcGhvbG9neS11dGlscy9nZXR0ZXJzLmpzIiwgIm5vZGVfbW9kdWxlcy8ucG5wbS9ncmFwaG9sb2d5LWluZGljZXNAMC4xNi42X2dyYXBob2xvZ3ktdHlwZXNAMC4yNC44L25vZGVfbW9kdWxlcy9ncmFwaG9sb2d5LWluZGljZXMvbG91dmFpbi5qcyIsICJub2RlX21vZHVsZXMvLnBucG0vZ3JhcGhvbG9neS1jb21tdW5pdGllcy1sb3V2YWluQDEuNS4zX2dyYXBob2xvZ3ktdHlwZXNAMC4yNC44L25vZGVfbW9kdWxlcy9ncmFwaG9sb2d5LWNvbW11bml0aWVzLWxvdXZhaW4vaW5kZXguanMiLCAibm9kZV9tb2R1bGVzLy5wbnBtL2dyYXBob2xvZ3ktbWV0cmljc0AxLjE4LjJfZ3JhcGhvbG9neS10eXBlc0AwLjI0Ljgvbm9kZV9tb2R1bGVzL2dyYXBob2xvZ3ktbWV0cmljcy9jZW50cmFsaXR5L2hpdHMuanMiLCAibm9kZV9tb2R1bGVzLy5wbnBtL3NiZEAxLjAuMTkvbm9kZV9tb2R1bGVzL3NiZC9saWIvc2FuaXRpemUtaHRtbC1icm93c2VyLmpzIiwgIm5vZGVfbW9kdWxlcy8ucG5wbS9zYmRAMS4wLjE5L25vZGVfbW9kdWxlcy9zYmQvbGliL3N0cmluZ0hlbHBlci5qcyIsICJub2RlX21vZHVsZXMvLnBucG0vc2JkQDEuMC4xOS9ub2RlX21vZHVsZXMvc2JkL2xpYi9NYXRjaC5qcyIsICJub2RlX21vZHVsZXMvLnBucG0vc2JkQDEuMC4xOS9ub2RlX21vZHVsZXMvc2JkL2xpYi90b2tlbml6ZXIuanMiLCAibm9kZV9tb2R1bGVzLy5wbnBtL3dpbmstbmxwQDEuMTQuMy9ub2RlX21vZHVsZXMvd2luay1ubHAvdXRpbGl0aWVzL3NpbWlsYXJpdHkuanMiLCAic3JjL21haW4udHMiLCAibm9kZV9tb2R1bGVzLy5wbnBtL29ic2lkaWFuLWNvbW11bml0eS1saWJAMS4yLjAvbm9kZV9tb2R1bGVzL29ic2lkaWFuLWNvbW11bml0eS1saWIvZGlzdC91dGlscy5qcyIsICJzcmMvQW5hbHlzaXNWaWV3LnRzIiwgInNyYy9Db25zdGFudHMudHMiLCAibm9kZV9tb2R1bGVzLy5wbnBtL3N2ZWx0ZUA0LjIuMjAvbm9kZV9tb2R1bGVzL3N2ZWx0ZS9zcmMvcnVudGltZS9pbnRlcm5hbC91dGlscy5qcyIsICJub2RlX21vZHVsZXMvLnBucG0vc3ZlbHRlQDQuMi4yMC9ub2RlX21vZHVsZXMvc3ZlbHRlL3NyYy9ydW50aW1lL2ludGVybmFsL2dsb2JhbHMuanMiLCAibm9kZV9tb2R1bGVzLy5wbnBtL3N2ZWx0ZUA0LjIuMjAvbm9kZV9tb2R1bGVzL3N2ZWx0ZS9zcmMvcnVudGltZS9pbnRlcm5hbC9SZXNpemVPYnNlcnZlclNpbmdsZXRvbi5qcyIsICJub2RlX21vZHVsZXMvLnBucG0vc3ZlbHRlQDQuMi4yMC9ub2RlX21vZHVsZXMvc3ZlbHRlL3NyYy9ydW50aW1lL2ludGVybmFsL2RvbS5qcyIsICJub2RlX21vZHVsZXMvLnBucG0vc3ZlbHRlQDQuMi4yMC9ub2RlX21vZHVsZXMvc3ZlbHRlL3NyYy9ydW50aW1lL2ludGVybmFsL2xpZmVjeWNsZS5qcyIsICJub2RlX21vZHVsZXMvLnBucG0vc3ZlbHRlQDQuMi4yMC9ub2RlX21vZHVsZXMvc3ZlbHRlL3NyYy9ydW50aW1lL2ludGVybmFsL3NjaGVkdWxlci5qcyIsICJub2RlX21vZHVsZXMvLnBucG0vc3ZlbHRlQDQuMi4yMC9ub2RlX21vZHVsZXMvc3ZlbHRlL3NyYy9ydW50aW1lL2ludGVybmFsL3RyYW5zaXRpb25zLmpzIiwgIm5vZGVfbW9kdWxlcy8ucG5wbS9zdmVsdGVANC4yLjIwL25vZGVfbW9kdWxlcy9zdmVsdGUvc3JjL3J1bnRpbWUvaW50ZXJuYWwvYXdhaXRfYmxvY2suanMiLCAibm9kZV9tb2R1bGVzLy5wbnBtL3N2ZWx0ZUA0LjIuMjAvbm9kZV9tb2R1bGVzL3N2ZWx0ZS9zcmMvcnVudGltZS9pbnRlcm5hbC9lYWNoLmpzIiwgIm5vZGVfbW9kdWxlcy8ucG5wbS9zdmVsdGVANC4yLjIwL25vZGVfbW9kdWxlcy9zdmVsdGUvc3JjL3J1bnRpbWUvaW50ZXJuYWwvc3ByZWFkLmpzIiwgIm5vZGVfbW9kdWxlcy8ucG5wbS9zdmVsdGVANC4yLjIwL25vZGVfbW9kdWxlcy9zdmVsdGUvc3JjL3NoYXJlZC9ib29sZWFuX2F0dHJpYnV0ZXMuanMiLCAibm9kZV9tb2R1bGVzLy5wbnBtL3N2ZWx0ZUA0LjIuMjAvbm9kZV9tb2R1bGVzL3N2ZWx0ZS9zcmMvcnVudGltZS9pbnRlcm5hbC9Db21wb25lbnQuanMiLCAibm9kZV9tb2R1bGVzLy5wbnBtL3N2ZWx0ZUA0LjIuMjAvbm9kZV9tb2R1bGVzL3N2ZWx0ZS9zcmMvc2hhcmVkL3ZlcnNpb24uanMiLCAibm9kZV9tb2R1bGVzLy5wbnBtL3N2ZWx0ZUA0LjIuMjAvbm9kZV9tb2R1bGVzL3N2ZWx0ZS9zcmMvcnVudGltZS9pbnRlcm5hbC9kaXNjbG9zZS12ZXJzaW9uL2luZGV4LmpzIiwgInNyYy9VdGlsaXR5LnRzIiwgInNyYy9JbnRlcmZhY2VzLnRzIiwgIm5vZGVfbW9kdWxlcy8ucG5wbS9zdmVsdGUtaWNvbnNAMi4xLjAvbm9kZV9tb2R1bGVzL3N2ZWx0ZS1pY29ucy9jb21wb25lbnRzL0ljb25CYXNlLnN2ZWx0ZSIsICJub2RlX21vZHVsZXMvLnBucG0vc3ZlbHRlLWljb25zQDIuMS4wL25vZGVfbW9kdWxlcy9zdmVsdGUtaWNvbnMvZmEvRmFMaW5rLnN2ZWx0ZSIsICJub2RlX21vZHVsZXMvLnBucG0vc3ZlbHRlLWluZmluaXRlLXNjcm9sbEAyLjAuMS9ub2RlX21vZHVsZXMvc3ZlbHRlLWluZmluaXRlLXNjcm9sbC9kaXN0L2luZGV4Lm1qcyIsICJub2RlX21vZHVsZXMvLnBucG0vc3ZlbHRlLWljb25zQDIuMS4wL25vZGVfbW9kdWxlcy9zdmVsdGUtaWNvbnMvZGkvRGlIdG1sNS5zdmVsdGUiLCAibm9kZV9tb2R1bGVzLy5wbnBtL3N2ZWx0ZS1pY29uc0AyLjEuMC9ub2RlX21vZHVsZXMvc3ZlbHRlLWljb25zL2ZhL0ZhRmlsZS5zdmVsdGUiLCAibm9kZV9tb2R1bGVzLy5wbnBtL3N2ZWx0ZS1pY29uc0AyLjEuMC9ub2RlX21vZHVsZXMvc3ZlbHRlLWljb25zL2ZhL0ZhRmlsZUF1ZGlvLnN2ZWx0ZSIsICJub2RlX21vZHVsZXMvLnBucG0vc3ZlbHRlLWljb25zQDIuMS4wL25vZGVfbW9kdWxlcy9zdmVsdGUtaWNvbnMvZmEvRmFGaWxlQ29kZS5zdmVsdGUiLCAibm9kZV9tb2R1bGVzLy5wbnBtL3N2ZWx0ZS1pY29uc0AyLjEuMC9ub2RlX21vZHVsZXMvc3ZlbHRlLWljb25zL2ZhL0ZhRmlsZUNzdi5zdmVsdGUiLCAibm9kZV9tb2R1bGVzLy5wbnBtL3N2ZWx0ZS1pY29uc0AyLjEuMC9ub2RlX21vZHVsZXMvc3ZlbHRlLWljb25zL2ZhL0ZhRmlsZUV4Y2VsLnN2ZWx0ZSIsICJub2RlX21vZHVsZXMvLnBucG0vc3ZlbHRlLWljb25zQDIuMS4wL25vZGVfbW9kdWxlcy9zdmVsdGUtaWNvbnMvZmEvRmFGaWxlSW1hZ2Uuc3ZlbHRlIiwgIm5vZGVfbW9kdWxlcy8ucG5wbS9zdmVsdGUtaWNvbnNAMi4xLjAvbm9kZV9tb2R1bGVzL3N2ZWx0ZS1pY29ucy9mYS9GYUZpbGVQZGYuc3ZlbHRlIiwgIm5vZGVfbW9kdWxlcy8ucG5wbS9zdmVsdGUtaWNvbnNAMi4xLjAvbm9kZV9tb2R1bGVzL3N2ZWx0ZS1pY29ucy9mYS9GYUZpbGVQb3dlcnBvaW50LnN2ZWx0ZSIsICJub2RlX21vZHVsZXMvLnBucG0vc3ZlbHRlLWljb25zQDIuMS4wL25vZGVfbW9kdWxlcy9zdmVsdGUtaWNvbnMvZmEvRmFGaWxlVmlkZW8uc3ZlbHRlIiwgIm5vZGVfbW9kdWxlcy8ucG5wbS9zdmVsdGUtaWNvbnNAMi4xLjAvbm9kZV9tb2R1bGVzL3N2ZWx0ZS1pY29ucy9mYS9GYUZpbGVXb3JkLnN2ZWx0ZSIsICJub2RlX21vZHVsZXMvLnBucG0vc3ZlbHRlLWljb25zQDIuMS4wL25vZGVfbW9kdWxlcy9zdmVsdGUtaWNvbnMvZmEvRmFTdGlja3lOb3RlLnN2ZWx0ZSIsICJzcmMvQ29tcG9uZW50cy9FeHRlbnNpb25JY29uLnN2ZWx0ZSIsICJzcmMvQ29tcG9uZW50cy9JbWdUaHVtYm5haWwuc3ZlbHRlIiwgIm5vZGVfbW9kdWxlcy8ucG5wbS9zdmVsdGUtaWNvbnNAMi4xLjAvbm9kZV9tb2R1bGVzL3N2ZWx0ZS1pY29ucy9mYS9GYUNyZWF0aXZlQ29tbW9uc1plcm8uc3ZlbHRlIiwgIm5vZGVfbW9kdWxlcy8ucG5wbS9zdmVsdGUtaWNvbnNAMi4xLjAvbm9kZV9tb2R1bGVzL3N2ZWx0ZS1pY29ucy9mYS9GYUZpcmUuc3ZlbHRlIiwgIm5vZGVfbW9kdWxlcy8ucG5wbS9zdmVsdGUtaWNvbnNAMi4xLjAvbm9kZV9tb2R1bGVzL3N2ZWx0ZS1pY29ucy9mYS9GYVJlZ1Nub3dmbGFrZS5zdmVsdGUiLCAibm9kZV9tb2R1bGVzLy5wbnBtL3N2ZWx0ZS1pY29uc0AyLjEuMC9ub2RlX21vZHVsZXMvc3ZlbHRlLWljb25zL2lvL0lvSW9zVHJlbmRpbmdEb3duLnN2ZWx0ZSIsICJub2RlX21vZHVsZXMvLnBucG0vc3ZlbHRlLWljb25zQDIuMS4wL25vZGVfbW9kdWxlcy9zdmVsdGUtaWNvbnMvaW8vSW9Jb3NUcmVuZGluZ1VwLnN2ZWx0ZSIsICJub2RlX21vZHVsZXMvLnBucG0vc3ZlbHRlLWljb25zQDIuMS4wL25vZGVfbW9kdWxlcy9zdmVsdGUtaWNvbnMvaW8vSW9NZFJlZnJlc2guc3ZlbHRlIiwgIm5vZGVfbW9kdWxlcy8ucG5wbS9zdmVsdGUtaWNvbnNAMi4xLjAvbm9kZV9tb2R1bGVzL3N2ZWx0ZS1pY29ucy9tZC9NZEV4cG9zdXJlWmVyby5zdmVsdGUiLCAibm9kZV9tb2R1bGVzLy5wbnBtL3N2ZWx0ZS1pY29uc0AyLjEuMC9ub2RlX21vZHVsZXMvc3ZlbHRlLWljb25zL2ZhL0ZhUmVnUXVlc3Rpb25DaXJjbGUuc3ZlbHRlIiwgInNyYy9Db21wb25lbnRzL0luZm9JY29uLnN2ZWx0ZSIsICJub2RlX21vZHVsZXMvLnBucG0vc3ZlbHRlLWljb25zQDIuMS4wL25vZGVfbW9kdWxlcy9zdmVsdGUtaWNvbnMvZ28vR29TaWduT3V0LnN2ZWx0ZSIsICJub2RlX21vZHVsZXMvLnBucG0vc3ZlbHRlLWljb25zQDIuMS4wL25vZGVfbW9kdWxlcy9zdmVsdGUtaWNvbnMvZ28vR29TaWduSW4uc3ZlbHRlIiwgInNyYy9Db21wb25lbnRzL1N1YnR5cGVPcHRpb25zLnN2ZWx0ZSIsICJzcmMvQ29tcG9uZW50cy9Mb3V2YWluLnN2ZWx0ZSIsICJub2RlX21vZHVsZXMvLnBucG0vdHNsaWJAMi44LjEvbm9kZV9tb2R1bGVzL3RzbGliL3RzbGliLmVzNi5tanMiLCAic3JjL0NvbXBvbmVudHMvUmVuZGVyZWRNYXJrZG93bi5zdmVsdGUiLCAic3JjL0NvbXBvbmVudHMvQ29DaXRhdGlvbnMuc3ZlbHRlIiwgInNyYy9Db21wb25lbnRzL0xhYmVsUHJvcGFnYXRpb24uc3ZlbHRlIiwgIm5vZGVfbW9kdWxlcy8ucG5wbS9zdmVsdGUtaWNvbnNAMi4xLjAvbm9kZV9tb2R1bGVzL3N2ZWx0ZS1pY29ucy9mYS9GYUdsb2JlQWZyaWNhLnN2ZWx0ZSIsICJub2RlX21vZHVsZXMvLnBucG0vc3ZlbHRlLWljb25zQDIuMS4wL25vZGVfbW9kdWxlcy9zdmVsdGUtaWNvbnMvaW8vSW9Jb3NDaGF0YnViYmxlcy5zdmVsdGUiLCAic3JjL0NvbXBvbmVudHMvU2Nyb2xsU2VsZWN0b3Iuc3ZlbHRlIiwgInNyYy9Db21wb25lbnRzL1RhYmxlQ29tcG9uZW50LnN2ZWx0ZSIsICJzcmMvQ29tcG9uZW50cy9ISVRTLnN2ZWx0ZSIsICJzcmMvQ29tcG9uZW50cy9BbmFseXNpc0NvbXBvbmVudC5zdmVsdGUiLCAic3JjL015R3JhcGgudHMiLCAic3JjL0dlbmVyYWxHcmFwaEZuLnRzIiwgInNyYy9TZXR0aW5ncy50cyIsICJzcmMvQ29tcG9uZW50cy9DaGVja2JveGVzLnN2ZWx0ZSJdLAogICJzb3VyY2VzQ29udGVudCI6IFsiKGZ1bmN0aW9uIHdlYnBhY2tVbml2ZXJzYWxNb2R1bGVEZWZpbml0aW9uKHJvb3QsIGZhY3RvcnkpIHtcblx0aWYodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgPT09ICdvYmplY3QnKVxuXHRcdG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeSgpO1xuXHRlbHNlIGlmKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZClcblx0XHRkZWZpbmUoW10sIGZhY3RvcnkpO1xuXHRlbHNlIGlmKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0Jylcblx0XHRleHBvcnRzW1wiZmVhdGhlclwiXSA9IGZhY3RvcnkoKTtcblx0ZWxzZVxuXHRcdHJvb3RbXCJmZWF0aGVyXCJdID0gZmFjdG9yeSgpO1xufSkodHlwZW9mIHNlbGYgIT09ICd1bmRlZmluZWQnID8gc2VsZiA6IHRoaXMsIGZ1bmN0aW9uKCkge1xucmV0dXJuICIsICIgXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuIFx0XHR9XG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRpOiBtb2R1bGVJZCxcbiBcdFx0XHRsOiBmYWxzZSxcbiBcdFx0XHRleHBvcnRzOiB7fVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHtcbiBcdFx0XHRcdGNvbmZpZ3VyYWJsZTogZmFsc2UsXG4gXHRcdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuIFx0XHRcdFx0Z2V0OiBnZXR0ZXJcbiBcdFx0XHR9KTtcbiBcdFx0fVxuIFx0fTtcblxuIFx0Ly8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yID0gZnVuY3Rpb24oZXhwb3J0cykge1xuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuIFx0fTtcblxuIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbiBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbiBcdFx0cmV0dXJuIGdldHRlcjtcbiBcdH07XG5cbiBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuXG4gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcblxuXG4gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbiBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IDApO1xuIiwgIi8qIVxuICBDb3B5cmlnaHQgKGMpIDIwMTYgSmVkIFdhdHNvbi5cbiAgTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlIChNSVQpLCBzZWVcbiAgaHR0cDovL2plZHdhdHNvbi5naXRodWIuaW8vY2xhc3NuYW1lc1xuKi9cbi8qIGdsb2JhbCBkZWZpbmUgKi9cblxuKGZ1bmN0aW9uICgpIHtcblx0J3VzZSBzdHJpY3QnO1xuXG5cdHZhciBjbGFzc05hbWVzID0gKGZ1bmN0aW9uICgpIHtcblx0XHQvLyBkb24ndCBpbmhlcml0IGZyb20gT2JqZWN0IHNvIHdlIGNhbiBza2lwIGhhc093blByb3BlcnR5IGNoZWNrIGxhdGVyXG5cdFx0Ly8gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy8xNTUxODMyOC9jcmVhdGluZy1qcy1vYmplY3Qtd2l0aC1vYmplY3QtY3JlYXRlbnVsbCNhbnN3ZXItMjEwNzkyMzJcblx0XHRmdW5jdGlvbiBTdG9yYWdlT2JqZWN0KCkge31cblx0XHRTdG9yYWdlT2JqZWN0LnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG5cblx0XHRmdW5jdGlvbiBfcGFyc2VBcnJheSAocmVzdWx0U2V0LCBhcnJheSkge1xuXHRcdFx0dmFyIGxlbmd0aCA9IGFycmF5Lmxlbmd0aDtcblxuXHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7ICsraSkge1xuXHRcdFx0XHRfcGFyc2UocmVzdWx0U2V0LCBhcnJheVtpXSk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0dmFyIGhhc093biA9IHt9Lmhhc093blByb3BlcnR5O1xuXG5cdFx0ZnVuY3Rpb24gX3BhcnNlTnVtYmVyIChyZXN1bHRTZXQsIG51bSkge1xuXHRcdFx0cmVzdWx0U2V0W251bV0gPSB0cnVlO1xuXHRcdH1cblxuXHRcdGZ1bmN0aW9uIF9wYXJzZU9iamVjdCAocmVzdWx0U2V0LCBvYmplY3QpIHtcblx0XHRcdGZvciAodmFyIGsgaW4gb2JqZWN0KSB7XG5cdFx0XHRcdGlmIChoYXNPd24uY2FsbChvYmplY3QsIGspKSB7XG5cdFx0XHRcdFx0Ly8gc2V0IHZhbHVlIHRvIGZhbHNlIGluc3RlYWQgb2YgZGVsZXRpbmcgaXQgdG8gYXZvaWQgY2hhbmdpbmcgb2JqZWN0IHN0cnVjdHVyZVxuXHRcdFx0XHRcdC8vIGh0dHBzOi8vd3d3LnNtYXNoaW5nbWFnYXppbmUuY29tLzIwMTIvMTEvd3JpdGluZy1mYXN0LW1lbW9yeS1lZmZpY2llbnQtamF2YXNjcmlwdC8jZGUtcmVmZXJlbmNpbmctbWlzY29uY2VwdGlvbnNcblx0XHRcdFx0XHRyZXN1bHRTZXRba10gPSAhIW9iamVjdFtrXTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHZhciBTUEFDRSA9IC9cXHMrLztcblx0XHRmdW5jdGlvbiBfcGFyc2VTdHJpbmcgKHJlc3VsdFNldCwgc3RyKSB7XG5cdFx0XHR2YXIgYXJyYXkgPSBzdHIuc3BsaXQoU1BBQ0UpO1xuXHRcdFx0dmFyIGxlbmd0aCA9IGFycmF5Lmxlbmd0aDtcblxuXHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7ICsraSkge1xuXHRcdFx0XHRyZXN1bHRTZXRbYXJyYXlbaV1dID0gdHJ1ZTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRmdW5jdGlvbiBfcGFyc2UgKHJlc3VsdFNldCwgYXJnKSB7XG5cdFx0XHRpZiAoIWFyZykgcmV0dXJuO1xuXHRcdFx0dmFyIGFyZ1R5cGUgPSB0eXBlb2YgYXJnO1xuXG5cdFx0XHQvLyAnZm9vIGJhcidcblx0XHRcdGlmIChhcmdUeXBlID09PSAnc3RyaW5nJykge1xuXHRcdFx0XHRfcGFyc2VTdHJpbmcocmVzdWx0U2V0LCBhcmcpO1xuXG5cdFx0XHQvLyBbJ2ZvbycsICdiYXInLCAuLi5dXG5cdFx0XHR9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkoYXJnKSkge1xuXHRcdFx0XHRfcGFyc2VBcnJheShyZXN1bHRTZXQsIGFyZyk7XG5cblx0XHRcdC8vIHsgJ2Zvbyc6IHRydWUsIC4uLiB9XG5cdFx0XHR9IGVsc2UgaWYgKGFyZ1R5cGUgPT09ICdvYmplY3QnKSB7XG5cdFx0XHRcdF9wYXJzZU9iamVjdChyZXN1bHRTZXQsIGFyZyk7XG5cblx0XHRcdC8vICcxMzAnXG5cdFx0XHR9IGVsc2UgaWYgKGFyZ1R5cGUgPT09ICdudW1iZXInKSB7XG5cdFx0XHRcdF9wYXJzZU51bWJlcihyZXN1bHRTZXQsIGFyZyk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0ZnVuY3Rpb24gX2NsYXNzTmFtZXMgKCkge1xuXHRcdFx0Ly8gZG9uJ3QgbGVhayBhcmd1bWVudHNcblx0XHRcdC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9wZXRrYWFudG9ub3YvYmx1ZWJpcmQvd2lraS9PcHRpbWl6YXRpb24ta2lsbGVycyMzMi1sZWFraW5nLWFyZ3VtZW50c1xuXHRcdFx0dmFyIGxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG5cdFx0XHR2YXIgYXJncyA9IEFycmF5KGxlbik7XG5cdFx0XHRmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG5cdFx0XHRcdGFyZ3NbaV0gPSBhcmd1bWVudHNbaV07XG5cdFx0XHR9XG5cblx0XHRcdHZhciBjbGFzc1NldCA9IG5ldyBTdG9yYWdlT2JqZWN0KCk7XG5cdFx0XHRfcGFyc2VBcnJheShjbGFzc1NldCwgYXJncyk7XG5cblx0XHRcdHZhciBsaXN0ID0gW107XG5cblx0XHRcdGZvciAodmFyIGsgaW4gY2xhc3NTZXQpIHtcblx0XHRcdFx0aWYgKGNsYXNzU2V0W2tdKSB7XG5cdFx0XHRcdFx0bGlzdC5wdXNoKGspXG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGxpc3Quam9pbignICcpO1xuXHRcdH1cblxuXHRcdHJldHVybiBfY2xhc3NOYW1lcztcblx0fSkoKTtcblxuXHRpZiAodHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcgJiYgbW9kdWxlLmV4cG9ydHMpIHtcblx0XHRtb2R1bGUuZXhwb3J0cyA9IGNsYXNzTmFtZXM7XG5cdH0gZWxzZSBpZiAodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgZGVmaW5lLmFtZCA9PT0gJ29iamVjdCcgJiYgZGVmaW5lLmFtZCkge1xuXHRcdC8vIHJlZ2lzdGVyIGFzICdjbGFzc25hbWVzJywgY29uc2lzdGVudCB3aXRoIG5wbSBwYWNrYWdlIG5hbWVcblx0XHRkZWZpbmUoJ2NsYXNzbmFtZXMnLCBbXSwgZnVuY3Rpb24gKCkge1xuXHRcdFx0cmV0dXJuIGNsYXNzTmFtZXM7XG5cdFx0fSk7XG5cdH0gZWxzZSB7XG5cdFx0d2luZG93LmNsYXNzTmFtZXMgPSBjbGFzc05hbWVzO1xuXHR9XG59KCkpO1xuIiwgInJlcXVpcmUoJy4uLy4uL21vZHVsZXMvZXMuc3RyaW5nLml0ZXJhdG9yJyk7XG5yZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2VzLmFycmF5LmZyb20nKTtcbnZhciBwYXRoID0gcmVxdWlyZSgnLi4vLi4vaW50ZXJuYWxzL3BhdGgnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBwYXRoLkFycmF5LmZyb207XG4iLCAibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgaWYgKHR5cGVvZiBpdCAhPSAnZnVuY3Rpb24nKSB7XG4gICAgdGhyb3cgVHlwZUVycm9yKFN0cmluZyhpdCkgKyAnIGlzIG5vdCBhIGZ1bmN0aW9uJyk7XG4gIH0gcmV0dXJuIGl0O1xufTtcbiIsICJ2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmICghaXNPYmplY3QoaXQpKSB7XG4gICAgdGhyb3cgVHlwZUVycm9yKFN0cmluZyhpdCkgKyAnIGlzIG5vdCBhbiBvYmplY3QnKTtcbiAgfSByZXR1cm4gaXQ7XG59O1xuIiwgIid1c2Ugc3RyaWN0JztcbnZhciBiaW5kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2JpbmQtY29udGV4dCcpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLW9iamVjdCcpO1xudmFyIGNhbGxXaXRoU2FmZUl0ZXJhdGlvbkNsb3NpbmcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY2FsbC13aXRoLXNhZmUtaXRlcmF0aW9uLWNsb3NpbmcnKTtcbnZhciBpc0FycmF5SXRlcmF0b3JNZXRob2QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtYXJyYXktaXRlcmF0b3ItbWV0aG9kJyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tbGVuZ3RoJyk7XG52YXIgY3JlYXRlUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLXByb3BlcnR5Jyk7XG52YXIgZ2V0SXRlcmF0b3JNZXRob2QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2V0LWl0ZXJhdG9yLW1ldGhvZCcpO1xuXG4vLyBgQXJyYXkuZnJvbWAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1hcnJheS5mcm9tXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGZyb20oYXJyYXlMaWtlIC8qICwgbWFwZm4gPSB1bmRlZmluZWQsIHRoaXNBcmcgPSB1bmRlZmluZWQgKi8pIHtcbiAgdmFyIE8gPSB0b09iamVjdChhcnJheUxpa2UpO1xuICB2YXIgQyA9IHR5cGVvZiB0aGlzID09ICdmdW5jdGlvbicgPyB0aGlzIDogQXJyYXk7XG4gIHZhciBhcmd1bWVudHNMZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoO1xuICB2YXIgbWFwZm4gPSBhcmd1bWVudHNMZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkO1xuICB2YXIgbWFwcGluZyA9IG1hcGZuICE9PSB1bmRlZmluZWQ7XG4gIHZhciBpbmRleCA9IDA7XG4gIHZhciBpdGVyYXRvck1ldGhvZCA9IGdldEl0ZXJhdG9yTWV0aG9kKE8pO1xuICB2YXIgbGVuZ3RoLCByZXN1bHQsIHN0ZXAsIGl0ZXJhdG9yO1xuICBpZiAobWFwcGluZykgbWFwZm4gPSBiaW5kKG1hcGZuLCBhcmd1bWVudHNMZW5ndGggPiAyID8gYXJndW1lbnRzWzJdIDogdW5kZWZpbmVkLCAyKTtcbiAgLy8gaWYgdGhlIHRhcmdldCBpcyBub3QgaXRlcmFibGUgb3IgaXQncyBhbiBhcnJheSB3aXRoIHRoZSBkZWZhdWx0IGl0ZXJhdG9yIC0gdXNlIGEgc2ltcGxlIGNhc2VcbiAgaWYgKGl0ZXJhdG9yTWV0aG9kICE9IHVuZGVmaW5lZCAmJiAhKEMgPT0gQXJyYXkgJiYgaXNBcnJheUl0ZXJhdG9yTWV0aG9kKGl0ZXJhdG9yTWV0aG9kKSkpIHtcbiAgICBpdGVyYXRvciA9IGl0ZXJhdG9yTWV0aG9kLmNhbGwoTyk7XG4gICAgcmVzdWx0ID0gbmV3IEMoKTtcbiAgICBmb3IgKDshKHN0ZXAgPSBpdGVyYXRvci5uZXh0KCkpLmRvbmU7IGluZGV4KyspIHtcbiAgICAgIGNyZWF0ZVByb3BlcnR5KHJlc3VsdCwgaW5kZXgsIG1hcHBpbmdcbiAgICAgICAgPyBjYWxsV2l0aFNhZmVJdGVyYXRpb25DbG9zaW5nKGl0ZXJhdG9yLCBtYXBmbiwgW3N0ZXAudmFsdWUsIGluZGV4XSwgdHJ1ZSlcbiAgICAgICAgOiBzdGVwLnZhbHVlXG4gICAgICApO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBsZW5ndGggPSB0b0xlbmd0aChPLmxlbmd0aCk7XG4gICAgcmVzdWx0ID0gbmV3IEMobGVuZ3RoKTtcbiAgICBmb3IgKDtsZW5ndGggPiBpbmRleDsgaW5kZXgrKykge1xuICAgICAgY3JlYXRlUHJvcGVydHkocmVzdWx0LCBpbmRleCwgbWFwcGluZyA/IG1hcGZuKE9baW5kZXhdLCBpbmRleCkgOiBPW2luZGV4XSk7XG4gICAgfVxuICB9XG4gIHJlc3VsdC5sZW5ndGggPSBpbmRleDtcbiAgcmV0dXJuIHJlc3VsdDtcbn07XG4iLCAidmFyIHRvSW5kZXhlZE9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbmRleGVkLW9iamVjdCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWxlbmd0aCcpO1xudmFyIHRvQWJzb2x1dGVJbmRleCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1hYnNvbHV0ZS1pbmRleCcpO1xuXG4vLyBgQXJyYXkucHJvdG90eXBlLnsgaW5kZXhPZiwgaW5jbHVkZXMgfWAgbWV0aG9kcyBpbXBsZW1lbnRhdGlvblxuLy8gZmFsc2UgLT4gQXJyYXkjaW5kZXhPZlxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmluZGV4b2Zcbi8vIHRydWUgIC0+IEFycmF5I2luY2x1ZGVzXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUuaW5jbHVkZXNcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKElTX0lOQ0xVREVTKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoJHRoaXMsIGVsLCBmcm9tSW5kZXgpIHtcbiAgICB2YXIgTyA9IHRvSW5kZXhlZE9iamVjdCgkdGhpcyk7XG4gICAgdmFyIGxlbmd0aCA9IHRvTGVuZ3RoKE8ubGVuZ3RoKTtcbiAgICB2YXIgaW5kZXggPSB0b0Fic29sdXRlSW5kZXgoZnJvbUluZGV4LCBsZW5ndGgpO1xuICAgIHZhciB2YWx1ZTtcbiAgICAvLyBBcnJheSNpbmNsdWRlcyB1c2VzIFNhbWVWYWx1ZVplcm8gZXF1YWxpdHkgYWxnb3JpdGhtXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuICAgIGlmIChJU19JTkNMVURFUyAmJiBlbCAhPSBlbCkgd2hpbGUgKGxlbmd0aCA+IGluZGV4KSB7XG4gICAgICB2YWx1ZSA9IE9baW5kZXgrK107XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gICAgICBpZiAodmFsdWUgIT0gdmFsdWUpIHJldHVybiB0cnVlO1xuICAgIC8vIEFycmF5I2luZGV4T2YgaWdub3JlcyBob2xlcywgQXJyYXkjaW5jbHVkZXMgLSBub3RcbiAgICB9IGVsc2UgZm9yICg7bGVuZ3RoID4gaW5kZXg7IGluZGV4KyspIGlmIChJU19JTkNMVURFUyB8fCBpbmRleCBpbiBPKSB7XG4gICAgICBpZiAoT1tpbmRleF0gPT09IGVsKSByZXR1cm4gSVNfSU5DTFVERVMgfHwgaW5kZXggfHwgMDtcbiAgICB9IHJldHVybiAhSVNfSU5DTFVERVMgJiYgLTE7XG4gIH07XG59O1xuIiwgInZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYS1mdW5jdGlvbicpO1xuXG4vLyBvcHRpb25hbCAvIHNpbXBsZSBjb250ZXh0IGJpbmRpbmdcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGZuLCB0aGF0LCBsZW5ndGgpIHtcbiAgYUZ1bmN0aW9uKGZuKTtcbiAgaWYgKHRoYXQgPT09IHVuZGVmaW5lZCkgcmV0dXJuIGZuO1xuICBzd2l0Y2ggKGxlbmd0aCkge1xuICAgIGNhc2UgMDogcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBmbi5jYWxsKHRoYXQpO1xuICAgIH07XG4gICAgY2FzZSAxOiByZXR1cm4gZnVuY3Rpb24gKGEpIHtcbiAgICAgIHJldHVybiBmbi5jYWxsKHRoYXQsIGEpO1xuICAgIH07XG4gICAgY2FzZSAyOiByZXR1cm4gZnVuY3Rpb24gKGEsIGIpIHtcbiAgICAgIHJldHVybiBmbi5jYWxsKHRoYXQsIGEsIGIpO1xuICAgIH07XG4gICAgY2FzZSAzOiByZXR1cm4gZnVuY3Rpb24gKGEsIGIsIGMpIHtcbiAgICAgIHJldHVybiBmbi5jYWxsKHRoYXQsIGEsIGIsIGMpO1xuICAgIH07XG4gIH1cbiAgcmV0dXJuIGZ1bmN0aW9uICgvKiAuLi5hcmdzICovKSB7XG4gICAgcmV0dXJuIGZuLmFwcGx5KHRoYXQsIGFyZ3VtZW50cyk7XG4gIH07XG59O1xuIiwgInZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcblxuLy8gY2FsbCBzb21ldGhpbmcgb24gaXRlcmF0b3Igc3RlcCB3aXRoIHNhZmUgY2xvc2luZyBvbiBlcnJvclxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXRlcmF0b3IsIGZuLCB2YWx1ZSwgRU5UUklFUykge1xuICB0cnkge1xuICAgIHJldHVybiBFTlRSSUVTID8gZm4oYW5PYmplY3QodmFsdWUpWzBdLCB2YWx1ZVsxXSkgOiBmbih2YWx1ZSk7XG4gIC8vIDcuNC42IEl0ZXJhdG9yQ2xvc2UoaXRlcmF0b3IsIGNvbXBsZXRpb24pXG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgdmFyIHJldHVybk1ldGhvZCA9IGl0ZXJhdG9yWydyZXR1cm4nXTtcbiAgICBpZiAocmV0dXJuTWV0aG9kICE9PSB1bmRlZmluZWQpIGFuT2JqZWN0KHJldHVybk1ldGhvZC5jYWxsKGl0ZXJhdG9yKSk7XG4gICAgdGhyb3cgZXJyb3I7XG4gIH1cbn07XG4iLCAidmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xuXG52YXIgSVRFUkFUT1IgPSB3ZWxsS25vd25TeW1ib2woJ2l0ZXJhdG9yJyk7XG52YXIgU0FGRV9DTE9TSU5HID0gZmFsc2U7XG5cbnRyeSB7XG4gIHZhciBjYWxsZWQgPSAwO1xuICB2YXIgaXRlcmF0b3JXaXRoUmV0dXJuID0ge1xuICAgIG5leHQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiB7IGRvbmU6ICEhY2FsbGVkKysgfTtcbiAgICB9LFxuICAgICdyZXR1cm4nOiBmdW5jdGlvbiAoKSB7XG4gICAgICBTQUZFX0NMT1NJTkcgPSB0cnVlO1xuICAgIH1cbiAgfTtcbiAgaXRlcmF0b3JXaXRoUmV0dXJuW0lURVJBVE9SXSA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXRocm93LWxpdGVyYWxcbiAgQXJyYXkuZnJvbShpdGVyYXRvcldpdGhSZXR1cm4sIGZ1bmN0aW9uICgpIHsgdGhyb3cgMjsgfSk7XG59IGNhdGNoIChlcnJvcikgeyAvKiBlbXB0eSAqLyB9XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGV4ZWMsIFNLSVBfQ0xPU0lORykge1xuICBpZiAoIVNLSVBfQ0xPU0lORyAmJiAhU0FGRV9DTE9TSU5HKSByZXR1cm4gZmFsc2U7XG4gIHZhciBJVEVSQVRJT05fU1VQUE9SVCA9IGZhbHNlO1xuICB0cnkge1xuICAgIHZhciBvYmplY3QgPSB7fTtcbiAgICBvYmplY3RbSVRFUkFUT1JdID0gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgbmV4dDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHJldHVybiB7IGRvbmU6IElURVJBVElPTl9TVVBQT1JUID0gdHJ1ZSB9O1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH07XG4gICAgZXhlYyhvYmplY3QpO1xuICB9IGNhdGNoIChlcnJvcikgeyAvKiBlbXB0eSAqLyB9XG4gIHJldHVybiBJVEVSQVRJT05fU1VQUE9SVDtcbn07XG4iLCAidmFyIHRvU3RyaW5nID0ge30udG9TdHJpbmc7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKGl0KS5zbGljZSg4LCAtMSk7XG59O1xuIiwgInZhciBjbGFzc29mUmF3ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NsYXNzb2YtcmF3Jyk7XG52YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG5cbnZhciBUT19TVFJJTkdfVEFHID0gd2VsbEtub3duU3ltYm9sKCd0b1N0cmluZ1RhZycpO1xuLy8gRVMzIHdyb25nIGhlcmVcbnZhciBDT1JSRUNUX0FSR1VNRU5UUyA9IGNsYXNzb2ZSYXcoZnVuY3Rpb24gKCkgeyByZXR1cm4gYXJndW1lbnRzOyB9KCkpID09ICdBcmd1bWVudHMnO1xuXG4vLyBmYWxsYmFjayBmb3IgSUUxMSBTY3JpcHQgQWNjZXNzIERlbmllZCBlcnJvclxudmFyIHRyeUdldCA9IGZ1bmN0aW9uIChpdCwga2V5KSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIGl0W2tleV07XG4gIH0gY2F0Y2ggKGVycm9yKSB7IC8qIGVtcHR5ICovIH1cbn07XG5cbi8vIGdldHRpbmcgdGFnIGZyb20gRVM2KyBgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZ2Bcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHZhciBPLCB0YWcsIHJlc3VsdDtcbiAgcmV0dXJuIGl0ID09PSB1bmRlZmluZWQgPyAnVW5kZWZpbmVkJyA6IGl0ID09PSBudWxsID8gJ051bGwnXG4gICAgLy8gQEB0b1N0cmluZ1RhZyBjYXNlXG4gICAgOiB0eXBlb2YgKHRhZyA9IHRyeUdldChPID0gT2JqZWN0KGl0KSwgVE9fU1RSSU5HX1RBRykpID09ICdzdHJpbmcnID8gdGFnXG4gICAgLy8gYnVpbHRpblRhZyBjYXNlXG4gICAgOiBDT1JSRUNUX0FSR1VNRU5UUyA/IGNsYXNzb2ZSYXcoTylcbiAgICAvLyBFUzMgYXJndW1lbnRzIGZhbGxiYWNrXG4gICAgOiAocmVzdWx0ID0gY2xhc3NvZlJhdyhPKSkgPT0gJ09iamVjdCcgJiYgdHlwZW9mIE8uY2FsbGVlID09ICdmdW5jdGlvbicgPyAnQXJndW1lbnRzJyA6IHJlc3VsdDtcbn07XG4iLCAidmFyIGhhcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oYXMnKTtcbnZhciBvd25LZXlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL293bi1rZXlzJyk7XG52YXIgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3InKTtcbnZhciBkZWZpbmVQcm9wZXJ0eU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnR5Jyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHRhcmdldCwgc291cmNlKSB7XG4gIHZhciBrZXlzID0gb3duS2V5cyhzb3VyY2UpO1xuICB2YXIgZGVmaW5lUHJvcGVydHkgPSBkZWZpbmVQcm9wZXJ0eU1vZHVsZS5mO1xuICB2YXIgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yTW9kdWxlLmY7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBrZXkgPSBrZXlzW2ldO1xuICAgIGlmICghaGFzKHRhcmdldCwga2V5KSkgZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIGdldE93blByb3BlcnR5RGVzY3JpcHRvcihzb3VyY2UsIGtleSkpO1xuICB9XG59O1xuIiwgInZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9ICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIEYoKSB7IC8qIGVtcHR5ICovIH1cbiAgRi5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBudWxsO1xuICByZXR1cm4gT2JqZWN0LmdldFByb3RvdHlwZU9mKG5ldyBGKCkpICE9PSBGLnByb3RvdHlwZTtcbn0pO1xuIiwgIid1c2Ugc3RyaWN0JztcbnZhciBJdGVyYXRvclByb3RvdHlwZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pdGVyYXRvcnMtY29yZScpLkl0ZXJhdG9yUHJvdG90eXBlO1xudmFyIGNyZWF0ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtY3JlYXRlJyk7XG52YXIgY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1wcm9wZXJ0eS1kZXNjcmlwdG9yJyk7XG52YXIgc2V0VG9TdHJpbmdUYWcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2V0LXRvLXN0cmluZy10YWcnKTtcbnZhciBJdGVyYXRvcnMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXRlcmF0b3JzJyk7XG5cbnZhciByZXR1cm5UaGlzID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoSXRlcmF0b3JDb25zdHJ1Y3RvciwgTkFNRSwgbmV4dCkge1xuICB2YXIgVE9fU1RSSU5HX1RBRyA9IE5BTUUgKyAnIEl0ZXJhdG9yJztcbiAgSXRlcmF0b3JDb25zdHJ1Y3Rvci5wcm90b3R5cGUgPSBjcmVhdGUoSXRlcmF0b3JQcm90b3R5cGUsIHsgbmV4dDogY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yKDEsIG5leHQpIH0pO1xuICBzZXRUb1N0cmluZ1RhZyhJdGVyYXRvckNvbnN0cnVjdG9yLCBUT19TVFJJTkdfVEFHLCBmYWxzZSwgdHJ1ZSk7XG4gIEl0ZXJhdG9yc1tUT19TVFJJTkdfVEFHXSA9IHJldHVyblRoaXM7XG4gIHJldHVybiBJdGVyYXRvckNvbnN0cnVjdG9yO1xufTtcbiIsICJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChiaXRtYXAsIHZhbHVlKSB7XG4gIHJldHVybiB7XG4gICAgZW51bWVyYWJsZTogIShiaXRtYXAgJiAxKSxcbiAgICBjb25maWd1cmFibGU6ICEoYml0bWFwICYgMiksXG4gICAgd3JpdGFibGU6ICEoYml0bWFwICYgNCksXG4gICAgdmFsdWU6IHZhbHVlXG4gIH07XG59O1xuIiwgIid1c2Ugc3RyaWN0JztcbnZhciB0b1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1wcmltaXRpdmUnKTtcbnZhciBkZWZpbmVQcm9wZXJ0eU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnR5Jyk7XG52YXIgY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1wcm9wZXJ0eS1kZXNjcmlwdG9yJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG9iamVjdCwga2V5LCB2YWx1ZSkge1xuICB2YXIgcHJvcGVydHlLZXkgPSB0b1ByaW1pdGl2ZShrZXkpO1xuICBpZiAocHJvcGVydHlLZXkgaW4gb2JqZWN0KSBkZWZpbmVQcm9wZXJ0eU1vZHVsZS5mKG9iamVjdCwgcHJvcGVydHlLZXksIGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvcigwLCB2YWx1ZSkpO1xuICBlbHNlIG9iamVjdFtwcm9wZXJ0eUtleV0gPSB2YWx1ZTtcbn07XG4iLCAiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgY3JlYXRlSXRlcmF0b3JDb25zdHJ1Y3RvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtaXRlcmF0b3ItY29uc3RydWN0b3InKTtcbnZhciBnZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LXByb3RvdHlwZS1vZicpO1xudmFyIHNldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1zZXQtcHJvdG90eXBlLW9mJyk7XG52YXIgc2V0VG9TdHJpbmdUYWcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2V0LXRvLXN0cmluZy10YWcnKTtcbnZhciBoaWRlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hpZGUnKTtcbnZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZWRlZmluZScpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xudmFyIElTX1BVUkUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtcHVyZScpO1xudmFyIEl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pdGVyYXRvcnMnKTtcbnZhciBJdGVyYXRvcnNDb3JlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2l0ZXJhdG9ycy1jb3JlJyk7XG5cbnZhciBJdGVyYXRvclByb3RvdHlwZSA9IEl0ZXJhdG9yc0NvcmUuSXRlcmF0b3JQcm90b3R5cGU7XG52YXIgQlVHR1lfU0FGQVJJX0lURVJBVE9SUyA9IEl0ZXJhdG9yc0NvcmUuQlVHR1lfU0FGQVJJX0lURVJBVE9SUztcbnZhciBJVEVSQVRPUiA9IHdlbGxLbm93blN5bWJvbCgnaXRlcmF0b3InKTtcbnZhciBLRVlTID0gJ2tleXMnO1xudmFyIFZBTFVFUyA9ICd2YWx1ZXMnO1xudmFyIEVOVFJJRVMgPSAnZW50cmllcyc7XG5cbnZhciByZXR1cm5UaGlzID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoSXRlcmFibGUsIE5BTUUsIEl0ZXJhdG9yQ29uc3RydWN0b3IsIG5leHQsIERFRkFVTFQsIElTX1NFVCwgRk9SQ0VEKSB7XG4gIGNyZWF0ZUl0ZXJhdG9yQ29uc3RydWN0b3IoSXRlcmF0b3JDb25zdHJ1Y3RvciwgTkFNRSwgbmV4dCk7XG5cbiAgdmFyIGdldEl0ZXJhdGlvbk1ldGhvZCA9IGZ1bmN0aW9uIChLSU5EKSB7XG4gICAgaWYgKEtJTkQgPT09IERFRkFVTFQgJiYgZGVmYXVsdEl0ZXJhdG9yKSByZXR1cm4gZGVmYXVsdEl0ZXJhdG9yO1xuICAgIGlmICghQlVHR1lfU0FGQVJJX0lURVJBVE9SUyAmJiBLSU5EIGluIEl0ZXJhYmxlUHJvdG90eXBlKSByZXR1cm4gSXRlcmFibGVQcm90b3R5cGVbS0lORF07XG4gICAgc3dpdGNoIChLSU5EKSB7XG4gICAgICBjYXNlIEtFWVM6IHJldHVybiBmdW5jdGlvbiBrZXlzKCkgeyByZXR1cm4gbmV3IEl0ZXJhdG9yQ29uc3RydWN0b3IodGhpcywgS0lORCk7IH07XG4gICAgICBjYXNlIFZBTFVFUzogcmV0dXJuIGZ1bmN0aW9uIHZhbHVlcygpIHsgcmV0dXJuIG5ldyBJdGVyYXRvckNvbnN0cnVjdG9yKHRoaXMsIEtJTkQpOyB9O1xuICAgICAgY2FzZSBFTlRSSUVTOiByZXR1cm4gZnVuY3Rpb24gZW50cmllcygpIHsgcmV0dXJuIG5ldyBJdGVyYXRvckNvbnN0cnVjdG9yKHRoaXMsIEtJTkQpOyB9O1xuICAgIH0gcmV0dXJuIGZ1bmN0aW9uICgpIHsgcmV0dXJuIG5ldyBJdGVyYXRvckNvbnN0cnVjdG9yKHRoaXMpOyB9O1xuICB9O1xuXG4gIHZhciBUT19TVFJJTkdfVEFHID0gTkFNRSArICcgSXRlcmF0b3InO1xuICB2YXIgSU5DT1JSRUNUX1ZBTFVFU19OQU1FID0gZmFsc2U7XG4gIHZhciBJdGVyYWJsZVByb3RvdHlwZSA9IEl0ZXJhYmxlLnByb3RvdHlwZTtcbiAgdmFyIG5hdGl2ZUl0ZXJhdG9yID0gSXRlcmFibGVQcm90b3R5cGVbSVRFUkFUT1JdXG4gICAgfHwgSXRlcmFibGVQcm90b3R5cGVbJ0BAaXRlcmF0b3InXVxuICAgIHx8IERFRkFVTFQgJiYgSXRlcmFibGVQcm90b3R5cGVbREVGQVVMVF07XG4gIHZhciBkZWZhdWx0SXRlcmF0b3IgPSAhQlVHR1lfU0FGQVJJX0lURVJBVE9SUyAmJiBuYXRpdmVJdGVyYXRvciB8fCBnZXRJdGVyYXRpb25NZXRob2QoREVGQVVMVCk7XG4gIHZhciBhbnlOYXRpdmVJdGVyYXRvciA9IE5BTUUgPT0gJ0FycmF5JyA/IEl0ZXJhYmxlUHJvdG90eXBlLmVudHJpZXMgfHwgbmF0aXZlSXRlcmF0b3IgOiBuYXRpdmVJdGVyYXRvcjtcbiAgdmFyIEN1cnJlbnRJdGVyYXRvclByb3RvdHlwZSwgbWV0aG9kcywgS0VZO1xuXG4gIC8vIGZpeCBuYXRpdmVcbiAgaWYgKGFueU5hdGl2ZUl0ZXJhdG9yKSB7XG4gICAgQ3VycmVudEl0ZXJhdG9yUHJvdG90eXBlID0gZ2V0UHJvdG90eXBlT2YoYW55TmF0aXZlSXRlcmF0b3IuY2FsbChuZXcgSXRlcmFibGUoKSkpO1xuICAgIGlmIChJdGVyYXRvclByb3RvdHlwZSAhPT0gT2JqZWN0LnByb3RvdHlwZSAmJiBDdXJyZW50SXRlcmF0b3JQcm90b3R5cGUubmV4dCkge1xuICAgICAgaWYgKCFJU19QVVJFICYmIGdldFByb3RvdHlwZU9mKEN1cnJlbnRJdGVyYXRvclByb3RvdHlwZSkgIT09IEl0ZXJhdG9yUHJvdG90eXBlKSB7XG4gICAgICAgIGlmIChzZXRQcm90b3R5cGVPZikge1xuICAgICAgICAgIHNldFByb3RvdHlwZU9mKEN1cnJlbnRJdGVyYXRvclByb3RvdHlwZSwgSXRlcmF0b3JQcm90b3R5cGUpO1xuICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBDdXJyZW50SXRlcmF0b3JQcm90b3R5cGVbSVRFUkFUT1JdICE9ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICBoaWRlKEN1cnJlbnRJdGVyYXRvclByb3RvdHlwZSwgSVRFUkFUT1IsIHJldHVyblRoaXMpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICAvLyBTZXQgQEB0b1N0cmluZ1RhZyB0byBuYXRpdmUgaXRlcmF0b3JzXG4gICAgICBzZXRUb1N0cmluZ1RhZyhDdXJyZW50SXRlcmF0b3JQcm90b3R5cGUsIFRPX1NUUklOR19UQUcsIHRydWUsIHRydWUpO1xuICAgICAgaWYgKElTX1BVUkUpIEl0ZXJhdG9yc1tUT19TVFJJTkdfVEFHXSA9IHJldHVyblRoaXM7XG4gICAgfVxuICB9XG5cbiAgLy8gZml4IEFycmF5I3t2YWx1ZXMsIEBAaXRlcmF0b3J9Lm5hbWUgaW4gVjggLyBGRlxuICBpZiAoREVGQVVMVCA9PSBWQUxVRVMgJiYgbmF0aXZlSXRlcmF0b3IgJiYgbmF0aXZlSXRlcmF0b3IubmFtZSAhPT0gVkFMVUVTKSB7XG4gICAgSU5DT1JSRUNUX1ZBTFVFU19OQU1FID0gdHJ1ZTtcbiAgICBkZWZhdWx0SXRlcmF0b3IgPSBmdW5jdGlvbiB2YWx1ZXMoKSB7IHJldHVybiBuYXRpdmVJdGVyYXRvci5jYWxsKHRoaXMpOyB9O1xuICB9XG5cbiAgLy8gZGVmaW5lIGl0ZXJhdG9yXG4gIGlmICgoIUlTX1BVUkUgfHwgRk9SQ0VEKSAmJiBJdGVyYWJsZVByb3RvdHlwZVtJVEVSQVRPUl0gIT09IGRlZmF1bHRJdGVyYXRvcikge1xuICAgIGhpZGUoSXRlcmFibGVQcm90b3R5cGUsIElURVJBVE9SLCBkZWZhdWx0SXRlcmF0b3IpO1xuICB9XG4gIEl0ZXJhdG9yc1tOQU1FXSA9IGRlZmF1bHRJdGVyYXRvcjtcblxuICAvLyBleHBvcnQgYWRkaXRpb25hbCBtZXRob2RzXG4gIGlmIChERUZBVUxUKSB7XG4gICAgbWV0aG9kcyA9IHtcbiAgICAgIHZhbHVlczogZ2V0SXRlcmF0aW9uTWV0aG9kKFZBTFVFUyksXG4gICAgICBrZXlzOiBJU19TRVQgPyBkZWZhdWx0SXRlcmF0b3IgOiBnZXRJdGVyYXRpb25NZXRob2QoS0VZUyksXG4gICAgICBlbnRyaWVzOiBnZXRJdGVyYXRpb25NZXRob2QoRU5UUklFUylcbiAgICB9O1xuICAgIGlmIChGT1JDRUQpIGZvciAoS0VZIGluIG1ldGhvZHMpIHtcbiAgICAgIGlmIChCVUdHWV9TQUZBUklfSVRFUkFUT1JTIHx8IElOQ09SUkVDVF9WQUxVRVNfTkFNRSB8fCAhKEtFWSBpbiBJdGVyYWJsZVByb3RvdHlwZSkpIHtcbiAgICAgICAgcmVkZWZpbmUoSXRlcmFibGVQcm90b3R5cGUsIEtFWSwgbWV0aG9kc1tLRVldKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgJCh7IHRhcmdldDogTkFNRSwgcHJvdG86IHRydWUsIGZvcmNlZDogQlVHR1lfU0FGQVJJX0lURVJBVE9SUyB8fCBJTkNPUlJFQ1RfVkFMVUVTX05BTUUgfSwgbWV0aG9kcyk7XG4gIH1cblxuICByZXR1cm4gbWV0aG9kcztcbn07XG4iLCAidmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG5cbi8vIFRoYW5rJ3MgSUU4IGZvciBoaXMgZnVubnkgZGVmaW5lUHJvcGVydHlcbm1vZHVsZS5leHBvcnRzID0gIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh7fSwgJ2EnLCB7IGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gNzsgfSB9KS5hICE9IDc7XG59KTtcbiIsICJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW9iamVjdCcpO1xuXG52YXIgZG9jdW1lbnQgPSBnbG9iYWwuZG9jdW1lbnQ7XG4vLyB0eXBlb2YgZG9jdW1lbnQuY3JlYXRlRWxlbWVudCBpcyAnb2JqZWN0JyBpbiBvbGQgSUVcbnZhciBleGlzdCA9IGlzT2JqZWN0KGRvY3VtZW50KSAmJiBpc09iamVjdChkb2N1bWVudC5jcmVhdGVFbGVtZW50KTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGV4aXN0ID8gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChpdCkgOiB7fTtcbn07XG4iLCAiLy8gSUU4LSBkb24ndCBlbnVtIGJ1ZyBrZXlzXG5tb2R1bGUuZXhwb3J0cyA9IFtcbiAgJ2NvbnN0cnVjdG9yJyxcbiAgJ2hhc093blByb3BlcnR5JyxcbiAgJ2lzUHJvdG90eXBlT2YnLFxuICAncHJvcGVydHlJc0VudW1lcmFibGUnLFxuICAndG9Mb2NhbGVTdHJpbmcnLFxuICAndG9TdHJpbmcnLFxuICAndmFsdWVPZidcbl07XG4iLCAidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvcicpLmY7XG52YXIgaGlkZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oaWRlJyk7XG52YXIgcmVkZWZpbmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVkZWZpbmUnKTtcbnZhciBzZXRHbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2V0LWdsb2JhbCcpO1xudmFyIGNvcHlDb25zdHJ1Y3RvclByb3BlcnRpZXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY29weS1jb25zdHJ1Y3Rvci1wcm9wZXJ0aWVzJyk7XG52YXIgaXNGb3JjZWQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtZm9yY2VkJyk7XG5cbi8qXG4gIG9wdGlvbnMudGFyZ2V0ICAgICAgLSBuYW1lIG9mIHRoZSB0YXJnZXQgb2JqZWN0XG4gIG9wdGlvbnMuZ2xvYmFsICAgICAgLSB0YXJnZXQgaXMgdGhlIGdsb2JhbCBvYmplY3RcbiAgb3B0aW9ucy5zdGF0ICAgICAgICAtIGV4cG9ydCBhcyBzdGF0aWMgbWV0aG9kcyBvZiB0YXJnZXRcbiAgb3B0aW9ucy5wcm90byAgICAgICAtIGV4cG9ydCBhcyBwcm90b3R5cGUgbWV0aG9kcyBvZiB0YXJnZXRcbiAgb3B0aW9ucy5yZWFsICAgICAgICAtIHJlYWwgcHJvdG90eXBlIG1ldGhvZCBmb3IgdGhlIGBwdXJlYCB2ZXJzaW9uXG4gIG9wdGlvbnMuZm9yY2VkICAgICAgLSBleHBvcnQgZXZlbiBpZiB0aGUgbmF0aXZlIGZlYXR1cmUgaXMgYXZhaWxhYmxlXG4gIG9wdGlvbnMuYmluZCAgICAgICAgLSBiaW5kIG1ldGhvZHMgdG8gdGhlIHRhcmdldCwgcmVxdWlyZWQgZm9yIHRoZSBgcHVyZWAgdmVyc2lvblxuICBvcHRpb25zLndyYXAgICAgICAgIC0gd3JhcCBjb25zdHJ1Y3RvcnMgdG8gcHJldmVudGluZyBnbG9iYWwgcG9sbHV0aW9uLCByZXF1aXJlZCBmb3IgdGhlIGBwdXJlYCB2ZXJzaW9uXG4gIG9wdGlvbnMudW5zYWZlICAgICAgLSB1c2UgdGhlIHNpbXBsZSBhc3NpZ25tZW50IG9mIHByb3BlcnR5IGluc3RlYWQgb2YgZGVsZXRlICsgZGVmaW5lUHJvcGVydHlcbiAgb3B0aW9ucy5zaGFtICAgICAgICAtIGFkZCBhIGZsYWcgdG8gbm90IGNvbXBsZXRlbHkgZnVsbCBwb2x5ZmlsbHNcbiAgb3B0aW9ucy5lbnVtZXJhYmxlICAtIGV4cG9ydCBhcyBlbnVtZXJhYmxlIHByb3BlcnR5XG4gIG9wdGlvbnMubm9UYXJnZXRHZXQgLSBwcmV2ZW50IGNhbGxpbmcgYSBnZXR0ZXIgb24gdGFyZ2V0XG4qL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAob3B0aW9ucywgc291cmNlKSB7XG4gIHZhciBUQVJHRVQgPSBvcHRpb25zLnRhcmdldDtcbiAgdmFyIEdMT0JBTCA9IG9wdGlvbnMuZ2xvYmFsO1xuICB2YXIgU1RBVElDID0gb3B0aW9ucy5zdGF0O1xuICB2YXIgRk9SQ0VELCB0YXJnZXQsIGtleSwgdGFyZ2V0UHJvcGVydHksIHNvdXJjZVByb3BlcnR5LCBkZXNjcmlwdG9yO1xuICBpZiAoR0xPQkFMKSB7XG4gICAgdGFyZ2V0ID0gZ2xvYmFsO1xuICB9IGVsc2UgaWYgKFNUQVRJQykge1xuICAgIHRhcmdldCA9IGdsb2JhbFtUQVJHRVRdIHx8IHNldEdsb2JhbChUQVJHRVQsIHt9KTtcbiAgfSBlbHNlIHtcbiAgICB0YXJnZXQgPSAoZ2xvYmFsW1RBUkdFVF0gfHwge30pLnByb3RvdHlwZTtcbiAgfVxuICBpZiAodGFyZ2V0KSBmb3IgKGtleSBpbiBzb3VyY2UpIHtcbiAgICBzb3VyY2VQcm9wZXJ0eSA9IHNvdXJjZVtrZXldO1xuICAgIGlmIChvcHRpb25zLm5vVGFyZ2V0R2V0KSB7XG4gICAgICBkZXNjcmlwdG9yID0gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwga2V5KTtcbiAgICAgIHRhcmdldFByb3BlcnR5ID0gZGVzY3JpcHRvciAmJiBkZXNjcmlwdG9yLnZhbHVlO1xuICAgIH0gZWxzZSB0YXJnZXRQcm9wZXJ0eSA9IHRhcmdldFtrZXldO1xuICAgIEZPUkNFRCA9IGlzRm9yY2VkKEdMT0JBTCA/IGtleSA6IFRBUkdFVCArIChTVEFUSUMgPyAnLicgOiAnIycpICsga2V5LCBvcHRpb25zLmZvcmNlZCk7XG4gICAgLy8gY29udGFpbmVkIGluIHRhcmdldFxuICAgIGlmICghRk9SQ0VEICYmIHRhcmdldFByb3BlcnR5ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGlmICh0eXBlb2Ygc291cmNlUHJvcGVydHkgPT09IHR5cGVvZiB0YXJnZXRQcm9wZXJ0eSkgY29udGludWU7XG4gICAgICBjb3B5Q29uc3RydWN0b3JQcm9wZXJ0aWVzKHNvdXJjZVByb3BlcnR5LCB0YXJnZXRQcm9wZXJ0eSk7XG4gICAgfVxuICAgIC8vIGFkZCBhIGZsYWcgdG8gbm90IGNvbXBsZXRlbHkgZnVsbCBwb2x5ZmlsbHNcbiAgICBpZiAob3B0aW9ucy5zaGFtIHx8ICh0YXJnZXRQcm9wZXJ0eSAmJiB0YXJnZXRQcm9wZXJ0eS5zaGFtKSkge1xuICAgICAgaGlkZShzb3VyY2VQcm9wZXJ0eSwgJ3NoYW0nLCB0cnVlKTtcbiAgICB9XG4gICAgLy8gZXh0ZW5kIGdsb2JhbFxuICAgIHJlZGVmaW5lKHRhcmdldCwga2V5LCBzb3VyY2VQcm9wZXJ0eSwgb3B0aW9ucyk7XG4gIH1cbn07XG4iLCAibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZXhlYykge1xuICB0cnkge1xuICAgIHJldHVybiAhIWV4ZWMoKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxufTtcbiIsICJ2YXIgc2hhcmVkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NoYXJlZCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHNoYXJlZCgnbmF0aXZlLWZ1bmN0aW9uLXRvLXN0cmluZycsIEZ1bmN0aW9uLnRvU3RyaW5nKTtcbiIsICJ2YXIgY2xhc3NvZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jbGFzc29mJyk7XG52YXIgSXRlcmF0b3JzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2l0ZXJhdG9ycycpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xuXG52YXIgSVRFUkFUT1IgPSB3ZWxsS25vd25TeW1ib2woJ2l0ZXJhdG9yJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmIChpdCAhPSB1bmRlZmluZWQpIHJldHVybiBpdFtJVEVSQVRPUl1cbiAgICB8fCBpdFsnQEBpdGVyYXRvciddXG4gICAgfHwgSXRlcmF0b3JzW2NsYXNzb2YoaXQpXTtcbn07XG4iLCAidmFyIE8gPSAnb2JqZWN0JztcbnZhciBjaGVjayA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gaXQgJiYgaXQuTWF0aCA9PSBNYXRoICYmIGl0O1xufTtcblxuLy8gaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzg2I2lzc3VlY29tbWVudC0xMTU3NTkwMjhcbm1vZHVsZS5leHBvcnRzID1cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVmXG4gIGNoZWNrKHR5cGVvZiBnbG9iYWxUaGlzID09IE8gJiYgZ2xvYmFsVGhpcykgfHxcbiAgY2hlY2sodHlwZW9mIHdpbmRvdyA9PSBPICYmIHdpbmRvdykgfHxcbiAgY2hlY2sodHlwZW9mIHNlbGYgPT0gTyAmJiBzZWxmKSB8fFxuICBjaGVjayh0eXBlb2YgZ2xvYmFsID09IE8gJiYgZ2xvYmFsKSB8fFxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tbmV3LWZ1bmNcbiAgRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcbiIsICJ2YXIgaGFzT3duUHJvcGVydHkgPSB7fS5oYXNPd25Qcm9wZXJ0eTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQsIGtleSkge1xuICByZXR1cm4gaGFzT3duUHJvcGVydHkuY2FsbChpdCwga2V5KTtcbn07XG4iLCAibW9kdWxlLmV4cG9ydHMgPSB7fTtcbiIsICJ2YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcbnZhciBkZWZpbmVQcm9wZXJ0eU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnR5Jyk7XG52YXIgY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1wcm9wZXJ0eS1kZXNjcmlwdG9yJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gREVTQ1JJUFRPUlMgPyBmdW5jdGlvbiAob2JqZWN0LCBrZXksIHZhbHVlKSB7XG4gIHJldHVybiBkZWZpbmVQcm9wZXJ0eU1vZHVsZS5mKG9iamVjdCwga2V5LCBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IoMSwgdmFsdWUpKTtcbn0gOiBmdW5jdGlvbiAob2JqZWN0LCBrZXksIHZhbHVlKSB7XG4gIG9iamVjdFtrZXldID0gdmFsdWU7XG4gIHJldHVybiBvYmplY3Q7XG59O1xuIiwgInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG5cbnZhciBkb2N1bWVudCA9IGdsb2JhbC5kb2N1bWVudDtcblxubW9kdWxlLmV4cG9ydHMgPSBkb2N1bWVudCAmJiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG4iLCAidmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Rlc2NyaXB0b3JzJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciBjcmVhdGVFbGVtZW50ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2RvY3VtZW50LWNyZWF0ZS1lbGVtZW50Jyk7XG5cbi8vIFRoYW5rJ3MgSUU4IGZvciBoaXMgZnVubnkgZGVmaW5lUHJvcGVydHlcbm1vZHVsZS5leHBvcnRzID0gIURFU0NSSVBUT1JTICYmICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBPYmplY3QuZGVmaW5lUHJvcGVydHkoY3JlYXRlRWxlbWVudCgnZGl2JyksICdhJywge1xuICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gNzsgfVxuICB9KS5hICE9IDc7XG59KTtcbiIsICIvLyBmYWxsYmFjayBmb3Igbm9uLWFycmF5LWxpa2UgRVMzIGFuZCBub24tZW51bWVyYWJsZSBvbGQgVjggc3RyaW5nc1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgY2xhc3NvZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jbGFzc29mLXJhdycpO1xuXG52YXIgc3BsaXQgPSAnJy5zcGxpdDtcblxubW9kdWxlLmV4cG9ydHMgPSBmYWlscyhmdW5jdGlvbiAoKSB7XG4gIC8vIHRocm93cyBhbiBlcnJvciBpbiByaGlubywgc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9tb3ppbGxhL3JoaW5vL2lzc3Vlcy8zNDZcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXByb3RvdHlwZS1idWlsdGluc1xuICByZXR1cm4gIU9iamVjdCgneicpLnByb3BlcnR5SXNFbnVtZXJhYmxlKDApO1xufSkgPyBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGNsYXNzb2YoaXQpID09ICdTdHJpbmcnID8gc3BsaXQuY2FsbChpdCwgJycpIDogT2JqZWN0KGl0KTtcbn0gOiBPYmplY3Q7XG4iLCAidmFyIE5BVElWRV9XRUFLX01BUCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9uYXRpdmUtd2Vhay1tYXAnKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG52YXIgaGlkZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oaWRlJyk7XG52YXIgb2JqZWN0SGFzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hhcycpO1xudmFyIHNoYXJlZEtleSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zaGFyZWQta2V5Jyk7XG52YXIgaGlkZGVuS2V5cyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oaWRkZW4ta2V5cycpO1xuXG52YXIgV2Vha01hcCA9IGdsb2JhbC5XZWFrTWFwO1xudmFyIHNldCwgZ2V0LCBoYXM7XG5cbnZhciBlbmZvcmNlID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBoYXMoaXQpID8gZ2V0KGl0KSA6IHNldChpdCwge30pO1xufTtcblxudmFyIGdldHRlckZvciA9IGZ1bmN0aW9uIChUWVBFKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoaXQpIHtcbiAgICB2YXIgc3RhdGU7XG4gICAgaWYgKCFpc09iamVjdChpdCkgfHwgKHN0YXRlID0gZ2V0KGl0KSkudHlwZSAhPT0gVFlQRSkge1xuICAgICAgdGhyb3cgVHlwZUVycm9yKCdJbmNvbXBhdGlibGUgcmVjZWl2ZXIsICcgKyBUWVBFICsgJyByZXF1aXJlZCcpO1xuICAgIH0gcmV0dXJuIHN0YXRlO1xuICB9O1xufTtcblxuaWYgKE5BVElWRV9XRUFLX01BUCkge1xuICB2YXIgc3RvcmUgPSBuZXcgV2Vha01hcCgpO1xuICB2YXIgd21nZXQgPSBzdG9yZS5nZXQ7XG4gIHZhciB3bWhhcyA9IHN0b3JlLmhhcztcbiAgdmFyIHdtc2V0ID0gc3RvcmUuc2V0O1xuICBzZXQgPSBmdW5jdGlvbiAoaXQsIG1ldGFkYXRhKSB7XG4gICAgd21zZXQuY2FsbChzdG9yZSwgaXQsIG1ldGFkYXRhKTtcbiAgICByZXR1cm4gbWV0YWRhdGE7XG4gIH07XG4gIGdldCA9IGZ1bmN0aW9uIChpdCkge1xuICAgIHJldHVybiB3bWdldC5jYWxsKHN0b3JlLCBpdCkgfHwge307XG4gIH07XG4gIGhhcyA9IGZ1bmN0aW9uIChpdCkge1xuICAgIHJldHVybiB3bWhhcy5jYWxsKHN0b3JlLCBpdCk7XG4gIH07XG59IGVsc2Uge1xuICB2YXIgU1RBVEUgPSBzaGFyZWRLZXkoJ3N0YXRlJyk7XG4gIGhpZGRlbktleXNbU1RBVEVdID0gdHJ1ZTtcbiAgc2V0ID0gZnVuY3Rpb24gKGl0LCBtZXRhZGF0YSkge1xuICAgIGhpZGUoaXQsIFNUQVRFLCBtZXRhZGF0YSk7XG4gICAgcmV0dXJuIG1ldGFkYXRhO1xuICB9O1xuICBnZXQgPSBmdW5jdGlvbiAoaXQpIHtcbiAgICByZXR1cm4gb2JqZWN0SGFzKGl0LCBTVEFURSkgPyBpdFtTVEFURV0gOiB7fTtcbiAgfTtcbiAgaGFzID0gZnVuY3Rpb24gKGl0KSB7XG4gICAgcmV0dXJuIG9iamVjdEhhcyhpdCwgU1RBVEUpO1xuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgc2V0OiBzZXQsXG4gIGdldDogZ2V0LFxuICBoYXM6IGhhcyxcbiAgZW5mb3JjZTogZW5mb3JjZSxcbiAgZ2V0dGVyRm9yOiBnZXR0ZXJGb3Jcbn07XG4iLCAidmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xudmFyIEl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pdGVyYXRvcnMnKTtcblxudmFyIElURVJBVE9SID0gd2VsbEtub3duU3ltYm9sKCdpdGVyYXRvcicpO1xudmFyIEFycmF5UHJvdG90eXBlID0gQXJyYXkucHJvdG90eXBlO1xuXG4vLyBjaGVjayBvbiBkZWZhdWx0IEFycmF5IGl0ZXJhdG9yXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gaXQgIT09IHVuZGVmaW5lZCAmJiAoSXRlcmF0b3JzLkFycmF5ID09PSBpdCB8fCBBcnJheVByb3RvdHlwZVtJVEVSQVRPUl0gPT09IGl0KTtcbn07XG4iLCAidmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG5cbnZhciByZXBsYWNlbWVudCA9IC8jfFxcLnByb3RvdHlwZVxcLi87XG5cbnZhciBpc0ZvcmNlZCA9IGZ1bmN0aW9uIChmZWF0dXJlLCBkZXRlY3Rpb24pIHtcbiAgdmFyIHZhbHVlID0gZGF0YVtub3JtYWxpemUoZmVhdHVyZSldO1xuICByZXR1cm4gdmFsdWUgPT0gUE9MWUZJTEwgPyB0cnVlXG4gICAgOiB2YWx1ZSA9PSBOQVRJVkUgPyBmYWxzZVxuICAgIDogdHlwZW9mIGRldGVjdGlvbiA9PSAnZnVuY3Rpb24nID8gZmFpbHMoZGV0ZWN0aW9uKVxuICAgIDogISFkZXRlY3Rpb247XG59O1xuXG52YXIgbm9ybWFsaXplID0gaXNGb3JjZWQubm9ybWFsaXplID0gZnVuY3Rpb24gKHN0cmluZykge1xuICByZXR1cm4gU3RyaW5nKHN0cmluZykucmVwbGFjZShyZXBsYWNlbWVudCwgJy4nKS50b0xvd2VyQ2FzZSgpO1xufTtcblxudmFyIGRhdGEgPSBpc0ZvcmNlZC5kYXRhID0ge307XG52YXIgTkFUSVZFID0gaXNGb3JjZWQuTkFUSVZFID0gJ04nO1xudmFyIFBPTFlGSUxMID0gaXNGb3JjZWQuUE9MWUZJTEwgPSAnUCc7XG5cbm1vZHVsZS5leHBvcnRzID0gaXNGb3JjZWQ7XG4iLCAibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIHR5cGVvZiBpdCA9PT0gJ29iamVjdCcgPyBpdCAhPT0gbnVsbCA6IHR5cGVvZiBpdCA9PT0gJ2Z1bmN0aW9uJztcbn07XG4iLCAibW9kdWxlLmV4cG9ydHMgPSBmYWxzZTtcbiIsICIndXNlIHN0cmljdCc7XG52YXIgZ2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1wcm90b3R5cGUtb2YnKTtcbnZhciBoaWRlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hpZGUnKTtcbnZhciBoYXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzJyk7XG52YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG52YXIgSVNfUFVSRSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1wdXJlJyk7XG5cbnZhciBJVEVSQVRPUiA9IHdlbGxLbm93blN5bWJvbCgnaXRlcmF0b3InKTtcbnZhciBCVUdHWV9TQUZBUklfSVRFUkFUT1JTID0gZmFsc2U7XG5cbnZhciByZXR1cm5UaGlzID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfTtcblxuLy8gYCVJdGVyYXRvclByb3RvdHlwZSVgIG9iamVjdFxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtJWl0ZXJhdG9ycHJvdG90eXBlJS1vYmplY3RcbnZhciBJdGVyYXRvclByb3RvdHlwZSwgUHJvdG90eXBlT2ZBcnJheUl0ZXJhdG9yUHJvdG90eXBlLCBhcnJheUl0ZXJhdG9yO1xuXG5pZiAoW10ua2V5cykge1xuICBhcnJheUl0ZXJhdG9yID0gW10ua2V5cygpO1xuICAvLyBTYWZhcmkgOCBoYXMgYnVnZ3kgaXRlcmF0b3JzIHcvbyBgbmV4dGBcbiAgaWYgKCEoJ25leHQnIGluIGFycmF5SXRlcmF0b3IpKSBCVUdHWV9TQUZBUklfSVRFUkFUT1JTID0gdHJ1ZTtcbiAgZWxzZSB7XG4gICAgUHJvdG90eXBlT2ZBcnJheUl0ZXJhdG9yUHJvdG90eXBlID0gZ2V0UHJvdG90eXBlT2YoZ2V0UHJvdG90eXBlT2YoYXJyYXlJdGVyYXRvcikpO1xuICAgIGlmIChQcm90b3R5cGVPZkFycmF5SXRlcmF0b3JQcm90b3R5cGUgIT09IE9iamVjdC5wcm90b3R5cGUpIEl0ZXJhdG9yUHJvdG90eXBlID0gUHJvdG90eXBlT2ZBcnJheUl0ZXJhdG9yUHJvdG90eXBlO1xuICB9XG59XG5cbmlmIChJdGVyYXRvclByb3RvdHlwZSA9PSB1bmRlZmluZWQpIEl0ZXJhdG9yUHJvdG90eXBlID0ge307XG5cbi8vIDI1LjEuMi4xLjEgJUl0ZXJhdG9yUHJvdG90eXBlJVtAQGl0ZXJhdG9yXSgpXG5pZiAoIUlTX1BVUkUgJiYgIWhhcyhJdGVyYXRvclByb3RvdHlwZSwgSVRFUkFUT1IpKSBoaWRlKEl0ZXJhdG9yUHJvdG90eXBlLCBJVEVSQVRPUiwgcmV0dXJuVGhpcyk7XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBJdGVyYXRvclByb3RvdHlwZTogSXRlcmF0b3JQcm90b3R5cGUsXG4gIEJVR0dZX1NBRkFSSV9JVEVSQVRPUlM6IEJVR0dZX1NBRkFSSV9JVEVSQVRPUlNcbn07XG4iLCAibW9kdWxlLmV4cG9ydHMgPSB7fTtcbiIsICJ2YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSAhIU9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMgJiYgIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgLy8gQ2hyb21lIDM4IFN5bWJvbCBoYXMgaW5jb3JyZWN0IHRvU3RyaW5nIGNvbnZlcnNpb25cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVmXG4gIHJldHVybiAhU3RyaW5nKFN5bWJvbCgpKTtcbn0pO1xuIiwgInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgbmF0aXZlRnVuY3Rpb25Ub1N0cmluZyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi10by1zdHJpbmcnKTtcblxudmFyIFdlYWtNYXAgPSBnbG9iYWwuV2Vha01hcDtcblxubW9kdWxlLmV4cG9ydHMgPSB0eXBlb2YgV2Vha01hcCA9PT0gJ2Z1bmN0aW9uJyAmJiAvbmF0aXZlIGNvZGUvLnRlc3QobmF0aXZlRnVuY3Rpb25Ub1N0cmluZy5jYWxsKFdlYWtNYXApKTtcbiIsICJ2YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG52YXIgZGVmaW5lUHJvcGVydGllcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnRpZXMnKTtcbnZhciBlbnVtQnVnS2V5cyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9lbnVtLWJ1Zy1rZXlzJyk7XG52YXIgaGlkZGVuS2V5cyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oaWRkZW4ta2V5cycpO1xudmFyIGh0bWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaHRtbCcpO1xudmFyIGRvY3VtZW50Q3JlYXRlRWxlbWVudCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kb2N1bWVudC1jcmVhdGUtZWxlbWVudCcpO1xudmFyIHNoYXJlZEtleSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zaGFyZWQta2V5Jyk7XG52YXIgSUVfUFJPVE8gPSBzaGFyZWRLZXkoJ0lFX1BST1RPJyk7XG5cbnZhciBQUk9UT1RZUEUgPSAncHJvdG90eXBlJztcbnZhciBFbXB0eSA9IGZ1bmN0aW9uICgpIHsgLyogZW1wdHkgKi8gfTtcblxuLy8gQ3JlYXRlIG9iamVjdCB3aXRoIGZha2UgYG51bGxgIHByb3RvdHlwZTogdXNlIGlmcmFtZSBPYmplY3Qgd2l0aCBjbGVhcmVkIHByb3RvdHlwZVxudmFyIGNyZWF0ZURpY3QgPSBmdW5jdGlvbiAoKSB7XG4gIC8vIFRocmFzaCwgd2FzdGUgYW5kIHNvZG9teTogSUUgR0MgYnVnXG4gIHZhciBpZnJhbWUgPSBkb2N1bWVudENyZWF0ZUVsZW1lbnQoJ2lmcmFtZScpO1xuICB2YXIgbGVuZ3RoID0gZW51bUJ1Z0tleXMubGVuZ3RoO1xuICB2YXIgbHQgPSAnPCc7XG4gIHZhciBzY3JpcHQgPSAnc2NyaXB0JztcbiAgdmFyIGd0ID0gJz4nO1xuICB2YXIganMgPSAnamF2YScgKyBzY3JpcHQgKyAnOic7XG4gIHZhciBpZnJhbWVEb2N1bWVudDtcbiAgaWZyYW1lLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gIGh0bWwuYXBwZW5kQ2hpbGQoaWZyYW1lKTtcbiAgaWZyYW1lLnNyYyA9IFN0cmluZyhqcyk7XG4gIGlmcmFtZURvY3VtZW50ID0gaWZyYW1lLmNvbnRlbnRXaW5kb3cuZG9jdW1lbnQ7XG4gIGlmcmFtZURvY3VtZW50Lm9wZW4oKTtcbiAgaWZyYW1lRG9jdW1lbnQud3JpdGUobHQgKyBzY3JpcHQgKyBndCArICdkb2N1bWVudC5GPU9iamVjdCcgKyBsdCArICcvJyArIHNjcmlwdCArIGd0KTtcbiAgaWZyYW1lRG9jdW1lbnQuY2xvc2UoKTtcbiAgY3JlYXRlRGljdCA9IGlmcmFtZURvY3VtZW50LkY7XG4gIHdoaWxlIChsZW5ndGgtLSkgZGVsZXRlIGNyZWF0ZURpY3RbUFJPVE9UWVBFXVtlbnVtQnVnS2V5c1tsZW5ndGhdXTtcbiAgcmV0dXJuIGNyZWF0ZURpY3QoKTtcbn07XG5cbi8vIDE5LjEuMi4yIC8gMTUuMi4zLjUgT2JqZWN0LmNyZWF0ZShPIFssIFByb3BlcnRpZXNdKVxubW9kdWxlLmV4cG9ydHMgPSBPYmplY3QuY3JlYXRlIHx8IGZ1bmN0aW9uIGNyZWF0ZShPLCBQcm9wZXJ0aWVzKSB7XG4gIHZhciByZXN1bHQ7XG4gIGlmIChPICE9PSBudWxsKSB7XG4gICAgRW1wdHlbUFJPVE9UWVBFXSA9IGFuT2JqZWN0KE8pO1xuICAgIHJlc3VsdCA9IG5ldyBFbXB0eSgpO1xuICAgIEVtcHR5W1BST1RPVFlQRV0gPSBudWxsO1xuICAgIC8vIGFkZCBcIl9fcHJvdG9fX1wiIGZvciBPYmplY3QuZ2V0UHJvdG90eXBlT2YgcG9seWZpbGxcbiAgICByZXN1bHRbSUVfUFJPVE9dID0gTztcbiAgfSBlbHNlIHJlc3VsdCA9IGNyZWF0ZURpY3QoKTtcbiAgcmV0dXJuIFByb3BlcnRpZXMgPT09IHVuZGVmaW5lZCA/IHJlc3VsdCA6IGRlZmluZVByb3BlcnRpZXMocmVzdWx0LCBQcm9wZXJ0aWVzKTtcbn07XG5cbmhpZGRlbktleXNbSUVfUFJPVE9dID0gdHJ1ZTtcbiIsICJ2YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcbnZhciBkZWZpbmVQcm9wZXJ0eU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnR5Jyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG52YXIgb2JqZWN0S2V5cyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3Qta2V5cycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IERFU0NSSVBUT1JTID8gT2JqZWN0LmRlZmluZVByb3BlcnRpZXMgOiBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKE8sIFByb3BlcnRpZXMpIHtcbiAgYW5PYmplY3QoTyk7XG4gIHZhciBrZXlzID0gb2JqZWN0S2V5cyhQcm9wZXJ0aWVzKTtcbiAgdmFyIGxlbmd0aCA9IGtleXMubGVuZ3RoO1xuICB2YXIgaSA9IDA7XG4gIHZhciBrZXk7XG4gIHdoaWxlIChsZW5ndGggPiBpKSBkZWZpbmVQcm9wZXJ0eU1vZHVsZS5mKE8sIGtleSA9IGtleXNbaSsrXSwgUHJvcGVydGllc1trZXldKTtcbiAgcmV0dXJuIE87XG59O1xuIiwgInZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xudmFyIElFOF9ET01fREVGSU5FID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2llOC1kb20tZGVmaW5lJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG52YXIgdG9QcmltaXRpdmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tcHJpbWl0aXZlJyk7XG5cbnZhciBuYXRpdmVEZWZpbmVQcm9wZXJ0eSA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcblxuZXhwb3J0cy5mID0gREVTQ1JJUFRPUlMgPyBuYXRpdmVEZWZpbmVQcm9wZXJ0eSA6IGZ1bmN0aW9uIGRlZmluZVByb3BlcnR5KE8sIFAsIEF0dHJpYnV0ZXMpIHtcbiAgYW5PYmplY3QoTyk7XG4gIFAgPSB0b1ByaW1pdGl2ZShQLCB0cnVlKTtcbiAgYW5PYmplY3QoQXR0cmlidXRlcyk7XG4gIGlmIChJRThfRE9NX0RFRklORSkgdHJ5IHtcbiAgICByZXR1cm4gbmF0aXZlRGVmaW5lUHJvcGVydHkoTywgUCwgQXR0cmlidXRlcyk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7IC8qIGVtcHR5ICovIH1cbiAgaWYgKCdnZXQnIGluIEF0dHJpYnV0ZXMgfHwgJ3NldCcgaW4gQXR0cmlidXRlcykgdGhyb3cgVHlwZUVycm9yKCdBY2Nlc3NvcnMgbm90IHN1cHBvcnRlZCcpO1xuICBpZiAoJ3ZhbHVlJyBpbiBBdHRyaWJ1dGVzKSBPW1BdID0gQXR0cmlidXRlcy52YWx1ZTtcbiAgcmV0dXJuIE87XG59O1xuIiwgInZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xudmFyIHByb3BlcnR5SXNFbnVtZXJhYmxlTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1wcm9wZXJ0eS1pcy1lbnVtZXJhYmxlJyk7XG52YXIgY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1wcm9wZXJ0eS1kZXNjcmlwdG9yJyk7XG52YXIgdG9JbmRleGVkT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWluZGV4ZWQtb2JqZWN0Jyk7XG52YXIgdG9QcmltaXRpdmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tcHJpbWl0aXZlJyk7XG52YXIgaGFzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hhcycpO1xudmFyIElFOF9ET01fREVGSU5FID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2llOC1kb20tZGVmaW5lJyk7XG5cbnZhciBuYXRpdmVHZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xuXG5leHBvcnRzLmYgPSBERVNDUklQVE9SUyA/IG5hdGl2ZUdldE93blByb3BlcnR5RGVzY3JpcHRvciA6IGZ1bmN0aW9uIGdldE93blByb3BlcnR5RGVzY3JpcHRvcihPLCBQKSB7XG4gIE8gPSB0b0luZGV4ZWRPYmplY3QoTyk7XG4gIFAgPSB0b1ByaW1pdGl2ZShQLCB0cnVlKTtcbiAgaWYgKElFOF9ET01fREVGSU5FKSB0cnkge1xuICAgIHJldHVybiBuYXRpdmVHZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoTywgUCk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7IC8qIGVtcHR5ICovIH1cbiAgaWYgKGhhcyhPLCBQKSkgcmV0dXJuIGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvcighcHJvcGVydHlJc0VudW1lcmFibGVNb2R1bGUuZi5jYWxsKE8sIFApLCBPW1BdKTtcbn07XG4iLCAiLy8gMTkuMS4yLjcgLyAxNS4yLjMuNCBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhPKVxudmFyIGludGVybmFsT2JqZWN0S2V5cyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3Qta2V5cy1pbnRlcm5hbCcpO1xudmFyIGVudW1CdWdLZXlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2VudW0tYnVnLWtleXMnKTtcblxudmFyIGhpZGRlbktleXMgPSBlbnVtQnVnS2V5cy5jb25jYXQoJ2xlbmd0aCcsICdwcm90b3R5cGUnKTtcblxuZXhwb3J0cy5mID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMgfHwgZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlOYW1lcyhPKSB7XG4gIHJldHVybiBpbnRlcm5hbE9iamVjdEtleXMoTywgaGlkZGVuS2V5cyk7XG59O1xuIiwgImV4cG9ydHMuZiA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHM7XG4iLCAidmFyIGhhcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oYXMnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1vYmplY3QnKTtcbnZhciBzaGFyZWRLZXkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2hhcmVkLWtleScpO1xudmFyIENPUlJFQ1RfUFJPVE9UWVBFX0dFVFRFUiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jb3JyZWN0LXByb3RvdHlwZS1nZXR0ZXInKTtcblxudmFyIElFX1BST1RPID0gc2hhcmVkS2V5KCdJRV9QUk9UTycpO1xudmFyIE9iamVjdFByb3RvdHlwZSA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8vIDE5LjEuMi45IC8gMTUuMi4zLjIgT2JqZWN0LmdldFByb3RvdHlwZU9mKE8pXG5tb2R1bGUuZXhwb3J0cyA9IENPUlJFQ1RfUFJPVE9UWVBFX0dFVFRFUiA/IE9iamVjdC5nZXRQcm90b3R5cGVPZiA6IGZ1bmN0aW9uIChPKSB7XG4gIE8gPSB0b09iamVjdChPKTtcbiAgaWYgKGhhcyhPLCBJRV9QUk9UTykpIHJldHVybiBPW0lFX1BST1RPXTtcbiAgaWYgKHR5cGVvZiBPLmNvbnN0cnVjdG9yID09ICdmdW5jdGlvbicgJiYgTyBpbnN0YW5jZW9mIE8uY29uc3RydWN0b3IpIHtcbiAgICByZXR1cm4gTy5jb25zdHJ1Y3Rvci5wcm90b3R5cGU7XG4gIH0gcmV0dXJuIE8gaW5zdGFuY2VvZiBPYmplY3QgPyBPYmplY3RQcm90b3R5cGUgOiBudWxsO1xufTtcbiIsICJ2YXIgaGFzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hhcycpO1xudmFyIHRvSW5kZXhlZE9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbmRleGVkLW9iamVjdCcpO1xudmFyIGFycmF5SW5jbHVkZXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktaW5jbHVkZXMnKTtcbnZhciBoaWRkZW5LZXlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hpZGRlbi1rZXlzJyk7XG5cbnZhciBhcnJheUluZGV4T2YgPSBhcnJheUluY2x1ZGVzKGZhbHNlKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAob2JqZWN0LCBuYW1lcykge1xuICB2YXIgTyA9IHRvSW5kZXhlZE9iamVjdChvYmplY3QpO1xuICB2YXIgaSA9IDA7XG4gIHZhciByZXN1bHQgPSBbXTtcbiAgdmFyIGtleTtcbiAgZm9yIChrZXkgaW4gTykgIWhhcyhoaWRkZW5LZXlzLCBrZXkpICYmIGhhcyhPLCBrZXkpICYmIHJlc3VsdC5wdXNoKGtleSk7XG4gIC8vIERvbid0IGVudW0gYnVnICYgaGlkZGVuIGtleXNcbiAgd2hpbGUgKG5hbWVzLmxlbmd0aCA+IGkpIGlmIChoYXMoTywga2V5ID0gbmFtZXNbaSsrXSkpIHtcbiAgICB+YXJyYXlJbmRleE9mKHJlc3VsdCwga2V5KSB8fCByZXN1bHQucHVzaChrZXkpO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59O1xuIiwgInZhciBpbnRlcm5hbE9iamVjdEtleXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWtleXMtaW50ZXJuYWwnKTtcbnZhciBlbnVtQnVnS2V5cyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9lbnVtLWJ1Zy1rZXlzJyk7XG5cbi8vIDE5LjEuMi4xNCAvIDE1LjIuMy4xNCBPYmplY3Qua2V5cyhPKVxubW9kdWxlLmV4cG9ydHMgPSBPYmplY3Qua2V5cyB8fCBmdW5jdGlvbiBrZXlzKE8pIHtcbiAgcmV0dXJuIGludGVybmFsT2JqZWN0S2V5cyhPLCBlbnVtQnVnS2V5cyk7XG59O1xuIiwgIid1c2Ugc3RyaWN0JztcbnZhciBuYXRpdmVQcm9wZXJ0eUlzRW51bWVyYWJsZSA9IHt9LnByb3BlcnR5SXNFbnVtZXJhYmxlO1xudmFyIGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG5cbi8vIE5hc2hvcm4gfiBKREs4IGJ1Z1xudmFyIE5BU0hPUk5fQlVHID0gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yICYmICFuYXRpdmVQcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKHsgMTogMiB9LCAxKTtcblxuZXhwb3J0cy5mID0gTkFTSE9STl9CVUcgPyBmdW5jdGlvbiBwcm9wZXJ0eUlzRW51bWVyYWJsZShWKSB7XG4gIHZhciBkZXNjcmlwdG9yID0gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRoaXMsIFYpO1xuICByZXR1cm4gISFkZXNjcmlwdG9yICYmIGRlc2NyaXB0b3IuZW51bWVyYWJsZTtcbn0gOiBuYXRpdmVQcm9wZXJ0eUlzRW51bWVyYWJsZTtcbiIsICJ2YXIgdmFsaWRhdGVTZXRQcm90b3R5cGVPZkFyZ3VtZW50cyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy92YWxpZGF0ZS1zZXQtcHJvdG90eXBlLW9mLWFyZ3VtZW50cycpO1xuXG4vLyBXb3JrcyB3aXRoIF9fcHJvdG9fXyBvbmx5LiBPbGQgdjggY2FuJ3Qgd29yayB3aXRoIG51bGwgcHJvdG8gb2JqZWN0cy5cbi8qIGVzbGludC1kaXNhYmxlIG5vLXByb3RvICovXG5tb2R1bGUuZXhwb3J0cyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fCAoJ19fcHJvdG9fXycgaW4ge30gPyBmdW5jdGlvbiAoKSB7XG4gIHZhciBjb3JyZWN0U2V0dGVyID0gZmFsc2U7XG4gIHZhciB0ZXN0ID0ge307XG4gIHZhciBzZXR0ZXI7XG4gIHRyeSB7XG4gICAgc2V0dGVyID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihPYmplY3QucHJvdG90eXBlLCAnX19wcm90b19fJykuc2V0O1xuICAgIHNldHRlci5jYWxsKHRlc3QsIFtdKTtcbiAgICBjb3JyZWN0U2V0dGVyID0gdGVzdCBpbnN0YW5jZW9mIEFycmF5O1xuICB9IGNhdGNoIChlcnJvcikgeyAvKiBlbXB0eSAqLyB9XG4gIHJldHVybiBmdW5jdGlvbiBzZXRQcm90b3R5cGVPZihPLCBwcm90bykge1xuICAgIHZhbGlkYXRlU2V0UHJvdG90eXBlT2ZBcmd1bWVudHMoTywgcHJvdG8pO1xuICAgIGlmIChjb3JyZWN0U2V0dGVyKSBzZXR0ZXIuY2FsbChPLCBwcm90byk7XG4gICAgZWxzZSBPLl9fcHJvdG9fXyA9IHByb3RvO1xuICAgIHJldHVybiBPO1xuICB9O1xufSgpIDogdW5kZWZpbmVkKTtcbiIsICJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIGdldE93blByb3BlcnR5TmFtZXNNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktbmFtZXMnKTtcbnZhciBnZXRPd25Qcm9wZXJ0eVN5bWJvbHNNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktc3ltYm9scycpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xuXG52YXIgUmVmbGVjdCA9IGdsb2JhbC5SZWZsZWN0O1xuXG4vLyBhbGwgb2JqZWN0IGtleXMsIGluY2x1ZGVzIG5vbi1lbnVtZXJhYmxlIGFuZCBzeW1ib2xzXG5tb2R1bGUuZXhwb3J0cyA9IFJlZmxlY3QgJiYgUmVmbGVjdC5vd25LZXlzIHx8IGZ1bmN0aW9uIG93bktleXMoaXQpIHtcbiAgdmFyIGtleXMgPSBnZXRPd25Qcm9wZXJ0eU5hbWVzTW9kdWxlLmYoYW5PYmplY3QoaXQpKTtcbiAgdmFyIGdldE93blByb3BlcnR5U3ltYm9scyA9IGdldE93blByb3BlcnR5U3ltYm9sc01vZHVsZS5mO1xuICByZXR1cm4gZ2V0T3duUHJvcGVydHlTeW1ib2xzID8ga2V5cy5jb25jYXQoZ2V0T3duUHJvcGVydHlTeW1ib2xzKGl0KSkgOiBrZXlzO1xufTtcbiIsICJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbiIsICJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIHNoYXJlZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zaGFyZWQnKTtcbnZhciBoaWRlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hpZGUnKTtcbnZhciBoYXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzJyk7XG52YXIgc2V0R2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NldC1nbG9iYWwnKTtcbnZhciBuYXRpdmVGdW5jdGlvblRvU3RyaW5nID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLXRvLXN0cmluZycpO1xudmFyIEludGVybmFsU3RhdGVNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW50ZXJuYWwtc3RhdGUnKTtcblxudmFyIGdldEludGVybmFsU3RhdGUgPSBJbnRlcm5hbFN0YXRlTW9kdWxlLmdldDtcbnZhciBlbmZvcmNlSW50ZXJuYWxTdGF0ZSA9IEludGVybmFsU3RhdGVNb2R1bGUuZW5mb3JjZTtcbnZhciBURU1QTEFURSA9IFN0cmluZyhuYXRpdmVGdW5jdGlvblRvU3RyaW5nKS5zcGxpdCgndG9TdHJpbmcnKTtcblxuc2hhcmVkKCdpbnNwZWN0U291cmNlJywgZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBuYXRpdmVGdW5jdGlvblRvU3RyaW5nLmNhbGwoaXQpO1xufSk7XG5cbihtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChPLCBrZXksIHZhbHVlLCBvcHRpb25zKSB7XG4gIHZhciB1bnNhZmUgPSBvcHRpb25zID8gISFvcHRpb25zLnVuc2FmZSA6IGZhbHNlO1xuICB2YXIgc2ltcGxlID0gb3B0aW9ucyA/ICEhb3B0aW9ucy5lbnVtZXJhYmxlIDogZmFsc2U7XG4gIHZhciBub1RhcmdldEdldCA9IG9wdGlvbnMgPyAhIW9wdGlvbnMubm9UYXJnZXRHZXQgOiBmYWxzZTtcbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PSAnZnVuY3Rpb24nKSB7XG4gICAgaWYgKHR5cGVvZiBrZXkgPT0gJ3N0cmluZycgJiYgIWhhcyh2YWx1ZSwgJ25hbWUnKSkgaGlkZSh2YWx1ZSwgJ25hbWUnLCBrZXkpO1xuICAgIGVuZm9yY2VJbnRlcm5hbFN0YXRlKHZhbHVlKS5zb3VyY2UgPSBURU1QTEFURS5qb2luKHR5cGVvZiBrZXkgPT0gJ3N0cmluZycgPyBrZXkgOiAnJyk7XG4gIH1cbiAgaWYgKE8gPT09IGdsb2JhbCkge1xuICAgIGlmIChzaW1wbGUpIE9ba2V5XSA9IHZhbHVlO1xuICAgIGVsc2Ugc2V0R2xvYmFsKGtleSwgdmFsdWUpO1xuICAgIHJldHVybjtcbiAgfSBlbHNlIGlmICghdW5zYWZlKSB7XG4gICAgZGVsZXRlIE9ba2V5XTtcbiAgfSBlbHNlIGlmICghbm9UYXJnZXRHZXQgJiYgT1trZXldKSB7XG4gICAgc2ltcGxlID0gdHJ1ZTtcbiAgfVxuICBpZiAoc2ltcGxlKSBPW2tleV0gPSB2YWx1ZTtcbiAgZWxzZSBoaWRlKE8sIGtleSwgdmFsdWUpO1xuLy8gYWRkIGZha2UgRnVuY3Rpb24jdG9TdHJpbmcgZm9yIGNvcnJlY3Qgd29yayB3cmFwcGVkIG1ldGhvZHMgLyBjb25zdHJ1Y3RvcnMgd2l0aCBtZXRob2RzIGxpa2UgTG9EYXNoIGlzTmF0aXZlXG59KShGdW5jdGlvbi5wcm90b3R5cGUsICd0b1N0cmluZycsIGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICByZXR1cm4gdHlwZW9mIHRoaXMgPT0gJ2Z1bmN0aW9uJyAmJiBnZXRJbnRlcm5hbFN0YXRlKHRoaXMpLnNvdXJjZSB8fCBuYXRpdmVGdW5jdGlvblRvU3RyaW5nLmNhbGwodGhpcyk7XG59KTtcbiIsICIvLyBgUmVxdWlyZU9iamVjdENvZXJjaWJsZWAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1yZXF1aXJlb2JqZWN0Y29lcmNpYmxlXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICBpZiAoaXQgPT0gdW5kZWZpbmVkKSB0aHJvdyBUeXBlRXJyb3IoXCJDYW4ndCBjYWxsIG1ldGhvZCBvbiBcIiArIGl0KTtcbiAgcmV0dXJuIGl0O1xufTtcbiIsICJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIGhpZGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGlkZScpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XG4gIHRyeSB7XG4gICAgaGlkZShnbG9iYWwsIGtleSwgdmFsdWUpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGdsb2JhbFtrZXldID0gdmFsdWU7XG4gIH0gcmV0dXJuIHZhbHVlO1xufTtcbiIsICJ2YXIgZGVmaW5lUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0eScpLmY7XG52YXIgaGFzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hhcycpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xuXG52YXIgVE9fU1RSSU5HX1RBRyA9IHdlbGxLbm93blN5bWJvbCgndG9TdHJpbmdUYWcnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQsIFRBRywgU1RBVElDKSB7XG4gIGlmIChpdCAmJiAhaGFzKGl0ID0gU1RBVElDID8gaXQgOiBpdC5wcm90b3R5cGUsIFRPX1NUUklOR19UQUcpKSB7XG4gICAgZGVmaW5lUHJvcGVydHkoaXQsIFRPX1NUUklOR19UQUcsIHsgY29uZmlndXJhYmxlOiB0cnVlLCB2YWx1ZTogVEFHIH0pO1xuICB9XG59O1xuIiwgInZhciBzaGFyZWQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2hhcmVkJyk7XG52YXIgdWlkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3VpZCcpO1xuXG52YXIga2V5cyA9IHNoYXJlZCgna2V5cycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgcmV0dXJuIGtleXNba2V5XSB8fCAoa2V5c1trZXldID0gdWlkKGtleSkpO1xufTtcbiIsICJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIHNldEdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zZXQtZ2xvYmFsJyk7XG52YXIgSVNfUFVSRSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1wdXJlJyk7XG5cbnZhciBTSEFSRUQgPSAnX19jb3JlLWpzX3NoYXJlZF9fJztcbnZhciBzdG9yZSA9IGdsb2JhbFtTSEFSRURdIHx8IHNldEdsb2JhbChTSEFSRUQsIHt9KTtcblxuKG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcbiAgcmV0dXJuIHN0b3JlW2tleV0gfHwgKHN0b3JlW2tleV0gPSB2YWx1ZSAhPT0gdW5kZWZpbmVkID8gdmFsdWUgOiB7fSk7XG59KSgndmVyc2lvbnMnLCBbXSkucHVzaCh7XG4gIHZlcnNpb246ICczLjEuMycsXG4gIG1vZGU6IElTX1BVUkUgPyAncHVyZScgOiAnZ2xvYmFsJyxcbiAgY29weXJpZ2h0OiAnwqkgMjAxOSBEZW5pcyBQdXNoa2FyZXYgKHpsb2lyb2NrLnJ1KSdcbn0pO1xuIiwgInZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8taW50ZWdlcicpO1xudmFyIHJlcXVpcmVPYmplY3RDb2VyY2libGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVxdWlyZS1vYmplY3QtY29lcmNpYmxlJyk7XG5cbi8vIENPTlZFUlRfVE9fU1RSSU5HOiB0cnVlICAtPiBTdHJpbmcjYXRcbi8vIENPTlZFUlRfVE9fU1RSSU5HOiBmYWxzZSAtPiBTdHJpbmcjY29kZVBvaW50QXRcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHRoYXQsIHBvcywgQ09OVkVSVF9UT19TVFJJTkcpIHtcbiAgdmFyIFMgPSBTdHJpbmcocmVxdWlyZU9iamVjdENvZXJjaWJsZSh0aGF0KSk7XG4gIHZhciBwb3NpdGlvbiA9IHRvSW50ZWdlcihwb3MpO1xuICB2YXIgc2l6ZSA9IFMubGVuZ3RoO1xuICB2YXIgZmlyc3QsIHNlY29uZDtcbiAgaWYgKHBvc2l0aW9uIDwgMCB8fCBwb3NpdGlvbiA+PSBzaXplKSByZXR1cm4gQ09OVkVSVF9UT19TVFJJTkcgPyAnJyA6IHVuZGVmaW5lZDtcbiAgZmlyc3QgPSBTLmNoYXJDb2RlQXQocG9zaXRpb24pO1xuICByZXR1cm4gZmlyc3QgPCAweEQ4MDAgfHwgZmlyc3QgPiAweERCRkYgfHwgcG9zaXRpb24gKyAxID09PSBzaXplXG4gICAgfHwgKHNlY29uZCA9IFMuY2hhckNvZGVBdChwb3NpdGlvbiArIDEpKSA8IDB4REMwMCB8fCBzZWNvbmQgPiAweERGRkZcbiAgICAgID8gQ09OVkVSVF9UT19TVFJJTkcgPyBTLmNoYXJBdChwb3NpdGlvbikgOiBmaXJzdFxuICAgICAgOiBDT05WRVJUX1RPX1NUUklORyA/IFMuc2xpY2UocG9zaXRpb24sIHBvc2l0aW9uICsgMikgOiAoZmlyc3QgLSAweEQ4MDAgPDwgMTApICsgKHNlY29uZCAtIDB4REMwMCkgKyAweDEwMDAwO1xufTtcbiIsICJ2YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWludGVnZXInKTtcblxudmFyIG1heCA9IE1hdGgubWF4O1xudmFyIG1pbiA9IE1hdGgubWluO1xuXG4vLyBIZWxwZXIgZm9yIGEgcG9wdWxhciByZXBlYXRpbmcgY2FzZSBvZiB0aGUgc3BlYzpcbi8vIExldCBpbnRlZ2VyIGJlID8gVG9JbnRlZ2VyKGluZGV4KS5cbi8vIElmIGludGVnZXIgPCAwLCBsZXQgcmVzdWx0IGJlIG1heCgobGVuZ3RoICsgaW50ZWdlciksIDApOyBlbHNlIGxldCByZXN1bHQgYmUgbWluKGxlbmd0aCwgbGVuZ3RoKS5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGluZGV4LCBsZW5ndGgpIHtcbiAgdmFyIGludGVnZXIgPSB0b0ludGVnZXIoaW5kZXgpO1xuICByZXR1cm4gaW50ZWdlciA8IDAgPyBtYXgoaW50ZWdlciArIGxlbmd0aCwgMCkgOiBtaW4oaW50ZWdlciwgbGVuZ3RoKTtcbn07XG4iLCAiLy8gdG9PYmplY3Qgd2l0aCBmYWxsYmFjayBmb3Igbm9uLWFycmF5LWxpa2UgRVMzIHN0cmluZ3NcbnZhciBJbmRleGVkT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2luZGV4ZWQtb2JqZWN0Jyk7XG52YXIgcmVxdWlyZU9iamVjdENvZXJjaWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZXF1aXJlLW9iamVjdC1jb2VyY2libGUnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIEluZGV4ZWRPYmplY3QocmVxdWlyZU9iamVjdENvZXJjaWJsZShpdCkpO1xufTtcbiIsICJ2YXIgY2VpbCA9IE1hdGguY2VpbDtcbnZhciBmbG9vciA9IE1hdGguZmxvb3I7XG5cbi8vIGBUb0ludGVnZXJgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtdG9pbnRlZ2VyXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChhcmd1bWVudCkge1xuICByZXR1cm4gaXNOYU4oYXJndW1lbnQgPSArYXJndW1lbnQpID8gMCA6IChhcmd1bWVudCA+IDAgPyBmbG9vciA6IGNlaWwpKGFyZ3VtZW50KTtcbn07XG4iLCAidmFyIHRvSW50ZWdlciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbnRlZ2VyJyk7XG5cbnZhciBtaW4gPSBNYXRoLm1pbjtcblxuLy8gYFRvTGVuZ3RoYCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXRvbGVuZ3RoXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChhcmd1bWVudCkge1xuICByZXR1cm4gYXJndW1lbnQgPiAwID8gbWluKHRvSW50ZWdlcihhcmd1bWVudCksIDB4MUZGRkZGRkZGRkZGRkYpIDogMDsgLy8gMiAqKiA1MyAtIDEgPT0gOTAwNzE5OTI1NDc0MDk5MVxufTtcbiIsICJ2YXIgcmVxdWlyZU9iamVjdENvZXJjaWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZXF1aXJlLW9iamVjdC1jb2VyY2libGUnKTtcblxuLy8gYFRvT2JqZWN0YCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXRvb2JqZWN0XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChhcmd1bWVudCkge1xuICByZXR1cm4gT2JqZWN0KHJlcXVpcmVPYmplY3RDb2VyY2libGUoYXJndW1lbnQpKTtcbn07XG4iLCAidmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW9iamVjdCcpO1xuXG4vLyA3LjEuMSBUb1ByaW1pdGl2ZShpbnB1dCBbLCBQcmVmZXJyZWRUeXBlXSlcbi8vIGluc3RlYWQgb2YgdGhlIEVTNiBzcGVjIHZlcnNpb24sIHdlIGRpZG4ndCBpbXBsZW1lbnQgQEB0b1ByaW1pdGl2ZSBjYXNlXG4vLyBhbmQgdGhlIHNlY29uZCBhcmd1bWVudCAtIGZsYWcgLSBwcmVmZXJyZWQgdHlwZSBpcyBhIHN0cmluZ1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQsIFMpIHtcbiAgaWYgKCFpc09iamVjdChpdCkpIHJldHVybiBpdDtcbiAgdmFyIGZuLCB2YWw7XG4gIGlmIChTICYmIHR5cGVvZiAoZm4gPSBpdC50b1N0cmluZykgPT0gJ2Z1bmN0aW9uJyAmJiAhaXNPYmplY3QodmFsID0gZm4uY2FsbChpdCkpKSByZXR1cm4gdmFsO1xuICBpZiAodHlwZW9mIChmbiA9IGl0LnZhbHVlT2YpID09ICdmdW5jdGlvbicgJiYgIWlzT2JqZWN0KHZhbCA9IGZuLmNhbGwoaXQpKSkgcmV0dXJuIHZhbDtcbiAgaWYgKCFTICYmIHR5cGVvZiAoZm4gPSBpdC50b1N0cmluZykgPT0gJ2Z1bmN0aW9uJyAmJiAhaXNPYmplY3QodmFsID0gZm4uY2FsbChpdCkpKSByZXR1cm4gdmFsO1xuICB0aHJvdyBUeXBlRXJyb3IoXCJDYW4ndCBjb252ZXJ0IG9iamVjdCB0byBwcmltaXRpdmUgdmFsdWVcIik7XG59O1xuIiwgInZhciBpZCA9IDA7XG52YXIgcG9zdGZpeCA9IE1hdGgucmFuZG9tKCk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGtleSkge1xuICByZXR1cm4gJ1N5bWJvbCgnLmNvbmNhdChrZXkgPT09IHVuZGVmaW5lZCA/ICcnIDoga2V5LCAnKV8nLCAoKytpZCArIHBvc3RmaXgpLnRvU3RyaW5nKDM2KSk7XG59O1xuIiwgInZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1vYmplY3QnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoTywgcHJvdG8pIHtcbiAgYW5PYmplY3QoTyk7XG4gIGlmICghaXNPYmplY3QocHJvdG8pICYmIHByb3RvICE9PSBudWxsKSB7XG4gICAgdGhyb3cgVHlwZUVycm9yKFwiQ2FuJ3Qgc2V0IFwiICsgU3RyaW5nKHByb3RvKSArICcgYXMgYSBwcm90b3R5cGUnKTtcbiAgfVxufTtcbiIsICJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIHNoYXJlZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zaGFyZWQnKTtcbnZhciB1aWQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdWlkJyk7XG52YXIgTkFUSVZFX1NZTUJPTCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9uYXRpdmUtc3ltYm9sJyk7XG5cbnZhciBTeW1ib2wgPSBnbG9iYWwuU3ltYm9sO1xudmFyIHN0b3JlID0gc2hhcmVkKCd3a3MnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobmFtZSkge1xuICByZXR1cm4gc3RvcmVbbmFtZV0gfHwgKHN0b3JlW25hbWVdID0gTkFUSVZFX1NZTUJPTCAmJiBTeW1ib2xbbmFtZV1cbiAgICB8fCAoTkFUSVZFX1NZTUJPTCA/IFN5bWJvbCA6IHVpZCkoJ1N5bWJvbC4nICsgbmFtZSkpO1xufTtcbiIsICJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBmcm9tID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWZyb20nKTtcbnZhciBjaGVja0NvcnJlY3RuZXNzT2ZJdGVyYXRpb24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY2hlY2stY29ycmVjdG5lc3Mtb2YtaXRlcmF0aW9uJyk7XG5cbnZhciBJTkNPUlJFQ1RfSVRFUkFUSU9OID0gIWNoZWNrQ29ycmVjdG5lc3NPZkl0ZXJhdGlvbihmdW5jdGlvbiAoaXRlcmFibGUpIHtcbiAgQXJyYXkuZnJvbShpdGVyYWJsZSk7XG59KTtcblxuLy8gYEFycmF5LmZyb21gIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtYXJyYXkuZnJvbVxuJCh7IHRhcmdldDogJ0FycmF5Jywgc3RhdDogdHJ1ZSwgZm9yY2VkOiBJTkNPUlJFQ1RfSVRFUkFUSU9OIH0sIHtcbiAgZnJvbTogZnJvbVxufSk7XG4iLCAiJ3VzZSBzdHJpY3QnO1xudmFyIGNvZGVQb2ludEF0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3N0cmluZy1hdCcpO1xudmFyIEludGVybmFsU3RhdGVNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW50ZXJuYWwtc3RhdGUnKTtcbnZhciBkZWZpbmVJdGVyYXRvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZWZpbmUtaXRlcmF0b3InKTtcblxudmFyIFNUUklOR19JVEVSQVRPUiA9ICdTdHJpbmcgSXRlcmF0b3InO1xudmFyIHNldEludGVybmFsU3RhdGUgPSBJbnRlcm5hbFN0YXRlTW9kdWxlLnNldDtcbnZhciBnZXRJbnRlcm5hbFN0YXRlID0gSW50ZXJuYWxTdGF0ZU1vZHVsZS5nZXR0ZXJGb3IoU1RSSU5HX0lURVJBVE9SKTtcblxuLy8gYFN0cmluZy5wcm90b3R5cGVbQEBpdGVyYXRvcl1gIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtc3RyaW5nLnByb3RvdHlwZS1AQGl0ZXJhdG9yXG5kZWZpbmVJdGVyYXRvcihTdHJpbmcsICdTdHJpbmcnLCBmdW5jdGlvbiAoaXRlcmF0ZWQpIHtcbiAgc2V0SW50ZXJuYWxTdGF0ZSh0aGlzLCB7XG4gICAgdHlwZTogU1RSSU5HX0lURVJBVE9SLFxuICAgIHN0cmluZzogU3RyaW5nKGl0ZXJhdGVkKSxcbiAgICBpbmRleDogMFxuICB9KTtcbi8vIGAlU3RyaW5nSXRlcmF0b3JQcm90b3R5cGUlLm5leHRgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtJXN0cmluZ2l0ZXJhdG9ycHJvdG90eXBlJS5uZXh0XG59LCBmdW5jdGlvbiBuZXh0KCkge1xuICB2YXIgc3RhdGUgPSBnZXRJbnRlcm5hbFN0YXRlKHRoaXMpO1xuICB2YXIgc3RyaW5nID0gc3RhdGUuc3RyaW5nO1xuICB2YXIgaW5kZXggPSBzdGF0ZS5pbmRleDtcbiAgdmFyIHBvaW50O1xuICBpZiAoaW5kZXggPj0gc3RyaW5nLmxlbmd0aCkgcmV0dXJuIHsgdmFsdWU6IHVuZGVmaW5lZCwgZG9uZTogdHJ1ZSB9O1xuICBwb2ludCA9IGNvZGVQb2ludEF0KHN0cmluZywgaW5kZXgsIHRydWUpO1xuICBzdGF0ZS5pbmRleCArPSBwb2ludC5sZW5ndGg7XG4gIHJldHVybiB7IHZhbHVlOiBwb2ludCwgZG9uZTogZmFsc2UgfTtcbn0pO1xuIiwgInZhciBnO1xyXG5cclxuLy8gVGhpcyB3b3JrcyBpbiBub24tc3RyaWN0IG1vZGVcclxuZyA9IChmdW5jdGlvbigpIHtcclxuXHRyZXR1cm4gdGhpcztcclxufSkoKTtcclxuXHJcbnRyeSB7XHJcblx0Ly8gVGhpcyB3b3JrcyBpZiBldmFsIGlzIGFsbG93ZWQgKHNlZSBDU1ApXHJcblx0ZyA9IGcgfHwgRnVuY3Rpb24oXCJyZXR1cm4gdGhpc1wiKSgpIHx8ICgxLCBldmFsKShcInRoaXNcIik7XHJcbn0gY2F0Y2ggKGUpIHtcclxuXHQvLyBUaGlzIHdvcmtzIGlmIHRoZSB3aW5kb3cgcmVmZXJlbmNlIGlzIGF2YWlsYWJsZVxyXG5cdGlmICh0eXBlb2Ygd2luZG93ID09PSBcIm9iamVjdFwiKSBnID0gd2luZG93O1xyXG59XHJcblxyXG4vLyBnIGNhbiBzdGlsbCBiZSB1bmRlZmluZWQsIGJ1dCBub3RoaW5nIHRvIGRvIGFib3V0IGl0Li4uXHJcbi8vIFdlIHJldHVybiB1bmRlZmluZWQsIGluc3RlYWQgb2Ygbm90aGluZyBoZXJlLCBzbyBpdCdzXHJcbi8vIGVhc2llciB0byBoYW5kbGUgdGhpcyBjYXNlLiBpZighZ2xvYmFsKSB7IC4uLn1cclxuXHJcbm1vZHVsZS5leHBvcnRzID0gZztcclxuIiwgImltcG9ydCBjbGFzc25hbWVzIGZyb20gJ2NsYXNzbmFtZXMvZGVkdXBlJztcblxuaW1wb3J0IERFRkFVTFRfQVRUUlMgZnJvbSAnLi9kZWZhdWx0LWF0dHJzLmpzb24nO1xuXG5jbGFzcyBJY29uIHtcbiAgY29uc3RydWN0b3IobmFtZSwgY29udGVudHMsIHRhZ3MgPSBbXSkge1xuICAgIHRoaXMubmFtZSA9IG5hbWU7XG4gICAgdGhpcy5jb250ZW50cyA9IGNvbnRlbnRzO1xuICAgIHRoaXMudGFncyA9IHRhZ3M7XG4gICAgdGhpcy5hdHRycyA9IHtcbiAgICAgIC4uLkRFRkFVTFRfQVRUUlMsXG4gICAgICAuLi57IGNsYXNzOiBgZmVhdGhlciBmZWF0aGVyLSR7bmFtZX1gIH0sXG4gICAgfTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGUgYW4gU1ZHIHN0cmluZy5cbiAgICogQHBhcmFtIHtPYmplY3R9IGF0dHJzXG4gICAqIEByZXR1cm5zIHtzdHJpbmd9XG4gICAqL1xuICB0b1N2ZyhhdHRycyA9IHt9KSB7XG4gICAgY29uc3QgY29tYmluZWRBdHRycyA9IHtcbiAgICAgIC4uLnRoaXMuYXR0cnMsXG4gICAgICAuLi5hdHRycyxcbiAgICAgIC4uLnsgY2xhc3M6IGNsYXNzbmFtZXModGhpcy5hdHRycy5jbGFzcywgYXR0cnMuY2xhc3MpIH0sXG4gICAgfTtcblxuICAgIHJldHVybiBgPHN2ZyAke2F0dHJzVG9TdHJpbmcoY29tYmluZWRBdHRycyl9PiR7dGhpcy5jb250ZW50c308L3N2Zz5gO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybiBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgYW4gYEljb25gLlxuICAgKlxuICAgKiBBZGRlZCBmb3IgYmFja3dhcmQgY29tcGF0aWJpbGl0eS4gSWYgb2xkIGNvZGUgZXhwZWN0cyBgZmVhdGhlci5pY29ucy48bmFtZT5gXG4gICAqIHRvIGJlIGEgc3RyaW5nLCBgdG9TdHJpbmcoKWAgd2lsbCBnZXQgaW1wbGljaXRseSBjYWxsZWQuXG4gICAqXG4gICAqIEByZXR1cm5zIHtzdHJpbmd9XG4gICAqL1xuICB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gdGhpcy5jb250ZW50cztcbiAgfVxufVxuXG4vKipcbiAqIENvbnZlcnQgYXR0cmlidXRlcyBvYmplY3QgdG8gc3RyaW5nIG9mIEhUTUwgYXR0cmlidXRlcy5cbiAqIEBwYXJhbSB7T2JqZWN0fSBhdHRyc1xuICogQHJldHVybnMge3N0cmluZ31cbiAqL1xuZnVuY3Rpb24gYXR0cnNUb1N0cmluZyhhdHRycykge1xuICByZXR1cm4gT2JqZWN0LmtleXMoYXR0cnMpXG4gICAgLm1hcChrZXkgPT4gYCR7a2V5fT1cIiR7YXR0cnNba2V5XX1cImApXG4gICAgLmpvaW4oJyAnKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgSWNvbjtcbiIsICJpbXBvcnQgSWNvbiBmcm9tICcuL2ljb24nO1xuaW1wb3J0IGljb25zIGZyb20gJy4uL2Rpc3QvaWNvbnMuanNvbic7XG5pbXBvcnQgdGFncyBmcm9tICcuL3RhZ3MuanNvbic7XG5cbmV4cG9ydCBkZWZhdWx0IE9iamVjdC5rZXlzKGljb25zKVxuICAubWFwKGtleSA9PiBuZXcgSWNvbihrZXksIGljb25zW2tleV0sIHRhZ3Nba2V5XSkpXG4gIC5yZWR1Y2UoKG9iamVjdCwgaWNvbikgPT4ge1xuICAgIG9iamVjdFtpY29uLm5hbWVdID0gaWNvbjtcbiAgICByZXR1cm4gb2JqZWN0O1xuICB9LCB7fSk7XG4iLCAiaW1wb3J0IGljb25zIGZyb20gJy4vaWNvbnMnO1xuaW1wb3J0IHRvU3ZnIGZyb20gJy4vdG8tc3ZnJztcbmltcG9ydCByZXBsYWNlIGZyb20gJy4vcmVwbGFjZSc7XG5cbm1vZHVsZS5leHBvcnRzID0geyBpY29ucywgdG9TdmcsIHJlcGxhY2UgfTtcbiIsICIvKiBlc2xpbnQtZW52IGJyb3dzZXIgKi9cbmltcG9ydCBjbGFzc25hbWVzIGZyb20gJ2NsYXNzbmFtZXMvZGVkdXBlJztcblxuaW1wb3J0IGljb25zIGZyb20gJy4vaWNvbnMnO1xuXG4vKipcbiAqIFJlcGxhY2UgYWxsIEhUTUwgZWxlbWVudHMgdGhhdCBoYXZlIGEgYGRhdGEtZmVhdGhlcmAgYXR0cmlidXRlIHdpdGggU1ZHIG1hcmt1cFxuICogY29ycmVzcG9uZGluZyB0byB0aGUgZWxlbWVudCdzIGBkYXRhLWZlYXRoZXJgIGF0dHJpYnV0ZSB2YWx1ZS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBhdHRyc1xuICovXG5mdW5jdGlvbiByZXBsYWNlKGF0dHJzID0ge30pIHtcbiAgaWYgKHR5cGVvZiBkb2N1bWVudCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2BmZWF0aGVyLnJlcGxhY2UoKWAgb25seSB3b3JrcyBpbiBhIGJyb3dzZXIgZW52aXJvbm1lbnQuJyk7XG4gIH1cblxuICBjb25zdCBlbGVtZW50c1RvUmVwbGFjZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ1tkYXRhLWZlYXRoZXJdJyk7XG5cbiAgQXJyYXkuZnJvbShlbGVtZW50c1RvUmVwbGFjZSkuZm9yRWFjaChlbGVtZW50ID0+XG4gICAgcmVwbGFjZUVsZW1lbnQoZWxlbWVudCwgYXR0cnMpLFxuICApO1xufVxuXG4vKipcbiAqIFJlcGxhY2UgYSBzaW5nbGUgSFRNTCBlbGVtZW50IHdpdGggU1ZHIG1hcmt1cFxuICogY29ycmVzcG9uZGluZyB0byB0aGUgZWxlbWVudCdzIGBkYXRhLWZlYXRoZXJgIGF0dHJpYnV0ZSB2YWx1ZS5cbiAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IGVsZW1lbnRcbiAqIEBwYXJhbSB7T2JqZWN0fSBhdHRyc1xuICovXG5mdW5jdGlvbiByZXBsYWNlRWxlbWVudChlbGVtZW50LCBhdHRycyA9IHt9KSB7XG4gIGNvbnN0IGVsZW1lbnRBdHRycyA9IGdldEF0dHJzKGVsZW1lbnQpO1xuICBjb25zdCBuYW1lID0gZWxlbWVudEF0dHJzWydkYXRhLWZlYXRoZXInXTtcbiAgZGVsZXRlIGVsZW1lbnRBdHRyc1snZGF0YS1mZWF0aGVyJ107XG5cbiAgaWYgKGljb25zW25hbWVdID09PSB1bmRlZmluZWQpIHtcbiAgICBjb25zb2xlLndhcm4oYGZlYXRoZXI6ICcke25hbWV9JyBpcyBub3QgYSB2YWxpZCBpY29uYCk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgY29uc3Qgc3ZnU3RyaW5nID0gaWNvbnNbbmFtZV0udG9Tdmcoe1xuICAgIC4uLmF0dHJzLFxuICAgIC4uLmVsZW1lbnRBdHRycyxcbiAgICAuLi57IGNsYXNzOiBjbGFzc25hbWVzKGF0dHJzLmNsYXNzLCBlbGVtZW50QXR0cnMuY2xhc3MpIH0sXG4gIH0pO1xuICBjb25zdCBzdmdEb2N1bWVudCA9IG5ldyBET01QYXJzZXIoKS5wYXJzZUZyb21TdHJpbmcoXG4gICAgc3ZnU3RyaW5nLFxuICAgICdpbWFnZS9zdmcreG1sJyxcbiAgKTtcbiAgY29uc3Qgc3ZnRWxlbWVudCA9IHN2Z0RvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ3N2ZycpO1xuXG4gIGVsZW1lbnQucGFyZW50Tm9kZS5yZXBsYWNlQ2hpbGQoc3ZnRWxlbWVudCwgZWxlbWVudCk7XG59XG5cbi8qKlxuICogR2V0IHRoZSBhdHRyaWJ1dGVzIG9mIGFuIEhUTUwgZWxlbWVudC5cbiAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IGVsZW1lbnRcbiAqIEByZXR1cm5zIHtPYmplY3R9XG4gKi9cbmZ1bmN0aW9uIGdldEF0dHJzKGVsZW1lbnQpIHtcbiAgcmV0dXJuIEFycmF5LmZyb20oZWxlbWVudC5hdHRyaWJ1dGVzKS5yZWR1Y2UoKGF0dHJzLCBhdHRyKSA9PiB7XG4gICAgYXR0cnNbYXR0ci5uYW1lXSA9IGF0dHIudmFsdWU7XG4gICAgcmV0dXJuIGF0dHJzO1xuICB9LCB7fSk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHJlcGxhY2U7XG4iLCAiaW1wb3J0IGljb25zIGZyb20gJy4vaWNvbnMnO1xuXG4vKipcbiAqIENyZWF0ZSBhbiBTVkcgc3RyaW5nLlxuICogQGRlcHJlY2F0ZWRcbiAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lXG4gKiBAcGFyYW0ge09iamVjdH0gYXR0cnNcbiAqIEByZXR1cm5zIHtzdHJpbmd9XG4gKi9cbmZ1bmN0aW9uIHRvU3ZnKG5hbWUsIGF0dHJzID0ge30pIHtcbiAgY29uc29sZS53YXJuKFxuICAgICdmZWF0aGVyLnRvU3ZnKCkgaXMgZGVwcmVjYXRlZC4gUGxlYXNlIHVzZSBmZWF0aGVyLmljb25zW25hbWVdLnRvU3ZnKCkgaW5zdGVhZC4nLFxuICApO1xuXG4gIGlmICghbmFtZSkge1xuICAgIHRocm93IG5ldyBFcnJvcignVGhlIHJlcXVpcmVkIGBrZXlgIChpY29uIG5hbWUpIHBhcmFtZXRlciBpcyBtaXNzaW5nLicpO1xuICB9XG5cbiAgaWYgKCFpY29uc1tuYW1lXSkge1xuICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgIGBObyBpY29uIG1hdGNoaW5nICcke25hbWV9Jy4gU2VlIHRoZSBjb21wbGV0ZSBsaXN0IG9mIGljb25zIGF0IGh0dHBzOi8vZmVhdGhlcmljb25zLmNvbWAsXG4gICAgKTtcbiAgfVxuXG4gIHJldHVybiBpY29uc1tuYW1lXS50b1N2ZyhhdHRycyk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHRvU3ZnO1xuIiwgIiFmdW5jdGlvbih0LGUpe1wib2JqZWN0XCI9PXR5cGVvZiBleHBvcnRzJiZcInVuZGVmaW5lZFwiIT10eXBlb2YgbW9kdWxlP21vZHVsZS5leHBvcnRzPWUoKTpcImZ1bmN0aW9uXCI9PXR5cGVvZiBkZWZpbmUmJmRlZmluZS5hbWQ/ZGVmaW5lKGUpOih0PVwidW5kZWZpbmVkXCIhPXR5cGVvZiBnbG9iYWxUaGlzP2dsb2JhbFRoaXM6dHx8c2VsZikuZ3JhcGhvbG9neT1lKCl9KHRoaXMsKGZ1bmN0aW9uKCl7XCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gdChlKXtyZXR1cm4gdD1cImZ1bmN0aW9uXCI9PXR5cGVvZiBTeW1ib2wmJlwic3ltYm9sXCI9PXR5cGVvZiBTeW1ib2wuaXRlcmF0b3I/ZnVuY3Rpb24odCl7cmV0dXJuIHR5cGVvZiB0fTpmdW5jdGlvbih0KXtyZXR1cm4gdCYmXCJmdW5jdGlvblwiPT10eXBlb2YgU3ltYm9sJiZ0LmNvbnN0cnVjdG9yPT09U3ltYm9sJiZ0IT09U3ltYm9sLnByb3RvdHlwZT9cInN5bWJvbFwiOnR5cGVvZiB0fSx0KGUpfWZ1bmN0aW9uIGUodCxlKXt0LnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKGUucHJvdG90eXBlKSx0LnByb3RvdHlwZS5jb25zdHJ1Y3Rvcj10LHIodCxlKX1mdW5jdGlvbiBuKHQpe3JldHVybiBuPU9iamVjdC5zZXRQcm90b3R5cGVPZj9PYmplY3QuZ2V0UHJvdG90eXBlT2Y6ZnVuY3Rpb24odCl7cmV0dXJuIHQuX19wcm90b19ffHxPYmplY3QuZ2V0UHJvdG90eXBlT2YodCl9LG4odCl9ZnVuY3Rpb24gcih0LGUpe3JldHVybiByPU9iamVjdC5zZXRQcm90b3R5cGVPZnx8ZnVuY3Rpb24odCxlKXtyZXR1cm4gdC5fX3Byb3RvX189ZSx0fSxyKHQsZSl9ZnVuY3Rpb24gaSgpe2lmKFwidW5kZWZpbmVkXCI9PXR5cGVvZiBSZWZsZWN0fHwhUmVmbGVjdC5jb25zdHJ1Y3QpcmV0dXJuITE7aWYoUmVmbGVjdC5jb25zdHJ1Y3Quc2hhbSlyZXR1cm4hMTtpZihcImZ1bmN0aW9uXCI9PXR5cGVvZiBQcm94eSlyZXR1cm4hMDt0cnl7cmV0dXJuIEJvb2xlYW4ucHJvdG90eXBlLnZhbHVlT2YuY2FsbChSZWZsZWN0LmNvbnN0cnVjdChCb29sZWFuLFtdLChmdW5jdGlvbigpe30pKSksITB9Y2F0Y2godCl7cmV0dXJuITF9fWZ1bmN0aW9uIG8odCxlLG4pe3JldHVybiBvPWkoKT9SZWZsZWN0LmNvbnN0cnVjdDpmdW5jdGlvbih0LGUsbil7dmFyIGk9W251bGxdO2kucHVzaC5hcHBseShpLGUpO3ZhciBvPW5ldyhGdW5jdGlvbi5iaW5kLmFwcGx5KHQsaSkpO3JldHVybiBuJiZyKG8sbi5wcm90b3R5cGUpLG99LG8uYXBwbHkobnVsbCxhcmd1bWVudHMpfWZ1bmN0aW9uIGEodCl7dmFyIGU9XCJmdW5jdGlvblwiPT10eXBlb2YgTWFwP25ldyBNYXA6dm9pZCAwO3JldHVybiBhPWZ1bmN0aW9uKHQpe2lmKG51bGw9PT10fHwoaT10LC0xPT09RnVuY3Rpb24udG9TdHJpbmcuY2FsbChpKS5pbmRleE9mKFwiW25hdGl2ZSBjb2RlXVwiKSkpcmV0dXJuIHQ7dmFyIGk7aWYoXCJmdW5jdGlvblwiIT10eXBlb2YgdCl0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb25cIik7aWYodm9pZCAwIT09ZSl7aWYoZS5oYXModCkpcmV0dXJuIGUuZ2V0KHQpO2Uuc2V0KHQsYSl9ZnVuY3Rpb24gYSgpe3JldHVybiBvKHQsYXJndW1lbnRzLG4odGhpcykuY29uc3RydWN0b3IpfXJldHVybiBhLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKHQucHJvdG90eXBlLHtjb25zdHJ1Y3Rvcjp7dmFsdWU6YSxlbnVtZXJhYmxlOiExLHdyaXRhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMH19KSxyKGEsdCl9LGEodCl9ZnVuY3Rpb24gdSh0KXtpZih2b2lkIDA9PT10KXRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTtyZXR1cm4gdH12YXIgYz1mdW5jdGlvbigpe2Zvcih2YXIgdD1hcmd1bWVudHNbMF0sZT0xLG49YXJndW1lbnRzLmxlbmd0aDtlPG47ZSsrKWlmKGFyZ3VtZW50c1tlXSlmb3IodmFyIHIgaW4gYXJndW1lbnRzW2VdKXRbcl09YXJndW1lbnRzW2VdW3JdO3JldHVybiB0fTtmdW5jdGlvbiBkKHQsZSxuLHIpe3ZhciBpPXQuX25vZGVzLmdldChlKSxvPW51bGw7cmV0dXJuIGk/bz1cIm1peGVkXCI9PT1yP2kub3V0JiZpLm91dFtuXXx8aS51bmRpcmVjdGVkJiZpLnVuZGlyZWN0ZWRbbl06XCJkaXJlY3RlZFwiPT09cj9pLm91dCYmaS5vdXRbbl06aS51bmRpcmVjdGVkJiZpLnVuZGlyZWN0ZWRbbl06b31mdW5jdGlvbiBzKGUpe3JldHVybiBudWxsIT09ZSYmXCJvYmplY3RcIj09PXQoZSkmJlwiZnVuY3Rpb25cIj09dHlwZW9mIGUuYWRkVW5kaXJlY3RlZEVkZ2VXaXRoS2V5JiZcImZ1bmN0aW9uXCI9PXR5cGVvZiBlLmRyb3BOb2RlfWZ1bmN0aW9uIGgoZSl7cmV0dXJuXCJvYmplY3RcIj09PXQoZSkmJm51bGwhPT1lJiZlLmNvbnN0cnVjdG9yPT09T2JqZWN0fWZ1bmN0aW9uIGYodCl7dmFyIGU7Zm9yKGUgaW4gdClyZXR1cm4hMTtyZXR1cm4hMH1mdW5jdGlvbiBwKHQsZSxuKXtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxlLHtlbnVtZXJhYmxlOiExLGNvbmZpZ3VyYWJsZTohMSx3cml0YWJsZTohMCx2YWx1ZTpufSl9ZnVuY3Rpb24gbCh0LGUsbil7dmFyIHI9e2VudW1lcmFibGU6ITAsY29uZmlndXJhYmxlOiEwfTtcImZ1bmN0aW9uXCI9PXR5cGVvZiBuP3IuZ2V0PW46KHIudmFsdWU9bixyLndyaXRhYmxlPSExKSxPYmplY3QuZGVmaW5lUHJvcGVydHkodCxlLHIpfWZ1bmN0aW9uIGcodCl7cmV0dXJuISFoKHQpJiYhKHQuYXR0cmlidXRlcyYmIUFycmF5LmlzQXJyYXkodC5hdHRyaWJ1dGVzKSl9XCJmdW5jdGlvblwiPT10eXBlb2YgT2JqZWN0LmFzc2lnbiYmKGM9T2JqZWN0LmFzc2lnbik7dmFyIHksdj17ZXhwb3J0czp7fX0sYj1cIm9iamVjdFwiPT10eXBlb2YgUmVmbGVjdD9SZWZsZWN0Om51bGwsdz1iJiZcImZ1bmN0aW9uXCI9PXR5cGVvZiBiLmFwcGx5P2IuYXBwbHk6ZnVuY3Rpb24odCxlLG4pe3JldHVybiBGdW5jdGlvbi5wcm90b3R5cGUuYXBwbHkuY2FsbCh0LGUsbil9O3k9YiYmXCJmdW5jdGlvblwiPT10eXBlb2YgYi5vd25LZXlzP2Iub3duS2V5czpPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzP2Z1bmN0aW9uKHQpe3JldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh0KS5jb25jYXQoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyh0KSl9OmZ1bmN0aW9uKHQpe3JldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh0KX07dmFyIG09TnVtYmVyLmlzTmFOfHxmdW5jdGlvbih0KXtyZXR1cm4gdCE9dH07ZnVuY3Rpb24gXygpe18uaW5pdC5jYWxsKHRoaXMpfXYuZXhwb3J0cz1fLHYuZXhwb3J0cy5vbmNlPWZ1bmN0aW9uKHQsZSl7cmV0dXJuIG5ldyBQcm9taXNlKChmdW5jdGlvbihuLHIpe2Z1bmN0aW9uIGkobil7dC5yZW1vdmVMaXN0ZW5lcihlLG8pLHIobil9ZnVuY3Rpb24gbygpe1wiZnVuY3Rpb25cIj09dHlwZW9mIHQucmVtb3ZlTGlzdGVuZXImJnQucmVtb3ZlTGlzdGVuZXIoXCJlcnJvclwiLGkpLG4oW10uc2xpY2UuY2FsbChhcmd1bWVudHMpKX1VKHQsZSxvLHtvbmNlOiEwfSksXCJlcnJvclwiIT09ZSYmZnVuY3Rpb24odCxlLG4pe1wiZnVuY3Rpb25cIj09dHlwZW9mIHQub24mJlUodCxcImVycm9yXCIsZSxuKX0odCxpLHtvbmNlOiEwfSl9KSl9LF8uRXZlbnRFbWl0dGVyPV8sXy5wcm90b3R5cGUuX2V2ZW50cz12b2lkIDAsXy5wcm90b3R5cGUuX2V2ZW50c0NvdW50PTAsXy5wcm90b3R5cGUuX21heExpc3RlbmVycz12b2lkIDA7dmFyIGs9MTA7ZnVuY3Rpb24gRyh0KXtpZihcImZ1bmN0aW9uXCIhPXR5cGVvZiB0KXRocm93IG5ldyBUeXBlRXJyb3IoJ1RoZSBcImxpc3RlbmVyXCIgYXJndW1lbnQgbXVzdCBiZSBvZiB0eXBlIEZ1bmN0aW9uLiBSZWNlaXZlZCB0eXBlICcrdHlwZW9mIHQpfWZ1bmN0aW9uIHgodCl7cmV0dXJuIHZvaWQgMD09PXQuX21heExpc3RlbmVycz9fLmRlZmF1bHRNYXhMaXN0ZW5lcnM6dC5fbWF4TGlzdGVuZXJzfWZ1bmN0aW9uIEUodCxlLG4scil7dmFyIGksbyxhLHU7aWYoRyhuKSx2b2lkIDA9PT0obz10Ll9ldmVudHMpPyhvPXQuX2V2ZW50cz1PYmplY3QuY3JlYXRlKG51bGwpLHQuX2V2ZW50c0NvdW50PTApOih2b2lkIDAhPT1vLm5ld0xpc3RlbmVyJiYodC5lbWl0KFwibmV3TGlzdGVuZXJcIixlLG4ubGlzdGVuZXI/bi5saXN0ZW5lcjpuKSxvPXQuX2V2ZW50cyksYT1vW2VdKSx2b2lkIDA9PT1hKWE9b1tlXT1uLCsrdC5fZXZlbnRzQ291bnQ7ZWxzZSBpZihcImZ1bmN0aW9uXCI9PXR5cGVvZiBhP2E9b1tlXT1yP1tuLGFdOlthLG5dOnI/YS51bnNoaWZ0KG4pOmEucHVzaChuKSwoaT14KHQpKT4wJiZhLmxlbmd0aD5pJiYhYS53YXJuZWQpe2Eud2FybmVkPSEwO3ZhciBjPW5ldyBFcnJvcihcIlBvc3NpYmxlIEV2ZW50RW1pdHRlciBtZW1vcnkgbGVhayBkZXRlY3RlZC4gXCIrYS5sZW5ndGgrXCIgXCIrU3RyaW5nKGUpK1wiIGxpc3RlbmVycyBhZGRlZC4gVXNlIGVtaXR0ZXIuc2V0TWF4TGlzdGVuZXJzKCkgdG8gaW5jcmVhc2UgbGltaXRcIik7Yy5uYW1lPVwiTWF4TGlzdGVuZXJzRXhjZWVkZWRXYXJuaW5nXCIsYy5lbWl0dGVyPXQsYy50eXBlPWUsYy5jb3VudD1hLmxlbmd0aCx1PWMsY29uc29sZSYmY29uc29sZS53YXJuJiZjb25zb2xlLndhcm4odSl9cmV0dXJuIHR9ZnVuY3Rpb24gUygpe2lmKCF0aGlzLmZpcmVkKXJldHVybiB0aGlzLnRhcmdldC5yZW1vdmVMaXN0ZW5lcih0aGlzLnR5cGUsdGhpcy53cmFwRm4pLHRoaXMuZmlyZWQ9ITAsMD09PWFyZ3VtZW50cy5sZW5ndGg/dGhpcy5saXN0ZW5lci5jYWxsKHRoaXMudGFyZ2V0KTp0aGlzLmxpc3RlbmVyLmFwcGx5KHRoaXMudGFyZ2V0LGFyZ3VtZW50cyl9ZnVuY3Rpb24gQSh0LGUsbil7dmFyIHI9e2ZpcmVkOiExLHdyYXBGbjp2b2lkIDAsdGFyZ2V0OnQsdHlwZTplLGxpc3RlbmVyOm59LGk9Uy5iaW5kKHIpO3JldHVybiBpLmxpc3RlbmVyPW4sci53cmFwRm49aSxpfWZ1bmN0aW9uIEwodCxlLG4pe3ZhciByPXQuX2V2ZW50cztpZih2b2lkIDA9PT1yKXJldHVybltdO3ZhciBpPXJbZV07cmV0dXJuIHZvaWQgMD09PWk/W106XCJmdW5jdGlvblwiPT10eXBlb2YgaT9uP1tpLmxpc3RlbmVyfHxpXTpbaV06bj9mdW5jdGlvbih0KXtmb3IodmFyIGU9bmV3IEFycmF5KHQubGVuZ3RoKSxuPTA7bjxlLmxlbmd0aDsrK24pZVtuXT10W25dLmxpc3RlbmVyfHx0W25dO3JldHVybiBlfShpKTpOKGksaS5sZW5ndGgpfWZ1bmN0aW9uIEQodCl7dmFyIGU9dGhpcy5fZXZlbnRzO2lmKHZvaWQgMCE9PWUpe3ZhciBuPWVbdF07aWYoXCJmdW5jdGlvblwiPT10eXBlb2YgbilyZXR1cm4gMTtpZih2b2lkIDAhPT1uKXJldHVybiBuLmxlbmd0aH1yZXR1cm4gMH1mdW5jdGlvbiBOKHQsZSl7Zm9yKHZhciBuPW5ldyBBcnJheShlKSxyPTA7cjxlOysrciluW3JdPXRbcl07cmV0dXJuIG59ZnVuY3Rpb24gVSh0LGUsbixyKXtpZihcImZ1bmN0aW9uXCI9PXR5cGVvZiB0Lm9uKXIub25jZT90Lm9uY2UoZSxuKTp0Lm9uKGUsbik7ZWxzZXtpZihcImZ1bmN0aW9uXCIhPXR5cGVvZiB0LmFkZEV2ZW50TGlzdGVuZXIpdGhyb3cgbmV3IFR5cGVFcnJvcignVGhlIFwiZW1pdHRlclwiIGFyZ3VtZW50IG11c3QgYmUgb2YgdHlwZSBFdmVudEVtaXR0ZXIuIFJlY2VpdmVkIHR5cGUgJyt0eXBlb2YgdCk7dC5hZGRFdmVudExpc3RlbmVyKGUsKGZ1bmN0aW9uIGkobyl7ci5vbmNlJiZ0LnJlbW92ZUV2ZW50TGlzdGVuZXIoZSxpKSxuKG8pfSkpfX1mdW5jdGlvbiBqKHQpe2lmKFwiZnVuY3Rpb25cIiE9dHlwZW9mIHQpdGhyb3cgbmV3IEVycm9yKFwib2JsaXRlcmF0b3IvaXRlcmF0b3I6IGV4cGVjdGluZyBhIGZ1bmN0aW9uIVwiKTt0aGlzLm5leHQ9dH1PYmplY3QuZGVmaW5lUHJvcGVydHkoXyxcImRlZmF1bHRNYXhMaXN0ZW5lcnNcIix7ZW51bWVyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4ga30sc2V0OmZ1bmN0aW9uKHQpe2lmKFwibnVtYmVyXCIhPXR5cGVvZiB0fHx0PDB8fG0odCkpdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1RoZSB2YWx1ZSBvZiBcImRlZmF1bHRNYXhMaXN0ZW5lcnNcIiBpcyBvdXQgb2YgcmFuZ2UuIEl0IG11c3QgYmUgYSBub24tbmVnYXRpdmUgbnVtYmVyLiBSZWNlaXZlZCAnK3QrXCIuXCIpO2s9dH19KSxfLmluaXQ9ZnVuY3Rpb24oKXt2b2lkIDAhPT10aGlzLl9ldmVudHMmJnRoaXMuX2V2ZW50cyE9PU9iamVjdC5nZXRQcm90b3R5cGVPZih0aGlzKS5fZXZlbnRzfHwodGhpcy5fZXZlbnRzPU9iamVjdC5jcmVhdGUobnVsbCksdGhpcy5fZXZlbnRzQ291bnQ9MCksdGhpcy5fbWF4TGlzdGVuZXJzPXRoaXMuX21heExpc3RlbmVyc3x8dm9pZCAwfSxfLnByb3RvdHlwZS5zZXRNYXhMaXN0ZW5lcnM9ZnVuY3Rpb24odCl7aWYoXCJudW1iZXJcIiE9dHlwZW9mIHR8fHQ8MHx8bSh0KSl0aHJvdyBuZXcgUmFuZ2VFcnJvcignVGhlIHZhbHVlIG9mIFwiblwiIGlzIG91dCBvZiByYW5nZS4gSXQgbXVzdCBiZSBhIG5vbi1uZWdhdGl2ZSBudW1iZXIuIFJlY2VpdmVkICcrdCtcIi5cIik7cmV0dXJuIHRoaXMuX21heExpc3RlbmVycz10LHRoaXN9LF8ucHJvdG90eXBlLmdldE1heExpc3RlbmVycz1mdW5jdGlvbigpe3JldHVybiB4KHRoaXMpfSxfLnByb3RvdHlwZS5lbWl0PWZ1bmN0aW9uKHQpe2Zvcih2YXIgZT1bXSxuPTE7bjxhcmd1bWVudHMubGVuZ3RoO24rKyllLnB1c2goYXJndW1lbnRzW25dKTt2YXIgcj1cImVycm9yXCI9PT10LGk9dGhpcy5fZXZlbnRzO2lmKHZvaWQgMCE9PWkpcj1yJiZ2b2lkIDA9PT1pLmVycm9yO2Vsc2UgaWYoIXIpcmV0dXJuITE7aWYocil7dmFyIG87aWYoZS5sZW5ndGg+MCYmKG89ZVswXSksbyBpbnN0YW5jZW9mIEVycm9yKXRocm93IG87dmFyIGE9bmV3IEVycm9yKFwiVW5oYW5kbGVkIGVycm9yLlwiKyhvP1wiIChcIitvLm1lc3NhZ2UrXCIpXCI6XCJcIikpO3Rocm93IGEuY29udGV4dD1vLGF9dmFyIHU9aVt0XTtpZih2b2lkIDA9PT11KXJldHVybiExO2lmKFwiZnVuY3Rpb25cIj09dHlwZW9mIHUpdyh1LHRoaXMsZSk7ZWxzZXt2YXIgYz11Lmxlbmd0aCxkPU4odSxjKTtmb3Iobj0wO248YzsrK24pdyhkW25dLHRoaXMsZSl9cmV0dXJuITB9LF8ucHJvdG90eXBlLmFkZExpc3RlbmVyPWZ1bmN0aW9uKHQsZSl7cmV0dXJuIEUodGhpcyx0LGUsITEpfSxfLnByb3RvdHlwZS5vbj1fLnByb3RvdHlwZS5hZGRMaXN0ZW5lcixfLnByb3RvdHlwZS5wcmVwZW5kTGlzdGVuZXI9ZnVuY3Rpb24odCxlKXtyZXR1cm4gRSh0aGlzLHQsZSwhMCl9LF8ucHJvdG90eXBlLm9uY2U9ZnVuY3Rpb24odCxlKXtyZXR1cm4gRyhlKSx0aGlzLm9uKHQsQSh0aGlzLHQsZSkpLHRoaXN9LF8ucHJvdG90eXBlLnByZXBlbmRPbmNlTGlzdGVuZXI9ZnVuY3Rpb24odCxlKXtyZXR1cm4gRyhlKSx0aGlzLnByZXBlbmRMaXN0ZW5lcih0LEEodGhpcyx0LGUpKSx0aGlzfSxfLnByb3RvdHlwZS5yZW1vdmVMaXN0ZW5lcj1mdW5jdGlvbih0LGUpe3ZhciBuLHIsaSxvLGE7aWYoRyhlKSx2b2lkIDA9PT0ocj10aGlzLl9ldmVudHMpKXJldHVybiB0aGlzO2lmKHZvaWQgMD09PShuPXJbdF0pKXJldHVybiB0aGlzO2lmKG49PT1lfHxuLmxpc3RlbmVyPT09ZSkwPT0tLXRoaXMuX2V2ZW50c0NvdW50P3RoaXMuX2V2ZW50cz1PYmplY3QuY3JlYXRlKG51bGwpOihkZWxldGUgclt0XSxyLnJlbW92ZUxpc3RlbmVyJiZ0aGlzLmVtaXQoXCJyZW1vdmVMaXN0ZW5lclwiLHQsbi5saXN0ZW5lcnx8ZSkpO2Vsc2UgaWYoXCJmdW5jdGlvblwiIT10eXBlb2Ygbil7Zm9yKGk9LTEsbz1uLmxlbmd0aC0xO28+PTA7by0tKWlmKG5bb109PT1lfHxuW29dLmxpc3RlbmVyPT09ZSl7YT1uW29dLmxpc3RlbmVyLGk9bzticmVha31pZihpPDApcmV0dXJuIHRoaXM7MD09PWk/bi5zaGlmdCgpOmZ1bmN0aW9uKHQsZSl7Zm9yKDtlKzE8dC5sZW5ndGg7ZSsrKXRbZV09dFtlKzFdO3QucG9wKCl9KG4saSksMT09PW4ubGVuZ3RoJiYoclt0XT1uWzBdKSx2b2lkIDAhPT1yLnJlbW92ZUxpc3RlbmVyJiZ0aGlzLmVtaXQoXCJyZW1vdmVMaXN0ZW5lclwiLHQsYXx8ZSl9cmV0dXJuIHRoaXN9LF8ucHJvdG90eXBlLm9mZj1fLnByb3RvdHlwZS5yZW1vdmVMaXN0ZW5lcixfLnByb3RvdHlwZS5yZW1vdmVBbGxMaXN0ZW5lcnM9ZnVuY3Rpb24odCl7dmFyIGUsbixyO2lmKHZvaWQgMD09PShuPXRoaXMuX2V2ZW50cykpcmV0dXJuIHRoaXM7aWYodm9pZCAwPT09bi5yZW1vdmVMaXN0ZW5lcilyZXR1cm4gMD09PWFyZ3VtZW50cy5sZW5ndGg/KHRoaXMuX2V2ZW50cz1PYmplY3QuY3JlYXRlKG51bGwpLHRoaXMuX2V2ZW50c0NvdW50PTApOnZvaWQgMCE9PW5bdF0mJigwPT0tLXRoaXMuX2V2ZW50c0NvdW50P3RoaXMuX2V2ZW50cz1PYmplY3QuY3JlYXRlKG51bGwpOmRlbGV0ZSBuW3RdKSx0aGlzO2lmKDA9PT1hcmd1bWVudHMubGVuZ3RoKXt2YXIgaSxvPU9iamVjdC5rZXlzKG4pO2ZvcihyPTA7cjxvLmxlbmd0aDsrK3IpXCJyZW1vdmVMaXN0ZW5lclwiIT09KGk9b1tyXSkmJnRoaXMucmVtb3ZlQWxsTGlzdGVuZXJzKGkpO3JldHVybiB0aGlzLnJlbW92ZUFsbExpc3RlbmVycyhcInJlbW92ZUxpc3RlbmVyXCIpLHRoaXMuX2V2ZW50cz1PYmplY3QuY3JlYXRlKG51bGwpLHRoaXMuX2V2ZW50c0NvdW50PTAsdGhpc31pZihcImZ1bmN0aW9uXCI9PXR5cGVvZihlPW5bdF0pKXRoaXMucmVtb3ZlTGlzdGVuZXIodCxlKTtlbHNlIGlmKHZvaWQgMCE9PWUpZm9yKHI9ZS5sZW5ndGgtMTtyPj0wO3ItLSl0aGlzLnJlbW92ZUxpc3RlbmVyKHQsZVtyXSk7cmV0dXJuIHRoaXN9LF8ucHJvdG90eXBlLmxpc3RlbmVycz1mdW5jdGlvbih0KXtyZXR1cm4gTCh0aGlzLHQsITApfSxfLnByb3RvdHlwZS5yYXdMaXN0ZW5lcnM9ZnVuY3Rpb24odCl7cmV0dXJuIEwodGhpcyx0LCExKX0sXy5saXN0ZW5lckNvdW50PWZ1bmN0aW9uKHQsZSl7cmV0dXJuXCJmdW5jdGlvblwiPT10eXBlb2YgdC5saXN0ZW5lckNvdW50P3QubGlzdGVuZXJDb3VudChlKTpELmNhbGwodCxlKX0sXy5wcm90b3R5cGUubGlzdGVuZXJDb3VudD1ELF8ucHJvdG90eXBlLmV2ZW50TmFtZXM9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fZXZlbnRzQ291bnQ+MD95KHRoaXMuX2V2ZW50cyk6W119LFwidW5kZWZpbmVkXCIhPXR5cGVvZiBTeW1ib2wmJihqLnByb3RvdHlwZVtTeW1ib2wuaXRlcmF0b3JdPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXN9KSxqLm9mPWZ1bmN0aW9uKCl7dmFyIHQ9YXJndW1lbnRzLGU9dC5sZW5ndGgsbj0wO3JldHVybiBuZXcgaigoZnVuY3Rpb24oKXtyZXR1cm4gbj49ZT97ZG9uZTohMH06e2RvbmU6ITEsdmFsdWU6dFtuKytdfX0pKX0sai5lbXB0eT1mdW5jdGlvbigpe3JldHVybiBuZXcgaigoZnVuY3Rpb24oKXtyZXR1cm57ZG9uZTohMH19KSl9LGouZnJvbVNlcXVlbmNlPWZ1bmN0aW9uKHQpe3ZhciBlPTAsbj10Lmxlbmd0aDtyZXR1cm4gbmV3IGooKGZ1bmN0aW9uKCl7cmV0dXJuIGU+PW4/e2RvbmU6ITB9Ontkb25lOiExLHZhbHVlOnRbZSsrXX19KSl9LGouaXM9ZnVuY3Rpb24odCl7cmV0dXJuIHQgaW5zdGFuY2VvZiBqfHxcIm9iamVjdFwiPT10eXBlb2YgdCYmbnVsbCE9PXQmJlwiZnVuY3Rpb25cIj09dHlwZW9mIHQubmV4dH07dmFyIE89aixDPXt9O0MuQVJSQVlfQlVGRkVSX1NVUFBPUlQ9XCJ1bmRlZmluZWRcIiE9dHlwZW9mIEFycmF5QnVmZmVyLEMuU1lNQk9MX1NVUFBPUlQ9XCJ1bmRlZmluZWRcIiE9dHlwZW9mIFN5bWJvbDt2YXIgej1PLE09QyxQPU0uQVJSQVlfQlVGRkVSX1NVUFBPUlQsVD1NLlNZTUJPTF9TVVBQT1JUO3ZhciBSPWZ1bmN0aW9uKHQpe3ZhciBlPWZ1bmN0aW9uKHQpe3JldHVyblwic3RyaW5nXCI9PXR5cGVvZiB0fHxBcnJheS5pc0FycmF5KHQpfHxQJiZBcnJheUJ1ZmZlci5pc1ZpZXcodCk/ei5mcm9tU2VxdWVuY2UodCk6XCJvYmplY3RcIiE9dHlwZW9mIHR8fG51bGw9PT10P251bGw6VCYmXCJmdW5jdGlvblwiPT10eXBlb2YgdFtTeW1ib2wuaXRlcmF0b3JdP3RbU3ltYm9sLml0ZXJhdG9yXSgpOlwiZnVuY3Rpb25cIj09dHlwZW9mIHQubmV4dD90Om51bGx9KHQpO2lmKCFlKXRocm93IG5ldyBFcnJvcihcIm9ibGl0ZXJhdG9yOiB0YXJnZXQgaXMgbm90IGl0ZXJhYmxlIG5vciBhIHZhbGlkIGl0ZXJhdG9yLlwiKTtyZXR1cm4gZX0sVz1SLEs9ZnVuY3Rpb24odCxlKXtmb3IodmFyIG4scj1hcmd1bWVudHMubGVuZ3RoPjE/ZToxLzAsaT1yIT09MS8wP25ldyBBcnJheShyKTpbXSxvPTAsYT1XKHQpOzspe2lmKG89PT1yKXJldHVybiBpO2lmKChuPWEubmV4dCgpKS5kb25lKXJldHVybiBvIT09ZSYmKGkubGVuZ3RoPW8pLGk7aVtvKytdPW4udmFsdWV9fSxJPWZ1bmN0aW9uKHQpe2Z1bmN0aW9uIG4oZSl7dmFyIG47cmV0dXJuKG49dC5jYWxsKHRoaXMpfHx0aGlzKS5uYW1lPVwiR3JhcGhFcnJvclwiLG4ubWVzc2FnZT1lLG59cmV0dXJuIGUobix0KSxufShhKEVycm9yKSksRj1mdW5jdGlvbih0KXtmdW5jdGlvbiBuKGUpe3ZhciByO3JldHVybihyPXQuY2FsbCh0aGlzLGUpfHx0aGlzKS5uYW1lPVwiSW52YWxpZEFyZ3VtZW50c0dyYXBoRXJyb3JcIixcImZ1bmN0aW9uXCI9PXR5cGVvZiBFcnJvci5jYXB0dXJlU3RhY2tUcmFjZSYmRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UodShyKSxuLnByb3RvdHlwZS5jb25zdHJ1Y3Rvcikscn1yZXR1cm4gZShuLHQpLG59KEkpLFk9ZnVuY3Rpb24odCl7ZnVuY3Rpb24gbihlKXt2YXIgcjtyZXR1cm4ocj10LmNhbGwodGhpcyxlKXx8dGhpcykubmFtZT1cIk5vdEZvdW5kR3JhcGhFcnJvclwiLFwiZnVuY3Rpb25cIj09dHlwZW9mIEVycm9yLmNhcHR1cmVTdGFja1RyYWNlJiZFcnJvci5jYXB0dXJlU3RhY2tUcmFjZSh1KHIpLG4ucHJvdG90eXBlLmNvbnN0cnVjdG9yKSxyfXJldHVybiBlKG4sdCksbn0oSSksQj1mdW5jdGlvbih0KXtmdW5jdGlvbiBuKGUpe3ZhciByO3JldHVybihyPXQuY2FsbCh0aGlzLGUpfHx0aGlzKS5uYW1lPVwiVXNhZ2VHcmFwaEVycm9yXCIsXCJmdW5jdGlvblwiPT10eXBlb2YgRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UmJkVycm9yLmNhcHR1cmVTdGFja1RyYWNlKHUociksbi5wcm90b3R5cGUuY29uc3RydWN0b3IpLHJ9cmV0dXJuIGUobix0KSxufShJKTtmdW5jdGlvbiBxKHQsZSl7dGhpcy5rZXk9dCx0aGlzLmF0dHJpYnV0ZXM9ZSx0aGlzLmNsZWFyKCl9ZnVuY3Rpb24gSih0LGUpe3RoaXMua2V5PXQsdGhpcy5hdHRyaWJ1dGVzPWUsdGhpcy5jbGVhcigpfWZ1bmN0aW9uIFYodCxlKXt0aGlzLmtleT10LHRoaXMuYXR0cmlidXRlcz1lLHRoaXMuY2xlYXIoKX1mdW5jdGlvbiBIKHQsZSxuLHIsaSl7dGhpcy5rZXk9ZSx0aGlzLmF0dHJpYnV0ZXM9aSx0aGlzLnVuZGlyZWN0ZWQ9dCx0aGlzLnNvdXJjZT1uLHRoaXMudGFyZ2V0PXJ9ZnVuY3Rpb24gUSh0LGUsbixyLGksbyxhKXt2YXIgdSxjLGQ9XCJvdXRcIixzPVwiaW5cIjtpZihlJiYoZD1zPVwidW5kaXJlY3RlZFwiKSx0Lm11bHRpKXtpZih2b2lkIDA9PT0oYz0odT1vW2RdKVtpXSkmJihjPW5ldyBTZXQsdVtpXT1jKSxjLmFkZChuKSxyPT09aSYmZSlyZXR1cm47dm9pZCAwPT09KHU9YVtzXSlbcl0mJih1W3JdPWMpfWVsc2V7aWYob1tkXVtpXT1uLHI9PT1pJiZlKXJldHVybjthW3NdW3JdPW59fWZ1bmN0aW9uIFgodCxlLG4pe3ZhciByPXQubXVsdGksaT1uLnNvdXJjZSxvPW4udGFyZ2V0LGE9aS5rZXksdT1vLmtleSxjPWlbZT9cInVuZGlyZWN0ZWRcIjpcIm91dFwiXSxkPWU/XCJ1bmRpcmVjdGVkXCI6XCJpblwiO2lmKHUgaW4gYylpZihyKXt2YXIgcz1jW3VdOzE9PT1zLnNpemU/KGRlbGV0ZSBjW3VdLGRlbGV0ZSBvW2RdW2FdKTpzLmRlbGV0ZShuKX1lbHNlIGRlbGV0ZSBjW3VdO3J8fGRlbGV0ZSBvW2RdW2FdfXEucHJvdG90eXBlLmNsZWFyPWZ1bmN0aW9uKCl7dGhpcy5pbkRlZ3JlZT0wLHRoaXMub3V0RGVncmVlPTAsdGhpcy51bmRpcmVjdGVkRGVncmVlPTAsdGhpcy5kaXJlY3RlZFNlbGZMb29wcz0wLHRoaXMudW5kaXJlY3RlZFNlbGZMb29wcz0wLHRoaXMuaW49e30sdGhpcy5vdXQ9e30sdGhpcy51bmRpcmVjdGVkPXt9fSxKLnByb3RvdHlwZS5jbGVhcj1mdW5jdGlvbigpe3RoaXMuaW5EZWdyZWU9MCx0aGlzLm91dERlZ3JlZT0wLHRoaXMuZGlyZWN0ZWRTZWxmTG9vcHM9MCx0aGlzLmluPXt9LHRoaXMub3V0PXt9fSxKLnByb3RvdHlwZS51cGdyYWRlVG9NaXhlZD1mdW5jdGlvbigpe3RoaXMudW5kaXJlY3RlZERlZ3JlZT0wLHRoaXMudW5kaXJlY3RlZFNlbGZMb29wcz0wLHRoaXMudW5kaXJlY3RlZD17fX0sVi5wcm90b3R5cGUuY2xlYXI9ZnVuY3Rpb24oKXt0aGlzLnVuZGlyZWN0ZWREZWdyZWU9MCx0aGlzLnVuZGlyZWN0ZWRTZWxmTG9vcHM9MCx0aGlzLnVuZGlyZWN0ZWQ9e319LFYucHJvdG90eXBlLnVwZ3JhZGVUb01peGVkPWZ1bmN0aW9uKCl7dGhpcy5pbkRlZ3JlZT0wLHRoaXMub3V0RGVncmVlPTAsdGhpcy5kaXJlY3RlZFNlbGZMb29wcz0wLHRoaXMuaW49e30sdGhpcy5vdXQ9e319O2Z1bmN0aW9uIFoodCxlLG4scixpLG8sYSl7dmFyIHUsYyxkLHM7aWYocj1cIlwiK3IsMD09PW4pe2lmKCEodT10Ll9ub2Rlcy5nZXQocikpKXRocm93IG5ldyBZKFwiR3JhcGguXCIuY29uY2F0KGUsJzogY291bGQgbm90IGZpbmQgdGhlIFwiJykuY29uY2F0KHIsJ1wiIG5vZGUgaW4gdGhlIGdyYXBoLicpKTtkPWkscz1vfWVsc2UgaWYoMz09PW4pe2lmKGk9XCJcIitpLCEoYz10Ll9lZGdlcy5nZXQoaSkpKXRocm93IG5ldyBZKFwiR3JhcGguXCIuY29uY2F0KGUsJzogY291bGQgbm90IGZpbmQgdGhlIFwiJykuY29uY2F0KGksJ1wiIGVkZ2UgaW4gdGhlIGdyYXBoLicpKTt2YXIgaD1jLnNvdXJjZS5rZXksZj1jLnRhcmdldC5rZXk7aWYocj09PWgpdT1jLnRhcmdldDtlbHNle2lmKHIhPT1mKXRocm93IG5ldyBZKFwiR3JhcGguXCIuY29uY2F0KGUsJzogdGhlIFwiJykuY29uY2F0KHIsJ1wiIG5vZGUgaXMgbm90IGF0dGFjaGVkIHRvIHRoZSBcIicpLmNvbmNhdChpLCdcIiBlZGdlICgnKS5jb25jYXQoaCxcIiwgXCIpLmNvbmNhdChmLFwiKS5cIikpO3U9Yy5zb3VyY2V9ZD1vLHM9YX1lbHNle2lmKCEoYz10Ll9lZGdlcy5nZXQocikpKXRocm93IG5ldyBZKFwiR3JhcGguXCIuY29uY2F0KGUsJzogY291bGQgbm90IGZpbmQgdGhlIFwiJykuY29uY2F0KHIsJ1wiIGVkZ2UgaW4gdGhlIGdyYXBoLicpKTt1PTE9PT1uP2Muc291cmNlOmMudGFyZ2V0LGQ9aSxzPW99cmV0dXJuW3UsZCxzXX12YXIgJD1be25hbWU6ZnVuY3Rpb24odCl7cmV0dXJuXCJnZXRcIi5jb25jYXQodCxcIkF0dHJpYnV0ZVwiKX0sYXR0YWNoZXI6ZnVuY3Rpb24odCxlLG4pe3QucHJvdG90eXBlW2VdPWZ1bmN0aW9uKHQscixpKXt2YXIgbz1aKHRoaXMsZSxuLHQscixpKSxhPW9bMF0sdT1vWzFdO3JldHVybiBhLmF0dHJpYnV0ZXNbdV19fX0se25hbWU6ZnVuY3Rpb24odCl7cmV0dXJuXCJnZXRcIi5jb25jYXQodCxcIkF0dHJpYnV0ZXNcIil9LGF0dGFjaGVyOmZ1bmN0aW9uKHQsZSxuKXt0LnByb3RvdHlwZVtlXT1mdW5jdGlvbih0LHIpe3JldHVybiBaKHRoaXMsZSxuLHQscilbMF0uYXR0cmlidXRlc319fSx7bmFtZTpmdW5jdGlvbih0KXtyZXR1cm5cImhhc1wiLmNvbmNhdCh0LFwiQXR0cmlidXRlXCIpfSxhdHRhY2hlcjpmdW5jdGlvbih0LGUsbil7dC5wcm90b3R5cGVbZV09ZnVuY3Rpb24odCxyLGkpe3ZhciBvPVoodGhpcyxlLG4sdCxyLGkpLGE9b1swXSx1PW9bMV07cmV0dXJuIGEuYXR0cmlidXRlcy5oYXNPd25Qcm9wZXJ0eSh1KX19fSx7bmFtZTpmdW5jdGlvbih0KXtyZXR1cm5cInNldFwiLmNvbmNhdCh0LFwiQXR0cmlidXRlXCIpfSxhdHRhY2hlcjpmdW5jdGlvbih0LGUsbil7dC5wcm90b3R5cGVbZV09ZnVuY3Rpb24odCxyLGksbyl7dmFyIGE9Wih0aGlzLGUsbix0LHIsaSxvKSx1PWFbMF0sYz1hWzFdLGQ9YVsyXTtyZXR1cm4gdS5hdHRyaWJ1dGVzW2NdPWQsdGhpcy5lbWl0KFwibm9kZUF0dHJpYnV0ZXNVcGRhdGVkXCIse2tleTp1LmtleSx0eXBlOlwic2V0XCIsYXR0cmlidXRlczp1LmF0dHJpYnV0ZXMsbmFtZTpjfSksdGhpc319fSx7bmFtZTpmdW5jdGlvbih0KXtyZXR1cm5cInVwZGF0ZVwiLmNvbmNhdCh0LFwiQXR0cmlidXRlXCIpfSxhdHRhY2hlcjpmdW5jdGlvbih0LGUsbil7dC5wcm90b3R5cGVbZV09ZnVuY3Rpb24odCxyLGksbyl7dmFyIGE9Wih0aGlzLGUsbix0LHIsaSxvKSx1PWFbMF0sYz1hWzFdLGQ9YVsyXTtpZihcImZ1bmN0aW9uXCIhPXR5cGVvZiBkKXRocm93IG5ldyBGKFwiR3JhcGguXCIuY29uY2F0KGUsXCI6IHVwZGF0ZXIgc2hvdWxkIGJlIGEgZnVuY3Rpb24uXCIpKTt2YXIgcz11LmF0dHJpYnV0ZXMsaD1kKHNbY10pO3JldHVybiBzW2NdPWgsdGhpcy5lbWl0KFwibm9kZUF0dHJpYnV0ZXNVcGRhdGVkXCIse2tleTp1LmtleSx0eXBlOlwic2V0XCIsYXR0cmlidXRlczp1LmF0dHJpYnV0ZXMsbmFtZTpjfSksdGhpc319fSx7bmFtZTpmdW5jdGlvbih0KXtyZXR1cm5cInJlbW92ZVwiLmNvbmNhdCh0LFwiQXR0cmlidXRlXCIpfSxhdHRhY2hlcjpmdW5jdGlvbih0LGUsbil7dC5wcm90b3R5cGVbZV09ZnVuY3Rpb24odCxyLGkpe3ZhciBvPVoodGhpcyxlLG4sdCxyLGkpLGE9b1swXSx1PW9bMV07cmV0dXJuIGRlbGV0ZSBhLmF0dHJpYnV0ZXNbdV0sdGhpcy5lbWl0KFwibm9kZUF0dHJpYnV0ZXNVcGRhdGVkXCIse2tleTphLmtleSx0eXBlOlwicmVtb3ZlXCIsYXR0cmlidXRlczphLmF0dHJpYnV0ZXMsbmFtZTp1fSksdGhpc319fSx7bmFtZTpmdW5jdGlvbih0KXtyZXR1cm5cInJlcGxhY2VcIi5jb25jYXQodCxcIkF0dHJpYnV0ZXNcIil9LGF0dGFjaGVyOmZ1bmN0aW9uKHQsZSxuKXt0LnByb3RvdHlwZVtlXT1mdW5jdGlvbih0LHIsaSl7dmFyIG89Wih0aGlzLGUsbix0LHIsaSksYT1vWzBdLHU9b1sxXTtpZighaCh1KSl0aHJvdyBuZXcgRihcIkdyYXBoLlwiLmNvbmNhdChlLFwiOiBwcm92aWRlZCBhdHRyaWJ1dGVzIGFyZSBub3QgYSBwbGFpbiBvYmplY3QuXCIpKTtyZXR1cm4gYS5hdHRyaWJ1dGVzPXUsdGhpcy5lbWl0KFwibm9kZUF0dHJpYnV0ZXNVcGRhdGVkXCIse2tleTphLmtleSx0eXBlOlwicmVwbGFjZVwiLGF0dHJpYnV0ZXM6YS5hdHRyaWJ1dGVzfSksdGhpc319fSx7bmFtZTpmdW5jdGlvbih0KXtyZXR1cm5cIm1lcmdlXCIuY29uY2F0KHQsXCJBdHRyaWJ1dGVzXCIpfSxhdHRhY2hlcjpmdW5jdGlvbih0LGUsbil7dC5wcm90b3R5cGVbZV09ZnVuY3Rpb24odCxyLGkpe3ZhciBvPVoodGhpcyxlLG4sdCxyLGkpLGE9b1swXSx1PW9bMV07aWYoIWgodSkpdGhyb3cgbmV3IEYoXCJHcmFwaC5cIi5jb25jYXQoZSxcIjogcHJvdmlkZWQgYXR0cmlidXRlcyBhcmUgbm90IGEgcGxhaW4gb2JqZWN0LlwiKSk7cmV0dXJuIGMoYS5hdHRyaWJ1dGVzLHUpLHRoaXMuZW1pdChcIm5vZGVBdHRyaWJ1dGVzVXBkYXRlZFwiLHtrZXk6YS5rZXksdHlwZTpcIm1lcmdlXCIsYXR0cmlidXRlczphLmF0dHJpYnV0ZXMsZGF0YTp1fSksdGhpc319fSx7bmFtZTpmdW5jdGlvbih0KXtyZXR1cm5cInVwZGF0ZVwiLmNvbmNhdCh0LFwiQXR0cmlidXRlc1wiKX0sYXR0YWNoZXI6ZnVuY3Rpb24odCxlLG4pe3QucHJvdG90eXBlW2VdPWZ1bmN0aW9uKHQscixpKXt2YXIgbz1aKHRoaXMsZSxuLHQscixpKSxhPW9bMF0sdT1vWzFdO2lmKFwiZnVuY3Rpb25cIiE9dHlwZW9mIHUpdGhyb3cgbmV3IEYoXCJHcmFwaC5cIi5jb25jYXQoZSxcIjogcHJvdmlkZWQgdXBkYXRlciBpcyBub3QgYSBmdW5jdGlvbi5cIikpO3JldHVybiBhLmF0dHJpYnV0ZXM9dShhLmF0dHJpYnV0ZXMpLHRoaXMuZW1pdChcIm5vZGVBdHRyaWJ1dGVzVXBkYXRlZFwiLHtrZXk6YS5rZXksdHlwZTpcInVwZGF0ZVwiLGF0dHJpYnV0ZXM6YS5hdHRyaWJ1dGVzfSksdGhpc319fV07dmFyIHR0PVt7bmFtZTpmdW5jdGlvbih0KXtyZXR1cm5cImdldFwiLmNvbmNhdCh0LFwiQXR0cmlidXRlXCIpfSxhdHRhY2hlcjpmdW5jdGlvbih0LGUsbil7dC5wcm90b3R5cGVbZV09ZnVuY3Rpb24odCxyKXt2YXIgaTtpZihcIm1peGVkXCIhPT10aGlzLnR5cGUmJlwibWl4ZWRcIiE9PW4mJm4hPT10aGlzLnR5cGUpdGhyb3cgbmV3IEIoXCJHcmFwaC5cIi5jb25jYXQoZSxcIjogY2Fubm90IGZpbmQgdGhpcyB0eXBlIG9mIGVkZ2VzIGluIHlvdXIgXCIpLmNvbmNhdCh0aGlzLnR5cGUsXCIgZ3JhcGguXCIpKTtpZihhcmd1bWVudHMubGVuZ3RoPjIpe2lmKHRoaXMubXVsdGkpdGhyb3cgbmV3IEIoXCJHcmFwaC5cIi5jb25jYXQoZSxcIjogY2Fubm90IHVzZSBhIHtzb3VyY2UsdGFyZ2V0fSBjb21ibyB3aGVuIGFza2luZyBhYm91dCBhbiBlZGdlJ3MgYXR0cmlidXRlcyBpbiBhIE11bHRpR3JhcGggc2luY2Ugd2UgY2Fubm90IGluZmVyIHRoZSBvbmUgeW91IHdhbnQgaW5mb3JtYXRpb24gYWJvdXQuXCIpKTt2YXIgbz1cIlwiK3QsYT1cIlwiK3I7aWYocj1hcmd1bWVudHNbMl0sIShpPWQodGhpcyxvLGEsbikpKXRocm93IG5ldyBZKFwiR3JhcGguXCIuY29uY2F0KGUsJzogY291bGQgbm90IGZpbmQgYW4gZWRnZSBmb3IgdGhlIGdpdmVuIHBhdGggKFwiJykuY29uY2F0KG8sJ1wiIC0gXCInKS5jb25jYXQoYSwnXCIpLicpKX1lbHNlIGlmKHQ9XCJcIit0LCEoaT10aGlzLl9lZGdlcy5nZXQodCkpKXRocm93IG5ldyBZKFwiR3JhcGguXCIuY29uY2F0KGUsJzogY291bGQgbm90IGZpbmQgdGhlIFwiJykuY29uY2F0KHQsJ1wiIGVkZ2UgaW4gdGhlIGdyYXBoLicpKTtpZihcIm1peGVkXCIhPT1uJiZpLnVuZGlyZWN0ZWQhPT0oXCJ1bmRpcmVjdGVkXCI9PT1uKSl0aHJvdyBuZXcgWShcIkdyYXBoLlwiLmNvbmNhdChlLCc6IGNvdWxkIG5vdCBmaW5kIHRoZSBcIicpLmNvbmNhdCh0LCdcIiAnKS5jb25jYXQobixcIiBlZGdlIGluIHRoZSBncmFwaC5cIikpO3JldHVybiBpLmF0dHJpYnV0ZXNbcl19fX0se25hbWU6ZnVuY3Rpb24odCl7cmV0dXJuXCJnZXRcIi5jb25jYXQodCxcIkF0dHJpYnV0ZXNcIil9LGF0dGFjaGVyOmZ1bmN0aW9uKHQsZSxuKXt0LnByb3RvdHlwZVtlXT1mdW5jdGlvbih0KXt2YXIgcjtpZihcIm1peGVkXCIhPT10aGlzLnR5cGUmJlwibWl4ZWRcIiE9PW4mJm4hPT10aGlzLnR5cGUpdGhyb3cgbmV3IEIoXCJHcmFwaC5cIi5jb25jYXQoZSxcIjogY2Fubm90IGZpbmQgdGhpcyB0eXBlIG9mIGVkZ2VzIGluIHlvdXIgXCIpLmNvbmNhdCh0aGlzLnR5cGUsXCIgZ3JhcGguXCIpKTtpZihhcmd1bWVudHMubGVuZ3RoPjEpe2lmKHRoaXMubXVsdGkpdGhyb3cgbmV3IEIoXCJHcmFwaC5cIi5jb25jYXQoZSxcIjogY2Fubm90IHVzZSBhIHtzb3VyY2UsdGFyZ2V0fSBjb21ibyB3aGVuIGFza2luZyBhYm91dCBhbiBlZGdlJ3MgYXR0cmlidXRlcyBpbiBhIE11bHRpR3JhcGggc2luY2Ugd2UgY2Fubm90IGluZmVyIHRoZSBvbmUgeW91IHdhbnQgaW5mb3JtYXRpb24gYWJvdXQuXCIpKTt2YXIgaT1cIlwiK3Qsbz1cIlwiK2FyZ3VtZW50c1sxXTtpZighKHI9ZCh0aGlzLGksbyxuKSkpdGhyb3cgbmV3IFkoXCJHcmFwaC5cIi5jb25jYXQoZSwnOiBjb3VsZCBub3QgZmluZCBhbiBlZGdlIGZvciB0aGUgZ2l2ZW4gcGF0aCAoXCInKS5jb25jYXQoaSwnXCIgLSBcIicpLmNvbmNhdChvLCdcIikuJykpfWVsc2UgaWYodD1cIlwiK3QsIShyPXRoaXMuX2VkZ2VzLmdldCh0KSkpdGhyb3cgbmV3IFkoXCJHcmFwaC5cIi5jb25jYXQoZSwnOiBjb3VsZCBub3QgZmluZCB0aGUgXCInKS5jb25jYXQodCwnXCIgZWRnZSBpbiB0aGUgZ3JhcGguJykpO2lmKFwibWl4ZWRcIiE9PW4mJnIudW5kaXJlY3RlZCE9PShcInVuZGlyZWN0ZWRcIj09PW4pKXRocm93IG5ldyBZKFwiR3JhcGguXCIuY29uY2F0KGUsJzogY291bGQgbm90IGZpbmQgdGhlIFwiJykuY29uY2F0KHQsJ1wiICcpLmNvbmNhdChuLFwiIGVkZ2UgaW4gdGhlIGdyYXBoLlwiKSk7cmV0dXJuIHIuYXR0cmlidXRlc319fSx7bmFtZTpmdW5jdGlvbih0KXtyZXR1cm5cImhhc1wiLmNvbmNhdCh0LFwiQXR0cmlidXRlXCIpfSxhdHRhY2hlcjpmdW5jdGlvbih0LGUsbil7dC5wcm90b3R5cGVbZV09ZnVuY3Rpb24odCxyKXt2YXIgaTtpZihcIm1peGVkXCIhPT10aGlzLnR5cGUmJlwibWl4ZWRcIiE9PW4mJm4hPT10aGlzLnR5cGUpdGhyb3cgbmV3IEIoXCJHcmFwaC5cIi5jb25jYXQoZSxcIjogY2Fubm90IGZpbmQgdGhpcyB0eXBlIG9mIGVkZ2VzIGluIHlvdXIgXCIpLmNvbmNhdCh0aGlzLnR5cGUsXCIgZ3JhcGguXCIpKTtpZihhcmd1bWVudHMubGVuZ3RoPjIpe2lmKHRoaXMubXVsdGkpdGhyb3cgbmV3IEIoXCJHcmFwaC5cIi5jb25jYXQoZSxcIjogY2Fubm90IHVzZSBhIHtzb3VyY2UsdGFyZ2V0fSBjb21ibyB3aGVuIGFza2luZyBhYm91dCBhbiBlZGdlJ3MgYXR0cmlidXRlcyBpbiBhIE11bHRpR3JhcGggc2luY2Ugd2UgY2Fubm90IGluZmVyIHRoZSBvbmUgeW91IHdhbnQgaW5mb3JtYXRpb24gYWJvdXQuXCIpKTt2YXIgbz1cIlwiK3QsYT1cIlwiK3I7aWYocj1hcmd1bWVudHNbMl0sIShpPWQodGhpcyxvLGEsbikpKXRocm93IG5ldyBZKFwiR3JhcGguXCIuY29uY2F0KGUsJzogY291bGQgbm90IGZpbmQgYW4gZWRnZSBmb3IgdGhlIGdpdmVuIHBhdGggKFwiJykuY29uY2F0KG8sJ1wiIC0gXCInKS5jb25jYXQoYSwnXCIpLicpKX1lbHNlIGlmKHQ9XCJcIit0LCEoaT10aGlzLl9lZGdlcy5nZXQodCkpKXRocm93IG5ldyBZKFwiR3JhcGguXCIuY29uY2F0KGUsJzogY291bGQgbm90IGZpbmQgdGhlIFwiJykuY29uY2F0KHQsJ1wiIGVkZ2UgaW4gdGhlIGdyYXBoLicpKTtpZihcIm1peGVkXCIhPT1uJiZpLnVuZGlyZWN0ZWQhPT0oXCJ1bmRpcmVjdGVkXCI9PT1uKSl0aHJvdyBuZXcgWShcIkdyYXBoLlwiLmNvbmNhdChlLCc6IGNvdWxkIG5vdCBmaW5kIHRoZSBcIicpLmNvbmNhdCh0LCdcIiAnKS5jb25jYXQobixcIiBlZGdlIGluIHRoZSBncmFwaC5cIikpO3JldHVybiBpLmF0dHJpYnV0ZXMuaGFzT3duUHJvcGVydHkocil9fX0se25hbWU6ZnVuY3Rpb24odCl7cmV0dXJuXCJzZXRcIi5jb25jYXQodCxcIkF0dHJpYnV0ZVwiKX0sYXR0YWNoZXI6ZnVuY3Rpb24odCxlLG4pe3QucHJvdG90eXBlW2VdPWZ1bmN0aW9uKHQscixpKXt2YXIgbztpZihcIm1peGVkXCIhPT10aGlzLnR5cGUmJlwibWl4ZWRcIiE9PW4mJm4hPT10aGlzLnR5cGUpdGhyb3cgbmV3IEIoXCJHcmFwaC5cIi5jb25jYXQoZSxcIjogY2Fubm90IGZpbmQgdGhpcyB0eXBlIG9mIGVkZ2VzIGluIHlvdXIgXCIpLmNvbmNhdCh0aGlzLnR5cGUsXCIgZ3JhcGguXCIpKTtpZihhcmd1bWVudHMubGVuZ3RoPjMpe2lmKHRoaXMubXVsdGkpdGhyb3cgbmV3IEIoXCJHcmFwaC5cIi5jb25jYXQoZSxcIjogY2Fubm90IHVzZSBhIHtzb3VyY2UsdGFyZ2V0fSBjb21ibyB3aGVuIGFza2luZyBhYm91dCBhbiBlZGdlJ3MgYXR0cmlidXRlcyBpbiBhIE11bHRpR3JhcGggc2luY2Ugd2UgY2Fubm90IGluZmVyIHRoZSBvbmUgeW91IHdhbnQgaW5mb3JtYXRpb24gYWJvdXQuXCIpKTt2YXIgYT1cIlwiK3QsdT1cIlwiK3I7aWYocj1hcmd1bWVudHNbMl0saT1hcmd1bWVudHNbM10sIShvPWQodGhpcyxhLHUsbikpKXRocm93IG5ldyBZKFwiR3JhcGguXCIuY29uY2F0KGUsJzogY291bGQgbm90IGZpbmQgYW4gZWRnZSBmb3IgdGhlIGdpdmVuIHBhdGggKFwiJykuY29uY2F0KGEsJ1wiIC0gXCInKS5jb25jYXQodSwnXCIpLicpKX1lbHNlIGlmKHQ9XCJcIit0LCEobz10aGlzLl9lZGdlcy5nZXQodCkpKXRocm93IG5ldyBZKFwiR3JhcGguXCIuY29uY2F0KGUsJzogY291bGQgbm90IGZpbmQgdGhlIFwiJykuY29uY2F0KHQsJ1wiIGVkZ2UgaW4gdGhlIGdyYXBoLicpKTtpZihcIm1peGVkXCIhPT1uJiZvLnVuZGlyZWN0ZWQhPT0oXCJ1bmRpcmVjdGVkXCI9PT1uKSl0aHJvdyBuZXcgWShcIkdyYXBoLlwiLmNvbmNhdChlLCc6IGNvdWxkIG5vdCBmaW5kIHRoZSBcIicpLmNvbmNhdCh0LCdcIiAnKS5jb25jYXQobixcIiBlZGdlIGluIHRoZSBncmFwaC5cIikpO3JldHVybiBvLmF0dHJpYnV0ZXNbcl09aSx0aGlzLmVtaXQoXCJlZGdlQXR0cmlidXRlc1VwZGF0ZWRcIix7a2V5Om8ua2V5LHR5cGU6XCJzZXRcIixhdHRyaWJ1dGVzOm8uYXR0cmlidXRlcyxuYW1lOnJ9KSx0aGlzfX19LHtuYW1lOmZ1bmN0aW9uKHQpe3JldHVyblwidXBkYXRlXCIuY29uY2F0KHQsXCJBdHRyaWJ1dGVcIil9LGF0dGFjaGVyOmZ1bmN0aW9uKHQsZSxuKXt0LnByb3RvdHlwZVtlXT1mdW5jdGlvbih0LHIsaSl7dmFyIG87aWYoXCJtaXhlZFwiIT09dGhpcy50eXBlJiZcIm1peGVkXCIhPT1uJiZuIT09dGhpcy50eXBlKXRocm93IG5ldyBCKFwiR3JhcGguXCIuY29uY2F0KGUsXCI6IGNhbm5vdCBmaW5kIHRoaXMgdHlwZSBvZiBlZGdlcyBpbiB5b3VyIFwiKS5jb25jYXQodGhpcy50eXBlLFwiIGdyYXBoLlwiKSk7aWYoYXJndW1lbnRzLmxlbmd0aD4zKXtpZih0aGlzLm11bHRpKXRocm93IG5ldyBCKFwiR3JhcGguXCIuY29uY2F0KGUsXCI6IGNhbm5vdCB1c2UgYSB7c291cmNlLHRhcmdldH0gY29tYm8gd2hlbiBhc2tpbmcgYWJvdXQgYW4gZWRnZSdzIGF0dHJpYnV0ZXMgaW4gYSBNdWx0aUdyYXBoIHNpbmNlIHdlIGNhbm5vdCBpbmZlciB0aGUgb25lIHlvdSB3YW50IGluZm9ybWF0aW9uIGFib3V0LlwiKSk7dmFyIGE9XCJcIit0LHU9XCJcIityO2lmKHI9YXJndW1lbnRzWzJdLGk9YXJndW1lbnRzWzNdLCEobz1kKHRoaXMsYSx1LG4pKSl0aHJvdyBuZXcgWShcIkdyYXBoLlwiLmNvbmNhdChlLCc6IGNvdWxkIG5vdCBmaW5kIGFuIGVkZ2UgZm9yIHRoZSBnaXZlbiBwYXRoIChcIicpLmNvbmNhdChhLCdcIiAtIFwiJykuY29uY2F0KHUsJ1wiKS4nKSl9ZWxzZSBpZih0PVwiXCIrdCwhKG89dGhpcy5fZWRnZXMuZ2V0KHQpKSl0aHJvdyBuZXcgWShcIkdyYXBoLlwiLmNvbmNhdChlLCc6IGNvdWxkIG5vdCBmaW5kIHRoZSBcIicpLmNvbmNhdCh0LCdcIiBlZGdlIGluIHRoZSBncmFwaC4nKSk7aWYoXCJmdW5jdGlvblwiIT10eXBlb2YgaSl0aHJvdyBuZXcgRihcIkdyYXBoLlwiLmNvbmNhdChlLFwiOiB1cGRhdGVyIHNob3VsZCBiZSBhIGZ1bmN0aW9uLlwiKSk7aWYoXCJtaXhlZFwiIT09biYmby51bmRpcmVjdGVkIT09KFwidW5kaXJlY3RlZFwiPT09bikpdGhyb3cgbmV3IFkoXCJHcmFwaC5cIi5jb25jYXQoZSwnOiBjb3VsZCBub3QgZmluZCB0aGUgXCInKS5jb25jYXQodCwnXCIgJykuY29uY2F0KG4sXCIgZWRnZSBpbiB0aGUgZ3JhcGguXCIpKTtyZXR1cm4gby5hdHRyaWJ1dGVzW3JdPWkoby5hdHRyaWJ1dGVzW3JdKSx0aGlzLmVtaXQoXCJlZGdlQXR0cmlidXRlc1VwZGF0ZWRcIix7a2V5Om8ua2V5LHR5cGU6XCJzZXRcIixhdHRyaWJ1dGVzOm8uYXR0cmlidXRlcyxuYW1lOnJ9KSx0aGlzfX19LHtuYW1lOmZ1bmN0aW9uKHQpe3JldHVyblwicmVtb3ZlXCIuY29uY2F0KHQsXCJBdHRyaWJ1dGVcIil9LGF0dGFjaGVyOmZ1bmN0aW9uKHQsZSxuKXt0LnByb3RvdHlwZVtlXT1mdW5jdGlvbih0LHIpe3ZhciBpO2lmKFwibWl4ZWRcIiE9PXRoaXMudHlwZSYmXCJtaXhlZFwiIT09biYmbiE9PXRoaXMudHlwZSl0aHJvdyBuZXcgQihcIkdyYXBoLlwiLmNvbmNhdChlLFwiOiBjYW5ub3QgZmluZCB0aGlzIHR5cGUgb2YgZWRnZXMgaW4geW91ciBcIikuY29uY2F0KHRoaXMudHlwZSxcIiBncmFwaC5cIikpO2lmKGFyZ3VtZW50cy5sZW5ndGg+Mil7aWYodGhpcy5tdWx0aSl0aHJvdyBuZXcgQihcIkdyYXBoLlwiLmNvbmNhdChlLFwiOiBjYW5ub3QgdXNlIGEge3NvdXJjZSx0YXJnZXR9IGNvbWJvIHdoZW4gYXNraW5nIGFib3V0IGFuIGVkZ2UncyBhdHRyaWJ1dGVzIGluIGEgTXVsdGlHcmFwaCBzaW5jZSB3ZSBjYW5ub3QgaW5mZXIgdGhlIG9uZSB5b3Ugd2FudCBpbmZvcm1hdGlvbiBhYm91dC5cIikpO3ZhciBvPVwiXCIrdCxhPVwiXCIrcjtpZihyPWFyZ3VtZW50c1syXSwhKGk9ZCh0aGlzLG8sYSxuKSkpdGhyb3cgbmV3IFkoXCJHcmFwaC5cIi5jb25jYXQoZSwnOiBjb3VsZCBub3QgZmluZCBhbiBlZGdlIGZvciB0aGUgZ2l2ZW4gcGF0aCAoXCInKS5jb25jYXQobywnXCIgLSBcIicpLmNvbmNhdChhLCdcIikuJykpfWVsc2UgaWYodD1cIlwiK3QsIShpPXRoaXMuX2VkZ2VzLmdldCh0KSkpdGhyb3cgbmV3IFkoXCJHcmFwaC5cIi5jb25jYXQoZSwnOiBjb3VsZCBub3QgZmluZCB0aGUgXCInKS5jb25jYXQodCwnXCIgZWRnZSBpbiB0aGUgZ3JhcGguJykpO2lmKFwibWl4ZWRcIiE9PW4mJmkudW5kaXJlY3RlZCE9PShcInVuZGlyZWN0ZWRcIj09PW4pKXRocm93IG5ldyBZKFwiR3JhcGguXCIuY29uY2F0KGUsJzogY291bGQgbm90IGZpbmQgdGhlIFwiJykuY29uY2F0KHQsJ1wiICcpLmNvbmNhdChuLFwiIGVkZ2UgaW4gdGhlIGdyYXBoLlwiKSk7cmV0dXJuIGRlbGV0ZSBpLmF0dHJpYnV0ZXNbcl0sdGhpcy5lbWl0KFwiZWRnZUF0dHJpYnV0ZXNVcGRhdGVkXCIse2tleTppLmtleSx0eXBlOlwicmVtb3ZlXCIsYXR0cmlidXRlczppLmF0dHJpYnV0ZXMsbmFtZTpyfSksdGhpc319fSx7bmFtZTpmdW5jdGlvbih0KXtyZXR1cm5cInJlcGxhY2VcIi5jb25jYXQodCxcIkF0dHJpYnV0ZXNcIil9LGF0dGFjaGVyOmZ1bmN0aW9uKHQsZSxuKXt0LnByb3RvdHlwZVtlXT1mdW5jdGlvbih0LHIpe3ZhciBpO2lmKFwibWl4ZWRcIiE9PXRoaXMudHlwZSYmXCJtaXhlZFwiIT09biYmbiE9PXRoaXMudHlwZSl0aHJvdyBuZXcgQihcIkdyYXBoLlwiLmNvbmNhdChlLFwiOiBjYW5ub3QgZmluZCB0aGlzIHR5cGUgb2YgZWRnZXMgaW4geW91ciBcIikuY29uY2F0KHRoaXMudHlwZSxcIiBncmFwaC5cIikpO2lmKGFyZ3VtZW50cy5sZW5ndGg+Mil7aWYodGhpcy5tdWx0aSl0aHJvdyBuZXcgQihcIkdyYXBoLlwiLmNvbmNhdChlLFwiOiBjYW5ub3QgdXNlIGEge3NvdXJjZSx0YXJnZXR9IGNvbWJvIHdoZW4gYXNraW5nIGFib3V0IGFuIGVkZ2UncyBhdHRyaWJ1dGVzIGluIGEgTXVsdGlHcmFwaCBzaW5jZSB3ZSBjYW5ub3QgaW5mZXIgdGhlIG9uZSB5b3Ugd2FudCBpbmZvcm1hdGlvbiBhYm91dC5cIikpO3ZhciBvPVwiXCIrdCxhPVwiXCIrcjtpZihyPWFyZ3VtZW50c1syXSwhKGk9ZCh0aGlzLG8sYSxuKSkpdGhyb3cgbmV3IFkoXCJHcmFwaC5cIi5jb25jYXQoZSwnOiBjb3VsZCBub3QgZmluZCBhbiBlZGdlIGZvciB0aGUgZ2l2ZW4gcGF0aCAoXCInKS5jb25jYXQobywnXCIgLSBcIicpLmNvbmNhdChhLCdcIikuJykpfWVsc2UgaWYodD1cIlwiK3QsIShpPXRoaXMuX2VkZ2VzLmdldCh0KSkpdGhyb3cgbmV3IFkoXCJHcmFwaC5cIi5jb25jYXQoZSwnOiBjb3VsZCBub3QgZmluZCB0aGUgXCInKS5jb25jYXQodCwnXCIgZWRnZSBpbiB0aGUgZ3JhcGguJykpO2lmKCFoKHIpKXRocm93IG5ldyBGKFwiR3JhcGguXCIuY29uY2F0KGUsXCI6IHByb3ZpZGVkIGF0dHJpYnV0ZXMgYXJlIG5vdCBhIHBsYWluIG9iamVjdC5cIikpO2lmKFwibWl4ZWRcIiE9PW4mJmkudW5kaXJlY3RlZCE9PShcInVuZGlyZWN0ZWRcIj09PW4pKXRocm93IG5ldyBZKFwiR3JhcGguXCIuY29uY2F0KGUsJzogY291bGQgbm90IGZpbmQgdGhlIFwiJykuY29uY2F0KHQsJ1wiICcpLmNvbmNhdChuLFwiIGVkZ2UgaW4gdGhlIGdyYXBoLlwiKSk7cmV0dXJuIGkuYXR0cmlidXRlcz1yLHRoaXMuZW1pdChcImVkZ2VBdHRyaWJ1dGVzVXBkYXRlZFwiLHtrZXk6aS5rZXksdHlwZTpcInJlcGxhY2VcIixhdHRyaWJ1dGVzOmkuYXR0cmlidXRlc30pLHRoaXN9fX0se25hbWU6ZnVuY3Rpb24odCl7cmV0dXJuXCJtZXJnZVwiLmNvbmNhdCh0LFwiQXR0cmlidXRlc1wiKX0sYXR0YWNoZXI6ZnVuY3Rpb24odCxlLG4pe3QucHJvdG90eXBlW2VdPWZ1bmN0aW9uKHQscil7dmFyIGk7aWYoXCJtaXhlZFwiIT09dGhpcy50eXBlJiZcIm1peGVkXCIhPT1uJiZuIT09dGhpcy50eXBlKXRocm93IG5ldyBCKFwiR3JhcGguXCIuY29uY2F0KGUsXCI6IGNhbm5vdCBmaW5kIHRoaXMgdHlwZSBvZiBlZGdlcyBpbiB5b3VyIFwiKS5jb25jYXQodGhpcy50eXBlLFwiIGdyYXBoLlwiKSk7aWYoYXJndW1lbnRzLmxlbmd0aD4yKXtpZih0aGlzLm11bHRpKXRocm93IG5ldyBCKFwiR3JhcGguXCIuY29uY2F0KGUsXCI6IGNhbm5vdCB1c2UgYSB7c291cmNlLHRhcmdldH0gY29tYm8gd2hlbiBhc2tpbmcgYWJvdXQgYW4gZWRnZSdzIGF0dHJpYnV0ZXMgaW4gYSBNdWx0aUdyYXBoIHNpbmNlIHdlIGNhbm5vdCBpbmZlciB0aGUgb25lIHlvdSB3YW50IGluZm9ybWF0aW9uIGFib3V0LlwiKSk7dmFyIG89XCJcIit0LGE9XCJcIityO2lmKHI9YXJndW1lbnRzWzJdLCEoaT1kKHRoaXMsbyxhLG4pKSl0aHJvdyBuZXcgWShcIkdyYXBoLlwiLmNvbmNhdChlLCc6IGNvdWxkIG5vdCBmaW5kIGFuIGVkZ2UgZm9yIHRoZSBnaXZlbiBwYXRoIChcIicpLmNvbmNhdChvLCdcIiAtIFwiJykuY29uY2F0KGEsJ1wiKS4nKSl9ZWxzZSBpZih0PVwiXCIrdCwhKGk9dGhpcy5fZWRnZXMuZ2V0KHQpKSl0aHJvdyBuZXcgWShcIkdyYXBoLlwiLmNvbmNhdChlLCc6IGNvdWxkIG5vdCBmaW5kIHRoZSBcIicpLmNvbmNhdCh0LCdcIiBlZGdlIGluIHRoZSBncmFwaC4nKSk7aWYoIWgocikpdGhyb3cgbmV3IEYoXCJHcmFwaC5cIi5jb25jYXQoZSxcIjogcHJvdmlkZWQgYXR0cmlidXRlcyBhcmUgbm90IGEgcGxhaW4gb2JqZWN0LlwiKSk7aWYoXCJtaXhlZFwiIT09biYmaS51bmRpcmVjdGVkIT09KFwidW5kaXJlY3RlZFwiPT09bikpdGhyb3cgbmV3IFkoXCJHcmFwaC5cIi5jb25jYXQoZSwnOiBjb3VsZCBub3QgZmluZCB0aGUgXCInKS5jb25jYXQodCwnXCIgJykuY29uY2F0KG4sXCIgZWRnZSBpbiB0aGUgZ3JhcGguXCIpKTtyZXR1cm4gYyhpLmF0dHJpYnV0ZXMsciksdGhpcy5lbWl0KFwiZWRnZUF0dHJpYnV0ZXNVcGRhdGVkXCIse2tleTppLmtleSx0eXBlOlwibWVyZ2VcIixhdHRyaWJ1dGVzOmkuYXR0cmlidXRlcyxkYXRhOnJ9KSx0aGlzfX19LHtuYW1lOmZ1bmN0aW9uKHQpe3JldHVyblwidXBkYXRlXCIuY29uY2F0KHQsXCJBdHRyaWJ1dGVzXCIpfSxhdHRhY2hlcjpmdW5jdGlvbih0LGUsbil7dC5wcm90b3R5cGVbZV09ZnVuY3Rpb24odCxyKXt2YXIgaTtpZihcIm1peGVkXCIhPT10aGlzLnR5cGUmJlwibWl4ZWRcIiE9PW4mJm4hPT10aGlzLnR5cGUpdGhyb3cgbmV3IEIoXCJHcmFwaC5cIi5jb25jYXQoZSxcIjogY2Fubm90IGZpbmQgdGhpcyB0eXBlIG9mIGVkZ2VzIGluIHlvdXIgXCIpLmNvbmNhdCh0aGlzLnR5cGUsXCIgZ3JhcGguXCIpKTtpZihhcmd1bWVudHMubGVuZ3RoPjIpe2lmKHRoaXMubXVsdGkpdGhyb3cgbmV3IEIoXCJHcmFwaC5cIi5jb25jYXQoZSxcIjogY2Fubm90IHVzZSBhIHtzb3VyY2UsdGFyZ2V0fSBjb21ibyB3aGVuIGFza2luZyBhYm91dCBhbiBlZGdlJ3MgYXR0cmlidXRlcyBpbiBhIE11bHRpR3JhcGggc2luY2Ugd2UgY2Fubm90IGluZmVyIHRoZSBvbmUgeW91IHdhbnQgaW5mb3JtYXRpb24gYWJvdXQuXCIpKTt2YXIgbz1cIlwiK3QsYT1cIlwiK3I7aWYocj1hcmd1bWVudHNbMl0sIShpPWQodGhpcyxvLGEsbikpKXRocm93IG5ldyBZKFwiR3JhcGguXCIuY29uY2F0KGUsJzogY291bGQgbm90IGZpbmQgYW4gZWRnZSBmb3IgdGhlIGdpdmVuIHBhdGggKFwiJykuY29uY2F0KG8sJ1wiIC0gXCInKS5jb25jYXQoYSwnXCIpLicpKX1lbHNlIGlmKHQ9XCJcIit0LCEoaT10aGlzLl9lZGdlcy5nZXQodCkpKXRocm93IG5ldyBZKFwiR3JhcGguXCIuY29uY2F0KGUsJzogY291bGQgbm90IGZpbmQgdGhlIFwiJykuY29uY2F0KHQsJ1wiIGVkZ2UgaW4gdGhlIGdyYXBoLicpKTtpZihcImZ1bmN0aW9uXCIhPXR5cGVvZiByKXRocm93IG5ldyBGKFwiR3JhcGguXCIuY29uY2F0KGUsXCI6IHByb3ZpZGVkIHVwZGF0ZXIgaXMgbm90IGEgZnVuY3Rpb24uXCIpKTtpZihcIm1peGVkXCIhPT1uJiZpLnVuZGlyZWN0ZWQhPT0oXCJ1bmRpcmVjdGVkXCI9PT1uKSl0aHJvdyBuZXcgWShcIkdyYXBoLlwiLmNvbmNhdChlLCc6IGNvdWxkIG5vdCBmaW5kIHRoZSBcIicpLmNvbmNhdCh0LCdcIiAnKS5jb25jYXQobixcIiBlZGdlIGluIHRoZSBncmFwaC5cIikpO3JldHVybiBpLmF0dHJpYnV0ZXM9cihpLmF0dHJpYnV0ZXMpLHRoaXMuZW1pdChcImVkZ2VBdHRyaWJ1dGVzVXBkYXRlZFwiLHtrZXk6aS5rZXksdHlwZTpcInVwZGF0ZVwiLGF0dHJpYnV0ZXM6aS5hdHRyaWJ1dGVzfSksdGhpc319fV07dmFyIGV0PU8sbnQ9UixydD1mdW5jdGlvbigpe3ZhciB0PWFyZ3VtZW50cyxlPW51bGwsbj0tMTtyZXR1cm4gbmV3IGV0KChmdW5jdGlvbiByKCl7aWYobnVsbD09PWUpe2lmKCsrbj49dC5sZW5ndGgpcmV0dXJue2RvbmU6ITB9O2U9bnQodFtuXSl9dmFyIGk9ZS5uZXh0KCk7cmV0dXJuIGkuZG9uZT8oZT1udWxsLHIoKSk6aX0pKX0saXQ9W3tuYW1lOlwiZWRnZXNcIix0eXBlOlwibWl4ZWRcIn0se25hbWU6XCJpbkVkZ2VzXCIsdHlwZTpcImRpcmVjdGVkXCIsZGlyZWN0aW9uOlwiaW5cIn0se25hbWU6XCJvdXRFZGdlc1wiLHR5cGU6XCJkaXJlY3RlZFwiLGRpcmVjdGlvbjpcIm91dFwifSx7bmFtZTpcImluYm91bmRFZGdlc1wiLHR5cGU6XCJtaXhlZFwiLGRpcmVjdGlvbjpcImluXCJ9LHtuYW1lOlwib3V0Ym91bmRFZGdlc1wiLHR5cGU6XCJtaXhlZFwiLGRpcmVjdGlvbjpcIm91dFwifSx7bmFtZTpcImRpcmVjdGVkRWRnZXNcIix0eXBlOlwiZGlyZWN0ZWRcIn0se25hbWU6XCJ1bmRpcmVjdGVkRWRnZXNcIix0eXBlOlwidW5kaXJlY3RlZFwifV07ZnVuY3Rpb24gb3QodCxlKXtmb3IodmFyIG4gaW4gZSl0LnB1c2goZVtuXS5rZXkpfWZ1bmN0aW9uIGF0KHQsZSl7Zm9yKHZhciBuIGluIGUpZVtuXS5mb3JFYWNoKChmdW5jdGlvbihlKXtyZXR1cm4gdC5wdXNoKGUua2V5KX0pKX1mdW5jdGlvbiB1dCh0LGUsbil7Zm9yKHZhciByIGluIHQpaWYociE9PW4pe3ZhciBpPXRbcl07ZShpLmtleSxpLmF0dHJpYnV0ZXMsaS5zb3VyY2Uua2V5LGkudGFyZ2V0LmtleSxpLnNvdXJjZS5hdHRyaWJ1dGVzLGkudGFyZ2V0LmF0dHJpYnV0ZXMsaS51bmRpcmVjdGVkKX19ZnVuY3Rpb24gY3QodCxlLG4pe2Zvcih2YXIgciBpbiB0KXIhPT1uJiZ0W3JdLmZvckVhY2goKGZ1bmN0aW9uKHQpe3JldHVybiBlKHQua2V5LHQuYXR0cmlidXRlcyx0LnNvdXJjZS5rZXksdC50YXJnZXQua2V5LHQuc291cmNlLmF0dHJpYnV0ZXMsdC50YXJnZXQuYXR0cmlidXRlcyx0LnVuZGlyZWN0ZWQpfSkpfWZ1bmN0aW9uIGR0KHQsZSxuKXtmb3IodmFyIHIgaW4gdClpZihyIT09bil7dmFyIGk9dFtyXTtpZihlKGkua2V5LGkuYXR0cmlidXRlcyxpLnNvdXJjZS5rZXksaS50YXJnZXQua2V5LGkuc291cmNlLmF0dHJpYnV0ZXMsaS50YXJnZXQuYXR0cmlidXRlcyxpLnVuZGlyZWN0ZWQpKXJldHVybiBpLmtleX19ZnVuY3Rpb24gc3QodCxlLG4pe3ZhciByLGksbyxhLHU7Zm9yKHZhciBjIGluIHQpaWYoYyE9PW4pZm9yKHI9dFtjXS52YWx1ZXMoKTshMCE9PShpPXIubmV4dCgpKS5kb25lOylpZihhPShvPWkudmFsdWUpLnNvdXJjZSx1PW8udGFyZ2V0LGUoby5rZXksby5hdHRyaWJ1dGVzLGEua2V5LHUua2V5LGEuYXR0cmlidXRlcyx1LmF0dHJpYnV0ZXMsby51bmRpcmVjdGVkKSlyZXR1cm4gby5rZXl9ZnVuY3Rpb24gaHQodCxlKXt2YXIgbj1PYmplY3Qua2V5cyh0KSxyPW4ubGVuZ3RoLGk9bnVsbCxvPTA7cmV0dXJuIG5ldyBPKChmdW5jdGlvbiBhKCl7dmFyIHU7aWYoaSl7dmFyIGM9aS5uZXh0KCk7aWYoYy5kb25lKXJldHVybiBpPW51bGwsbysrLGEoKTt1PWMudmFsdWV9ZWxzZXtpZihvPj1yKXJldHVybntkb25lOiEwfTt2YXIgZD1uW29dO2lmKGQ9PT1lKXJldHVybiBvKyssYSgpO2lmKCh1PXRbZF0paW5zdGFuY2VvZiBTZXQpcmV0dXJuIGk9dS52YWx1ZXMoKSxhKCk7bysrfXJldHVybntkb25lOiExLHZhbHVlOntlZGdlOnUua2V5LGF0dHJpYnV0ZXM6dS5hdHRyaWJ1dGVzLHNvdXJjZTp1LnNvdXJjZS5rZXksdGFyZ2V0OnUudGFyZ2V0LmtleSxzb3VyY2VBdHRyaWJ1dGVzOnUuc291cmNlLmF0dHJpYnV0ZXMsdGFyZ2V0QXR0cmlidXRlczp1LnRhcmdldC5hdHRyaWJ1dGVzLHVuZGlyZWN0ZWQ6dS51bmRpcmVjdGVkfX19KSl9ZnVuY3Rpb24gZnQodCxlLG4pe3ZhciByPWVbbl07ciYmdC5wdXNoKHIua2V5KX1mdW5jdGlvbiBwdCh0LGUsbil7dmFyIHI9ZVtuXTtyJiZyLmZvckVhY2goKGZ1bmN0aW9uKGUpe3JldHVybiB0LnB1c2goZS5rZXkpfSkpfWZ1bmN0aW9uIGx0KHQsZSxuKXt2YXIgcj10W2VdO2lmKHIpe3ZhciBpPXIuc291cmNlLG89ci50YXJnZXQ7bihyLmtleSxyLmF0dHJpYnV0ZXMsaS5rZXksby5rZXksaS5hdHRyaWJ1dGVzLG8uYXR0cmlidXRlcyxyLnVuZGlyZWN0ZWQpfX1mdW5jdGlvbiBndCh0LGUsbil7dmFyIHI9dFtlXTtyJiZyLmZvckVhY2goKGZ1bmN0aW9uKHQpe3JldHVybiBuKHQua2V5LHQuYXR0cmlidXRlcyx0LnNvdXJjZS5rZXksdC50YXJnZXQua2V5LHQuc291cmNlLmF0dHJpYnV0ZXMsdC50YXJnZXQuYXR0cmlidXRlcyx0LnVuZGlyZWN0ZWQpfSkpfWZ1bmN0aW9uIHl0KHQsZSxuKXt2YXIgcj10W2VdO2lmKHIpe3ZhciBpPXIuc291cmNlLG89ci50YXJnZXQ7cmV0dXJuIG4oci5rZXksci5hdHRyaWJ1dGVzLGkua2V5LG8ua2V5LGkuYXR0cmlidXRlcyxvLmF0dHJpYnV0ZXMsci51bmRpcmVjdGVkKT9yLmtleTp2b2lkIDB9fWZ1bmN0aW9uIHZ0KHQsZSxuKXt2YXIgcj10W2VdO2lmKHIpZm9yKHZhciBpLG8sYT1yLnZhbHVlcygpOyEwIT09KGk9YS5uZXh0KCkpLmRvbmU7KWlmKG4oKG89aS52YWx1ZSkua2V5LG8uYXR0cmlidXRlcyxvLnNvdXJjZS5rZXksby50YXJnZXQua2V5LG8uc291cmNlLmF0dHJpYnV0ZXMsby50YXJnZXQuYXR0cmlidXRlcyxvLnVuZGlyZWN0ZWQpKXJldHVybiBvLmtleX1mdW5jdGlvbiBidCh0LGUpe3ZhciBuPXRbZV07aWYobiBpbnN0YW5jZW9mIFNldCl7dmFyIHI9bi52YWx1ZXMoKTtyZXR1cm4gbmV3IE8oKGZ1bmN0aW9uKCl7dmFyIHQ9ci5uZXh0KCk7aWYodC5kb25lKXJldHVybiB0O3ZhciBlPXQudmFsdWU7cmV0dXJue2RvbmU6ITEsdmFsdWU6e2VkZ2U6ZS5rZXksYXR0cmlidXRlczplLmF0dHJpYnV0ZXMsc291cmNlOmUuc291cmNlLmtleSx0YXJnZXQ6ZS50YXJnZXQua2V5LHNvdXJjZUF0dHJpYnV0ZXM6ZS5zb3VyY2UuYXR0cmlidXRlcyx0YXJnZXRBdHRyaWJ1dGVzOmUudGFyZ2V0LmF0dHJpYnV0ZXMsdW5kaXJlY3RlZDplLnVuZGlyZWN0ZWR9fX0pKX1yZXR1cm4gTy5vZihbbi5rZXksbi5hdHRyaWJ1dGVzLG4uc291cmNlLmtleSxuLnRhcmdldC5rZXksbi5zb3VyY2UuYXR0cmlidXRlcyxuLnRhcmdldC5hdHRyaWJ1dGVzXSl9ZnVuY3Rpb24gd3QodCxlKXtpZigwPT09dC5zaXplKXJldHVybltdO2lmKFwibWl4ZWRcIj09PWV8fGU9PT10LnR5cGUpcmV0dXJuXCJmdW5jdGlvblwiPT10eXBlb2YgQXJyYXkuZnJvbT9BcnJheS5mcm9tKHQuX2VkZ2VzLmtleXMoKSk6Syh0Ll9lZGdlcy5rZXlzKCksdC5fZWRnZXMuc2l6ZSk7Zm9yKHZhciBuLHIsaT1cInVuZGlyZWN0ZWRcIj09PWU/dC51bmRpcmVjdGVkU2l6ZTp0LmRpcmVjdGVkU2l6ZSxvPW5ldyBBcnJheShpKSxhPVwidW5kaXJlY3RlZFwiPT09ZSx1PXQuX2VkZ2VzLnZhbHVlcygpLGM9MDshMCE9PShuPXUubmV4dCgpKS5kb25lOykocj1uLnZhbHVlKS51bmRpcmVjdGVkPT09YSYmKG9bYysrXT1yLmtleSk7cmV0dXJuIG99ZnVuY3Rpb24gbXQodCxlLG4pe2lmKDAhPT10LnNpemUpZm9yKHZhciByLGksbz1cIm1peGVkXCIhPT1lJiZlIT09dC50eXBlLGE9XCJ1bmRpcmVjdGVkXCI9PT1lLHU9dC5fZWRnZXMudmFsdWVzKCk7ITAhPT0ocj11Lm5leHQoKSkuZG9uZTspaWYoaT1yLnZhbHVlLCFvfHxpLnVuZGlyZWN0ZWQ9PT1hKXt2YXIgYz1pLGQ9Yy5rZXkscz1jLmF0dHJpYnV0ZXMsaD1jLnNvdXJjZSxmPWMudGFyZ2V0O24oZCxzLGgua2V5LGYua2V5LGguYXR0cmlidXRlcyxmLmF0dHJpYnV0ZXMsaS51bmRpcmVjdGVkKX19ZnVuY3Rpb24gX3QodCxlLG4pe2lmKDAhPT10LnNpemUpZm9yKHZhciByLGksbz1cIm1peGVkXCIhPT1lJiZlIT09dC50eXBlLGE9XCJ1bmRpcmVjdGVkXCI9PT1lLHU9dC5fZWRnZXMudmFsdWVzKCk7ITAhPT0ocj11Lm5leHQoKSkuZG9uZTspaWYoaT1yLnZhbHVlLCFvfHxpLnVuZGlyZWN0ZWQ9PT1hKXt2YXIgYz1pLGQ9Yy5rZXkscz1jLmF0dHJpYnV0ZXMsaD1jLnNvdXJjZSxmPWMudGFyZ2V0O2lmKG4oZCxzLGgua2V5LGYua2V5LGguYXR0cmlidXRlcyxmLmF0dHJpYnV0ZXMsaS51bmRpcmVjdGVkKSlyZXR1cm4gZH19ZnVuY3Rpb24ga3QodCxlKXtpZigwPT09dC5zaXplKXJldHVybiBPLmVtcHR5KCk7dmFyIG49XCJtaXhlZFwiIT09ZSYmZSE9PXQudHlwZSxyPVwidW5kaXJlY3RlZFwiPT09ZSxpPXQuX2VkZ2VzLnZhbHVlcygpO3JldHVybiBuZXcgTygoZnVuY3Rpb24oKXtmb3IodmFyIHQsZTs7KXtpZigodD1pLm5leHQoKSkuZG9uZSlyZXR1cm4gdDtpZihlPXQudmFsdWUsIW58fGUudW5kaXJlY3RlZD09PXIpYnJlYWt9cmV0dXJue3ZhbHVlOntlZGdlOmUua2V5LGF0dHJpYnV0ZXM6ZS5hdHRyaWJ1dGVzLHNvdXJjZTplLnNvdXJjZS5rZXksdGFyZ2V0OmUudGFyZ2V0LmtleSxzb3VyY2VBdHRyaWJ1dGVzOmUuc291cmNlLmF0dHJpYnV0ZXMsdGFyZ2V0QXR0cmlidXRlczplLnRhcmdldC5hdHRyaWJ1dGVzLHVuZGlyZWN0ZWQ6ZS51bmRpcmVjdGVkfSxkb25lOiExfX0pKX1mdW5jdGlvbiBHdCh0LGUsbixyKXt2YXIgaT1bXSxvPXQ/YXQ6b3Q7cmV0dXJuXCJ1bmRpcmVjdGVkXCIhPT1lJiYoXCJvdXRcIiE9PW4mJm8oaSxyLmluKSxcImluXCIhPT1uJiZvKGksci5vdXQpLCFuJiZyLmRpcmVjdGVkU2VsZkxvb3BzPjAmJmkuc3BsaWNlKGkubGFzdEluZGV4T2Yoci5rZXkpLDEpKSxcImRpcmVjdGVkXCIhPT1lJiZvKGksci51bmRpcmVjdGVkKSxpfWZ1bmN0aW9uIHh0KHQsZSxuLHIsaSl7dmFyIG89dD9jdDp1dDtcInVuZGlyZWN0ZWRcIiE9PWUmJihcIm91dFwiIT09biYmbyhyLmluLGkpLFwiaW5cIiE9PW4mJm8oci5vdXQsaSxuP251bGw6ci5rZXkpKSxcImRpcmVjdGVkXCIhPT1lJiZvKHIudW5kaXJlY3RlZCxpKX1mdW5jdGlvbiBFdCh0LGUsbixyLGkpe3ZhciBvLGE9dD9zdDpkdDtpZihcInVuZGlyZWN0ZWRcIiE9PWUpe2lmKFwib3V0XCIhPT1uJiYobz1hKHIuaW4saSkpKXJldHVybiBvO2lmKFwiaW5cIiE9PW4mJihvPWEoci5vdXQsaSxuP251bGw6ci5rZXkpKSlyZXR1cm4gb31pZihcImRpcmVjdGVkXCIhPT1lJiYobz1hKHIudW5kaXJlY3RlZCxpKSkpcmV0dXJuIG99ZnVuY3Rpb24gU3QodCxlLG4pe3ZhciByPU8uZW1wdHkoKTtyZXR1cm5cInVuZGlyZWN0ZWRcIiE9PXQmJihcIm91dFwiIT09ZSYmdm9pZCAwIT09bi5pbiYmKHI9cnQocixodChuLmluKSkpLFwiaW5cIiE9PWUmJnZvaWQgMCE9PW4ub3V0JiYocj1ydChyLGh0KG4ub3V0LGU/bnVsbDpuLmtleSkpKSksXCJkaXJlY3RlZFwiIT09dCYmdm9pZCAwIT09bi51bmRpcmVjdGVkJiYocj1ydChyLGh0KG4udW5kaXJlY3RlZCkpKSxyfWZ1bmN0aW9uIEF0KHQsZSxuLHIsaSl7dmFyIG89ZT9wdDpmdCxhPVtdO3JldHVyblwidW5kaXJlY3RlZFwiIT09dCYmKHZvaWQgMCE9PXIuaW4mJlwib3V0XCIhPT1uJiZvKGEsci5pbixpKSx2b2lkIDAhPT1yLm91dCYmXCJpblwiIT09biYmbyhhLHIub3V0LGkpLCFuJiZyLmRpcmVjdGVkU2VsZkxvb3BzPjAmJmEuc3BsaWNlKGEubGFzdEluZGV4T2Yoci5rZXkpLDEpKSxcImRpcmVjdGVkXCIhPT10JiZ2b2lkIDAhPT1yLnVuZGlyZWN0ZWQmJm8oYSxyLnVuZGlyZWN0ZWQsaSksYX1mdW5jdGlvbiBMdCh0LGUsbixyLGksbyl7dmFyIGE9ZT9ndDpsdDtcInVuZGlyZWN0ZWRcIiE9PXQmJih2b2lkIDAhPT1yLmluJiZcIm91dFwiIT09biYmYShyLmluLGksbyksci5rZXkhPT1pJiZ2b2lkIDAhPT1yLm91dCYmXCJpblwiIT09biYmYShyLm91dCxpLG8pKSxcImRpcmVjdGVkXCIhPT10JiZ2b2lkIDAhPT1yLnVuZGlyZWN0ZWQmJmEoci51bmRpcmVjdGVkLGksbyl9ZnVuY3Rpb24gRHQodCxlLG4scixpLG8pe3ZhciBhLHU9ZT92dDp5dDtpZihcInVuZGlyZWN0ZWRcIiE9PXQpe2lmKHZvaWQgMCE9PXIuaW4mJlwib3V0XCIhPT1uJiYoYT11KHIuaW4saSxvKSkpcmV0dXJuIGE7aWYoci5rZXkhPT1pJiZ2b2lkIDAhPT1yLm91dCYmXCJpblwiIT09biYmKGE9dShyLm91dCxpLG8sbj9udWxsOnIua2V5KSkpcmV0dXJuIGF9aWYoXCJkaXJlY3RlZFwiIT09dCYmdm9pZCAwIT09ci51bmRpcmVjdGVkJiYoYT11KHIudW5kaXJlY3RlZCxpLG8pKSlyZXR1cm4gYX1mdW5jdGlvbiBOdCh0LGUsbixyKXt2YXIgaT1PLmVtcHR5KCk7cmV0dXJuXCJ1bmRpcmVjdGVkXCIhPT10JiYodm9pZCAwIT09bi5pbiYmXCJvdXRcIiE9PWUmJnIgaW4gbi5pbiYmKGk9cnQoaSxidChuLmluLHIpKSksdm9pZCAwIT09bi5vdXQmJlwiaW5cIiE9PWUmJnIgaW4gbi5vdXQmJihpPXJ0KGksYnQobi5vdXQscikpKSksXCJkaXJlY3RlZFwiIT09dCYmdm9pZCAwIT09bi51bmRpcmVjdGVkJiZyIGluIG4udW5kaXJlY3RlZCYmKGk9cnQoaSxidChuLnVuZGlyZWN0ZWQscikpKSxpfXZhciBVdD1be25hbWU6XCJuZWlnaGJvcnNcIix0eXBlOlwibWl4ZWRcIn0se25hbWU6XCJpbk5laWdoYm9yc1wiLHR5cGU6XCJkaXJlY3RlZFwiLGRpcmVjdGlvbjpcImluXCJ9LHtuYW1lOlwib3V0TmVpZ2hib3JzXCIsdHlwZTpcImRpcmVjdGVkXCIsZGlyZWN0aW9uOlwib3V0XCJ9LHtuYW1lOlwiaW5ib3VuZE5laWdoYm9yc1wiLHR5cGU6XCJtaXhlZFwiLGRpcmVjdGlvbjpcImluXCJ9LHtuYW1lOlwib3V0Ym91bmROZWlnaGJvcnNcIix0eXBlOlwibWl4ZWRcIixkaXJlY3Rpb246XCJvdXRcIn0se25hbWU6XCJkaXJlY3RlZE5laWdoYm9yc1wiLHR5cGU6XCJkaXJlY3RlZFwifSx7bmFtZTpcInVuZGlyZWN0ZWROZWlnaGJvcnNcIix0eXBlOlwidW5kaXJlY3RlZFwifV07ZnVuY3Rpb24ganQodCxlKXtpZih2b2lkIDAhPT1lKWZvcih2YXIgbiBpbiBlKXQuYWRkKG4pfWZ1bmN0aW9uIE90KHQsZSxuKXtmb3IodmFyIHIgaW4gZSl7dmFyIGk9ZVtyXTtpIGluc3RhbmNlb2YgU2V0JiYoaT1pLnZhbHVlcygpLm5leHQoKS52YWx1ZSk7dmFyIG89aS5zb3VyY2UsYT1pLnRhcmdldCx1PW89PT10P2E6bztuKHUua2V5LHUuYXR0cmlidXRlcyl9fWZ1bmN0aW9uIEN0KHQsZSxuLHIpe2Zvcih2YXIgaSBpbiBuKXt2YXIgbz1uW2ldO28gaW5zdGFuY2VvZiBTZXQmJihvPW8udmFsdWVzKCkubmV4dCgpLnZhbHVlKTt2YXIgYT1vLnNvdXJjZSx1PW8udGFyZ2V0LGM9YT09PWU/dTphO3QuaGFzKGMua2V5KXx8KHQuYWRkKGMua2V5KSxyKGMua2V5LGMuYXR0cmlidXRlcykpfX1mdW5jdGlvbiB6dCh0LGUsbil7Zm9yKHZhciByIGluIGUpe3ZhciBpPWVbcl07aSBpbnN0YW5jZW9mIFNldCYmKGk9aS52YWx1ZXMoKS5uZXh0KCkudmFsdWUpO3ZhciBvPWkuc291cmNlLGE9aS50YXJnZXQsdT1vPT09dD9hOm87aWYobih1LmtleSx1LmF0dHJpYnV0ZXMpKXJldHVybiB1LmtleX19ZnVuY3Rpb24gTXQodCxlLG4scil7Zm9yKHZhciBpIGluIG4pe3ZhciBvPW5baV07byBpbnN0YW5jZW9mIFNldCYmKG89by52YWx1ZXMoKS5uZXh0KCkudmFsdWUpO3ZhciBhPW8uc291cmNlLHU9by50YXJnZXQsYz1hPT09ZT91OmE7aWYoIXQuaGFzKGMua2V5KSlpZih0LmFkZChjLmtleSkscihjLmtleSxjLmF0dHJpYnV0ZXMpKXJldHVybiBjLmtleX19ZnVuY3Rpb24gUHQodCxlKXt2YXIgbj1PYmplY3Qua2V5cyhlKSxyPW4ubGVuZ3RoLGk9MDtyZXR1cm4gbmV3IE8oKGZ1bmN0aW9uKCl7aWYoaT49cilyZXR1cm57ZG9uZTohMH07dmFyIG89ZVtuW2krK11dO28gaW5zdGFuY2VvZiBTZXQmJihvPW8udmFsdWVzKCkubmV4dCgpLnZhbHVlKTt2YXIgYT1vLnNvdXJjZSx1PW8udGFyZ2V0LGM9YT09PXQ/dTphO3JldHVybntkb25lOiExLHZhbHVlOntuZWlnaGJvcjpjLmtleSxhdHRyaWJ1dGVzOmMuYXR0cmlidXRlc319fSkpfWZ1bmN0aW9uIFR0KHQsZSxuKXt2YXIgcj1PYmplY3Qua2V5cyhuKSxpPXIubGVuZ3RoLG89MDtyZXR1cm4gbmV3IE8oKGZ1bmN0aW9uIGEoKXtpZihvPj1pKXJldHVybntkb25lOiEwfTt2YXIgdT1uW3JbbysrXV07dSBpbnN0YW5jZW9mIFNldCYmKHU9dS52YWx1ZXMoKS5uZXh0KCkudmFsdWUpO3ZhciBjPXUuc291cmNlLGQ9dS50YXJnZXQscz1jPT09ZT9kOmM7cmV0dXJuIHQuaGFzKHMua2V5KT9hKCk6KHQuYWRkKHMua2V5KSx7ZG9uZTohMSx2YWx1ZTp7bmVpZ2hib3I6cy5rZXksYXR0cmlidXRlczpzLmF0dHJpYnV0ZXN9fSl9KSl9ZnVuY3Rpb24gUnQodCxlKXt2YXIgbj1lLm5hbWUscj1lLnR5cGUsaT1lLmRpcmVjdGlvbjt0LnByb3RvdHlwZVtuXT1mdW5jdGlvbih0KXtpZihcIm1peGVkXCIhPT1yJiZcIm1peGVkXCIhPT10aGlzLnR5cGUmJnIhPT10aGlzLnR5cGUpcmV0dXJuW107dD1cIlwiK3Q7dmFyIGU9dGhpcy5fbm9kZXMuZ2V0KHQpO2lmKHZvaWQgMD09PWUpdGhyb3cgbmV3IFkoXCJHcmFwaC5cIi5jb25jYXQobiwnOiBjb3VsZCBub3QgZmluZCB0aGUgXCInKS5jb25jYXQodCwnXCIgbm9kZSBpbiB0aGUgZ3JhcGguJykpO3JldHVybiBmdW5jdGlvbih0LGUsbil7aWYoXCJtaXhlZFwiIT09dCl7aWYoXCJ1bmRpcmVjdGVkXCI9PT10KXJldHVybiBPYmplY3Qua2V5cyhuLnVuZGlyZWN0ZWQpO2lmKFwic3RyaW5nXCI9PXR5cGVvZiBlKXJldHVybiBPYmplY3Qua2V5cyhuW2VdKX12YXIgcj1uZXcgU2V0O3JldHVyblwidW5kaXJlY3RlZFwiIT09dCYmKFwib3V0XCIhPT1lJiZqdChyLG4uaW4pLFwiaW5cIiE9PWUmJmp0KHIsbi5vdXQpKSxcImRpcmVjdGVkXCIhPT10JiZqdChyLG4udW5kaXJlY3RlZCksSyhyLnZhbHVlcygpLHIuc2l6ZSl9KFwibWl4ZWRcIj09PXI/dGhpcy50eXBlOnIsaSxlKX19ZnVuY3Rpb24gV3QodCxlKXt2YXIgbj1lLm5hbWUscj1lLnR5cGUsaT1lLmRpcmVjdGlvbixvPVwiZm9yRWFjaFwiK25bMF0udG9VcHBlckNhc2UoKStuLnNsaWNlKDEsLTEpO3QucHJvdG90eXBlW29dPWZ1bmN0aW9uKHQsZSl7aWYoXCJtaXhlZFwiPT09cnx8XCJtaXhlZFwiPT09dGhpcy50eXBlfHxyPT09dGhpcy50eXBlKXt0PVwiXCIrdDt2YXIgbj10aGlzLl9ub2Rlcy5nZXQodCk7aWYodm9pZCAwPT09bil0aHJvdyBuZXcgWShcIkdyYXBoLlwiLmNvbmNhdChvLCc6IGNvdWxkIG5vdCBmaW5kIHRoZSBcIicpLmNvbmNhdCh0LCdcIiBub2RlIGluIHRoZSBncmFwaC4nKSk7IWZ1bmN0aW9uKHQsZSxuLHIpe2lmKFwibWl4ZWRcIiE9PXQpe2lmKFwidW5kaXJlY3RlZFwiPT09dClyZXR1cm4gT3QobixuLnVuZGlyZWN0ZWQscik7aWYoXCJzdHJpbmdcIj09dHlwZW9mIGUpcmV0dXJuIE90KG4sbltlXSxyKX12YXIgaT1uZXcgU2V0O1widW5kaXJlY3RlZFwiIT09dCYmKFwib3V0XCIhPT1lJiZDdChpLG4sbi5pbixyKSxcImluXCIhPT1lJiZDdChpLG4sbi5vdXQscikpLFwiZGlyZWN0ZWRcIiE9PXQmJkN0KGksbixuLnVuZGlyZWN0ZWQscil9KFwibWl4ZWRcIj09PXI/dGhpcy50eXBlOnIsaSxuLGUpfX07dmFyIGE9XCJtYXBcIituWzBdLnRvVXBwZXJDYXNlKCkrbi5zbGljZSgxKTt0LnByb3RvdHlwZVthXT1mdW5jdGlvbih0LGUpe3ZhciBuPVtdO3JldHVybiB0aGlzW29dKHQsKGZ1bmN0aW9uKHQscil7bi5wdXNoKGUodCxyKSl9KSksbn07dmFyIHU9XCJmaWx0ZXJcIituWzBdLnRvVXBwZXJDYXNlKCkrbi5zbGljZSgxKTt0LnByb3RvdHlwZVt1XT1mdW5jdGlvbih0LGUpe3ZhciBuPVtdO3JldHVybiB0aGlzW29dKHQsKGZ1bmN0aW9uKHQscil7ZSh0LHIpJiZuLnB1c2godCl9KSksbn07dmFyIGM9XCJyZWR1Y2VcIituWzBdLnRvVXBwZXJDYXNlKCkrbi5zbGljZSgxKTt0LnByb3RvdHlwZVtjXT1mdW5jdGlvbih0LGUsbil7aWYoYXJndW1lbnRzLmxlbmd0aDwzKXRocm93IG5ldyBGKFwiR3JhcGguXCIuY29uY2F0KGMsXCI6IG1pc3NpbmcgaW5pdGlhbCB2YWx1ZS4gWW91IG11c3QgcHJvdmlkZSBpdCBiZWNhdXNlIHRoZSBjYWxsYmFjayB0YWtlcyBtb3JlIHRoYW4gb25lIGFyZ3VtZW50IGFuZCB3ZSBjYW5ub3QgaW5mZXIgdGhlIGluaXRpYWwgdmFsdWUgZnJvbSB0aGUgZmlyc3QgaXRlcmF0aW9uLCBhcyB5b3UgY291bGQgd2l0aCBhIHNpbXBsZSBhcnJheS5cIikpO3ZhciByPW47cmV0dXJuIHRoaXNbb10odCwoZnVuY3Rpb24odCxuKXtyPWUocix0LG4pfSkpLHJ9fWZ1bmN0aW9uIEt0KHQsZSl7dmFyIG49ZS5uYW1lLHI9ZS50eXBlLGk9ZS5kaXJlY3Rpb24sbz1uWzBdLnRvVXBwZXJDYXNlKCkrbi5zbGljZSgxLC0xKSxhPVwiZmluZFwiK287dC5wcm90b3R5cGVbYV09ZnVuY3Rpb24odCxlKXtpZihcIm1peGVkXCI9PT1yfHxcIm1peGVkXCI9PT10aGlzLnR5cGV8fHI9PT10aGlzLnR5cGUpe3Q9XCJcIit0O3ZhciBuPXRoaXMuX25vZGVzLmdldCh0KTtpZih2b2lkIDA9PT1uKXRocm93IG5ldyBZKFwiR3JhcGguXCIuY29uY2F0KGEsJzogY291bGQgbm90IGZpbmQgdGhlIFwiJykuY29uY2F0KHQsJ1wiIG5vZGUgaW4gdGhlIGdyYXBoLicpKTtyZXR1cm4gZnVuY3Rpb24odCxlLG4scil7aWYoXCJtaXhlZFwiIT09dCl7aWYoXCJ1bmRpcmVjdGVkXCI9PT10KXJldHVybiB6dChuLG4udW5kaXJlY3RlZCxyKTtpZihcInN0cmluZ1wiPT10eXBlb2YgZSlyZXR1cm4genQobixuW2VdLHIpfXZhciBpLG89bmV3IFNldDtpZihcInVuZGlyZWN0ZWRcIiE9PXQpe2lmKFwib3V0XCIhPT1lJiYoaT1NdChvLG4sbi5pbixyKSkpcmV0dXJuIGk7aWYoXCJpblwiIT09ZSYmKGk9TXQobyxuLG4ub3V0LHIpKSlyZXR1cm4gaX1pZihcImRpcmVjdGVkXCIhPT10JiYoaT1NdChvLG4sbi51bmRpcmVjdGVkLHIpKSlyZXR1cm4gaX0oXCJtaXhlZFwiPT09cj90aGlzLnR5cGU6cixpLG4sZSl9fTt2YXIgdT1cInNvbWVcIitvO3QucHJvdG90eXBlW3VdPWZ1bmN0aW9uKHQsZSl7cmV0dXJuISF0aGlzW2FdKHQsZSl9O3ZhciBjPVwiZXZlcnlcIitvO3QucHJvdG90eXBlW2NdPWZ1bmN0aW9uKHQsZSl7cmV0dXJuIXRoaXNbYV0odCwoZnVuY3Rpb24odCxuKXtyZXR1cm4hZSh0LG4pfSkpfX1mdW5jdGlvbiBJdCh0LGUpe3ZhciBuPWUubmFtZSxyPWUudHlwZSxpPWUuZGlyZWN0aW9uLG89bi5zbGljZSgwLC0xKStcIkVudHJpZXNcIjt0LnByb3RvdHlwZVtvXT1mdW5jdGlvbih0KXtpZihcIm1peGVkXCIhPT1yJiZcIm1peGVkXCIhPT10aGlzLnR5cGUmJnIhPT10aGlzLnR5cGUpcmV0dXJuIE8uZW1wdHkoKTt0PVwiXCIrdDt2YXIgZT10aGlzLl9ub2Rlcy5nZXQodCk7aWYodm9pZCAwPT09ZSl0aHJvdyBuZXcgWShcIkdyYXBoLlwiLmNvbmNhdChvLCc6IGNvdWxkIG5vdCBmaW5kIHRoZSBcIicpLmNvbmNhdCh0LCdcIiBub2RlIGluIHRoZSBncmFwaC4nKSk7cmV0dXJuIGZ1bmN0aW9uKHQsZSxuKXtpZihcIm1peGVkXCIhPT10KXtpZihcInVuZGlyZWN0ZWRcIj09PXQpcmV0dXJuIFB0KG4sbi51bmRpcmVjdGVkKTtpZihcInN0cmluZ1wiPT10eXBlb2YgZSlyZXR1cm4gUHQobixuW2VdKX12YXIgcj1PLmVtcHR5KCksaT1uZXcgU2V0O3JldHVyblwidW5kaXJlY3RlZFwiIT09dCYmKFwib3V0XCIhPT1lJiYocj1ydChyLFR0KGksbixuLmluKSkpLFwiaW5cIiE9PWUmJihyPXJ0KHIsVHQoaSxuLG4ub3V0KSkpKSxcImRpcmVjdGVkXCIhPT10JiYocj1ydChyLFR0KGksbixuLnVuZGlyZWN0ZWQpKSkscn0oXCJtaXhlZFwiPT09cj90aGlzLnR5cGU6cixpLGUpfX1mdW5jdGlvbiBGdCh0LGUsbixyLGkpe2Zvcih2YXIgbyxhLHUsYyxkLHMsaCxmPXIuX25vZGVzLnZhbHVlcygpLHA9ci50eXBlOyEwIT09KG89Zi5uZXh0KCkpLmRvbmU7KXt2YXIgbD0hMTtpZihhPW8udmFsdWUsXCJ1bmRpcmVjdGVkXCIhPT1wKWZvcih1IGluIGM9YS5vdXQpaWYocz0oZD1jW3VdKS50YXJnZXQsbD0hMCxoPWkoYS5rZXkscy5rZXksYS5hdHRyaWJ1dGVzLHMuYXR0cmlidXRlcyxkLmtleSxkLmF0dHJpYnV0ZXMsZC51bmRpcmVjdGVkKSx0JiZoKXJldHVybiBkO2lmKFwiZGlyZWN0ZWRcIiE9PXApZm9yKHUgaW4gYz1hLnVuZGlyZWN0ZWQpaWYoIShlJiZhLmtleT51KSYmKChzPShkPWNbdV0pLnRhcmdldCkua2V5IT09dSYmKHM9ZC5zb3VyY2UpLGw9ITAsaD1pKGEua2V5LHMua2V5LGEuYXR0cmlidXRlcyxzLmF0dHJpYnV0ZXMsZC5rZXksZC5hdHRyaWJ1dGVzLGQudW5kaXJlY3RlZCksdCYmaCkpcmV0dXJuIGQ7aWYobiYmIWwmJihoPWkoYS5rZXksbnVsbCxhLmF0dHJpYnV0ZXMsbnVsbCxudWxsLG51bGwsbnVsbCksdCYmaCkpcmV0dXJuIG51bGx9fWZ1bmN0aW9uIFl0KHQsZSxuLHIsaSl7Zm9yKHZhciBvLGEsdSxjLGQscyxoLGYscCxsPXIuX25vZGVzLnZhbHVlcygpLGc9ci50eXBlOyEwIT09KG89bC5uZXh0KCkpLmRvbmU7KXt2YXIgeT0hMTtpZihhPW8udmFsdWUsXCJ1bmRpcmVjdGVkXCIhPT1nKWZvcih1IGluIHM9YS5vdXQpZm9yKGM9c1t1XS52YWx1ZXMoKTshMCE9PShkPWMubmV4dCgpKS5kb25lOylpZihmPShoPWQudmFsdWUpLnRhcmdldCx5PSEwLHA9aShhLmtleSxmLmtleSxhLmF0dHJpYnV0ZXMsZi5hdHRyaWJ1dGVzLGgua2V5LGguYXR0cmlidXRlcyxoLnVuZGlyZWN0ZWQpLHQmJnApcmV0dXJuIGg7aWYoXCJkaXJlY3RlZFwiIT09Zylmb3IodSBpbiBzPWEudW5kaXJlY3RlZClpZighKGUmJmEua2V5PnUpKWZvcihjPXNbdV0udmFsdWVzKCk7ITAhPT0oZD1jLm5leHQoKSkuZG9uZTspaWYoKGY9KGg9ZC52YWx1ZSkudGFyZ2V0KS5rZXkhPT11JiYoZj1oLnNvdXJjZSkseT0hMCxwPWkoYS5rZXksZi5rZXksYS5hdHRyaWJ1dGVzLGYuYXR0cmlidXRlcyxoLmtleSxoLmF0dHJpYnV0ZXMsaC51bmRpcmVjdGVkKSx0JiZwKXJldHVybiBoO2lmKG4mJiF5JiYocD1pKGEua2V5LG51bGwsYS5hdHRyaWJ1dGVzLG51bGwsbnVsbCxudWxsLG51bGwpLHQmJnApKXJldHVybiBudWxsfX1mdW5jdGlvbiBCdCh0LGUpe3ZhciBuPXtrZXk6dH07cmV0dXJuIGYoZS5hdHRyaWJ1dGVzKXx8KG4uYXR0cmlidXRlcz1jKHt9LGUuYXR0cmlidXRlcykpLG59ZnVuY3Rpb24gcXQodCxlKXt2YXIgbj17a2V5OnQsc291cmNlOmUuc291cmNlLmtleSx0YXJnZXQ6ZS50YXJnZXQua2V5fTtyZXR1cm4gZihlLmF0dHJpYnV0ZXMpfHwobi5hdHRyaWJ1dGVzPWMoe30sZS5hdHRyaWJ1dGVzKSksZS51bmRpcmVjdGVkJiYobi51bmRpcmVjdGVkPSEwKSxufWZ1bmN0aW9uIEp0KHQpe3JldHVybiBoKHQpP1wia2V5XCJpbiB0PyEoXCJhdHRyaWJ1dGVzXCJpbiB0KXx8aCh0LmF0dHJpYnV0ZXMpJiZudWxsIT09dC5hdHRyaWJ1dGVzP251bGw6XCJpbnZhbGlkLWF0dHJpYnV0ZXNcIjpcIm5vLWtleVwiOlwibm90LW9iamVjdFwifWZ1bmN0aW9uIFZ0KHQpe3JldHVybiBoKHQpP1wic291cmNlXCJpbiB0P1widGFyZ2V0XCJpbiB0PyEoXCJhdHRyaWJ1dGVzXCJpbiB0KXx8aCh0LmF0dHJpYnV0ZXMpJiZudWxsIT09dC5hdHRyaWJ1dGVzP1widW5kaXJlY3RlZFwiaW4gdCYmXCJib29sZWFuXCIhPXR5cGVvZiB0LnVuZGlyZWN0ZWQ/XCJpbnZhbGlkLXVuZGlyZWN0ZWRcIjpudWxsOlwiaW52YWxpZC1hdHRyaWJ1dGVzXCI6XCJuby10YXJnZXRcIjpcIm5vLXNvdXJjZVwiOlwibm90LW9iamVjdFwifXZhciBIdCxRdD0oSHQ9MjU1Jk1hdGguZmxvb3IoMjU2Kk1hdGgucmFuZG9tKCkpLGZ1bmN0aW9uKCl7cmV0dXJuIEh0Kyt9KSxYdD1uZXcgU2V0KFtcImRpcmVjdGVkXCIsXCJ1bmRpcmVjdGVkXCIsXCJtaXhlZFwiXSksWnQ9bmV3IFNldChbXCJkb21haW5cIixcIl9ldmVudHNcIixcIl9ldmVudHNDb3VudFwiLFwiX21heExpc3RlbmVyc1wiXSksJHQ9e2FsbG93U2VsZkxvb3BzOiEwLG11bHRpOiExLHR5cGU6XCJtaXhlZFwifTtmdW5jdGlvbiB0ZSh0LGUsbil7dmFyIHI9bmV3IHQuTm9kZURhdGFDbGFzcyhlLG4pO3JldHVybiB0Ll9ub2Rlcy5zZXQoZSxyKSx0LmVtaXQoXCJub2RlQWRkZWRcIix7a2V5OmUsYXR0cmlidXRlczpufSkscn1mdW5jdGlvbiBlZSh0LGUsbixyLGksbyxhLHUpe2lmKCFyJiZcInVuZGlyZWN0ZWRcIj09PXQudHlwZSl0aHJvdyBuZXcgQihcIkdyYXBoLlwiLmNvbmNhdChlLFwiOiB5b3UgY2Fubm90IGFkZCBhIGRpcmVjdGVkIGVkZ2UgdG8gYW4gdW5kaXJlY3RlZCBncmFwaC4gVXNlIHRoZSAjLmFkZEVkZ2Ugb3IgIy5hZGRVbmRpcmVjdGVkRWRnZSBpbnN0ZWFkLlwiKSk7aWYociYmXCJkaXJlY3RlZFwiPT09dC50eXBlKXRocm93IG5ldyBCKFwiR3JhcGguXCIuY29uY2F0KGUsXCI6IHlvdSBjYW5ub3QgYWRkIGFuIHVuZGlyZWN0ZWQgZWRnZSB0byBhIGRpcmVjdGVkIGdyYXBoLiBVc2UgdGhlICMuYWRkRWRnZSBvciAjLmFkZERpcmVjdGVkRWRnZSBpbnN0ZWFkLlwiKSk7aWYodSYmIWgodSkpdGhyb3cgbmV3IEYoXCJHcmFwaC5cIi5jb25jYXQoZSwnOiBpbnZhbGlkIGF0dHJpYnV0ZXMuIEV4cGVjdGluZyBhbiBvYmplY3QgYnV0IGdvdCBcIicpLmNvbmNhdCh1LCdcIicpKTtpZihvPVwiXCIrbyxhPVwiXCIrYSx1PXV8fHt9LCF0LmFsbG93U2VsZkxvb3BzJiZvPT09YSl0aHJvdyBuZXcgQihcIkdyYXBoLlwiLmNvbmNhdChlLCc6IHNvdXJjZSAmIHRhcmdldCBhcmUgdGhlIHNhbWUgKFwiJykuY29uY2F0KG8sXCJcXFwiKSwgdGh1cyBjcmVhdGluZyBhIGxvb3AgZXhwbGljaXRseSBmb3JiaWRkZW4gYnkgdGhpcyBncmFwaCAnYWxsb3dTZWxmTG9vcHMnIG9wdGlvbiBzZXQgdG8gZmFsc2UuXCIpKTt2YXIgYz10Ll9ub2Rlcy5nZXQobyksZD10Ll9ub2Rlcy5nZXQoYSk7aWYoIWMpdGhyb3cgbmV3IFkoXCJHcmFwaC5cIi5jb25jYXQoZSwnOiBzb3VyY2Ugbm9kZSBcIicpLmNvbmNhdChvLCdcIiBub3QgZm91bmQuJykpO2lmKCFkKXRocm93IG5ldyBZKFwiR3JhcGguXCIuY29uY2F0KGUsJzogdGFyZ2V0IG5vZGUgXCInKS5jb25jYXQoYSwnXCIgbm90IGZvdW5kLicpKTt2YXIgcz17a2V5Om51bGwsdW5kaXJlY3RlZDpyLHNvdXJjZTpvLHRhcmdldDphLGF0dHJpYnV0ZXM6dX07aWYobilpPXQuX2VkZ2VLZXlHZW5lcmF0b3IoKTtlbHNlIGlmKGk9XCJcIitpLHQuX2VkZ2VzLmhhcyhpKSl0aHJvdyBuZXcgQihcIkdyYXBoLlwiLmNvbmNhdChlLCc6IHRoZSBcIicpLmNvbmNhdChpLCdcIiBlZGdlIGFscmVhZHkgZXhpc3RzIGluIHRoZSBncmFwaC4nKSk7aWYoIXQubXVsdGkmJihyP3ZvaWQgMCE9PWMudW5kaXJlY3RlZFthXTp2b2lkIDAhPT1jLm91dFthXSkpdGhyb3cgbmV3IEIoXCJHcmFwaC5cIi5jb25jYXQoZSwnOiBhbiBlZGdlIGxpbmtpbmcgXCInKS5jb25jYXQobywnXCIgdG8gXCInKS5jb25jYXQoYSxcIlxcXCIgYWxyZWFkeSBleGlzdHMuIElmIHlvdSByZWFsbHkgd2FudCB0byBhZGQgbXVsdGlwbGUgZWRnZXMgbGlua2luZyB0aG9zZSBub2RlcywgeW91IHNob3VsZCBjcmVhdGUgYSBtdWx0aSBncmFwaCBieSB1c2luZyB0aGUgJ211bHRpJyBvcHRpb24uXCIpKTt2YXIgZj1uZXcgSChyLGksYyxkLHUpO3JldHVybiB0Ll9lZGdlcy5zZXQoaSxmKSxvPT09YT9yPyhjLnVuZGlyZWN0ZWRTZWxmTG9vcHMrKyx0Ll91bmRpcmVjdGVkU2VsZkxvb3BDb3VudCsrKTooYy5kaXJlY3RlZFNlbGZMb29wcysrLHQuX2RpcmVjdGVkU2VsZkxvb3BDb3VudCsrKTpyPyhjLnVuZGlyZWN0ZWREZWdyZWUrKyxkLnVuZGlyZWN0ZWREZWdyZWUrKyk6KGMub3V0RGVncmVlKyssZC5pbkRlZ3JlZSsrKSxRKHQscixmLG8sYSxjLGQpLHI/dC5fdW5kaXJlY3RlZFNpemUrKzp0Ll9kaXJlY3RlZFNpemUrKyxzLmtleT1pLHQuZW1pdChcImVkZ2VBZGRlZFwiLHMpLGl9ZnVuY3Rpb24gbmUodCxlLG4scixpLG8sYSx1LGQpe2lmKCFyJiZcInVuZGlyZWN0ZWRcIj09PXQudHlwZSl0aHJvdyBuZXcgQihcIkdyYXBoLlwiLmNvbmNhdChlLFwiOiB5b3UgY2Fubm90IG1lcmdlL3VwZGF0ZSBhIGRpcmVjdGVkIGVkZ2UgdG8gYW4gdW5kaXJlY3RlZCBncmFwaC4gVXNlIHRoZSAjLm1lcmdlRWRnZS8jLnVwZGF0ZUVkZ2Ugb3IgIy5hZGRVbmRpcmVjdGVkRWRnZSBpbnN0ZWFkLlwiKSk7aWYociYmXCJkaXJlY3RlZFwiPT09dC50eXBlKXRocm93IG5ldyBCKFwiR3JhcGguXCIuY29uY2F0KGUsXCI6IHlvdSBjYW5ub3QgbWVyZ2UvdXBkYXRlIGFuIHVuZGlyZWN0ZWQgZWRnZSB0byBhIGRpcmVjdGVkIGdyYXBoLiBVc2UgdGhlICMubWVyZ2VFZGdlLyMudXBkYXRlRWRnZSBvciAjLmFkZERpcmVjdGVkRWRnZSBpbnN0ZWFkLlwiKSk7aWYodSlpZihkKXtpZihcImZ1bmN0aW9uXCIhPXR5cGVvZiB1KXRocm93IG5ldyBGKFwiR3JhcGguXCIuY29uY2F0KGUsJzogaW52YWxpZCB1cGRhdGVyIGZ1bmN0aW9uLiBFeHBlY3RpbmcgYSBmdW5jdGlvbiBidXQgZ290IFwiJykuY29uY2F0KHUsJ1wiJykpfWVsc2UgaWYoIWgodSkpdGhyb3cgbmV3IEYoXCJHcmFwaC5cIi5jb25jYXQoZSwnOiBpbnZhbGlkIGF0dHJpYnV0ZXMuIEV4cGVjdGluZyBhbiBvYmplY3QgYnV0IGdvdCBcIicpLmNvbmNhdCh1LCdcIicpKTt2YXIgcztpZihvPVwiXCIrbyxhPVwiXCIrYSxkJiYocz11LHU9dm9pZCAwKSwhdC5hbGxvd1NlbGZMb29wcyYmbz09PWEpdGhyb3cgbmV3IEIoXCJHcmFwaC5cIi5jb25jYXQoZSwnOiBzb3VyY2UgJiB0YXJnZXQgYXJlIHRoZSBzYW1lIChcIicpLmNvbmNhdChvLFwiXFxcIiksIHRodXMgY3JlYXRpbmcgYSBsb29wIGV4cGxpY2l0bHkgZm9yYmlkZGVuIGJ5IHRoaXMgZ3JhcGggJ2FsbG93U2VsZkxvb3BzJyBvcHRpb24gc2V0IHRvIGZhbHNlLlwiKSk7dmFyIGYscCxsPXQuX25vZGVzLmdldChvKSxnPXQuX25vZGVzLmdldChhKTtpZighbiYmKGY9dC5fZWRnZXMuZ2V0KGkpKSl7aWYoIShmLnNvdXJjZS5rZXk9PT1vJiZmLnRhcmdldC5rZXk9PT1hfHxyJiZmLnNvdXJjZS5rZXk9PT1hJiZmLnRhcmdldC5rZXk9PT1vKSl0aHJvdyBuZXcgQihcIkdyYXBoLlwiLmNvbmNhdChlLCc6IGluY29uc2lzdGVuY3kgZGV0ZWN0ZWQgd2hlbiBhdHRlbXB0aW5nIHRvIG1lcmdlIHRoZSBcIicpLmNvbmNhdChpLCdcIiBlZGdlIHdpdGggXCInKS5jb25jYXQobywnXCIgc291cmNlICYgXCInKS5jb25jYXQoYSwnXCIgdGFyZ2V0IHZzLiAoXCInKS5jb25jYXQoZi5zb3VyY2Uua2V5LCdcIiwgXCInKS5jb25jYXQoZi50YXJnZXQua2V5LCdcIikuJykpO3A9Zn1pZihwfHx0Lm11bHRpfHwhbHx8KHA9cj9sLnVuZGlyZWN0ZWRbYV06bC5vdXRbYV0pLHApe3ZhciB5PVtwLmtleSwhMSwhMSwhMV07aWYoZD8hczohdSlyZXR1cm4geTtpZihkKXt2YXIgdj1wLmF0dHJpYnV0ZXM7cC5hdHRyaWJ1dGVzPXModiksdC5lbWl0KFwiZWRnZUF0dHJpYnV0ZXNVcGRhdGVkXCIse3R5cGU6XCJyZXBsYWNlXCIsa2V5OnAua2V5LGF0dHJpYnV0ZXM6cC5hdHRyaWJ1dGVzfSl9ZWxzZSBjKHAuYXR0cmlidXRlcyx1KSx0LmVtaXQoXCJlZGdlQXR0cmlidXRlc1VwZGF0ZWRcIix7dHlwZTpcIm1lcmdlXCIsa2V5OnAua2V5LGF0dHJpYnV0ZXM6cC5hdHRyaWJ1dGVzLGRhdGE6dX0pO3JldHVybiB5fXU9dXx8e30sZCYmcyYmKHU9cyh1KSk7dmFyIGI9e2tleTpudWxsLHVuZGlyZWN0ZWQ6cixzb3VyY2U6byx0YXJnZXQ6YSxhdHRyaWJ1dGVzOnV9O2lmKG4paT10Ll9lZGdlS2V5R2VuZXJhdG9yKCk7ZWxzZSBpZihpPVwiXCIraSx0Ll9lZGdlcy5oYXMoaSkpdGhyb3cgbmV3IEIoXCJHcmFwaC5cIi5jb25jYXQoZSwnOiB0aGUgXCInKS5jb25jYXQoaSwnXCIgZWRnZSBhbHJlYWR5IGV4aXN0cyBpbiB0aGUgZ3JhcGguJykpO3ZhciB3PSExLG09ITE7cmV0dXJuIGx8fChsPXRlKHQsbyx7fSksdz0hMCxvPT09YSYmKGc9bCxtPSEwKSksZ3x8KGc9dGUodCxhLHt9KSxtPSEwKSxmPW5ldyBIKHIsaSxsLGcsdSksdC5fZWRnZXMuc2V0KGksZiksbz09PWE/cj8obC51bmRpcmVjdGVkU2VsZkxvb3BzKyssdC5fdW5kaXJlY3RlZFNlbGZMb29wQ291bnQrKyk6KGwuZGlyZWN0ZWRTZWxmTG9vcHMrKyx0Ll9kaXJlY3RlZFNlbGZMb29wQ291bnQrKyk6cj8obC51bmRpcmVjdGVkRGVncmVlKyssZy51bmRpcmVjdGVkRGVncmVlKyspOihsLm91dERlZ3JlZSsrLGcuaW5EZWdyZWUrKyksUSh0LHIsZixvLGEsbCxnKSxyP3QuX3VuZGlyZWN0ZWRTaXplKys6dC5fZGlyZWN0ZWRTaXplKyssYi5rZXk9aSx0LmVtaXQoXCJlZGdlQWRkZWRcIixiKSxbaSwhMCx3LG1dfXZhciByZT1mdW5jdGlvbihuKXtmdW5jdGlvbiByKHQpe3ZhciBlO2lmKGU9bi5jYWxsKHRoaXMpfHx0aGlzLFwiYm9vbGVhblwiIT10eXBlb2YodD1jKHt9LCR0LHQpKS5tdWx0aSl0aHJvdyBuZXcgRihcIkdyYXBoLmNvbnN0cnVjdG9yOiBpbnZhbGlkICdtdWx0aScgb3B0aW9uLiBFeHBlY3RpbmcgYSBib29sZWFuIGJ1dCBnb3QgXFxcIlwiLmNvbmNhdCh0Lm11bHRpLCdcIi4nKSk7aWYoIVh0Lmhhcyh0LnR5cGUpKXRocm93IG5ldyBGKCdHcmFwaC5jb25zdHJ1Y3RvcjogaW52YWxpZCBcXCd0eXBlXFwnIG9wdGlvbi4gU2hvdWxkIGJlIG9uZSBvZiBcIm1peGVkXCIsIFwiZGlyZWN0ZWRcIiBvciBcInVuZGlyZWN0ZWRcIiBidXQgZ290IFwiJy5jb25jYXQodC50eXBlLCdcIi4nKSk7aWYoXCJib29sZWFuXCIhPXR5cGVvZiB0LmFsbG93U2VsZkxvb3BzKXRocm93IG5ldyBGKFwiR3JhcGguY29uc3RydWN0b3I6IGludmFsaWQgJ2FsbG93U2VsZkxvb3BzJyBvcHRpb24uIEV4cGVjdGluZyBhIGJvb2xlYW4gYnV0IGdvdCBcXFwiXCIuY29uY2F0KHQuYWxsb3dTZWxmTG9vcHMsJ1wiLicpKTt2YXIgcj1cIm1peGVkXCI9PT10LnR5cGU/cTpcImRpcmVjdGVkXCI9PT10LnR5cGU/SjpWO3AodShlKSxcIk5vZGVEYXRhQ2xhc3NcIixyKTt2YXIgaT1RdCgpLG89MDtyZXR1cm4gcCh1KGUpLFwiX2F0dHJpYnV0ZXNcIix7fSkscCh1KGUpLFwiX25vZGVzXCIsbmV3IE1hcCkscCh1KGUpLFwiX2VkZ2VzXCIsbmV3IE1hcCkscCh1KGUpLFwiX2RpcmVjdGVkU2l6ZVwiLDApLHAodShlKSxcIl91bmRpcmVjdGVkU2l6ZVwiLDApLHAodShlKSxcIl9kaXJlY3RlZFNlbGZMb29wQ291bnRcIiwwKSxwKHUoZSksXCJfdW5kaXJlY3RlZFNlbGZMb29wQ291bnRcIiwwKSxwKHUoZSksXCJfZWRnZUtleUdlbmVyYXRvclwiLChmdW5jdGlvbigpe3ZhciB0O2Rve3Q9XCJnZWlkX1wiK2krXCJfXCIrbysrfXdoaWxlKGUuX2VkZ2VzLmhhcyh0KSk7cmV0dXJuIHR9KSkscCh1KGUpLFwiX29wdGlvbnNcIix0KSxadC5mb3JFYWNoKChmdW5jdGlvbih0KXtyZXR1cm4gcCh1KGUpLHQsZVt0XSl9KSksbCh1KGUpLFwib3JkZXJcIiwoZnVuY3Rpb24oKXtyZXR1cm4gZS5fbm9kZXMuc2l6ZX0pKSxsKHUoZSksXCJzaXplXCIsKGZ1bmN0aW9uKCl7cmV0dXJuIGUuX2VkZ2VzLnNpemV9KSksbCh1KGUpLFwiZGlyZWN0ZWRTaXplXCIsKGZ1bmN0aW9uKCl7cmV0dXJuIGUuX2RpcmVjdGVkU2l6ZX0pKSxsKHUoZSksXCJ1bmRpcmVjdGVkU2l6ZVwiLChmdW5jdGlvbigpe3JldHVybiBlLl91bmRpcmVjdGVkU2l6ZX0pKSxsKHUoZSksXCJzZWxmTG9vcENvdW50XCIsKGZ1bmN0aW9uKCl7cmV0dXJuIGUuX2RpcmVjdGVkU2VsZkxvb3BDb3VudCtlLl91bmRpcmVjdGVkU2VsZkxvb3BDb3VudH0pKSxsKHUoZSksXCJkaXJlY3RlZFNlbGZMb29wQ291bnRcIiwoZnVuY3Rpb24oKXtyZXR1cm4gZS5fZGlyZWN0ZWRTZWxmTG9vcENvdW50fSkpLGwodShlKSxcInVuZGlyZWN0ZWRTZWxmTG9vcENvdW50XCIsKGZ1bmN0aW9uKCl7cmV0dXJuIGUuX3VuZGlyZWN0ZWRTZWxmTG9vcENvdW50fSkpLGwodShlKSxcIm11bHRpXCIsZS5fb3B0aW9ucy5tdWx0aSksbCh1KGUpLFwidHlwZVwiLGUuX29wdGlvbnMudHlwZSksbCh1KGUpLFwiYWxsb3dTZWxmTG9vcHNcIixlLl9vcHRpb25zLmFsbG93U2VsZkxvb3BzKSxsKHUoZSksXCJpbXBsZW1lbnRhdGlvblwiLChmdW5jdGlvbigpe3JldHVyblwiZ3JhcGhvbG9neVwifSkpLGV9ZShyLG4pO3ZhciBpPXIucHJvdG90eXBlO3JldHVybiBpLl9yZXNldEluc3RhbmNlQ291bnRlcnM9ZnVuY3Rpb24oKXt0aGlzLl9kaXJlY3RlZFNpemU9MCx0aGlzLl91bmRpcmVjdGVkU2l6ZT0wLHRoaXMuX2RpcmVjdGVkU2VsZkxvb3BDb3VudD0wLHRoaXMuX3VuZGlyZWN0ZWRTZWxmTG9vcENvdW50PTB9LGkuaGFzTm9kZT1mdW5jdGlvbih0KXtyZXR1cm4gdGhpcy5fbm9kZXMuaGFzKFwiXCIrdCl9LGkuaGFzRGlyZWN0ZWRFZGdlPWZ1bmN0aW9uKHQsZSl7aWYoXCJ1bmRpcmVjdGVkXCI9PT10aGlzLnR5cGUpcmV0dXJuITE7aWYoMT09PWFyZ3VtZW50cy5sZW5ndGgpe3ZhciBuPVwiXCIrdCxyPXRoaXMuX2VkZ2VzLmdldChuKTtyZXR1cm4hIXImJiFyLnVuZGlyZWN0ZWR9aWYoMj09PWFyZ3VtZW50cy5sZW5ndGgpe3Q9XCJcIit0LGU9XCJcIitlO3ZhciBpPXRoaXMuX25vZGVzLmdldCh0KTtpZighaSlyZXR1cm4hMTt2YXIgbz1pLm91dFtlXTtyZXR1cm4hIW8mJighdGhpcy5tdWx0aXx8ISFvLnNpemUpfXRocm93IG5ldyBGKFwiR3JhcGguaGFzRGlyZWN0ZWRFZGdlOiBpbnZhbGlkIGFyaXR5IChcIi5jb25jYXQoYXJndW1lbnRzLmxlbmd0aCxcIiwgaW5zdGVhZCBvZiAxIG9yIDIpLiBZb3UgY2FuIGVpdGhlciBhc2sgZm9yIGFuIGVkZ2UgaWQgb3IgZm9yIHRoZSBleGlzdGVuY2Ugb2YgYW4gZWRnZSBiZXR3ZWVuIGEgc291cmNlICYgYSB0YXJnZXQuXCIpKX0saS5oYXNVbmRpcmVjdGVkRWRnZT1mdW5jdGlvbih0LGUpe2lmKFwiZGlyZWN0ZWRcIj09PXRoaXMudHlwZSlyZXR1cm4hMTtpZigxPT09YXJndW1lbnRzLmxlbmd0aCl7dmFyIG49XCJcIit0LHI9dGhpcy5fZWRnZXMuZ2V0KG4pO3JldHVybiEhciYmci51bmRpcmVjdGVkfWlmKDI9PT1hcmd1bWVudHMubGVuZ3RoKXt0PVwiXCIrdCxlPVwiXCIrZTt2YXIgaT10aGlzLl9ub2Rlcy5nZXQodCk7aWYoIWkpcmV0dXJuITE7dmFyIG89aS51bmRpcmVjdGVkW2VdO3JldHVybiEhbyYmKCF0aGlzLm11bHRpfHwhIW8uc2l6ZSl9dGhyb3cgbmV3IEYoXCJHcmFwaC5oYXNEaXJlY3RlZEVkZ2U6IGludmFsaWQgYXJpdHkgKFwiLmNvbmNhdChhcmd1bWVudHMubGVuZ3RoLFwiLCBpbnN0ZWFkIG9mIDEgb3IgMikuIFlvdSBjYW4gZWl0aGVyIGFzayBmb3IgYW4gZWRnZSBpZCBvciBmb3IgdGhlIGV4aXN0ZW5jZSBvZiBhbiBlZGdlIGJldHdlZW4gYSBzb3VyY2UgJiBhIHRhcmdldC5cIikpfSxpLmhhc0VkZ2U9ZnVuY3Rpb24odCxlKXtpZigxPT09YXJndW1lbnRzLmxlbmd0aCl7dmFyIG49XCJcIit0O3JldHVybiB0aGlzLl9lZGdlcy5oYXMobil9aWYoMj09PWFyZ3VtZW50cy5sZW5ndGgpe3Q9XCJcIit0LGU9XCJcIitlO3ZhciByPXRoaXMuX25vZGVzLmdldCh0KTtpZighcilyZXR1cm4hMTt2YXIgaT12b2lkIDAhPT1yLm91dCYmci5vdXRbZV07cmV0dXJuIGl8fChpPXZvaWQgMCE9PXIudW5kaXJlY3RlZCYmci51bmRpcmVjdGVkW2VdKSwhIWkmJighdGhpcy5tdWx0aXx8ISFpLnNpemUpfXRocm93IG5ldyBGKFwiR3JhcGguaGFzRWRnZTogaW52YWxpZCBhcml0eSAoXCIuY29uY2F0KGFyZ3VtZW50cy5sZW5ndGgsXCIsIGluc3RlYWQgb2YgMSBvciAyKS4gWW91IGNhbiBlaXRoZXIgYXNrIGZvciBhbiBlZGdlIGlkIG9yIGZvciB0aGUgZXhpc3RlbmNlIG9mIGFuIGVkZ2UgYmV0d2VlbiBhIHNvdXJjZSAmIGEgdGFyZ2V0LlwiKSl9LGkuZGlyZWN0ZWRFZGdlPWZ1bmN0aW9uKHQsZSl7aWYoXCJ1bmRpcmVjdGVkXCIhPT10aGlzLnR5cGUpe2lmKHQ9XCJcIit0LGU9XCJcIitlLHRoaXMubXVsdGkpdGhyb3cgbmV3IEIoXCJHcmFwaC5kaXJlY3RlZEVkZ2U6IHRoaXMgbWV0aG9kIGlzIGlycmVsZXZhbnQgd2l0aCBtdWx0aWdyYXBocyBzaW5jZSB0aGVyZSBtaWdodCBiZSBtdWx0aXBsZSBlZGdlcyBiZXR3ZWVuIHNvdXJjZSAmIHRhcmdldC4gU2VlICMuZGlyZWN0ZWRFZGdlcyBpbnN0ZWFkLlwiKTt2YXIgbj10aGlzLl9ub2Rlcy5nZXQodCk7aWYoIW4pdGhyb3cgbmV3IFkoJ0dyYXBoLmRpcmVjdGVkRWRnZTogY291bGQgbm90IGZpbmQgdGhlIFwiJy5jb25jYXQodCwnXCIgc291cmNlIG5vZGUgaW4gdGhlIGdyYXBoLicpKTtpZighdGhpcy5fbm9kZXMuaGFzKGUpKXRocm93IG5ldyBZKCdHcmFwaC5kaXJlY3RlZEVkZ2U6IGNvdWxkIG5vdCBmaW5kIHRoZSBcIicuY29uY2F0KGUsJ1wiIHRhcmdldCBub2RlIGluIHRoZSBncmFwaC4nKSk7dmFyIHI9bi5vdXQmJm4ub3V0W2VdfHx2b2lkIDA7cmV0dXJuIHI/ci5rZXk6dm9pZCAwfX0saS51bmRpcmVjdGVkRWRnZT1mdW5jdGlvbih0LGUpe2lmKFwiZGlyZWN0ZWRcIiE9PXRoaXMudHlwZSl7aWYodD1cIlwiK3QsZT1cIlwiK2UsdGhpcy5tdWx0aSl0aHJvdyBuZXcgQihcIkdyYXBoLnVuZGlyZWN0ZWRFZGdlOiB0aGlzIG1ldGhvZCBpcyBpcnJlbGV2YW50IHdpdGggbXVsdGlncmFwaHMgc2luY2UgdGhlcmUgbWlnaHQgYmUgbXVsdGlwbGUgZWRnZXMgYmV0d2VlbiBzb3VyY2UgJiB0YXJnZXQuIFNlZSAjLnVuZGlyZWN0ZWRFZGdlcyBpbnN0ZWFkLlwiKTt2YXIgbj10aGlzLl9ub2Rlcy5nZXQodCk7aWYoIW4pdGhyb3cgbmV3IFkoJ0dyYXBoLnVuZGlyZWN0ZWRFZGdlOiBjb3VsZCBub3QgZmluZCB0aGUgXCInLmNvbmNhdCh0LCdcIiBzb3VyY2Ugbm9kZSBpbiB0aGUgZ3JhcGguJykpO2lmKCF0aGlzLl9ub2Rlcy5oYXMoZSkpdGhyb3cgbmV3IFkoJ0dyYXBoLnVuZGlyZWN0ZWRFZGdlOiBjb3VsZCBub3QgZmluZCB0aGUgXCInLmNvbmNhdChlLCdcIiB0YXJnZXQgbm9kZSBpbiB0aGUgZ3JhcGguJykpO3ZhciByPW4udW5kaXJlY3RlZCYmbi51bmRpcmVjdGVkW2VdfHx2b2lkIDA7cmV0dXJuIHI/ci5rZXk6dm9pZCAwfX0saS5lZGdlPWZ1bmN0aW9uKHQsZSl7aWYodGhpcy5tdWx0aSl0aHJvdyBuZXcgQihcIkdyYXBoLmVkZ2U6IHRoaXMgbWV0aG9kIGlzIGlycmVsZXZhbnQgd2l0aCBtdWx0aWdyYXBocyBzaW5jZSB0aGVyZSBtaWdodCBiZSBtdWx0aXBsZSBlZGdlcyBiZXR3ZWVuIHNvdXJjZSAmIHRhcmdldC4gU2VlICMuZWRnZXMgaW5zdGVhZC5cIik7dD1cIlwiK3QsZT1cIlwiK2U7dmFyIG49dGhpcy5fbm9kZXMuZ2V0KHQpO2lmKCFuKXRocm93IG5ldyBZKCdHcmFwaC5lZGdlOiBjb3VsZCBub3QgZmluZCB0aGUgXCInLmNvbmNhdCh0LCdcIiBzb3VyY2Ugbm9kZSBpbiB0aGUgZ3JhcGguJykpO2lmKCF0aGlzLl9ub2Rlcy5oYXMoZSkpdGhyb3cgbmV3IFkoJ0dyYXBoLmVkZ2U6IGNvdWxkIG5vdCBmaW5kIHRoZSBcIicuY29uY2F0KGUsJ1wiIHRhcmdldCBub2RlIGluIHRoZSBncmFwaC4nKSk7dmFyIHI9bi5vdXQmJm4ub3V0W2VdfHxuLnVuZGlyZWN0ZWQmJm4udW5kaXJlY3RlZFtlXXx8dm9pZCAwO2lmKHIpcmV0dXJuIHIua2V5fSxpLmFyZURpcmVjdGVkTmVpZ2hib3JzPWZ1bmN0aW9uKHQsZSl7dD1cIlwiK3QsZT1cIlwiK2U7dmFyIG49dGhpcy5fbm9kZXMuZ2V0KHQpO2lmKCFuKXRocm93IG5ldyBZKCdHcmFwaC5hcmVEaXJlY3RlZE5laWdoYm9yczogY291bGQgbm90IGZpbmQgdGhlIFwiJy5jb25jYXQodCwnXCIgbm9kZSBpbiB0aGUgZ3JhcGguJykpO3JldHVyblwidW5kaXJlY3RlZFwiIT09dGhpcy50eXBlJiYoZSBpbiBuLmlufHxlIGluIG4ub3V0KX0saS5hcmVPdXROZWlnaGJvcnM9ZnVuY3Rpb24odCxlKXt0PVwiXCIrdCxlPVwiXCIrZTt2YXIgbj10aGlzLl9ub2Rlcy5nZXQodCk7aWYoIW4pdGhyb3cgbmV3IFkoJ0dyYXBoLmFyZU91dE5laWdoYm9yczogY291bGQgbm90IGZpbmQgdGhlIFwiJy5jb25jYXQodCwnXCIgbm9kZSBpbiB0aGUgZ3JhcGguJykpO3JldHVyblwidW5kaXJlY3RlZFwiIT09dGhpcy50eXBlJiZlIGluIG4ub3V0fSxpLmFyZUluTmVpZ2hib3JzPWZ1bmN0aW9uKHQsZSl7dD1cIlwiK3QsZT1cIlwiK2U7dmFyIG49dGhpcy5fbm9kZXMuZ2V0KHQpO2lmKCFuKXRocm93IG5ldyBZKCdHcmFwaC5hcmVJbk5laWdoYm9yczogY291bGQgbm90IGZpbmQgdGhlIFwiJy5jb25jYXQodCwnXCIgbm9kZSBpbiB0aGUgZ3JhcGguJykpO3JldHVyblwidW5kaXJlY3RlZFwiIT09dGhpcy50eXBlJiZlIGluIG4uaW59LGkuYXJlVW5kaXJlY3RlZE5laWdoYm9ycz1mdW5jdGlvbih0LGUpe3Q9XCJcIit0LGU9XCJcIitlO3ZhciBuPXRoaXMuX25vZGVzLmdldCh0KTtpZighbil0aHJvdyBuZXcgWSgnR3JhcGguYXJlVW5kaXJlY3RlZE5laWdoYm9yczogY291bGQgbm90IGZpbmQgdGhlIFwiJy5jb25jYXQodCwnXCIgbm9kZSBpbiB0aGUgZ3JhcGguJykpO3JldHVyblwiZGlyZWN0ZWRcIiE9PXRoaXMudHlwZSYmZSBpbiBuLnVuZGlyZWN0ZWR9LGkuYXJlTmVpZ2hib3JzPWZ1bmN0aW9uKHQsZSl7dD1cIlwiK3QsZT1cIlwiK2U7dmFyIG49dGhpcy5fbm9kZXMuZ2V0KHQpO2lmKCFuKXRocm93IG5ldyBZKCdHcmFwaC5hcmVOZWlnaGJvcnM6IGNvdWxkIG5vdCBmaW5kIHRoZSBcIicuY29uY2F0KHQsJ1wiIG5vZGUgaW4gdGhlIGdyYXBoLicpKTtyZXR1cm5cInVuZGlyZWN0ZWRcIiE9PXRoaXMudHlwZSYmKGUgaW4gbi5pbnx8ZSBpbiBuLm91dCl8fFwiZGlyZWN0ZWRcIiE9PXRoaXMudHlwZSYmZSBpbiBuLnVuZGlyZWN0ZWR9LGkuYXJlSW5ib3VuZE5laWdoYm9ycz1mdW5jdGlvbih0LGUpe3Q9XCJcIit0LGU9XCJcIitlO3ZhciBuPXRoaXMuX25vZGVzLmdldCh0KTtpZighbil0aHJvdyBuZXcgWSgnR3JhcGguYXJlSW5ib3VuZE5laWdoYm9yczogY291bGQgbm90IGZpbmQgdGhlIFwiJy5jb25jYXQodCwnXCIgbm9kZSBpbiB0aGUgZ3JhcGguJykpO3JldHVyblwidW5kaXJlY3RlZFwiIT09dGhpcy50eXBlJiZlIGluIG4uaW58fFwiZGlyZWN0ZWRcIiE9PXRoaXMudHlwZSYmZSBpbiBuLnVuZGlyZWN0ZWR9LGkuYXJlT3V0Ym91bmROZWlnaGJvcnM9ZnVuY3Rpb24odCxlKXt0PVwiXCIrdCxlPVwiXCIrZTt2YXIgbj10aGlzLl9ub2Rlcy5nZXQodCk7aWYoIW4pdGhyb3cgbmV3IFkoJ0dyYXBoLmFyZU91dGJvdW5kTmVpZ2hib3JzOiBjb3VsZCBub3QgZmluZCB0aGUgXCInLmNvbmNhdCh0LCdcIiBub2RlIGluIHRoZSBncmFwaC4nKSk7cmV0dXJuXCJ1bmRpcmVjdGVkXCIhPT10aGlzLnR5cGUmJmUgaW4gbi5vdXR8fFwiZGlyZWN0ZWRcIiE9PXRoaXMudHlwZSYmZSBpbiBuLnVuZGlyZWN0ZWR9LGkuaW5EZWdyZWU9ZnVuY3Rpb24odCl7dD1cIlwiK3Q7dmFyIGU9dGhpcy5fbm9kZXMuZ2V0KHQpO2lmKCFlKXRocm93IG5ldyBZKCdHcmFwaC5pbkRlZ3JlZTogY291bGQgbm90IGZpbmQgdGhlIFwiJy5jb25jYXQodCwnXCIgbm9kZSBpbiB0aGUgZ3JhcGguJykpO3JldHVyblwidW5kaXJlY3RlZFwiPT09dGhpcy50eXBlPzA6ZS5pbkRlZ3JlZStlLmRpcmVjdGVkU2VsZkxvb3BzfSxpLm91dERlZ3JlZT1mdW5jdGlvbih0KXt0PVwiXCIrdDt2YXIgZT10aGlzLl9ub2Rlcy5nZXQodCk7aWYoIWUpdGhyb3cgbmV3IFkoJ0dyYXBoLm91dERlZ3JlZTogY291bGQgbm90IGZpbmQgdGhlIFwiJy5jb25jYXQodCwnXCIgbm9kZSBpbiB0aGUgZ3JhcGguJykpO3JldHVyblwidW5kaXJlY3RlZFwiPT09dGhpcy50eXBlPzA6ZS5vdXREZWdyZWUrZS5kaXJlY3RlZFNlbGZMb29wc30saS5kaXJlY3RlZERlZ3JlZT1mdW5jdGlvbih0KXt0PVwiXCIrdDt2YXIgZT10aGlzLl9ub2Rlcy5nZXQodCk7aWYoIWUpdGhyb3cgbmV3IFkoJ0dyYXBoLmRpcmVjdGVkRGVncmVlOiBjb3VsZCBub3QgZmluZCB0aGUgXCInLmNvbmNhdCh0LCdcIiBub2RlIGluIHRoZSBncmFwaC4nKSk7aWYoXCJ1bmRpcmVjdGVkXCI9PT10aGlzLnR5cGUpcmV0dXJuIDA7dmFyIG49ZS5kaXJlY3RlZFNlbGZMb29wcztyZXR1cm4gZS5pbkRlZ3JlZStuKyhlLm91dERlZ3JlZStuKX0saS51bmRpcmVjdGVkRGVncmVlPWZ1bmN0aW9uKHQpe3Q9XCJcIit0O3ZhciBlPXRoaXMuX25vZGVzLmdldCh0KTtpZighZSl0aHJvdyBuZXcgWSgnR3JhcGgudW5kaXJlY3RlZERlZ3JlZTogY291bGQgbm90IGZpbmQgdGhlIFwiJy5jb25jYXQodCwnXCIgbm9kZSBpbiB0aGUgZ3JhcGguJykpO2lmKFwiZGlyZWN0ZWRcIj09PXRoaXMudHlwZSlyZXR1cm4gMDt2YXIgbj1lLnVuZGlyZWN0ZWRTZWxmTG9vcHM7cmV0dXJuIGUudW5kaXJlY3RlZERlZ3JlZSsyKm59LGkuZGVncmVlPWZ1bmN0aW9uKHQpe3Q9XCJcIit0O3ZhciBlPXRoaXMuX25vZGVzLmdldCh0KTtpZighZSl0aHJvdyBuZXcgWSgnR3JhcGguZGVncmVlOiBjb3VsZCBub3QgZmluZCB0aGUgXCInLmNvbmNhdCh0LCdcIiBub2RlIGluIHRoZSBncmFwaC4nKSk7dmFyIG49MDtyZXR1cm5cImRpcmVjdGVkXCIhPT10aGlzLnR5cGUmJihuKz1lLnVuZGlyZWN0ZWREZWdyZWUrMiplLnVuZGlyZWN0ZWRTZWxmTG9vcHMpLFwidW5kaXJlY3RlZFwiIT09dGhpcy50eXBlJiYobis9ZS5pbkRlZ3JlZStlLm91dERlZ3JlZSsyKmUuZGlyZWN0ZWRTZWxmTG9vcHMpLG59LGkuaW5EZWdyZWVXaXRob3V0U2VsZkxvb3BzPWZ1bmN0aW9uKHQpe3Q9XCJcIit0O3ZhciBlPXRoaXMuX25vZGVzLmdldCh0KTtpZighZSl0aHJvdyBuZXcgWSgnR3JhcGguaW5EZWdyZWVXaXRob3V0U2VsZkxvb3BzOiBjb3VsZCBub3QgZmluZCB0aGUgXCInLmNvbmNhdCh0LCdcIiBub2RlIGluIHRoZSBncmFwaC4nKSk7cmV0dXJuXCJ1bmRpcmVjdGVkXCI9PT10aGlzLnR5cGU/MDplLmluRGVncmVlfSxpLm91dERlZ3JlZVdpdGhvdXRTZWxmTG9vcHM9ZnVuY3Rpb24odCl7dD1cIlwiK3Q7dmFyIGU9dGhpcy5fbm9kZXMuZ2V0KHQpO2lmKCFlKXRocm93IG5ldyBZKCdHcmFwaC5vdXREZWdyZWVXaXRob3V0U2VsZkxvb3BzOiBjb3VsZCBub3QgZmluZCB0aGUgXCInLmNvbmNhdCh0LCdcIiBub2RlIGluIHRoZSBncmFwaC4nKSk7cmV0dXJuXCJ1bmRpcmVjdGVkXCI9PT10aGlzLnR5cGU/MDplLm91dERlZ3JlZX0saS5kaXJlY3RlZERlZ3JlZVdpdGhvdXRTZWxmTG9vcHM9ZnVuY3Rpb24odCl7dD1cIlwiK3Q7dmFyIGU9dGhpcy5fbm9kZXMuZ2V0KHQpO2lmKCFlKXRocm93IG5ldyBZKCdHcmFwaC5kaXJlY3RlZERlZ3JlZVdpdGhvdXRTZWxmTG9vcHM6IGNvdWxkIG5vdCBmaW5kIHRoZSBcIicuY29uY2F0KHQsJ1wiIG5vZGUgaW4gdGhlIGdyYXBoLicpKTtyZXR1cm5cInVuZGlyZWN0ZWRcIj09PXRoaXMudHlwZT8wOmUuaW5EZWdyZWUrZS5vdXREZWdyZWV9LGkudW5kaXJlY3RlZERlZ3JlZVdpdGhvdXRTZWxmTG9vcHM9ZnVuY3Rpb24odCl7dD1cIlwiK3Q7dmFyIGU9dGhpcy5fbm9kZXMuZ2V0KHQpO2lmKCFlKXRocm93IG5ldyBZKCdHcmFwaC51bmRpcmVjdGVkRGVncmVlV2l0aG91dFNlbGZMb29wczogY291bGQgbm90IGZpbmQgdGhlIFwiJy5jb25jYXQodCwnXCIgbm9kZSBpbiB0aGUgZ3JhcGguJykpO3JldHVyblwiZGlyZWN0ZWRcIj09PXRoaXMudHlwZT8wOmUudW5kaXJlY3RlZERlZ3JlZX0saS5kZWdyZWVXaXRob3V0U2VsZkxvb3BzPWZ1bmN0aW9uKHQpe3Q9XCJcIit0O3ZhciBlPXRoaXMuX25vZGVzLmdldCh0KTtpZighZSl0aHJvdyBuZXcgWSgnR3JhcGguZGVncmVlV2l0aG91dFNlbGZMb29wczogY291bGQgbm90IGZpbmQgdGhlIFwiJy5jb25jYXQodCwnXCIgbm9kZSBpbiB0aGUgZ3JhcGguJykpO3ZhciBuPTA7cmV0dXJuXCJkaXJlY3RlZFwiIT09dGhpcy50eXBlJiYobis9ZS51bmRpcmVjdGVkRGVncmVlKSxcInVuZGlyZWN0ZWRcIiE9PXRoaXMudHlwZSYmKG4rPWUuaW5EZWdyZWUrZS5vdXREZWdyZWUpLG59LGkuc291cmNlPWZ1bmN0aW9uKHQpe3Q9XCJcIit0O3ZhciBlPXRoaXMuX2VkZ2VzLmdldCh0KTtpZighZSl0aHJvdyBuZXcgWSgnR3JhcGguc291cmNlOiBjb3VsZCBub3QgZmluZCB0aGUgXCInLmNvbmNhdCh0LCdcIiBlZGdlIGluIHRoZSBncmFwaC4nKSk7cmV0dXJuIGUuc291cmNlLmtleX0saS50YXJnZXQ9ZnVuY3Rpb24odCl7dD1cIlwiK3Q7dmFyIGU9dGhpcy5fZWRnZXMuZ2V0KHQpO2lmKCFlKXRocm93IG5ldyBZKCdHcmFwaC50YXJnZXQ6IGNvdWxkIG5vdCBmaW5kIHRoZSBcIicuY29uY2F0KHQsJ1wiIGVkZ2UgaW4gdGhlIGdyYXBoLicpKTtyZXR1cm4gZS50YXJnZXQua2V5fSxpLmV4dHJlbWl0aWVzPWZ1bmN0aW9uKHQpe3Q9XCJcIit0O3ZhciBlPXRoaXMuX2VkZ2VzLmdldCh0KTtpZighZSl0aHJvdyBuZXcgWSgnR3JhcGguZXh0cmVtaXRpZXM6IGNvdWxkIG5vdCBmaW5kIHRoZSBcIicuY29uY2F0KHQsJ1wiIGVkZ2UgaW4gdGhlIGdyYXBoLicpKTtyZXR1cm5bZS5zb3VyY2Uua2V5LGUudGFyZ2V0LmtleV19LGkub3Bwb3NpdGU9ZnVuY3Rpb24odCxlKXt0PVwiXCIrdCxlPVwiXCIrZTt2YXIgbj10aGlzLl9lZGdlcy5nZXQoZSk7aWYoIW4pdGhyb3cgbmV3IFkoJ0dyYXBoLm9wcG9zaXRlOiBjb3VsZCBub3QgZmluZCB0aGUgXCInLmNvbmNhdChlLCdcIiBlZGdlIGluIHRoZSBncmFwaC4nKSk7dmFyIHI9bi5zb3VyY2Uua2V5LGk9bi50YXJnZXQua2V5O2lmKHQ9PT1yKXJldHVybiBpO2lmKHQ9PT1pKXJldHVybiByO3Rocm93IG5ldyBZKCdHcmFwaC5vcHBvc2l0ZTogdGhlIFwiJy5jb25jYXQodCwnXCIgbm9kZSBpcyBub3QgYXR0YWNoZWQgdG8gdGhlIFwiJykuY29uY2F0KGUsJ1wiIGVkZ2UgKCcpLmNvbmNhdChyLFwiLCBcIikuY29uY2F0KGksXCIpLlwiKSl9LGkuaGFzRXh0cmVtaXR5PWZ1bmN0aW9uKHQsZSl7dD1cIlwiK3QsZT1cIlwiK2U7dmFyIG49dGhpcy5fZWRnZXMuZ2V0KHQpO2lmKCFuKXRocm93IG5ldyBZKCdHcmFwaC5oYXNFeHRyZW1pdHk6IGNvdWxkIG5vdCBmaW5kIHRoZSBcIicuY29uY2F0KHQsJ1wiIGVkZ2UgaW4gdGhlIGdyYXBoLicpKTtyZXR1cm4gbi5zb3VyY2Uua2V5PT09ZXx8bi50YXJnZXQua2V5PT09ZX0saS5pc1VuZGlyZWN0ZWQ9ZnVuY3Rpb24odCl7dD1cIlwiK3Q7dmFyIGU9dGhpcy5fZWRnZXMuZ2V0KHQpO2lmKCFlKXRocm93IG5ldyBZKCdHcmFwaC5pc1VuZGlyZWN0ZWQ6IGNvdWxkIG5vdCBmaW5kIHRoZSBcIicuY29uY2F0KHQsJ1wiIGVkZ2UgaW4gdGhlIGdyYXBoLicpKTtyZXR1cm4gZS51bmRpcmVjdGVkfSxpLmlzRGlyZWN0ZWQ9ZnVuY3Rpb24odCl7dD1cIlwiK3Q7dmFyIGU9dGhpcy5fZWRnZXMuZ2V0KHQpO2lmKCFlKXRocm93IG5ldyBZKCdHcmFwaC5pc0RpcmVjdGVkOiBjb3VsZCBub3QgZmluZCB0aGUgXCInLmNvbmNhdCh0LCdcIiBlZGdlIGluIHRoZSBncmFwaC4nKSk7cmV0dXJuIWUudW5kaXJlY3RlZH0saS5pc1NlbGZMb29wPWZ1bmN0aW9uKHQpe3Q9XCJcIit0O3ZhciBlPXRoaXMuX2VkZ2VzLmdldCh0KTtpZighZSl0aHJvdyBuZXcgWSgnR3JhcGguaXNTZWxmTG9vcDogY291bGQgbm90IGZpbmQgdGhlIFwiJy5jb25jYXQodCwnXCIgZWRnZSBpbiB0aGUgZ3JhcGguJykpO3JldHVybiBlLnNvdXJjZT09PWUudGFyZ2V0fSxpLmFkZE5vZGU9ZnVuY3Rpb24odCxlKXt2YXIgbj1mdW5jdGlvbih0LGUsbil7aWYobiYmIWgobikpdGhyb3cgbmV3IEYoJ0dyYXBoLmFkZE5vZGU6IGludmFsaWQgYXR0cmlidXRlcy4gRXhwZWN0aW5nIGFuIG9iamVjdCBidXQgZ290IFwiJy5jb25jYXQobiwnXCInKSk7aWYoZT1cIlwiK2Usbj1ufHx7fSx0Ll9ub2Rlcy5oYXMoZSkpdGhyb3cgbmV3IEIoJ0dyYXBoLmFkZE5vZGU6IHRoZSBcIicuY29uY2F0KGUsJ1wiIG5vZGUgYWxyZWFkeSBleGlzdCBpbiB0aGUgZ3JhcGguJykpO3ZhciByPW5ldyB0Lk5vZGVEYXRhQ2xhc3MoZSxuKTtyZXR1cm4gdC5fbm9kZXMuc2V0KGUsciksdC5lbWl0KFwibm9kZUFkZGVkXCIse2tleTplLGF0dHJpYnV0ZXM6bn0pLHJ9KHRoaXMsdCxlKTtyZXR1cm4gbi5rZXl9LGkubWVyZ2VOb2RlPWZ1bmN0aW9uKHQsZSl7aWYoZSYmIWgoZSkpdGhyb3cgbmV3IEYoJ0dyYXBoLm1lcmdlTm9kZTogaW52YWxpZCBhdHRyaWJ1dGVzLiBFeHBlY3RpbmcgYW4gb2JqZWN0IGJ1dCBnb3QgXCInLmNvbmNhdChlLCdcIicpKTt0PVwiXCIrdCxlPWV8fHt9O3ZhciBuPXRoaXMuX25vZGVzLmdldCh0KTtyZXR1cm4gbj8oZSYmKGMobi5hdHRyaWJ1dGVzLGUpLHRoaXMuZW1pdChcIm5vZGVBdHRyaWJ1dGVzVXBkYXRlZFwiLHt0eXBlOlwibWVyZ2VcIixrZXk6dCxhdHRyaWJ1dGVzOm4uYXR0cmlidXRlcyxkYXRhOmV9KSksW3QsITFdKToobj1uZXcgdGhpcy5Ob2RlRGF0YUNsYXNzKHQsZSksdGhpcy5fbm9kZXMuc2V0KHQsbiksdGhpcy5lbWl0KFwibm9kZUFkZGVkXCIse2tleTp0LGF0dHJpYnV0ZXM6ZX0pLFt0LCEwXSl9LGkudXBkYXRlTm9kZT1mdW5jdGlvbih0LGUpe2lmKGUmJlwiZnVuY3Rpb25cIiE9dHlwZW9mIGUpdGhyb3cgbmV3IEYoJ0dyYXBoLnVwZGF0ZU5vZGU6IGludmFsaWQgdXBkYXRlciBmdW5jdGlvbi4gRXhwZWN0aW5nIGEgZnVuY3Rpb24gYnV0IGdvdCBcIicuY29uY2F0KGUsJ1wiJykpO3Q9XCJcIit0O3ZhciBuPXRoaXMuX25vZGVzLmdldCh0KTtpZihuKXtpZihlKXt2YXIgcj1uLmF0dHJpYnV0ZXM7bi5hdHRyaWJ1dGVzPWUociksdGhpcy5lbWl0KFwibm9kZUF0dHJpYnV0ZXNVcGRhdGVkXCIse3R5cGU6XCJyZXBsYWNlXCIsa2V5OnQsYXR0cmlidXRlczpuLmF0dHJpYnV0ZXN9KX1yZXR1cm5bdCwhMV19dmFyIGk9ZT9lKHt9KTp7fTtyZXR1cm4gbj1uZXcgdGhpcy5Ob2RlRGF0YUNsYXNzKHQsaSksdGhpcy5fbm9kZXMuc2V0KHQsbiksdGhpcy5lbWl0KFwibm9kZUFkZGVkXCIse2tleTp0LGF0dHJpYnV0ZXM6aX0pLFt0LCEwXX0saS5kcm9wTm9kZT1mdW5jdGlvbih0KXt2YXIgZT10aGlzO3Q9XCJcIit0O3ZhciBuPXRoaXMuX25vZGVzLmdldCh0KTtpZighbil0aHJvdyBuZXcgWSgnR3JhcGguZHJvcE5vZGU6IGNvdWxkIG5vdCBmaW5kIHRoZSBcIicuY29uY2F0KHQsJ1wiIG5vZGUgaW4gdGhlIGdyYXBoLicpKTt0aGlzLmZvckVhY2hFZGdlKHQsKGZ1bmN0aW9uKHQpe2UuZHJvcEVkZ2UodCl9KSksdGhpcy5fbm9kZXMuZGVsZXRlKHQpLHRoaXMuZW1pdChcIm5vZGVEcm9wcGVkXCIse2tleTp0LGF0dHJpYnV0ZXM6bi5hdHRyaWJ1dGVzfSl9LGkuZHJvcEVkZ2U9ZnVuY3Rpb24odCl7dmFyIGU7aWYoYXJndW1lbnRzLmxlbmd0aD4xKXt2YXIgbj1cIlwiK2FyZ3VtZW50c1swXSxyPVwiXCIrYXJndW1lbnRzWzFdO2lmKCEoZT1kKHRoaXMsbixyLHRoaXMudHlwZSkpKXRocm93IG5ldyBZKCdHcmFwaC5kcm9wRWRnZTogY291bGQgbm90IGZpbmQgdGhlIFwiJy5jb25jYXQobiwnXCIgLT4gXCInKS5jb25jYXQociwnXCIgZWRnZSBpbiB0aGUgZ3JhcGguJykpfWVsc2UgaWYodD1cIlwiK3QsIShlPXRoaXMuX2VkZ2VzLmdldCh0KSkpdGhyb3cgbmV3IFkoJ0dyYXBoLmRyb3BFZGdlOiBjb3VsZCBub3QgZmluZCB0aGUgXCInLmNvbmNhdCh0LCdcIiBlZGdlIGluIHRoZSBncmFwaC4nKSk7dGhpcy5fZWRnZXMuZGVsZXRlKGUua2V5KTt2YXIgaT1lLG89aS5zb3VyY2UsYT1pLnRhcmdldCx1PWkuYXR0cmlidXRlcyxjPWUudW5kaXJlY3RlZDtyZXR1cm4gbz09PWE/Yz8oby51bmRpcmVjdGVkU2VsZkxvb3BzLS0sdGhpcy5fdW5kaXJlY3RlZFNlbGZMb29wQ291bnQtLSk6KG8uZGlyZWN0ZWRTZWxmTG9vcHMtLSx0aGlzLl9kaXJlY3RlZFNlbGZMb29wQ291bnQtLSk6Yz8oby51bmRpcmVjdGVkRGVncmVlLS0sYS51bmRpcmVjdGVkRGVncmVlLS0pOihvLm91dERlZ3JlZS0tLGEuaW5EZWdyZWUtLSksWCh0aGlzLGMsZSksYz90aGlzLl91bmRpcmVjdGVkU2l6ZS0tOnRoaXMuX2RpcmVjdGVkU2l6ZS0tLHRoaXMuZW1pdChcImVkZ2VEcm9wcGVkXCIse2tleTp0LGF0dHJpYnV0ZXM6dSxzb3VyY2U6by5rZXksdGFyZ2V0OmEua2V5LHVuZGlyZWN0ZWQ6Y30pLHRoaXN9LGkuY2xlYXI9ZnVuY3Rpb24oKXt0aGlzLl9lZGdlcy5jbGVhcigpLHRoaXMuX25vZGVzLmNsZWFyKCksdGhpcy5fcmVzZXRJbnN0YW5jZUNvdW50ZXJzKCksdGhpcy5lbWl0KFwiY2xlYXJlZFwiKX0saS5jbGVhckVkZ2VzPWZ1bmN0aW9uKCl7IWZ1bmN0aW9uKHQpe2Zvcih2YXIgZSxuPXQuX25vZGVzLnZhbHVlcygpOyEwIT09KGU9bi5uZXh0KCkpLmRvbmU7KWUudmFsdWUuY2xlYXIoKX0odGhpcyksdGhpcy5fZWRnZXMuY2xlYXIoKSx0aGlzLl9yZXNldEluc3RhbmNlQ291bnRlcnMoKSx0aGlzLmVtaXQoXCJlZGdlc0NsZWFyZWRcIil9LGkuZ2V0QXR0cmlidXRlPWZ1bmN0aW9uKHQpe3JldHVybiB0aGlzLl9hdHRyaWJ1dGVzW3RdfSxpLmdldEF0dHJpYnV0ZXM9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fYXR0cmlidXRlc30saS5oYXNBdHRyaWJ1dGU9ZnVuY3Rpb24odCl7cmV0dXJuIHRoaXMuX2F0dHJpYnV0ZXMuaGFzT3duUHJvcGVydHkodCl9LGkuc2V0QXR0cmlidXRlPWZ1bmN0aW9uKHQsZSl7cmV0dXJuIHRoaXMuX2F0dHJpYnV0ZXNbdF09ZSx0aGlzLmVtaXQoXCJhdHRyaWJ1dGVzVXBkYXRlZFwiLHt0eXBlOlwic2V0XCIsYXR0cmlidXRlczp0aGlzLl9hdHRyaWJ1dGVzLG5hbWU6dH0pLHRoaXN9LGkudXBkYXRlQXR0cmlidXRlPWZ1bmN0aW9uKHQsZSl7aWYoXCJmdW5jdGlvblwiIT10eXBlb2YgZSl0aHJvdyBuZXcgRihcIkdyYXBoLnVwZGF0ZUF0dHJpYnV0ZTogdXBkYXRlciBzaG91bGQgYmUgYSBmdW5jdGlvbi5cIik7dmFyIG49dGhpcy5fYXR0cmlidXRlc1t0XTtyZXR1cm4gdGhpcy5fYXR0cmlidXRlc1t0XT1lKG4pLHRoaXMuZW1pdChcImF0dHJpYnV0ZXNVcGRhdGVkXCIse3R5cGU6XCJzZXRcIixhdHRyaWJ1dGVzOnRoaXMuX2F0dHJpYnV0ZXMsbmFtZTp0fSksdGhpc30saS5yZW1vdmVBdHRyaWJ1dGU9ZnVuY3Rpb24odCl7cmV0dXJuIGRlbGV0ZSB0aGlzLl9hdHRyaWJ1dGVzW3RdLHRoaXMuZW1pdChcImF0dHJpYnV0ZXNVcGRhdGVkXCIse3R5cGU6XCJyZW1vdmVcIixhdHRyaWJ1dGVzOnRoaXMuX2F0dHJpYnV0ZXMsbmFtZTp0fSksdGhpc30saS5yZXBsYWNlQXR0cmlidXRlcz1mdW5jdGlvbih0KXtpZighaCh0KSl0aHJvdyBuZXcgRihcIkdyYXBoLnJlcGxhY2VBdHRyaWJ1dGVzOiBwcm92aWRlZCBhdHRyaWJ1dGVzIGFyZSBub3QgYSBwbGFpbiBvYmplY3QuXCIpO3JldHVybiB0aGlzLl9hdHRyaWJ1dGVzPXQsdGhpcy5lbWl0KFwiYXR0cmlidXRlc1VwZGF0ZWRcIix7dHlwZTpcInJlcGxhY2VcIixhdHRyaWJ1dGVzOnRoaXMuX2F0dHJpYnV0ZXN9KSx0aGlzfSxpLm1lcmdlQXR0cmlidXRlcz1mdW5jdGlvbih0KXtpZighaCh0KSl0aHJvdyBuZXcgRihcIkdyYXBoLm1lcmdlQXR0cmlidXRlczogcHJvdmlkZWQgYXR0cmlidXRlcyBhcmUgbm90IGEgcGxhaW4gb2JqZWN0LlwiKTtyZXR1cm4gYyh0aGlzLl9hdHRyaWJ1dGVzLHQpLHRoaXMuZW1pdChcImF0dHJpYnV0ZXNVcGRhdGVkXCIse3R5cGU6XCJtZXJnZVwiLGF0dHJpYnV0ZXM6dGhpcy5fYXR0cmlidXRlcyxkYXRhOnR9KSx0aGlzfSxpLnVwZGF0ZUF0dHJpYnV0ZXM9ZnVuY3Rpb24odCl7aWYoXCJmdW5jdGlvblwiIT10eXBlb2YgdCl0aHJvdyBuZXcgRihcIkdyYXBoLnVwZGF0ZUF0dHJpYnV0ZXM6IHByb3ZpZGVkIHVwZGF0ZXIgaXMgbm90IGEgZnVuY3Rpb24uXCIpO3JldHVybiB0aGlzLl9hdHRyaWJ1dGVzPXQodGhpcy5fYXR0cmlidXRlcyksdGhpcy5lbWl0KFwiYXR0cmlidXRlc1VwZGF0ZWRcIix7dHlwZTpcInVwZGF0ZVwiLGF0dHJpYnV0ZXM6dGhpcy5fYXR0cmlidXRlc30pLHRoaXN9LGkudXBkYXRlRWFjaE5vZGVBdHRyaWJ1dGVzPWZ1bmN0aW9uKHQsZSl7aWYoXCJmdW5jdGlvblwiIT10eXBlb2YgdCl0aHJvdyBuZXcgRihcIkdyYXBoLnVwZGF0ZUVhY2hOb2RlQXR0cmlidXRlczogZXhwZWN0aW5nIGFuIHVwZGF0ZXIgZnVuY3Rpb24uXCIpO2lmKGUmJiFnKGUpKXRocm93IG5ldyBGKFwiR3JhcGgudXBkYXRlRWFjaE5vZGVBdHRyaWJ1dGVzOiBpbnZhbGlkIGhpbnRzLiBFeHBlY3RpbmcgYW4gb2JqZWN0IGhhdmluZyB0aGUgZm9sbG93aW5nIHNoYXBlOiB7YXR0cmlidXRlcz86IFtzdHJpbmddfVwiKTtmb3IodmFyIG4scixpPXRoaXMuX25vZGVzLnZhbHVlcygpOyEwIT09KG49aS5uZXh0KCkpLmRvbmU7KShyPW4udmFsdWUpLmF0dHJpYnV0ZXM9dChyLmtleSxyLmF0dHJpYnV0ZXMpO3RoaXMuZW1pdChcImVhY2hOb2RlQXR0cmlidXRlc1VwZGF0ZWRcIix7aGludHM6ZXx8bnVsbH0pfSxpLnVwZGF0ZUVhY2hFZGdlQXR0cmlidXRlcz1mdW5jdGlvbih0LGUpe2lmKFwiZnVuY3Rpb25cIiE9dHlwZW9mIHQpdGhyb3cgbmV3IEYoXCJHcmFwaC51cGRhdGVFYWNoRWRnZUF0dHJpYnV0ZXM6IGV4cGVjdGluZyBhbiB1cGRhdGVyIGZ1bmN0aW9uLlwiKTtpZihlJiYhZyhlKSl0aHJvdyBuZXcgRihcIkdyYXBoLnVwZGF0ZUVhY2hFZGdlQXR0cmlidXRlczogaW52YWxpZCBoaW50cy4gRXhwZWN0aW5nIGFuIG9iamVjdCBoYXZpbmcgdGhlIGZvbGxvd2luZyBzaGFwZToge2F0dHJpYnV0ZXM/OiBbc3RyaW5nXX1cIik7Zm9yKHZhciBuLHIsaSxvLGE9dGhpcy5fZWRnZXMudmFsdWVzKCk7ITAhPT0obj1hLm5leHQoKSkuZG9uZTspaT0ocj1uLnZhbHVlKS5zb3VyY2Usbz1yLnRhcmdldCxyLmF0dHJpYnV0ZXM9dChyLmtleSxyLmF0dHJpYnV0ZXMsaS5rZXksby5rZXksaS5hdHRyaWJ1dGVzLG8uYXR0cmlidXRlcyxyLnVuZGlyZWN0ZWQpO3RoaXMuZW1pdChcImVhY2hFZGdlQXR0cmlidXRlc1VwZGF0ZWRcIix7aGludHM6ZXx8bnVsbH0pfSxpLmZvckVhY2hBZGphY2VuY3lFbnRyeT1mdW5jdGlvbih0KXtpZihcImZ1bmN0aW9uXCIhPXR5cGVvZiB0KXRocm93IG5ldyBGKFwiR3JhcGguZm9yRWFjaEFkamFjZW5jeUVudHJ5OiBleHBlY3RpbmcgYSBjYWxsYmFjay5cIik7dGhpcy5tdWx0aT9ZdCghMSwhMSwhMSx0aGlzLHQpOkZ0KCExLCExLCExLHRoaXMsdCl9LGkuZm9yRWFjaEFkamFjZW5jeUVudHJ5V2l0aE9ycGhhbnM9ZnVuY3Rpb24odCl7aWYoXCJmdW5jdGlvblwiIT10eXBlb2YgdCl0aHJvdyBuZXcgRihcIkdyYXBoLmZvckVhY2hBZGphY2VuY3lFbnRyeVdpdGhPcnBoYW5zOiBleHBlY3RpbmcgYSBjYWxsYmFjay5cIik7dGhpcy5tdWx0aT9ZdCghMSwhMSwhMCx0aGlzLHQpOkZ0KCExLCExLCEwLHRoaXMsdCl9LGkuZm9yRWFjaEFzc3ltZXRyaWNBZGphY2VuY3lFbnRyeT1mdW5jdGlvbih0KXtpZihcImZ1bmN0aW9uXCIhPXR5cGVvZiB0KXRocm93IG5ldyBGKFwiR3JhcGguZm9yRWFjaEFzc3ltZXRyaWNBZGphY2VuY3lFbnRyeTogZXhwZWN0aW5nIGEgY2FsbGJhY2suXCIpO3RoaXMubXVsdGk/WXQoITEsITAsITEsdGhpcyx0KTpGdCghMSwhMCwhMSx0aGlzLHQpfSxpLmZvckVhY2hBc3N5bWV0cmljQWRqYWNlbmN5RW50cnlXaXRoT3JwaGFucz1mdW5jdGlvbih0KXtpZihcImZ1bmN0aW9uXCIhPXR5cGVvZiB0KXRocm93IG5ldyBGKFwiR3JhcGguZm9yRWFjaEFzc3ltZXRyaWNBZGphY2VuY3lFbnRyeVdpdGhPcnBoYW5zOiBleHBlY3RpbmcgYSBjYWxsYmFjay5cIik7dGhpcy5tdWx0aT9ZdCghMSwhMCwhMCx0aGlzLHQpOkZ0KCExLCEwLCEwLHRoaXMsdCl9LGkubm9kZXM9ZnVuY3Rpb24oKXtyZXR1cm5cImZ1bmN0aW9uXCI9PXR5cGVvZiBBcnJheS5mcm9tP0FycmF5LmZyb20odGhpcy5fbm9kZXMua2V5cygpKTpLKHRoaXMuX25vZGVzLmtleXMoKSx0aGlzLl9ub2Rlcy5zaXplKX0saS5mb3JFYWNoTm9kZT1mdW5jdGlvbih0KXtpZihcImZ1bmN0aW9uXCIhPXR5cGVvZiB0KXRocm93IG5ldyBGKFwiR3JhcGguZm9yRWFjaE5vZGU6IGV4cGVjdGluZyBhIGNhbGxiYWNrLlwiKTtmb3IodmFyIGUsbixyPXRoaXMuX25vZGVzLnZhbHVlcygpOyEwIT09KGU9ci5uZXh0KCkpLmRvbmU7KXQoKG49ZS52YWx1ZSkua2V5LG4uYXR0cmlidXRlcyl9LGkuZmluZE5vZGU9ZnVuY3Rpb24odCl7aWYoXCJmdW5jdGlvblwiIT10eXBlb2YgdCl0aHJvdyBuZXcgRihcIkdyYXBoLmZpbmROb2RlOiBleHBlY3RpbmcgYSBjYWxsYmFjay5cIik7Zm9yKHZhciBlLG4scj10aGlzLl9ub2Rlcy52YWx1ZXMoKTshMCE9PShlPXIubmV4dCgpKS5kb25lOylpZih0KChuPWUudmFsdWUpLmtleSxuLmF0dHJpYnV0ZXMpKXJldHVybiBuLmtleX0saS5tYXBOb2Rlcz1mdW5jdGlvbih0KXtpZihcImZ1bmN0aW9uXCIhPXR5cGVvZiB0KXRocm93IG5ldyBGKFwiR3JhcGgubWFwTm9kZTogZXhwZWN0aW5nIGEgY2FsbGJhY2suXCIpO2Zvcih2YXIgZSxuLHI9dGhpcy5fbm9kZXMudmFsdWVzKCksaT1uZXcgQXJyYXkodGhpcy5vcmRlciksbz0wOyEwIT09KGU9ci5uZXh0KCkpLmRvbmU7KW49ZS52YWx1ZSxpW28rK109dChuLmtleSxuLmF0dHJpYnV0ZXMpO3JldHVybiBpfSxpLnNvbWVOb2RlPWZ1bmN0aW9uKHQpe2lmKFwiZnVuY3Rpb25cIiE9dHlwZW9mIHQpdGhyb3cgbmV3IEYoXCJHcmFwaC5zb21lTm9kZTogZXhwZWN0aW5nIGEgY2FsbGJhY2suXCIpO2Zvcih2YXIgZSxuLHI9dGhpcy5fbm9kZXMudmFsdWVzKCk7ITAhPT0oZT1yLm5leHQoKSkuZG9uZTspaWYodCgobj1lLnZhbHVlKS5rZXksbi5hdHRyaWJ1dGVzKSlyZXR1cm4hMDtyZXR1cm4hMX0saS5ldmVyeU5vZGU9ZnVuY3Rpb24odCl7aWYoXCJmdW5jdGlvblwiIT10eXBlb2YgdCl0aHJvdyBuZXcgRihcIkdyYXBoLmV2ZXJ5Tm9kZTogZXhwZWN0aW5nIGEgY2FsbGJhY2suXCIpO2Zvcih2YXIgZSxuLHI9dGhpcy5fbm9kZXMudmFsdWVzKCk7ITAhPT0oZT1yLm5leHQoKSkuZG9uZTspaWYoIXQoKG49ZS52YWx1ZSkua2V5LG4uYXR0cmlidXRlcykpcmV0dXJuITE7cmV0dXJuITB9LGkuZmlsdGVyTm9kZXM9ZnVuY3Rpb24odCl7aWYoXCJmdW5jdGlvblwiIT10eXBlb2YgdCl0aHJvdyBuZXcgRihcIkdyYXBoLmZpbHRlck5vZGVzOiBleHBlY3RpbmcgYSBjYWxsYmFjay5cIik7Zm9yKHZhciBlLG4scj10aGlzLl9ub2Rlcy52YWx1ZXMoKSxpPVtdOyEwIT09KGU9ci5uZXh0KCkpLmRvbmU7KXQoKG49ZS52YWx1ZSkua2V5LG4uYXR0cmlidXRlcykmJmkucHVzaChuLmtleSk7cmV0dXJuIGl9LGkucmVkdWNlTm9kZXM9ZnVuY3Rpb24odCxlKXtpZihcImZ1bmN0aW9uXCIhPXR5cGVvZiB0KXRocm93IG5ldyBGKFwiR3JhcGgucmVkdWNlTm9kZXM6IGV4cGVjdGluZyBhIGNhbGxiYWNrLlwiKTtpZihhcmd1bWVudHMubGVuZ3RoPDIpdGhyb3cgbmV3IEYoXCJHcmFwaC5yZWR1Y2VOb2RlczogbWlzc2luZyBpbml0aWFsIHZhbHVlLiBZb3UgbXVzdCBwcm92aWRlIGl0IGJlY2F1c2UgdGhlIGNhbGxiYWNrIHRha2VzIG1vcmUgdGhhbiBvbmUgYXJndW1lbnQgYW5kIHdlIGNhbm5vdCBpbmZlciB0aGUgaW5pdGlhbCB2YWx1ZSBmcm9tIHRoZSBmaXJzdCBpdGVyYXRpb24sIGFzIHlvdSBjb3VsZCB3aXRoIGEgc2ltcGxlIGFycmF5LlwiKTtmb3IodmFyIG4scixpPWUsbz10aGlzLl9ub2Rlcy52YWx1ZXMoKTshMCE9PShuPW8ubmV4dCgpKS5kb25lOylpPXQoaSwocj1uLnZhbHVlKS5rZXksci5hdHRyaWJ1dGVzKTtyZXR1cm4gaX0saS5ub2RlRW50cmllcz1mdW5jdGlvbigpe3ZhciB0PXRoaXMuX25vZGVzLnZhbHVlcygpO3JldHVybiBuZXcgTygoZnVuY3Rpb24oKXt2YXIgZT10Lm5leHQoKTtpZihlLmRvbmUpcmV0dXJuIGU7dmFyIG49ZS52YWx1ZTtyZXR1cm57dmFsdWU6e25vZGU6bi5rZXksYXR0cmlidXRlczpuLmF0dHJpYnV0ZXN9LGRvbmU6ITF9fSkpfSxpLmV4cG9ydE5vZGU9ZnVuY3Rpb24odCl7dD1cIlwiK3Q7dmFyIGU9dGhpcy5fbm9kZXMuZ2V0KHQpO2lmKCFlKXRocm93IG5ldyBZKCdHcmFwaC5leHBvcnROb2RlOiBjb3VsZCBub3QgZmluZCB0aGUgXCInLmNvbmNhdCh0LCdcIiBub2RlIGluIHRoZSBncmFwaC4nKSk7cmV0dXJuIEJ0KHQsZSl9LGkuZXhwb3J0RWRnZT1mdW5jdGlvbih0KXt0PVwiXCIrdDt2YXIgZT10aGlzLl9lZGdlcy5nZXQodCk7aWYoIWUpdGhyb3cgbmV3IFkoJ0dyYXBoLmV4cG9ydEVkZ2U6IGNvdWxkIG5vdCBmaW5kIHRoZSBcIicuY29uY2F0KHQsJ1wiIGVkZ2UgaW4gdGhlIGdyYXBoLicpKTtyZXR1cm4gcXQodCxlKX0saS5leHBvcnQ9ZnVuY3Rpb24oKXt2YXIgdD1uZXcgQXJyYXkodGhpcy5fbm9kZXMuc2l6ZSksZT0wO3RoaXMuX25vZGVzLmZvckVhY2goKGZ1bmN0aW9uKG4scil7dFtlKytdPUJ0KHIsbil9KSk7dmFyIG49bmV3IEFycmF5KHRoaXMuX2VkZ2VzLnNpemUpO3JldHVybiBlPTAsdGhpcy5fZWRnZXMuZm9yRWFjaCgoZnVuY3Rpb24odCxyKXtuW2UrK109cXQocix0KX0pKSx7YXR0cmlidXRlczp0aGlzLmdldEF0dHJpYnV0ZXMoKSxub2Rlczp0LGVkZ2VzOm4sb3B0aW9uczp7dHlwZTp0aGlzLnR5cGUsbXVsdGk6dGhpcy5tdWx0aSxhbGxvd1NlbGZMb29wczp0aGlzLmFsbG93U2VsZkxvb3BzfX19LGkuaW1wb3J0Tm9kZT1mdW5jdGlvbih0KXt2YXIgZT1hcmd1bWVudHMubGVuZ3RoPjEmJnZvaWQgMCE9PWFyZ3VtZW50c1sxXSYmYXJndW1lbnRzWzFdLG49SnQodCk7aWYobil7aWYoXCJub3Qtb2JqZWN0XCI9PT1uKXRocm93IG5ldyBGKCdHcmFwaC5pbXBvcnROb2RlOiBpbnZhbGlkIHNlcmlhbGl6ZWQgbm9kZS4gQSBzZXJpYWxpemVkIG5vZGUgc2hvdWxkIGJlIGEgcGxhaW4gb2JqZWN0IHdpdGggYXQgbGVhc3QgYSBcImtleVwiIHByb3BlcnR5LicpO2lmKFwibm8ta2V5XCI9PT1uKXRocm93IG5ldyBGKFwiR3JhcGguaW1wb3J0Tm9kZTogbm8ga2V5IHByb3ZpZGVkLlwiKTtpZihcImludmFsaWQtYXR0cmlidXRlc1wiPT09bil0aHJvdyBuZXcgRihcIkdyYXBoLmltcG9ydE5vZGU6IGludmFsaWQgYXR0cmlidXRlcy4gQXR0cmlidXRlcyBzaG91bGQgYmUgYSBwbGFpbiBvYmplY3QsIG51bGwgb3Igb21pdHRlZC5cIil9dmFyIHI9dC5rZXksaT10LmF0dHJpYnV0ZXMsbz12b2lkIDA9PT1pP3t9Omk7cmV0dXJuIGU/dGhpcy5tZXJnZU5vZGUocixvKTp0aGlzLmFkZE5vZGUocixvKSx0aGlzfSxpLmltcG9ydEVkZ2U9ZnVuY3Rpb24odCl7dmFyIGU9YXJndW1lbnRzLmxlbmd0aD4xJiZ2b2lkIDAhPT1hcmd1bWVudHNbMV0mJmFyZ3VtZW50c1sxXSxuPVZ0KHQpO2lmKG4pe2lmKFwibm90LW9iamVjdFwiPT09bil0aHJvdyBuZXcgRignR3JhcGguaW1wb3J0RWRnZTogaW52YWxpZCBzZXJpYWxpemVkIGVkZ2UuIEEgc2VyaWFsaXplZCBlZGdlIHNob3VsZCBiZSBhIHBsYWluIG9iamVjdCB3aXRoIGF0IGxlYXN0IGEgXCJzb3VyY2VcIiAmIFwidGFyZ2V0XCIgcHJvcGVydHkuJyk7aWYoXCJuby1zb3VyY2VcIj09PW4pdGhyb3cgbmV3IEYoXCJHcmFwaC5pbXBvcnRFZGdlOiBtaXNzaW5nIHNvdWNlLlwiKTtpZihcIm5vLXRhcmdldFwiPT09bil0aHJvdyBuZXcgRihcIkdyYXBoLmltcG9ydEVkZ2U6IG1pc3NpbmcgdGFyZ2V0LlwiKTtpZihcImludmFsaWQtYXR0cmlidXRlc1wiPT09bil0aHJvdyBuZXcgRihcIkdyYXBoLmltcG9ydEVkZ2U6IGludmFsaWQgYXR0cmlidXRlcy4gQXR0cmlidXRlcyBzaG91bGQgYmUgYSBwbGFpbiBvYmplY3QsIG51bGwgb3Igb21pdHRlZC5cIik7aWYoXCJpbnZhbGlkLXVuZGlyZWN0ZWRcIj09PW4pdGhyb3cgbmV3IEYoXCJHcmFwaC5pbXBvcnRFZGdlOiBpbnZhbGlkIHVuZGlyZWN0ZWQuIFVuZGlyZWN0ZWQgc2hvdWxkIGJlIGJvb2xlYW4gb3Igb21pdHRlZC5cIil9dmFyIHI9dC5zb3VyY2UsaT10LnRhcmdldCxvPXQuYXR0cmlidXRlcyxhPXZvaWQgMD09PW8/e306byx1PXQudW5kaXJlY3RlZCxjPXZvaWQgMCE9PXUmJnU7cmV0dXJuXCJrZXlcImluIHQ/KGU/Yz90aGlzLm1lcmdlVW5kaXJlY3RlZEVkZ2VXaXRoS2V5OnRoaXMubWVyZ2VEaXJlY3RlZEVkZ2VXaXRoS2V5OmM/dGhpcy5hZGRVbmRpcmVjdGVkRWRnZVdpdGhLZXk6dGhpcy5hZGREaXJlY3RlZEVkZ2VXaXRoS2V5KS5jYWxsKHRoaXMsdC5rZXkscixpLGEpOihlP2M/dGhpcy5tZXJnZVVuZGlyZWN0ZWRFZGdlOnRoaXMubWVyZ2VEaXJlY3RlZEVkZ2U6Yz90aGlzLmFkZFVuZGlyZWN0ZWRFZGdlOnRoaXMuYWRkRGlyZWN0ZWRFZGdlKS5jYWxsKHRoaXMscixpLGEpLHRoaXN9LGkuaW1wb3J0PWZ1bmN0aW9uKHQpe3ZhciBlLG4scixpPWFyZ3VtZW50cy5sZW5ndGg+MSYmdm9pZCAwIT09YXJndW1lbnRzWzFdJiZhcmd1bWVudHNbMV07aWYocyh0KSlyZXR1cm4gdGhpcy5pbXBvcnQodC5leHBvcnQoKSxpKSx0aGlzO2lmKCFoKHQpKXRocm93IG5ldyBGKFwiR3JhcGguaW1wb3J0OiBpbnZhbGlkIGFyZ3VtZW50LiBFeHBlY3RpbmcgYSBzZXJpYWxpemVkIGdyYXBoIG9yLCBhbHRlcm5hdGl2ZWx5LCBhIEdyYXBoIGluc3RhbmNlLlwiKTtpZih0LmF0dHJpYnV0ZXMpe2lmKCFoKHQuYXR0cmlidXRlcykpdGhyb3cgbmV3IEYoXCJHcmFwaC5pbXBvcnQ6IGludmFsaWQgYXR0cmlidXRlcy4gRXhwZWN0aW5nIGEgcGxhaW4gb2JqZWN0LlwiKTtpP3RoaXMubWVyZ2VBdHRyaWJ1dGVzKHQuYXR0cmlidXRlcyk6dGhpcy5yZXBsYWNlQXR0cmlidXRlcyh0LmF0dHJpYnV0ZXMpfWlmKHQubm9kZXMpe2lmKHI9dC5ub2RlcywhQXJyYXkuaXNBcnJheShyKSl0aHJvdyBuZXcgRihcIkdyYXBoLmltcG9ydDogaW52YWxpZCBub2Rlcy4gRXhwZWN0aW5nIGFuIGFycmF5LlwiKTtmb3IoZT0wLG49ci5sZW5ndGg7ZTxuO2UrKyl0aGlzLmltcG9ydE5vZGUocltlXSxpKX1pZih0LmVkZ2VzKXtpZihyPXQuZWRnZXMsIUFycmF5LmlzQXJyYXkocikpdGhyb3cgbmV3IEYoXCJHcmFwaC5pbXBvcnQ6IGludmFsaWQgZWRnZXMuIEV4cGVjdGluZyBhbiBhcnJheS5cIik7Zm9yKGU9MCxuPXIubGVuZ3RoO2U8bjtlKyspdGhpcy5pbXBvcnRFZGdlKHJbZV0saSl9cmV0dXJuIHRoaXN9LGkubnVsbENvcHk9ZnVuY3Rpb24odCl7dmFyIGU9bmV3IHIoYyh7fSx0aGlzLl9vcHRpb25zLHQpKTtyZXR1cm4gZS5yZXBsYWNlQXR0cmlidXRlcyhjKHt9LHRoaXMuZ2V0QXR0cmlidXRlcygpKSksZX0saS5lbXB0eUNvcHk9ZnVuY3Rpb24odCl7dmFyIGU9dGhpcy5udWxsQ29weSh0KTtyZXR1cm4gdGhpcy5fbm9kZXMuZm9yRWFjaCgoZnVuY3Rpb24odCxuKXt2YXIgcj1jKHt9LHQuYXR0cmlidXRlcyk7dD1uZXcgZS5Ob2RlRGF0YUNsYXNzKG4sciksZS5fbm9kZXMuc2V0KG4sdCl9KSksZX0saS5jb3B5PWZ1bmN0aW9uKCl7Zm9yKHZhciB0LGUsbj10aGlzLmVtcHR5Q29weSgpLHI9dGhpcy5fZWRnZXMudmFsdWVzKCk7ITAhPT0odD1yLm5leHQoKSkuZG9uZTspZWUobixcImNvcHlcIiwhMSwoZT10LnZhbHVlKS51bmRpcmVjdGVkLGUua2V5LGUuc291cmNlLmtleSxlLnRhcmdldC5rZXksYyh7fSxlLmF0dHJpYnV0ZXMpKTtyZXR1cm4gbn0saS51cGdyYWRlVG9NaXhlZD1mdW5jdGlvbigpe3JldHVyblwibWl4ZWRcIj09PXRoaXMudHlwZXx8KHRoaXMuX25vZGVzLmZvckVhY2goKGZ1bmN0aW9uKHQpe3JldHVybiB0LnVwZ3JhZGVUb01peGVkKCl9KSksdGhpcy5fb3B0aW9ucy50eXBlPVwibWl4ZWRcIixsKHRoaXMsXCJ0eXBlXCIsdGhpcy5fb3B0aW9ucy50eXBlKSxwKHRoaXMsXCJOb2RlRGF0YUNsYXNzXCIscSkpLHRoaXN9LGkudXBncmFkZVRvTXVsdGk9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5tdWx0aXx8KHRoaXMuX29wdGlvbnMubXVsdGk9ITAsbCh0aGlzLFwibXVsdGlcIiwhMCksKHQ9dGhpcykuX25vZGVzLmZvckVhY2goKGZ1bmN0aW9uKGUsbil7aWYoZS5vdXQpZm9yKHZhciByIGluIGUub3V0KXt2YXIgaT1uZXcgU2V0O2kuYWRkKGUub3V0W3JdKSxlLm91dFtyXT1pLHQuX25vZGVzLmdldChyKS5pbltuXT1pfWlmKGUudW5kaXJlY3RlZClmb3IodmFyIG8gaW4gZS51bmRpcmVjdGVkKWlmKCEobz5uKSl7dmFyIGE9bmV3IFNldDthLmFkZChlLnVuZGlyZWN0ZWRbb10pLGUudW5kaXJlY3RlZFtvXT1hLHQuX25vZGVzLmdldChvKS51bmRpcmVjdGVkW25dPWF9fSkpKSx0aGlzO3ZhciB0fSxpLnRvSlNPTj1mdW5jdGlvbigpe3JldHVybiB0aGlzLmV4cG9ydCgpfSxpLnRvU3RyaW5nPWZ1bmN0aW9uKCl7cmV0dXJuXCJbb2JqZWN0IEdyYXBoXVwifSxpLmluc3BlY3Q9ZnVuY3Rpb24oKXt2YXIgZT10aGlzLG49e307dGhpcy5fbm9kZXMuZm9yRWFjaCgoZnVuY3Rpb24odCxlKXtuW2VdPXQuYXR0cmlidXRlc30pKTt2YXIgcj17fSxpPXt9O3RoaXMuX2VkZ2VzLmZvckVhY2goKGZ1bmN0aW9uKHQsbil7dmFyIG8sYT10LnVuZGlyZWN0ZWQ/XCItLVwiOlwiLT5cIix1PVwiXCIsYz10LnNvdXJjZS5rZXksZD10LnRhcmdldC5rZXk7dC51bmRpcmVjdGVkJiZjPmQmJihvPWMsYz1kLGQ9byk7dmFyIHM9XCIoXCIuY29uY2F0KGMsXCIpXCIpLmNvbmNhdChhLFwiKFwiKS5jb25jYXQoZCxcIilcIik7bi5zdGFydHNXaXRoKFwiZ2VpZF9cIik/ZS5tdWx0aSYmKHZvaWQgMD09PWlbc10/aVtzXT0wOmlbc10rKyx1Kz1cIlwiLmNvbmNhdChpW3NdLFwiLiBcIikpOnUrPVwiW1wiLmNvbmNhdChuLFwiXTogXCIpLHJbdSs9c109dC5hdHRyaWJ1dGVzfSkpO3ZhciBvPXt9O2Zvcih2YXIgYSBpbiB0aGlzKXRoaXMuaGFzT3duUHJvcGVydHkoYSkmJiFadC5oYXMoYSkmJlwiZnVuY3Rpb25cIiE9dHlwZW9mIHRoaXNbYV0mJlwic3ltYm9sXCIhPT10KGEpJiYob1thXT10aGlzW2FdKTtyZXR1cm4gby5hdHRyaWJ1dGVzPXRoaXMuX2F0dHJpYnV0ZXMsby5ub2Rlcz1uLG8uZWRnZXM9cixwKG8sXCJjb25zdHJ1Y3RvclwiLHRoaXMuY29uc3RydWN0b3IpLG99LHJ9KHYuZXhwb3J0cy5FdmVudEVtaXR0ZXIpO1widW5kZWZpbmVkXCIhPXR5cGVvZiBTeW1ib2wmJihyZS5wcm90b3R5cGVbU3ltYm9sLmZvcihcIm5vZGVqcy51dGlsLmluc3BlY3QuY3VzdG9tXCIpXT1yZS5wcm90b3R5cGUuaW5zcGVjdCksW3tuYW1lOmZ1bmN0aW9uKHQpe3JldHVyblwiXCIuY29uY2F0KHQsXCJFZGdlXCIpfSxnZW5lcmF0ZUtleTohMH0se25hbWU6ZnVuY3Rpb24odCl7cmV0dXJuXCJcIi5jb25jYXQodCxcIkRpcmVjdGVkRWRnZVwiKX0sZ2VuZXJhdGVLZXk6ITAsdHlwZTpcImRpcmVjdGVkXCJ9LHtuYW1lOmZ1bmN0aW9uKHQpe3JldHVyblwiXCIuY29uY2F0KHQsXCJVbmRpcmVjdGVkRWRnZVwiKX0sZ2VuZXJhdGVLZXk6ITAsdHlwZTpcInVuZGlyZWN0ZWRcIn0se25hbWU6ZnVuY3Rpb24odCl7cmV0dXJuXCJcIi5jb25jYXQodCxcIkVkZ2VXaXRoS2V5XCIpfX0se25hbWU6ZnVuY3Rpb24odCl7cmV0dXJuXCJcIi5jb25jYXQodCxcIkRpcmVjdGVkRWRnZVdpdGhLZXlcIil9LHR5cGU6XCJkaXJlY3RlZFwifSx7bmFtZTpmdW5jdGlvbih0KXtyZXR1cm5cIlwiLmNvbmNhdCh0LFwiVW5kaXJlY3RlZEVkZ2VXaXRoS2V5XCIpfSx0eXBlOlwidW5kaXJlY3RlZFwifV0uZm9yRWFjaCgoZnVuY3Rpb24odCl7W1wiYWRkXCIsXCJtZXJnZVwiLFwidXBkYXRlXCJdLmZvckVhY2goKGZ1bmN0aW9uKGUpe3ZhciBuPXQubmFtZShlKSxyPVwiYWRkXCI9PT1lP2VlOm5lO3QuZ2VuZXJhdGVLZXk/cmUucHJvdG90eXBlW25dPWZ1bmN0aW9uKGksbyxhKXtyZXR1cm4gcih0aGlzLG4sITAsXCJ1bmRpcmVjdGVkXCI9PT0odC50eXBlfHx0aGlzLnR5cGUpLG51bGwsaSxvLGEsXCJ1cGRhdGVcIj09PWUpfTpyZS5wcm90b3R5cGVbbl09ZnVuY3Rpb24oaSxvLGEsdSl7cmV0dXJuIHIodGhpcyxuLCExLFwidW5kaXJlY3RlZFwiPT09KHQudHlwZXx8dGhpcy50eXBlKSxpLG8sYSx1LFwidXBkYXRlXCI9PT1lKX19KSl9KSksZnVuY3Rpb24odCl7JC5mb3JFYWNoKChmdW5jdGlvbihlKXt2YXIgbj1lLm5hbWUscj1lLmF0dGFjaGVyO3IodCxuKFwiTm9kZVwiKSwwKSxyKHQsbihcIlNvdXJjZVwiKSwxKSxyKHQsbihcIlRhcmdldFwiKSwyKSxyKHQsbihcIk9wcG9zaXRlXCIpLDMpfSkpfShyZSksZnVuY3Rpb24odCl7dHQuZm9yRWFjaCgoZnVuY3Rpb24oZSl7dmFyIG49ZS5uYW1lLHI9ZS5hdHRhY2hlcjtyKHQsbihcIkVkZ2VcIiksXCJtaXhlZFwiKSxyKHQsbihcIkRpcmVjdGVkRWRnZVwiKSxcImRpcmVjdGVkXCIpLHIodCxuKFwiVW5kaXJlY3RlZEVkZ2VcIiksXCJ1bmRpcmVjdGVkXCIpfSkpfShyZSksZnVuY3Rpb24odCl7aXQuZm9yRWFjaCgoZnVuY3Rpb24oZSl7IWZ1bmN0aW9uKHQsZSl7dmFyIG49ZS5uYW1lLHI9ZS50eXBlLGk9ZS5kaXJlY3Rpb247dC5wcm90b3R5cGVbbl09ZnVuY3Rpb24odCxlKXtpZihcIm1peGVkXCIhPT1yJiZcIm1peGVkXCIhPT10aGlzLnR5cGUmJnIhPT10aGlzLnR5cGUpcmV0dXJuW107aWYoIWFyZ3VtZW50cy5sZW5ndGgpcmV0dXJuIHd0KHRoaXMscik7aWYoMT09PWFyZ3VtZW50cy5sZW5ndGgpe3Q9XCJcIit0O3ZhciBvPXRoaXMuX25vZGVzLmdldCh0KTtpZih2b2lkIDA9PT1vKXRocm93IG5ldyBZKFwiR3JhcGguXCIuY29uY2F0KG4sJzogY291bGQgbm90IGZpbmQgdGhlIFwiJykuY29uY2F0KHQsJ1wiIG5vZGUgaW4gdGhlIGdyYXBoLicpKTtyZXR1cm4gR3QodGhpcy5tdWx0aSxcIm1peGVkXCI9PT1yP3RoaXMudHlwZTpyLGksbyl9aWYoMj09PWFyZ3VtZW50cy5sZW5ndGgpe3Q9XCJcIit0LGU9XCJcIitlO3ZhciBhPXRoaXMuX25vZGVzLmdldCh0KTtpZighYSl0aHJvdyBuZXcgWShcIkdyYXBoLlwiLmNvbmNhdChuLCc6ICBjb3VsZCBub3QgZmluZCB0aGUgXCInKS5jb25jYXQodCwnXCIgc291cmNlIG5vZGUgaW4gdGhlIGdyYXBoLicpKTtpZighdGhpcy5fbm9kZXMuaGFzKGUpKXRocm93IG5ldyBZKFwiR3JhcGguXCIuY29uY2F0KG4sJzogIGNvdWxkIG5vdCBmaW5kIHRoZSBcIicpLmNvbmNhdChlLCdcIiB0YXJnZXQgbm9kZSBpbiB0aGUgZ3JhcGguJykpO3JldHVybiBBdChyLHRoaXMubXVsdGksaSxhLGUpfXRocm93IG5ldyBGKFwiR3JhcGguXCIuY29uY2F0KG4sXCI6IHRvbyBtYW55IGFyZ3VtZW50cyAoZXhwZWN0aW5nIDAsIDEgb3IgMiBhbmQgZ290IFwiKS5jb25jYXQoYXJndW1lbnRzLmxlbmd0aCxcIikuXCIpKX19KHQsZSksZnVuY3Rpb24odCxlKXt2YXIgbj1lLm5hbWUscj1lLnR5cGUsaT1lLmRpcmVjdGlvbixvPVwiZm9yRWFjaFwiK25bMF0udG9VcHBlckNhc2UoKStuLnNsaWNlKDEsLTEpO3QucHJvdG90eXBlW29dPWZ1bmN0aW9uKHQsZSxuKXtpZihcIm1peGVkXCI9PT1yfHxcIm1peGVkXCI9PT10aGlzLnR5cGV8fHI9PT10aGlzLnR5cGUpe2lmKDE9PT1hcmd1bWVudHMubGVuZ3RoKXJldHVybiBtdCh0aGlzLHIsbj10KTtpZigyPT09YXJndW1lbnRzLmxlbmd0aCl7dD1cIlwiK3Qsbj1lO3ZhciBhPXRoaXMuX25vZGVzLmdldCh0KTtpZih2b2lkIDA9PT1hKXRocm93IG5ldyBZKFwiR3JhcGguXCIuY29uY2F0KG8sJzogY291bGQgbm90IGZpbmQgdGhlIFwiJykuY29uY2F0KHQsJ1wiIG5vZGUgaW4gdGhlIGdyYXBoLicpKTtyZXR1cm4geHQodGhpcy5tdWx0aSxcIm1peGVkXCI9PT1yP3RoaXMudHlwZTpyLGksYSxuKX1pZigzPT09YXJndW1lbnRzLmxlbmd0aCl7dD1cIlwiK3QsZT1cIlwiK2U7dmFyIHU9dGhpcy5fbm9kZXMuZ2V0KHQpO2lmKCF1KXRocm93IG5ldyBZKFwiR3JhcGguXCIuY29uY2F0KG8sJzogIGNvdWxkIG5vdCBmaW5kIHRoZSBcIicpLmNvbmNhdCh0LCdcIiBzb3VyY2Ugbm9kZSBpbiB0aGUgZ3JhcGguJykpO2lmKCF0aGlzLl9ub2Rlcy5oYXMoZSkpdGhyb3cgbmV3IFkoXCJHcmFwaC5cIi5jb25jYXQobywnOiAgY291bGQgbm90IGZpbmQgdGhlIFwiJykuY29uY2F0KGUsJ1wiIHRhcmdldCBub2RlIGluIHRoZSBncmFwaC4nKSk7cmV0dXJuIEx0KHIsdGhpcy5tdWx0aSxpLHUsZSxuKX10aHJvdyBuZXcgRihcIkdyYXBoLlwiLmNvbmNhdChvLFwiOiB0b28gbWFueSBhcmd1bWVudHMgKGV4cGVjdGluZyAxLCAyIG9yIDMgYW5kIGdvdCBcIikuY29uY2F0KGFyZ3VtZW50cy5sZW5ndGgsXCIpLlwiKSl9fTt2YXIgYT1cIm1hcFwiK25bMF0udG9VcHBlckNhc2UoKStuLnNsaWNlKDEpO3QucHJvdG90eXBlW2FdPWZ1bmN0aW9uKCl7dmFyIHQsZT1BcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMpLG49ZS5wb3AoKTtpZigwPT09ZS5sZW5ndGgpe3ZhciBpPTA7XCJkaXJlY3RlZFwiIT09ciYmKGkrPXRoaXMudW5kaXJlY3RlZFNpemUpLFwidW5kaXJlY3RlZFwiIT09ciYmKGkrPXRoaXMuZGlyZWN0ZWRTaXplKSx0PW5ldyBBcnJheShpKTt2YXIgYT0wO2UucHVzaCgoZnVuY3Rpb24oZSxyLGksbyx1LGMsZCl7dFthKytdPW4oZSxyLGksbyx1LGMsZCl9KSl9ZWxzZSB0PVtdLGUucHVzaCgoZnVuY3Rpb24oZSxyLGksbyxhLHUsYyl7dC5wdXNoKG4oZSxyLGksbyxhLHUsYykpfSkpO3JldHVybiB0aGlzW29dLmFwcGx5KHRoaXMsZSksdH07dmFyIHU9XCJmaWx0ZXJcIituWzBdLnRvVXBwZXJDYXNlKCkrbi5zbGljZSgxKTt0LnByb3RvdHlwZVt1XT1mdW5jdGlvbigpe3ZhciB0PUFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cyksZT10LnBvcCgpLG49W107cmV0dXJuIHQucHVzaCgoZnVuY3Rpb24odCxyLGksbyxhLHUsYyl7ZSh0LHIsaSxvLGEsdSxjKSYmbi5wdXNoKHQpfSkpLHRoaXNbb10uYXBwbHkodGhpcyx0KSxufTt2YXIgYz1cInJlZHVjZVwiK25bMF0udG9VcHBlckNhc2UoKStuLnNsaWNlKDEpO3QucHJvdG90eXBlW2NdPWZ1bmN0aW9uKCl7dmFyIHQsZSxuPUFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cyk7aWYobi5sZW5ndGg8Mnx8bi5sZW5ndGg+NCl0aHJvdyBuZXcgRihcIkdyYXBoLlwiLmNvbmNhdChjLFwiOiBpbnZhbGlkIG51bWJlciBvZiBhcmd1bWVudHMgKGV4cGVjdGluZyAyLCAzIG9yIDQgYW5kIGdvdCBcIikuY29uY2F0KG4ubGVuZ3RoLFwiKS5cIikpO2lmKFwiZnVuY3Rpb25cIj09dHlwZW9mIG5bbi5sZW5ndGgtMV0mJlwiZnVuY3Rpb25cIiE9dHlwZW9mIG5bbi5sZW5ndGgtMl0pdGhyb3cgbmV3IEYoXCJHcmFwaC5cIi5jb25jYXQoYyxcIjogbWlzc2luZyBpbml0aWFsIHZhbHVlLiBZb3UgbXVzdCBwcm92aWRlIGl0IGJlY2F1c2UgdGhlIGNhbGxiYWNrIHRha2VzIG1vcmUgdGhhbiBvbmUgYXJndW1lbnQgYW5kIHdlIGNhbm5vdCBpbmZlciB0aGUgaW5pdGlhbCB2YWx1ZSBmcm9tIHRoZSBmaXJzdCBpdGVyYXRpb24sIGFzIHlvdSBjb3VsZCB3aXRoIGEgc2ltcGxlIGFycmF5LlwiKSk7Mj09PW4ubGVuZ3RoPyh0PW5bMF0sZT1uWzFdLG49W10pOjM9PT1uLmxlbmd0aD8odD1uWzFdLGU9blsyXSxuPVtuWzBdXSk6ND09PW4ubGVuZ3RoJiYodD1uWzJdLGU9blszXSxuPVtuWzBdLG5bMV1dKTt2YXIgcj1lO3JldHVybiBuLnB1c2goKGZ1bmN0aW9uKGUsbixpLG8sYSx1LGMpe3I9dChyLGUsbixpLG8sYSx1LGMpfSkpLHRoaXNbb10uYXBwbHkodGhpcyxuKSxyfX0odCxlKSxmdW5jdGlvbih0LGUpe3ZhciBuPWUubmFtZSxyPWUudHlwZSxpPWUuZGlyZWN0aW9uLG89XCJmaW5kXCIrblswXS50b1VwcGVyQ2FzZSgpK24uc2xpY2UoMSwtMSk7dC5wcm90b3R5cGVbb109ZnVuY3Rpb24odCxlLG4pe2lmKFwibWl4ZWRcIiE9PXImJlwibWl4ZWRcIiE9PXRoaXMudHlwZSYmciE9PXRoaXMudHlwZSlyZXR1cm4hMTtpZigxPT09YXJndW1lbnRzLmxlbmd0aClyZXR1cm4gX3QodGhpcyxyLG49dCk7aWYoMj09PWFyZ3VtZW50cy5sZW5ndGgpe3Q9XCJcIit0LG49ZTt2YXIgYT10aGlzLl9ub2Rlcy5nZXQodCk7aWYodm9pZCAwPT09YSl0aHJvdyBuZXcgWShcIkdyYXBoLlwiLmNvbmNhdChvLCc6IGNvdWxkIG5vdCBmaW5kIHRoZSBcIicpLmNvbmNhdCh0LCdcIiBub2RlIGluIHRoZSBncmFwaC4nKSk7cmV0dXJuIEV0KHRoaXMubXVsdGksXCJtaXhlZFwiPT09cj90aGlzLnR5cGU6cixpLGEsbil9aWYoMz09PWFyZ3VtZW50cy5sZW5ndGgpe3Q9XCJcIit0LGU9XCJcIitlO3ZhciB1PXRoaXMuX25vZGVzLmdldCh0KTtpZighdSl0aHJvdyBuZXcgWShcIkdyYXBoLlwiLmNvbmNhdChvLCc6ICBjb3VsZCBub3QgZmluZCB0aGUgXCInKS5jb25jYXQodCwnXCIgc291cmNlIG5vZGUgaW4gdGhlIGdyYXBoLicpKTtpZighdGhpcy5fbm9kZXMuaGFzKGUpKXRocm93IG5ldyBZKFwiR3JhcGguXCIuY29uY2F0KG8sJzogIGNvdWxkIG5vdCBmaW5kIHRoZSBcIicpLmNvbmNhdChlLCdcIiB0YXJnZXQgbm9kZSBpbiB0aGUgZ3JhcGguJykpO3JldHVybiBEdChyLHRoaXMubXVsdGksaSx1LGUsbil9dGhyb3cgbmV3IEYoXCJHcmFwaC5cIi5jb25jYXQobyxcIjogdG9vIG1hbnkgYXJndW1lbnRzIChleHBlY3RpbmcgMSwgMiBvciAzIGFuZCBnb3QgXCIpLmNvbmNhdChhcmd1bWVudHMubGVuZ3RoLFwiKS5cIikpfTt2YXIgYT1cInNvbWVcIituWzBdLnRvVXBwZXJDYXNlKCkrbi5zbGljZSgxLC0xKTt0LnByb3RvdHlwZVthXT1mdW5jdGlvbigpe3ZhciB0PUFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cyksZT10LnBvcCgpO3JldHVybiB0LnB1c2goKGZ1bmN0aW9uKHQsbixyLGksbyxhLHUpe3JldHVybiBlKHQsbixyLGksbyxhLHUpfSkpLCEhdGhpc1tvXS5hcHBseSh0aGlzLHQpfTt2YXIgdT1cImV2ZXJ5XCIrblswXS50b1VwcGVyQ2FzZSgpK24uc2xpY2UoMSwtMSk7dC5wcm90b3R5cGVbdV09ZnVuY3Rpb24oKXt2YXIgdD1BcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMpLGU9dC5wb3AoKTtyZXR1cm4gdC5wdXNoKChmdW5jdGlvbih0LG4scixpLG8sYSx1KXtyZXR1cm4hZSh0LG4scixpLG8sYSx1KX0pKSwhdGhpc1tvXS5hcHBseSh0aGlzLHQpfX0odCxlKSxmdW5jdGlvbih0LGUpe3ZhciBuPWUubmFtZSxyPWUudHlwZSxpPWUuZGlyZWN0aW9uLG89bi5zbGljZSgwLC0xKStcIkVudHJpZXNcIjt0LnByb3RvdHlwZVtvXT1mdW5jdGlvbih0LGUpe2lmKFwibWl4ZWRcIiE9PXImJlwibWl4ZWRcIiE9PXRoaXMudHlwZSYmciE9PXRoaXMudHlwZSlyZXR1cm4gTy5lbXB0eSgpO2lmKCFhcmd1bWVudHMubGVuZ3RoKXJldHVybiBrdCh0aGlzLHIpO2lmKDE9PT1hcmd1bWVudHMubGVuZ3RoKXt0PVwiXCIrdDt2YXIgbj10aGlzLl9ub2Rlcy5nZXQodCk7aWYoIW4pdGhyb3cgbmV3IFkoXCJHcmFwaC5cIi5jb25jYXQobywnOiBjb3VsZCBub3QgZmluZCB0aGUgXCInKS5jb25jYXQodCwnXCIgbm9kZSBpbiB0aGUgZ3JhcGguJykpO3JldHVybiBTdChyLGksbil9aWYoMj09PWFyZ3VtZW50cy5sZW5ndGgpe3Q9XCJcIit0LGU9XCJcIitlO3ZhciBhPXRoaXMuX25vZGVzLmdldCh0KTtpZighYSl0aHJvdyBuZXcgWShcIkdyYXBoLlwiLmNvbmNhdChvLCc6ICBjb3VsZCBub3QgZmluZCB0aGUgXCInKS5jb25jYXQodCwnXCIgc291cmNlIG5vZGUgaW4gdGhlIGdyYXBoLicpKTtpZighdGhpcy5fbm9kZXMuaGFzKGUpKXRocm93IG5ldyBZKFwiR3JhcGguXCIuY29uY2F0KG8sJzogIGNvdWxkIG5vdCBmaW5kIHRoZSBcIicpLmNvbmNhdChlLCdcIiB0YXJnZXQgbm9kZSBpbiB0aGUgZ3JhcGguJykpO3JldHVybiBOdChyLGksYSxlKX10aHJvdyBuZXcgRihcIkdyYXBoLlwiLmNvbmNhdChvLFwiOiB0b28gbWFueSBhcmd1bWVudHMgKGV4cGVjdGluZyAwLCAxIG9yIDIgYW5kIGdvdCBcIikuY29uY2F0KGFyZ3VtZW50cy5sZW5ndGgsXCIpLlwiKSl9fSh0LGUpfSkpfShyZSksZnVuY3Rpb24odCl7VXQuZm9yRWFjaCgoZnVuY3Rpb24oZSl7UnQodCxlKSxXdCh0LGUpLEt0KHQsZSksSXQodCxlKX0pKX0ocmUpO3ZhciBpZT1mdW5jdGlvbih0KXtmdW5jdGlvbiBuKGUpe3ZhciBuPWMoe3R5cGU6XCJkaXJlY3RlZFwifSxlKTtpZihcIm11bHRpXCJpbiBuJiYhMSE9PW4ubXVsdGkpdGhyb3cgbmV3IEYoXCJEaXJlY3RlZEdyYXBoLmZyb206IGluY29uc2lzdGVudCBpbmRpY2F0aW9uIHRoYXQgdGhlIGdyYXBoIHNob3VsZCBiZSBtdWx0aSBpbiBnaXZlbiBvcHRpb25zIVwiKTtpZihcImRpcmVjdGVkXCIhPT1uLnR5cGUpdGhyb3cgbmV3IEYoJ0RpcmVjdGVkR3JhcGguZnJvbTogaW5jb25zaXN0ZW50IFwiJytuLnR5cGUrJ1wiIHR5cGUgaW4gZ2l2ZW4gb3B0aW9ucyEnKTtyZXR1cm4gdC5jYWxsKHRoaXMsbil8fHRoaXN9cmV0dXJuIGUobix0KSxufShyZSksb2U9ZnVuY3Rpb24odCl7ZnVuY3Rpb24gbihlKXt2YXIgbj1jKHt0eXBlOlwidW5kaXJlY3RlZFwifSxlKTtpZihcIm11bHRpXCJpbiBuJiYhMSE9PW4ubXVsdGkpdGhyb3cgbmV3IEYoXCJVbmRpcmVjdGVkR3JhcGguZnJvbTogaW5jb25zaXN0ZW50IGluZGljYXRpb24gdGhhdCB0aGUgZ3JhcGggc2hvdWxkIGJlIG11bHRpIGluIGdpdmVuIG9wdGlvbnMhXCIpO2lmKFwidW5kaXJlY3RlZFwiIT09bi50eXBlKXRocm93IG5ldyBGKCdVbmRpcmVjdGVkR3JhcGguZnJvbTogaW5jb25zaXN0ZW50IFwiJytuLnR5cGUrJ1wiIHR5cGUgaW4gZ2l2ZW4gb3B0aW9ucyEnKTtyZXR1cm4gdC5jYWxsKHRoaXMsbil8fHRoaXN9cmV0dXJuIGUobix0KSxufShyZSksYWU9ZnVuY3Rpb24odCl7ZnVuY3Rpb24gbihlKXt2YXIgbj1jKHttdWx0aTohMH0sZSk7aWYoXCJtdWx0aVwiaW4gbiYmITAhPT1uLm11bHRpKXRocm93IG5ldyBGKFwiTXVsdGlHcmFwaC5mcm9tOiBpbmNvbnNpc3RlbnQgaW5kaWNhdGlvbiB0aGF0IHRoZSBncmFwaCBzaG91bGQgYmUgc2ltcGxlIGluIGdpdmVuIG9wdGlvbnMhXCIpO3JldHVybiB0LmNhbGwodGhpcyxuKXx8dGhpc31yZXR1cm4gZShuLHQpLG59KHJlKSx1ZT1mdW5jdGlvbih0KXtmdW5jdGlvbiBuKGUpe3ZhciBuPWMoe3R5cGU6XCJkaXJlY3RlZFwiLG11bHRpOiEwfSxlKTtpZihcIm11bHRpXCJpbiBuJiYhMCE9PW4ubXVsdGkpdGhyb3cgbmV3IEYoXCJNdWx0aURpcmVjdGVkR3JhcGguZnJvbTogaW5jb25zaXN0ZW50IGluZGljYXRpb24gdGhhdCB0aGUgZ3JhcGggc2hvdWxkIGJlIHNpbXBsZSBpbiBnaXZlbiBvcHRpb25zIVwiKTtpZihcImRpcmVjdGVkXCIhPT1uLnR5cGUpdGhyb3cgbmV3IEYoJ011bHRpRGlyZWN0ZWRHcmFwaC5mcm9tOiBpbmNvbnNpc3RlbnQgXCInK24udHlwZSsnXCIgdHlwZSBpbiBnaXZlbiBvcHRpb25zIScpO3JldHVybiB0LmNhbGwodGhpcyxuKXx8dGhpc31yZXR1cm4gZShuLHQpLG59KHJlKSxjZT1mdW5jdGlvbih0KXtmdW5jdGlvbiBuKGUpe3ZhciBuPWMoe3R5cGU6XCJ1bmRpcmVjdGVkXCIsbXVsdGk6ITB9LGUpO2lmKFwibXVsdGlcImluIG4mJiEwIT09bi5tdWx0aSl0aHJvdyBuZXcgRihcIk11bHRpVW5kaXJlY3RlZEdyYXBoLmZyb206IGluY29uc2lzdGVudCBpbmRpY2F0aW9uIHRoYXQgdGhlIGdyYXBoIHNob3VsZCBiZSBzaW1wbGUgaW4gZ2l2ZW4gb3B0aW9ucyFcIik7aWYoXCJ1bmRpcmVjdGVkXCIhPT1uLnR5cGUpdGhyb3cgbmV3IEYoJ011bHRpVW5kaXJlY3RlZEdyYXBoLmZyb206IGluY29uc2lzdGVudCBcIicrbi50eXBlKydcIiB0eXBlIGluIGdpdmVuIG9wdGlvbnMhJyk7cmV0dXJuIHQuY2FsbCh0aGlzLG4pfHx0aGlzfXJldHVybiBlKG4sdCksbn0ocmUpO2Z1bmN0aW9uIGRlKHQpe3QuZnJvbT1mdW5jdGlvbihlLG4pe3ZhciByPWMoe30sZS5vcHRpb25zLG4pLGk9bmV3IHQocik7cmV0dXJuIGkuaW1wb3J0KGUpLGl9fXJldHVybiBkZShyZSksZGUoaWUpLGRlKG9lKSxkZShhZSksZGUodWUpLGRlKGNlKSxyZS5HcmFwaD1yZSxyZS5EaXJlY3RlZEdyYXBoPWllLHJlLlVuZGlyZWN0ZWRHcmFwaD1vZSxyZS5NdWx0aUdyYXBoPWFlLHJlLk11bHRpRGlyZWN0ZWRHcmFwaD11ZSxyZS5NdWx0aVVuZGlyZWN0ZWRHcmFwaD1jZSxyZS5JbnZhbGlkQXJndW1lbnRzR3JhcGhFcnJvcj1GLHJlLk5vdEZvdW5kR3JhcGhFcnJvcj1ZLHJlLlVzYWdlR3JhcGhFcnJvcj1CLHJlfSkpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Z3JhcGhvbG9neS51bWQubWluLmpzLm1hcFxuIiwgIi8qKlxuICogR3JhcGhvbG9neSBEZWZhdWx0c1xuICogPT09PT09PT09PT09PT09PT09PT1cbiAqXG4gKiBIZWxwZXIgZnVuY3Rpb24gdXNlZCB0aHJvdWdob3V0IHRoZSBzdGFuZGFyZCBsaWIgdG8gcmVzb2x2ZSBkZWZhdWx0cy5cbiAqL1xuZnVuY3Rpb24gaXNMZWFmKG8pIHtcbiAgcmV0dXJuIChcbiAgICAhbyB8fFxuICAgIHR5cGVvZiBvICE9PSAnb2JqZWN0JyB8fFxuICAgIHR5cGVvZiBvID09PSAnZnVuY3Rpb24nIHx8XG4gICAgQXJyYXkuaXNBcnJheShvKSB8fFxuICAgIG8gaW5zdGFuY2VvZiBTZXQgfHxcbiAgICBvIGluc3RhbmNlb2YgTWFwIHx8XG4gICAgbyBpbnN0YW5jZW9mIFJlZ0V4cCB8fFxuICAgIG8gaW5zdGFuY2VvZiBEYXRlXG4gICk7XG59XG5cbmZ1bmN0aW9uIHJlc29sdmVEZWZhdWx0cyh0YXJnZXQsIGRlZmF1bHRzKSB7XG4gIHRhcmdldCA9IHRhcmdldCB8fCB7fTtcblxuICB2YXIgb3V0cHV0ID0ge307XG5cbiAgZm9yICh2YXIgayBpbiBkZWZhdWx0cykge1xuICAgIHZhciBleGlzdGluZyA9IHRhcmdldFtrXTtcbiAgICB2YXIgZGVmID0gZGVmYXVsdHNba107XG5cbiAgICAvLyBSZWN1cnNpb25cbiAgICBpZiAoIWlzTGVhZihkZWYpKSB7XG4gICAgICBvdXRwdXRba10gPSByZXNvbHZlRGVmYXVsdHMoZXhpc3RpbmcsIGRlZik7XG5cbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIC8vIExlYWZcbiAgICBpZiAoZXhpc3RpbmcgPT09IHVuZGVmaW5lZCkge1xuICAgICAgb3V0cHV0W2tdID0gZGVmO1xuICAgIH0gZWxzZSB7XG4gICAgICBvdXRwdXRba10gPSBleGlzdGluZztcbiAgICB9XG4gIH1cblxuICByZXR1cm4gb3V0cHV0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHJlc29sdmVEZWZhdWx0cztcbiIsICIvKipcbiAqIEdyYXBob2xvZ3kgaXNHcmFwaFxuICogPT09PT09PT09PT09PT09PT09PVxuICpcbiAqIFZlcnkgc2ltcGxlIGZ1bmN0aW9uIGFpbWluZyBhdCBlbnN1cmluZyB0aGUgZ2l2ZW4gdmFyaWFibGUgaXMgYVxuICogZ3JhcGhvbG9neSBpbnN0YW5jZS5cbiAqL1xuXG4vKipcbiAqIENoZWNraW5nIHRoZSB2YWx1ZSBpcyBhIGdyYXBob2xvZ3kgaW5zdGFuY2UuXG4gKlxuICogQHBhcmFtICB7YW55fSAgICAgdmFsdWUgLSBUYXJnZXQgdmFsdWUuXG4gKiBAcmV0dXJuIHtib29sZWFufVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGlzR3JhcGgodmFsdWUpIHtcbiAgcmV0dXJuIChcbiAgICB2YWx1ZSAhPT0gbnVsbCAmJlxuICAgIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiZcbiAgICB0eXBlb2YgdmFsdWUuYWRkVW5kaXJlY3RlZEVkZ2VXaXRoS2V5ID09PSAnZnVuY3Rpb24nICYmXG4gICAgdHlwZW9mIHZhbHVlLmRyb3BOb2RlID09PSAnZnVuY3Rpb24nICYmXG4gICAgdHlwZW9mIHZhbHVlLm11bHRpID09PSAnYm9vbGVhbidcbiAgKTtcbn07XG4iLCAiLyoqXG4gKiBHcmFwaG9sb2d5IGluZmVyVHlwZVxuICogPT09PT09PT09PT09PT09PT09PT09XG4gKlxuICogVXNlZnVsIGZ1bmN0aW9uIHVzZWQgdG8gXCJndWVzc1wiIHRoZSByZWFsIHR5cGUgb2YgdGhlIGdpdmVuIEdyYXBoIHVzaW5nXG4gKiBpbnRyb3NwZWN0aW9uLlxuICovXG52YXIgaXNHcmFwaCA9IHJlcXVpcmUoJy4vaXMtZ3JhcGguanMnKTtcblxuLyoqXG4gKiBSZXR1cm5pbmcgdGhlIGluZmVycmVkIHR5cGUgb2YgdGhlIGdpdmVuIGdyYXBoLlxuICpcbiAqIEBwYXJhbSAge0dyYXBofSAgIGdyYXBoIC0gVGFyZ2V0IGdyYXBoLlxuICogQHJldHVybiB7Ym9vbGVhbn1cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpbmZlclR5cGUoZ3JhcGgpIHtcbiAgaWYgKCFpc0dyYXBoKGdyYXBoKSlcbiAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAnZ3JhcGhvbG9neS11dGlscy9pbmZlci10eXBlOiBleHBlY3RpbmcgYSB2YWxpZCBncmFwaG9sb2d5IGluc3RhbmNlLidcbiAgICApO1xuXG4gIHZhciBkZWNsYXJlZFR5cGUgPSBncmFwaC50eXBlO1xuXG4gIGlmIChkZWNsYXJlZFR5cGUgIT09ICdtaXhlZCcpIHJldHVybiBkZWNsYXJlZFR5cGU7XG5cbiAgaWYgKFxuICAgIChncmFwaC5kaXJlY3RlZFNpemUgPT09IDAgJiYgZ3JhcGgudW5kaXJlY3RlZFNpemUgPT09IDApIHx8XG4gICAgKGdyYXBoLmRpcmVjdGVkU2l6ZSA+IDAgJiYgZ3JhcGgudW5kaXJlY3RlZFNpemUgPiAwKVxuICApXG4gICAgcmV0dXJuICdtaXhlZCc7XG5cbiAgaWYgKGdyYXBoLmRpcmVjdGVkU2l6ZSA+IDApIHJldHVybiAnZGlyZWN0ZWQnO1xuXG4gIHJldHVybiAndW5kaXJlY3RlZCc7XG59O1xuIiwgIi8qKlxuICogT2JsaXRlcmF0b3IgSXRlcmF0b3IgQ2xhc3NcbiAqID09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICpcbiAqIFNpbXBsZSBjbGFzcyByZXByZXNlbnRpbmcgdGhlIGxpYnJhcnkncyBpdGVyYXRvcnMuXG4gKi9cblxuLyoqXG4gKiBJdGVyYXRvciBjbGFzcy5cbiAqXG4gKiBAY29uc3RydWN0b3JcbiAqIEBwYXJhbSB7ZnVuY3Rpb259IG5leHQgLSBOZXh0IGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBJdGVyYXRvcihuZXh0KSB7XG4gIGlmICh0eXBlb2YgbmV4dCAhPT0gJ2Z1bmN0aW9uJylcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ29ibGl0ZXJhdG9yL2l0ZXJhdG9yOiBleHBlY3RpbmcgYSBmdW5jdGlvbiEnKTtcblxuICB0aGlzLm5leHQgPSBuZXh0O1xufVxuXG4vKipcbiAqIElmIHN5bWJvbHMgYXJlIHN1cHBvcnRlZCwgd2UgYWRkIGBuZXh0YCB0byBgU3ltYm9sLml0ZXJhdG9yYC5cbiAqL1xuaWYgKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnKVxuICBJdGVyYXRvci5wcm90b3R5cGVbU3ltYm9sLml0ZXJhdG9yXSA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuLyoqXG4gKiBSZXR1cm5pbmcgYW4gaXRlcmF0b3Igb2YgdGhlIGdpdmVuIHZhbHVlcy5cbiAqXG4gKiBAcGFyYW0gIHthbnkuLi59IHZhbHVlcyAtIFZhbHVlcy5cbiAqIEByZXR1cm4ge0l0ZXJhdG9yfVxuICovXG5JdGVyYXRvci5vZiA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIGFyZ3MgPSBhcmd1bWVudHMsXG4gICAgbCA9IGFyZ3MubGVuZ3RoLFxuICAgIGkgPSAwO1xuXG4gIHJldHVybiBuZXcgSXRlcmF0b3IoZnVuY3Rpb24gKCkge1xuICAgIGlmIChpID49IGwpIHJldHVybiB7ZG9uZTogdHJ1ZX07XG5cbiAgICByZXR1cm4ge2RvbmU6IGZhbHNlLCB2YWx1ZTogYXJnc1tpKytdfTtcbiAgfSk7XG59O1xuXG4vKipcbiAqIFJldHVybmluZyBhbiBlbXB0eSBpdGVyYXRvci5cbiAqXG4gKiBAcmV0dXJuIHtJdGVyYXRvcn1cbiAqL1xuSXRlcmF0b3IuZW1wdHkgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBpdGVyYXRvciA9IG5ldyBJdGVyYXRvcihmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHtkb25lOiB0cnVlfTtcbiAgfSk7XG5cbiAgcmV0dXJuIGl0ZXJhdG9yO1xufTtcblxuLyoqXG4gKiBSZXR1cm5pbmcgYW4gaXRlcmF0b3Igb3ZlciB0aGUgZ2l2ZW4gaW5kZXhlZCBzZXF1ZW5jZS5cbiAqXG4gKiBAcGFyYW0gIHtzdHJpbmd8QXJyYXl9IHNlcXVlbmNlIC0gVGFyZ2V0IHNlcXVlbmNlLlxuICogQHJldHVybiB7SXRlcmF0b3J9XG4gKi9cbkl0ZXJhdG9yLmZyb21TZXF1ZW5jZSA9IGZ1bmN0aW9uIChzZXF1ZW5jZSkge1xuICB2YXIgaSA9IDAsXG4gICAgbCA9IHNlcXVlbmNlLmxlbmd0aDtcblxuICByZXR1cm4gbmV3IEl0ZXJhdG9yKGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoaSA+PSBsKSByZXR1cm4ge2RvbmU6IHRydWV9O1xuXG4gICAgcmV0dXJuIHtkb25lOiBmYWxzZSwgdmFsdWU6IHNlcXVlbmNlW2krK119O1xuICB9KTtcbn07XG5cbi8qKlxuICogUmV0dXJuaW5nIHdoZXRoZXIgdGhlIGdpdmVuIHZhbHVlIGlzIGFuIGl0ZXJhdG9yLlxuICpcbiAqIEBwYXJhbSAge2FueX0gdmFsdWUgLSBWYWx1ZS5cbiAqIEByZXR1cm4ge2Jvb2xlYW59XG4gKi9cbkl0ZXJhdG9yLmlzID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gIGlmICh2YWx1ZSBpbnN0YW5jZW9mIEl0ZXJhdG9yKSByZXR1cm4gdHJ1ZTtcblxuICByZXR1cm4gKFxuICAgIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiZcbiAgICB2YWx1ZSAhPT0gbnVsbCAmJlxuICAgIHR5cGVvZiB2YWx1ZS5uZXh0ID09PSAnZnVuY3Rpb24nXG4gICk7XG59O1xuXG4vKipcbiAqIEV4cG9ydGluZy5cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBJdGVyYXRvcjtcbiIsICIvKipcbiAqIE1uZW1vbmlzdCBUeXBlZCBBcnJheSBIZWxwZXJzXG4gKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqXG4gKiBNaXNjZWxsYW5lb3VzIGhlbHBlcnMgcmVsYXRlZCB0byB0eXBlZCBhcnJheXMuXG4gKi9cblxuLyoqXG4gKiBXaGVuIHVzaW5nIGFuIHVuc2lnbmVkIGludGVnZXIgYXJyYXkgdG8gc3RvcmUgcG9pbnRlcnMsIG9uZSBtaWdodCB3YW50IHRvXG4gKiBjaG9vc2UgdGhlIG9wdGltYWwgd29yZCBzaXplIGluIHJlZ2FyZHMgdG8gdGhlIGFjdHVhbCBudW1iZXJzIG9mIHBvaW50ZXJzXG4gKiB0byBzdG9yZS5cbiAqXG4gKiBUaGlzIGhlbHBlcnMgZG9lcyBqdXN0IHRoYXQuXG4gKlxuICogQHBhcmFtICB7bnVtYmVyfSBzaXplIC0gRXhwZWN0ZWQgc2l6ZSBvZiB0aGUgYXJyYXkgdG8gbWFwLlxuICogQHJldHVybiB7VHlwZWRBcnJheX1cbiAqL1xudmFyIE1BWF84QklUX0lOVEVHRVIgPSBNYXRoLnBvdygyLCA4KSAtIDEsXG4gICAgTUFYXzE2QklUX0lOVEVHRVIgPSBNYXRoLnBvdygyLCAxNikgLSAxLFxuICAgIE1BWF8zMkJJVF9JTlRFR0VSID0gTWF0aC5wb3coMiwgMzIpIC0gMTtcblxudmFyIE1BWF9TSUdORURfOEJJVF9JTlRFR0VSID0gTWF0aC5wb3coMiwgNykgLSAxLFxuICAgIE1BWF9TSUdORURfMTZCSVRfSU5URUdFUiA9IE1hdGgucG93KDIsIDE1KSAtIDEsXG4gICAgTUFYX1NJR05FRF8zMkJJVF9JTlRFR0VSID0gTWF0aC5wb3coMiwgMzEpIC0gMTtcblxuZXhwb3J0cy5nZXRQb2ludGVyQXJyYXkgPSBmdW5jdGlvbihzaXplKSB7XG4gIHZhciBtYXhJbmRleCA9IHNpemUgLSAxO1xuXG4gIGlmIChtYXhJbmRleCA8PSBNQVhfOEJJVF9JTlRFR0VSKVxuICAgIHJldHVybiBVaW50OEFycmF5O1xuXG4gIGlmIChtYXhJbmRleCA8PSBNQVhfMTZCSVRfSU5URUdFUilcbiAgICByZXR1cm4gVWludDE2QXJyYXk7XG5cbiAgaWYgKG1heEluZGV4IDw9IE1BWF8zMkJJVF9JTlRFR0VSKVxuICAgIHJldHVybiBVaW50MzJBcnJheTtcblxuICB0aHJvdyBuZXcgRXJyb3IoJ21uZW1vbmlzdDogUG9pbnRlciBBcnJheSBvZiBzaXplID4gNDI5NDk2NzI5NSBpcyBub3Qgc3VwcG9ydGVkLicpO1xufTtcblxuZXhwb3J0cy5nZXRTaWduZWRQb2ludGVyQXJyYXkgPSBmdW5jdGlvbihzaXplKSB7XG4gIHZhciBtYXhJbmRleCA9IHNpemUgLSAxO1xuXG4gIGlmIChtYXhJbmRleCA8PSBNQVhfU0lHTkVEXzhCSVRfSU5URUdFUilcbiAgICByZXR1cm4gSW50OEFycmF5O1xuXG4gIGlmIChtYXhJbmRleCA8PSBNQVhfU0lHTkVEXzE2QklUX0lOVEVHRVIpXG4gICAgcmV0dXJuIEludDE2QXJyYXk7XG5cbiAgaWYgKG1heEluZGV4IDw9IE1BWF9TSUdORURfMzJCSVRfSU5URUdFUilcbiAgICByZXR1cm4gSW50MzJBcnJheTtcblxuICByZXR1cm4gRmxvYXQ2NEFycmF5O1xufTtcblxuLyoqXG4gKiBGdW5jdGlvbiByZXR1cm5pbmcgdGhlIG1pbmltYWwgdHlwZSBhYmxlIHRvIHJlcHJlc2VudCB0aGUgZ2l2ZW4gbnVtYmVyLlxuICpcbiAqIEBwYXJhbSAge251bWJlcn0gdmFsdWUgLSBWYWx1ZSB0byB0ZXN0LlxuICogQHJldHVybiB7VHlwZWRBcnJheUNsYXNzfVxuICovXG5leHBvcnRzLmdldE51bWJlclR5cGUgPSBmdW5jdGlvbih2YWx1ZSkge1xuXG4gIC8vIDw9IDMyIGJpdHMgaXRudGVnZXI/XG4gIGlmICh2YWx1ZSA9PT0gKHZhbHVlIHwgMCkpIHtcblxuICAgIC8vIE5lZ2F0aXZlXG4gICAgaWYgKE1hdGguc2lnbih2YWx1ZSkgPT09IC0xKSB7XG4gICAgICBpZiAodmFsdWUgPD0gMTI3ICYmIHZhbHVlID49IC0xMjgpXG4gICAgICAgIHJldHVybiBJbnQ4QXJyYXk7XG5cbiAgICAgIGlmICh2YWx1ZSA8PSAzMjc2NyAmJiB2YWx1ZSA+PSAtMzI3NjgpXG4gICAgICAgIHJldHVybiBJbnQxNkFycmF5O1xuXG4gICAgICByZXR1cm4gSW50MzJBcnJheTtcbiAgICB9XG4gICAgZWxzZSB7XG5cbiAgICAgIGlmICh2YWx1ZSA8PSAyNTUpXG4gICAgICAgIHJldHVybiBVaW50OEFycmF5O1xuXG4gICAgICBpZiAodmFsdWUgPD0gNjU1MzUpXG4gICAgICAgIHJldHVybiBVaW50MTZBcnJheTtcblxuICAgICAgcmV0dXJuIFVpbnQzMkFycmF5O1xuICAgIH1cbiAgfVxuXG4gIC8vIDUzIGJpdHMgaW50ZWdlciAmIGZsb2F0c1xuICAvLyBOT1RFOiBpdCdzIGtpbmRhIGhhcmQgdG8gdGVsbCB3aGV0aGVyIHdlIGNvdWxkIHVzZSAzMmJpdHMgb3Igbm90Li4uXG4gIHJldHVybiBGbG9hdDY0QXJyYXk7XG59O1xuXG4vKipcbiAqIEZ1bmN0aW9uIHJldHVybmluZyB0aGUgbWluaW1hbCB0eXBlIGFibGUgdG8gcmVwcmVzZW50IHRoZSBnaXZlbiBhcnJheVxuICogb2YgSmF2YVNjcmlwdCBudW1iZXJzLlxuICpcbiAqIEBwYXJhbSAge2FycmF5fSAgICBhcnJheSAgLSBBcnJheSB0byByZXByZXNlbnQuXG4gKiBAcGFyYW0gIHtmdW5jdGlvbn0gZ2V0dGVyIC0gT3B0aW9uYWwgZ2V0dGVyLlxuICogQHJldHVybiB7VHlwZWRBcnJheUNsYXNzfVxuICovXG52YXIgVFlQRV9QUklPUklUWSA9IHtcbiAgVWludDhBcnJheTogMSxcbiAgSW50OEFycmF5OiAyLFxuICBVaW50MTZBcnJheTogMyxcbiAgSW50MTZBcnJheTogNCxcbiAgVWludDMyQXJyYXk6IDUsXG4gIEludDMyQXJyYXk6IDYsXG4gIEZsb2F0MzJBcnJheTogNyxcbiAgRmxvYXQ2NEFycmF5OiA4XG59O1xuXG4vLyBUT0RPOiBtYWtlIHRoaXMgYSBvbmUtc2hvdCBmb3Igb25lIHZhbHVlXG5leHBvcnRzLmdldE1pbmltYWxSZXByZXNlbnRhdGlvbiA9IGZ1bmN0aW9uKGFycmF5LCBnZXR0ZXIpIHtcbiAgdmFyIG1heFR5cGUgPSBudWxsLFxuICAgICAgbWF4UHJpb3JpdHkgPSAwLFxuICAgICAgcCxcbiAgICAgIHQsXG4gICAgICB2LFxuICAgICAgaSxcbiAgICAgIGw7XG5cbiAgZm9yIChpID0gMCwgbCA9IGFycmF5Lmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgIHYgPSBnZXR0ZXIgPyBnZXR0ZXIoYXJyYXlbaV0pIDogYXJyYXlbaV07XG4gICAgdCA9IGV4cG9ydHMuZ2V0TnVtYmVyVHlwZSh2KTtcbiAgICBwID0gVFlQRV9QUklPUklUWVt0Lm5hbWVdO1xuXG4gICAgaWYgKHAgPiBtYXhQcmlvcml0eSkge1xuICAgICAgbWF4UHJpb3JpdHkgPSBwO1xuICAgICAgbWF4VHlwZSA9IHQ7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG1heFR5cGU7XG59O1xuXG4vKipcbiAqIEZ1bmN0aW9uIHJldHVybmluZyB3aGV0aGVyIHRoZSBnaXZlbiB2YWx1ZSBpcyBhIHR5cGVkIGFycmF5LlxuICpcbiAqIEBwYXJhbSAge2FueX0gdmFsdWUgLSBWYWx1ZSB0byB0ZXN0LlxuICogQHJldHVybiB7Ym9vbGVhbn1cbiAqL1xuZXhwb3J0cy5pc1R5cGVkQXJyYXkgPSBmdW5jdGlvbih2YWx1ZSkge1xuICByZXR1cm4gdHlwZW9mIEFycmF5QnVmZmVyICE9PSAndW5kZWZpbmVkJyAmJiBBcnJheUJ1ZmZlci5pc1ZpZXcodmFsdWUpO1xufTtcblxuLyoqXG4gKiBGdW5jdGlvbiB1c2VkIHRvIGNvbmNhdCBieXRlIGFycmF5cy5cbiAqXG4gKiBAcGFyYW0gIHsuLi5CeXRlQXJyYXl9XG4gKiBAcmV0dXJuIHtCeXRlQXJyYXl9XG4gKi9cbmV4cG9ydHMuY29uY2F0ID0gZnVuY3Rpb24oKSB7XG4gIHZhciBsZW5ndGggPSAwLFxuICAgICAgaSxcbiAgICAgIG8sXG4gICAgICBsO1xuXG4gIGZvciAoaSA9IDAsIGwgPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgbDsgaSsrKVxuICAgIGxlbmd0aCArPSBhcmd1bWVudHNbaV0ubGVuZ3RoO1xuXG4gIHZhciBhcnJheSA9IG5ldyAoYXJndW1lbnRzWzBdLmNvbnN0cnVjdG9yKShsZW5ndGgpO1xuXG4gIGZvciAoaSA9IDAsIG8gPSAwOyBpIDwgbDsgaSsrKSB7XG4gICAgYXJyYXkuc2V0KGFyZ3VtZW50c1tpXSwgbyk7XG4gICAgbyArPSBhcmd1bWVudHNbaV0ubGVuZ3RoO1xuICB9XG5cbiAgcmV0dXJuIGFycmF5O1xufTtcblxuLyoqXG4gKiBGdW5jdGlvbiB1c2VkIHRvIGluaXRpYWxpemUgYSBieXRlIGFycmF5IG9mIGluZGljZXMuXG4gKlxuICogQHBhcmFtICB7bnVtYmVyfSAgICBsZW5ndGggLSBMZW5ndGggb2YgdGFyZ2V0LlxuICogQHJldHVybiB7Qnl0ZUFycmF5fVxuICovXG5leHBvcnRzLmluZGljZXMgPSBmdW5jdGlvbihsZW5ndGgpIHtcbiAgdmFyIFBvaW50ZXJBcnJheSA9IGV4cG9ydHMuZ2V0UG9pbnRlckFycmF5KGxlbmd0aCk7XG5cbiAgdmFyIGFycmF5ID0gbmV3IFBvaW50ZXJBcnJheShsZW5ndGgpO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspXG4gICAgYXJyYXlbaV0gPSBpO1xuXG4gIHJldHVybiBhcnJheTtcbn07XG4iLCAiLyoqXG4gKiBNbmVtb25pc3QgU3BhcnNlTWFwXG4gKiA9PT09PT09PT09PT09PT09PT09PVxuICpcbiAqIEphdmFTY3JpcHQgc3BhcnNlIG1hcCBpbXBsZW1lbnRlZCBvbiB0b3Agb2YgYnl0ZSBhcnJheXMuXG4gKlxuICogW1JlZmVyZW5jZV06IGh0dHBzOi8vcmVzZWFyY2guc3d0Y2guY29tL3NwYXJzZVxuICovXG52YXIgSXRlcmF0b3IgPSByZXF1aXJlKCdvYmxpdGVyYXRvci9pdGVyYXRvcicpLFxuICAgIGdldFBvaW50ZXJBcnJheSA9IHJlcXVpcmUoJy4vdXRpbHMvdHlwZWQtYXJyYXlzLmpzJykuZ2V0UG9pbnRlckFycmF5O1xuXG4vKipcbiAqIFNwYXJzZU1hcC5cbiAqXG4gKiBAY29uc3RydWN0b3JcbiAqL1xuZnVuY3Rpb24gU3BhcnNlTWFwKFZhbHVlcywgbGVuZ3RoKSB7XG4gIGlmIChhcmd1bWVudHMubGVuZ3RoIDwgMikge1xuICAgIGxlbmd0aCA9IFZhbHVlcztcbiAgICBWYWx1ZXMgPSBBcnJheTtcbiAgfVxuXG4gIHZhciBCeXRlQXJyYXkgPSBnZXRQb2ludGVyQXJyYXkobGVuZ3RoKTtcblxuICAvLyBQcm9wZXJ0aWVzXG4gIHRoaXMuc2l6ZSA9IDA7XG4gIHRoaXMubGVuZ3RoID0gbGVuZ3RoO1xuICB0aGlzLmRlbnNlID0gbmV3IEJ5dGVBcnJheShsZW5ndGgpO1xuICB0aGlzLnNwYXJzZSA9IG5ldyBCeXRlQXJyYXkobGVuZ3RoKTtcbiAgdGhpcy52YWxzID0gbmV3IFZhbHVlcyhsZW5ndGgpO1xufVxuXG4vKipcbiAqIE1ldGhvZCB1c2VkIHRvIGNsZWFyIHRoZSBzdHJ1Y3R1cmUuXG4gKlxuICogQHJldHVybiB7dW5kZWZpbmVkfVxuICovXG5TcGFyc2VNYXAucHJvdG90eXBlLmNsZWFyID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMuc2l6ZSA9IDA7XG59O1xuXG4vKipcbiAqIE1ldGhvZCB1c2VkIHRvIGNoZWNrIHRoZSBleGlzdGVuY2Ugb2YgYSBtZW1iZXIgaW4gdGhlIHNldC5cbiAqXG4gKiBAcGFyYW0gIHtudW1iZXJ9IG1lbWJlciAtIE1lbWJlciB0byB0ZXN0LlxuICogQHJldHVybiB7U3BhcnNlTWFwfVxuICovXG5TcGFyc2VNYXAucHJvdG90eXBlLmhhcyA9IGZ1bmN0aW9uKG1lbWJlcikge1xuICB2YXIgaW5kZXggPSB0aGlzLnNwYXJzZVttZW1iZXJdO1xuXG4gIHJldHVybiAoXG4gICAgaW5kZXggPCB0aGlzLnNpemUgJiZcbiAgICB0aGlzLmRlbnNlW2luZGV4XSA9PT0gbWVtYmVyXG4gICk7XG59O1xuXG4vKipcbiAqIE1ldGhvZCB1c2VkIHRvIGdldCB0aGUgdmFsdWUgYXNzb2NpYXRlZCB0byBhIG1lbWJlciBpbiB0aGUgc2V0LlxuICpcbiAqIEBwYXJhbSAge251bWJlcn0gbWVtYmVyIC0gTWVtYmVyIHRvIHRlc3QuXG4gKiBAcmV0dXJuIHthbnl9XG4gKi9cblNwYXJzZU1hcC5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24obWVtYmVyKSB7XG4gIHZhciBpbmRleCA9IHRoaXMuc3BhcnNlW21lbWJlcl07XG5cbiAgaWYgKGluZGV4IDwgdGhpcy5zaXplICYmIHRoaXMuZGVuc2VbaW5kZXhdID09PSBtZW1iZXIpXG4gICAgcmV0dXJuIHRoaXMudmFsc1tpbmRleF07XG5cbiAgcmV0dXJuO1xufTtcblxuLyoqXG4gKiBNZXRob2QgdXNlZCB0byBzZXQgYSB2YWx1ZSBpbnRvIHRoZSBtYXAuXG4gKlxuICogQHBhcmFtICB7bnVtYmVyfSBtZW1iZXIgLSBNZW1iZXIgdG8gc2V0LlxuICogQHBhcmFtICB7YW55fSAgICB2YWx1ZSAgLSBBc3NvY2lhdGVkIHZhbHVlLlxuICogQHJldHVybiB7U3BhcnNlTWFwfVxuICovXG5TcGFyc2VNYXAucHJvdG90eXBlLnNldCA9IGZ1bmN0aW9uKG1lbWJlciwgdmFsdWUpIHtcbiAgdmFyIGluZGV4ID0gdGhpcy5zcGFyc2VbbWVtYmVyXTtcblxuICBpZiAoaW5kZXggPCB0aGlzLnNpemUgJiYgdGhpcy5kZW5zZVtpbmRleF0gPT09IG1lbWJlcikge1xuICAgIHRoaXMudmFsc1tpbmRleF0gPSB2YWx1ZTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIHRoaXMuZGVuc2VbdGhpcy5zaXplXSA9IG1lbWJlcjtcbiAgdGhpcy5zcGFyc2VbbWVtYmVyXSA9IHRoaXMuc2l6ZTtcbiAgdGhpcy52YWxzW3RoaXMuc2l6ZV0gPSB2YWx1ZTtcbiAgdGhpcy5zaXplKys7XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIE1ldGhvZCB1c2VkIHRvIHJlbW92ZSBhIG1lbWJlciBmcm9tIHRoZSBzZXQuXG4gKlxuICogQHBhcmFtICB7bnVtYmVyfSBtZW1iZXIgLSBNZW1iZXIgdG8gZGVsZXRlLlxuICogQHJldHVybiB7Ym9vbGVhbn1cbiAqL1xuU3BhcnNlTWFwLnByb3RvdHlwZS5kZWxldGUgPSBmdW5jdGlvbihtZW1iZXIpIHtcbiAgdmFyIGluZGV4ID0gdGhpcy5zcGFyc2VbbWVtYmVyXTtcblxuICBpZiAoaW5kZXggPj0gdGhpcy5zaXplIHx8IHRoaXMuZGVuc2VbaW5kZXhdICE9PSBtZW1iZXIpXG4gICAgcmV0dXJuIGZhbHNlO1xuXG4gIGluZGV4ID0gdGhpcy5kZW5zZVt0aGlzLnNpemUgLSAxXTtcbiAgdGhpcy5kZW5zZVt0aGlzLnNwYXJzZVttZW1iZXJdXSA9IGluZGV4O1xuICB0aGlzLnNwYXJzZVtpbmRleF0gPSB0aGlzLnNwYXJzZVttZW1iZXJdO1xuICB0aGlzLnNpemUtLTtcblxuICByZXR1cm4gdHJ1ZTtcbn07XG5cbi8qKlxuICogTWV0aG9kIHVzZWQgdG8gaXRlcmF0ZSBvdmVyIHRoZSBzZXQncyB2YWx1ZXMuXG4gKlxuICogQHBhcmFtICB7ZnVuY3Rpb259ICBjYWxsYmFjayAtIEZ1bmN0aW9uIHRvIGNhbGwgZm9yIGVhY2ggaXRlbS5cbiAqIEBwYXJhbSAge29iamVjdH0gICAgc2NvcGUgICAgLSBPcHRpb25hbCBzY29wZS5cbiAqIEByZXR1cm4ge3VuZGVmaW5lZH1cbiAqL1xuU3BhcnNlTWFwLnByb3RvdHlwZS5mb3JFYWNoID0gZnVuY3Rpb24oY2FsbGJhY2ssIHNjb3BlKSB7XG4gIHNjb3BlID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBzY29wZSA6IHRoaXM7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLnNpemU7IGkrKylcbiAgICBjYWxsYmFjay5jYWxsKHNjb3BlLCB0aGlzLnZhbHNbaV0sIHRoaXMuZGVuc2VbaV0pO1xufTtcblxuLyoqXG4gKiBNZXRob2QgdXNlZCB0byBjcmVhdGUgYW4gaXRlcmF0b3Igb3ZlciBhIHNldCdzIG1lbWJlcnMuXG4gKlxuICogQHJldHVybiB7SXRlcmF0b3J9XG4gKi9cblNwYXJzZU1hcC5wcm90b3R5cGUua2V5cyA9IGZ1bmN0aW9uKCkge1xuICB2YXIgc2l6ZSA9IHRoaXMuc2l6ZSxcbiAgICAgIGRlbnNlID0gdGhpcy5kZW5zZSxcbiAgICAgIGkgPSAwO1xuXG4gIHJldHVybiBuZXcgSXRlcmF0b3IoZnVuY3Rpb24oKSB7XG4gICAgaWYgKGkgPCBzaXplKSB7XG4gICAgICB2YXIgaXRlbSA9IGRlbnNlW2ldO1xuICAgICAgaSsrO1xuXG4gICAgICByZXR1cm4ge1xuICAgICAgICB2YWx1ZTogaXRlbVxuICAgICAgfTtcbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgZG9uZTogdHJ1ZVxuICAgIH07XG4gIH0pO1xufTtcblxuLyoqXG4gKiBNZXRob2QgdXNlZCB0byBjcmVhdGUgYW4gaXRlcmF0b3Igb3ZlciBhIHNldCdzIHZhbHVlcy5cbiAqXG4gKiBAcmV0dXJuIHtJdGVyYXRvcn1cbiAqL1xuU3BhcnNlTWFwLnByb3RvdHlwZS52YWx1ZXMgPSBmdW5jdGlvbigpIHtcbiAgdmFyIHNpemUgPSB0aGlzLnNpemUsXG4gICAgICB2YWx1ZXMgPSB0aGlzLnZhbHMsXG4gICAgICBpID0gMDtcblxuICByZXR1cm4gbmV3IEl0ZXJhdG9yKGZ1bmN0aW9uKCkge1xuICAgIGlmIChpIDwgc2l6ZSkge1xuICAgICAgdmFyIGl0ZW0gPSB2YWx1ZXNbaV07XG4gICAgICBpKys7XG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgIHZhbHVlOiBpdGVtXG4gICAgICB9O1xuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICBkb25lOiB0cnVlXG4gICAgfTtcbiAgfSk7XG59O1xuXG4vKipcbiAqIE1ldGhvZCB1c2VkIHRvIGNyZWF0ZSBhbiBpdGVyYXRvciBvdmVyIGEgc2V0J3MgZW50cmllcy5cbiAqXG4gKiBAcmV0dXJuIHtJdGVyYXRvcn1cbiAqL1xuU3BhcnNlTWFwLnByb3RvdHlwZS5lbnRyaWVzID0gZnVuY3Rpb24oKSB7XG4gIHZhciBzaXplID0gdGhpcy5zaXplLFxuICAgICAgZGVuc2UgPSB0aGlzLmRlbnNlLFxuICAgICAgdmFsdWVzID0gdGhpcy52YWxzLFxuICAgICAgaSA9IDA7XG5cbiAgcmV0dXJuIG5ldyBJdGVyYXRvcihmdW5jdGlvbigpIHtcbiAgICBpZiAoaSA8IHNpemUpIHtcbiAgICAgIHZhciBpdGVtID0gW2RlbnNlW2ldLCB2YWx1ZXNbaV1dO1xuICAgICAgaSsrO1xuXG4gICAgICByZXR1cm4ge1xuICAgICAgICB2YWx1ZTogaXRlbVxuICAgICAgfTtcbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgZG9uZTogdHJ1ZVxuICAgIH07XG4gIH0pO1xufTtcblxuLyoqXG4gKiBBdHRhY2hpbmcgdGhlICMuZW50cmllcyBtZXRob2QgdG8gU3ltYm9sLml0ZXJhdG9yIGlmIHBvc3NpYmxlLlxuICovXG5pZiAodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcpXG4gIFNwYXJzZU1hcC5wcm90b3R5cGVbU3ltYm9sLml0ZXJhdG9yXSA9IFNwYXJzZU1hcC5wcm90b3R5cGUuZW50cmllcztcblxuLyoqXG4gKiBDb252ZW5pZW5jZSBrbm93biBtZXRob2RzLlxuICovXG5TcGFyc2VNYXAucHJvdG90eXBlLmluc3BlY3QgPSBmdW5jdGlvbigpIHtcbiAgdmFyIHByb3h5ID0gbmV3IE1hcCgpO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5zaXplOyBpKyspXG4gICAgcHJveHkuc2V0KHRoaXMuZGVuc2VbaV0sIHRoaXMudmFsc1tpXSk7XG5cbiAgLy8gVHJpY2sgc28gdGhhdCBub2RlIGRpc3BsYXlzIHRoZSBuYW1lIG9mIHRoZSBjb25zdHJ1Y3RvclxuICBPYmplY3QuZGVmaW5lUHJvcGVydHkocHJveHksICdjb25zdHJ1Y3RvcicsIHtcbiAgICB2YWx1ZTogU3BhcnNlTWFwLFxuICAgIGVudW1lcmFibGU6IGZhbHNlXG4gIH0pO1xuXG4gIHByb3h5Lmxlbmd0aCA9IHRoaXMubGVuZ3RoO1xuXG4gIGlmICh0aGlzLnZhbHMuY29uc3RydWN0b3IgIT09IEFycmF5KVxuICAgIHByb3h5LnR5cGUgPSB0aGlzLnZhbHMuY29uc3RydWN0b3IubmFtZTtcblxuICByZXR1cm4gcHJveHk7XG59O1xuXG5pZiAodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcpXG4gIFNwYXJzZU1hcC5wcm90b3R5cGVbU3ltYm9sLmZvcignbm9kZWpzLnV0aWwuaW5zcGVjdC5jdXN0b20nKV0gPSBTcGFyc2VNYXAucHJvdG90eXBlLmluc3BlY3Q7XG5cbi8qKlxuICogRXhwb3J0aW5nLlxuICovXG5tb2R1bGUuZXhwb3J0cyA9IFNwYXJzZU1hcDtcbiIsICIvKipcbiAqIE1uZW1vbmlzdCBTcGFyc2VRdWV1ZVNldFxuICogPT09PT09PT09PT09PT09PT09PT09PT09PVxuICpcbiAqIEphdmFTY3JpcHQgc3BhcnNlIHF1ZXVlIHNldCBpbXBsZW1lbnRlZCBvbiB0b3Agb2YgYnl0ZSBhcnJheXMuXG4gKlxuICogW1JlZmVyZW5jZV06IGh0dHBzOi8vcmVzZWFyY2guc3d0Y2guY29tL3NwYXJzZVxuICovXG52YXIgSXRlcmF0b3IgPSByZXF1aXJlKCdvYmxpdGVyYXRvci9pdGVyYXRvcicpLFxuICAgIGdldFBvaW50ZXJBcnJheSA9IHJlcXVpcmUoJy4vdXRpbHMvdHlwZWQtYXJyYXlzLmpzJykuZ2V0UG9pbnRlckFycmF5O1xuXG4vKipcbiAqIFNwYXJzZVF1ZXVlU2V0LlxuICpcbiAqIEBjb25zdHJ1Y3RvclxuICovXG5mdW5jdGlvbiBTcGFyc2VRdWV1ZVNldChjYXBhY2l0eSkge1xuXG4gIHZhciBCeXRlQXJyYXkgPSBnZXRQb2ludGVyQXJyYXkoY2FwYWNpdHkpO1xuXG4gIC8vIFByb3BlcnRpZXNcbiAgdGhpcy5zdGFydCA9IDA7XG4gIHRoaXMuc2l6ZSA9IDA7XG4gIHRoaXMuY2FwYWNpdHkgPSBjYXBhY2l0eTtcbiAgdGhpcy5kZW5zZSA9IG5ldyBCeXRlQXJyYXkoY2FwYWNpdHkpO1xuICB0aGlzLnNwYXJzZSA9IG5ldyBCeXRlQXJyYXkoY2FwYWNpdHkpO1xufVxuXG4vKipcbiAqIE1ldGhvZCB1c2VkIHRvIGNsZWFyIHRoZSBzdHJ1Y3R1cmUuXG4gKlxuICogQHJldHVybiB7dW5kZWZpbmVkfVxuICovXG5TcGFyc2VRdWV1ZVNldC5wcm90b3R5cGUuY2xlYXIgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5zdGFydCA9IDA7XG4gIHRoaXMuc2l6ZSA9IDA7XG59O1xuXG4vKipcbiAqIE1ldGhvZCB1c2VkIHRvIGNoZWNrIHRoZSBleGlzdGVuY2Ugb2YgYSBtZW1iZXIgaW4gdGhlIHF1ZXVlLlxuICpcbiAqIEBwYXJhbSAge251bWJlcn0gbWVtYmVyIC0gTWVtYmVyIHRvIHRlc3QuXG4gKiBAcmV0dXJuIHtTcGFyc2VRdWV1ZVNldH1cbiAqL1xuU3BhcnNlUXVldWVTZXQucHJvdG90eXBlLmhhcyA9IGZ1bmN0aW9uKG1lbWJlcikge1xuICBpZiAodGhpcy5zaXplID09PSAwKVxuICAgIHJldHVybiBmYWxzZTtcblxuICB2YXIgaW5kZXggPSB0aGlzLnNwYXJzZVttZW1iZXJdO1xuXG4gIHZhciBpbkJvdW5kcyA9IChcbiAgICBpbmRleCA8IHRoaXMuY2FwYWNpdHkgJiZcbiAgICAoXG4gICAgICBpbmRleCA+PSB0aGlzLnN0YXJ0ICYmXG4gICAgICBpbmRleCA8IHRoaXMuc3RhcnQgKyB0aGlzLnNpemVcbiAgICApIHx8XG4gICAgKFxuICAgICAgaW5kZXggPCAoKHRoaXMuc3RhcnQgKyB0aGlzLnNpemUpICUgdGhpcy5jYXBhY2l0eSlcbiAgICApXG4gICk7XG5cbiAgcmV0dXJuIChcbiAgICBpbkJvdW5kcyAmJlxuICAgIHRoaXMuZGVuc2VbaW5kZXhdID09PSBtZW1iZXJcbiAgKTtcbn07XG5cbi8qKlxuICogTWV0aG9kIHVzZWQgdG8gYWRkIGEgbWVtYmVyIHRvIHRoZSBxdWV1ZS5cbiAqXG4gKiBAcGFyYW0gIHtudW1iZXJ9IG1lbWJlciAtIE1lbWJlciB0byBhZGQuXG4gKiBAcmV0dXJuIHtTcGFyc2VRdWV1ZVNldH1cbiAqL1xuU3BhcnNlUXVldWVTZXQucHJvdG90eXBlLmVucXVldWUgPSBmdW5jdGlvbihtZW1iZXIpIHtcbiAgdmFyIGluZGV4ID0gdGhpcy5zcGFyc2VbbWVtYmVyXTtcblxuICBpZiAodGhpcy5zaXplICE9PSAwKSB7XG4gICAgdmFyIGluQm91bmRzID0gKFxuICAgICAgaW5kZXggPCB0aGlzLmNhcGFjaXR5ICYmXG4gICAgICAoXG4gICAgICAgIGluZGV4ID49IHRoaXMuc3RhcnQgJiZcbiAgICAgICAgaW5kZXggPCB0aGlzLnN0YXJ0ICsgdGhpcy5zaXplXG4gICAgICApIHx8XG4gICAgICAoXG4gICAgICAgIGluZGV4IDwgKCh0aGlzLnN0YXJ0ICsgdGhpcy5zaXplKSAlIHRoaXMuY2FwYWNpdHkpXG4gICAgICApXG4gICAgKTtcblxuICAgIGlmIChpbkJvdW5kcyAmJiB0aGlzLmRlbnNlW2luZGV4XSA9PT0gbWVtYmVyKVxuICAgICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICBpbmRleCA9ICh0aGlzLnN0YXJ0ICsgdGhpcy5zaXplKSAlIHRoaXMuY2FwYWNpdHk7XG5cbiAgdGhpcy5kZW5zZVtpbmRleF0gPSBtZW1iZXI7XG4gIHRoaXMuc3BhcnNlW21lbWJlcl0gPSBpbmRleDtcbiAgdGhpcy5zaXplKys7XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIE1ldGhvZCB1c2VkIHRvIHJlbW92ZSB0aGUgbmV4dCBtZW1iZXIgZnJvbSB0aGUgcXVldWUuXG4gKlxuICogQHBhcmFtICB7bnVtYmVyfSBtZW1iZXIgLSBNZW1iZXIgdG8gZGVsZXRlLlxuICogQHJldHVybiB7Ym9vbGVhbn1cbiAqL1xuU3BhcnNlUXVldWVTZXQucHJvdG90eXBlLmRlcXVldWUgPSBmdW5jdGlvbigpIHtcbiAgaWYgKHRoaXMuc2l6ZSA9PT0gMClcbiAgICByZXR1cm47XG5cbiAgdmFyIGluZGV4ID0gdGhpcy5zdGFydDtcblxuICB0aGlzLnNpemUtLTtcbiAgdGhpcy5zdGFydCsrO1xuXG4gIGlmICh0aGlzLnN0YXJ0ID09PSB0aGlzLmNhcGFjaXR5KVxuICAgIHRoaXMuc3RhcnQgPSAwO1xuXG4gIHZhciBtZW1iZXIgPSB0aGlzLmRlbnNlW2luZGV4XTtcblxuICB0aGlzLnNwYXJzZVttZW1iZXJdID0gdGhpcy5jYXBhY2l0eTtcblxuICByZXR1cm4gbWVtYmVyO1xufTtcblxuLyoqXG4gKiBNZXRob2QgdXNlZCB0byBpdGVyYXRlIG92ZXIgdGhlIHF1ZXVlJ3MgdmFsdWVzLlxuICpcbiAqIEBwYXJhbSAge2Z1bmN0aW9ufSAgY2FsbGJhY2sgLSBGdW5jdGlvbiB0byBjYWxsIGZvciBlYWNoIGl0ZW0uXG4gKiBAcGFyYW0gIHtvYmplY3R9ICAgIHNjb3BlICAgIC0gT3B0aW9uYWwgc2NvcGUuXG4gKiBAcmV0dXJuIHt1bmRlZmluZWR9XG4gKi9cblNwYXJzZVF1ZXVlU2V0LnByb3RvdHlwZS5mb3JFYWNoID0gZnVuY3Rpb24oY2FsbGJhY2ssIHNjb3BlKSB7XG4gIHNjb3BlID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBzY29wZSA6IHRoaXM7XG5cbiAgdmFyIGMgPSB0aGlzLmNhcGFjaXR5LFxuICAgICAgbCA9IHRoaXMuc2l6ZSxcbiAgICAgIGkgPSB0aGlzLnN0YXJ0LFxuICAgICAgaiA9IDA7XG5cbiAgd2hpbGUgKGogPCBsKSB7XG4gICAgY2FsbGJhY2suY2FsbChzY29wZSwgdGhpcy5kZW5zZVtpXSwgaiwgdGhpcyk7XG4gICAgaSsrO1xuICAgIGorKztcblxuICAgIGlmIChpID09PSBjKVxuICAgICAgaSA9IDA7XG4gIH1cbn07XG5cbi8qKlxuICogTWV0aG9kIHVzZWQgdG8gY3JlYXRlIGFuIGl0ZXJhdG9yIG92ZXIgYSBzZXQncyB2YWx1ZXMuXG4gKlxuICogQHJldHVybiB7SXRlcmF0b3J9XG4gKi9cblNwYXJzZVF1ZXVlU2V0LnByb3RvdHlwZS52YWx1ZXMgPSBmdW5jdGlvbigpIHtcbiAgdmFyIGRlbnNlID0gdGhpcy5kZW5zZSxcbiAgICAgIGMgPSB0aGlzLmNhcGFjaXR5LFxuICAgICAgbCA9IHRoaXMuc2l6ZSxcbiAgICAgIGkgPSB0aGlzLnN0YXJ0LFxuICAgICAgaiA9IDA7XG5cbiAgcmV0dXJuIG5ldyBJdGVyYXRvcihmdW5jdGlvbigpIHtcbiAgICBpZiAoaiA+PSBsKVxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgZG9uZTogdHJ1ZVxuICAgICAgfTtcblxuICAgIHZhciB2YWx1ZSA9IGRlbnNlW2ldO1xuXG4gICAgaSsrO1xuICAgIGorKztcblxuICAgIGlmIChpID09PSBjKVxuICAgICAgaSA9IDA7XG5cbiAgICByZXR1cm4ge1xuICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgZG9uZTogZmFsc2VcbiAgICB9O1xuICB9KTtcbn07XG5cbi8qKlxuICogQXR0YWNoaW5nIHRoZSAjLnZhbHVlcyBtZXRob2QgdG8gU3ltYm9sLml0ZXJhdG9yIGlmIHBvc3NpYmxlLlxuICovXG5pZiAodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcpXG4gIFNwYXJzZVF1ZXVlU2V0LnByb3RvdHlwZVtTeW1ib2wuaXRlcmF0b3JdID0gU3BhcnNlUXVldWVTZXQucHJvdG90eXBlLnZhbHVlcztcblxuLyoqXG4gKiBDb252ZW5pZW5jZSBrbm93biBtZXRob2RzLlxuICovXG5TcGFyc2VRdWV1ZVNldC5wcm90b3R5cGUuaW5zcGVjdCA9IGZ1bmN0aW9uKCkge1xuICB2YXIgcHJveHkgPSBbXTtcblxuICB0aGlzLmZvckVhY2goZnVuY3Rpb24obWVtYmVyKSB7XG4gICAgcHJveHkucHVzaChtZW1iZXIpO1xuICB9KTtcblxuICAvLyBUcmljayBzbyB0aGF0IG5vZGUgZGlzcGxheXMgdGhlIG5hbWUgb2YgdGhlIGNvbnN0cnVjdG9yXG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShwcm94eSwgJ2NvbnN0cnVjdG9yJywge1xuICAgIHZhbHVlOiBTcGFyc2VRdWV1ZVNldCxcbiAgICBlbnVtZXJhYmxlOiBmYWxzZVxuICB9KTtcblxuICBwcm94eS5jYXBhY2l0eSA9IHRoaXMuY2FwYWNpdHk7XG5cbiAgcmV0dXJuIHByb3h5O1xufTtcblxuaWYgKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnKVxuICBTcGFyc2VRdWV1ZVNldC5wcm90b3R5cGVbU3ltYm9sLmZvcignbm9kZWpzLnV0aWwuaW5zcGVjdC5jdXN0b20nKV0gPSBTcGFyc2VRdWV1ZVNldC5wcm90b3R5cGUuaW5zcGVjdDtcblxuLyoqXG4gKiBFeHBvcnRpbmcuXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gU3BhcnNlUXVldWVTZXQ7XG4iLCAiLyoqXG4gKiBQYW5kZW1vbml1bSBSYW5kb20gSW5kZXhcbiAqID09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqXG4gKiBSYW5kb20gaW5kZXggZnVuY3Rpb24uXG4gKi9cblxuLyoqXG4gKiBDcmVhdGluZyBhIGZ1bmN0aW9uIHJldHVybmluZyBhIHJhbmRvbSBpbmRleCBmcm9tIHRoZSBnaXZlbiBhcnJheS5cbiAqXG4gKiBAcGFyYW0gIHtmdW5jdGlvbn0gcm5nIC0gUk5HIGZ1bmN0aW9uIHJldHVybmluZyB1bmlmb3JtIHJhbmRvbS5cbiAqIEByZXR1cm4ge2Z1bmN0aW9ufSAgICAgLSBUaGUgY3JlYXRlZCBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gY3JlYXRlUmFuZG9tSW5kZXgocm5nKSB7XG4gIC8qKlxuICAgKiBSYW5kb20gZnVuY3Rpb24uXG4gICAqXG4gICAqIEBwYXJhbSAge2FycmF5fG51bWJlcn0gIGFycmF5IC0gVGFyZ2V0IGFycmF5IG9yIGxlbmd0aCBvZiB0aGUgYXJyYXkuXG4gICAqIEByZXR1cm4ge251bWJlcn1cbiAgICovXG4gIHJldHVybiBmdW5jdGlvbiAobGVuZ3RoKSB7XG4gICAgaWYgKHR5cGVvZiBsZW5ndGggIT09ICdudW1iZXInKSBsZW5ndGggPSBsZW5ndGgubGVuZ3RoO1xuXG4gICAgcmV0dXJuIE1hdGguZmxvb3Iocm5nKCkgKiBsZW5ndGgpO1xuICB9O1xufVxuXG4vKipcbiAqIERlZmF1bHQgcmFuZG9tIGluZGV4IHVzaW5nIGBNYXRoLnJhbmRvbWAuXG4gKi9cbnZhciByYW5kb21JbmRleCA9IGNyZWF0ZVJhbmRvbUluZGV4KE1hdGgucmFuZG9tKTtcblxuLyoqXG4gKiBFeHBvcnRpbmcuXG4gKi9cbnJhbmRvbUluZGV4LmNyZWF0ZVJhbmRvbUluZGV4ID0gY3JlYXRlUmFuZG9tSW5kZXg7XG5tb2R1bGUuZXhwb3J0cyA9IHJhbmRvbUluZGV4O1xuIiwgIi8qKlxuICogTW5lbW9uaXN0IFR5cGVkIEFycmF5IEhlbHBlcnNcbiAqID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICpcbiAqIE1pc2NlbGxhbmVvdXMgaGVscGVycyByZWxhdGVkIHRvIHR5cGVkIGFycmF5cy5cbiAqL1xuXG4vKipcbiAqIFdoZW4gdXNpbmcgYW4gdW5zaWduZWQgaW50ZWdlciBhcnJheSB0byBzdG9yZSBwb2ludGVycywgb25lIG1pZ2h0IHdhbnQgdG9cbiAqIGNob29zZSB0aGUgb3B0aW1hbCB3b3JkIHNpemUgaW4gcmVnYXJkcyB0byB0aGUgYWN0dWFsIG51bWJlcnMgb2YgcG9pbnRlcnNcbiAqIHRvIHN0b3JlLlxuICpcbiAqIFRoaXMgaGVscGVycyBkb2VzIGp1c3QgdGhhdC5cbiAqXG4gKiBAcGFyYW0gIHtudW1iZXJ9IHNpemUgLSBFeHBlY3RlZCBzaXplIG9mIHRoZSBhcnJheSB0byBtYXAuXG4gKiBAcmV0dXJuIHtUeXBlZEFycmF5fVxuICovXG52YXIgTUFYXzhCSVRfSU5URUdFUiA9IE1hdGgucG93KDIsIDgpIC0gMSxcbiAgICBNQVhfMTZCSVRfSU5URUdFUiA9IE1hdGgucG93KDIsIDE2KSAtIDEsXG4gICAgTUFYXzMyQklUX0lOVEVHRVIgPSBNYXRoLnBvdygyLCAzMikgLSAxO1xuXG52YXIgTUFYX1NJR05FRF84QklUX0lOVEVHRVIgPSBNYXRoLnBvdygyLCA3KSAtIDEsXG4gICAgTUFYX1NJR05FRF8xNkJJVF9JTlRFR0VSID0gTWF0aC5wb3coMiwgMTUpIC0gMSxcbiAgICBNQVhfU0lHTkVEXzMyQklUX0lOVEVHRVIgPSBNYXRoLnBvdygyLCAzMSkgLSAxO1xuXG5leHBvcnRzLmdldFBvaW50ZXJBcnJheSA9IGZ1bmN0aW9uKHNpemUpIHtcbiAgdmFyIG1heEluZGV4ID0gc2l6ZSAtIDE7XG5cbiAgaWYgKG1heEluZGV4IDw9IE1BWF84QklUX0lOVEVHRVIpXG4gICAgcmV0dXJuIFVpbnQ4QXJyYXk7XG5cbiAgaWYgKG1heEluZGV4IDw9IE1BWF8xNkJJVF9JTlRFR0VSKVxuICAgIHJldHVybiBVaW50MTZBcnJheTtcblxuICBpZiAobWF4SW5kZXggPD0gTUFYXzMyQklUX0lOVEVHRVIpXG4gICAgcmV0dXJuIFVpbnQzMkFycmF5O1xuXG4gIHRocm93IG5ldyBFcnJvcignbW5lbW9uaXN0OiBQb2ludGVyIEFycmF5IG9mIHNpemUgPiA0Mjk0OTY3Mjk1IGlzIG5vdCBzdXBwb3J0ZWQuJyk7XG59O1xuXG5leHBvcnRzLmdldFNpZ25lZFBvaW50ZXJBcnJheSA9IGZ1bmN0aW9uKHNpemUpIHtcbiAgdmFyIG1heEluZGV4ID0gc2l6ZSAtIDE7XG5cbiAgaWYgKG1heEluZGV4IDw9IE1BWF9TSUdORURfOEJJVF9JTlRFR0VSKVxuICAgIHJldHVybiBJbnQ4QXJyYXk7XG5cbiAgaWYgKG1heEluZGV4IDw9IE1BWF9TSUdORURfMTZCSVRfSU5URUdFUilcbiAgICByZXR1cm4gSW50MTZBcnJheTtcblxuICBpZiAobWF4SW5kZXggPD0gTUFYX1NJR05FRF8zMkJJVF9JTlRFR0VSKVxuICAgIHJldHVybiBJbnQzMkFycmF5O1xuXG4gIHJldHVybiBGbG9hdDY0QXJyYXk7XG59O1xuXG4vKipcbiAqIEZ1bmN0aW9uIHJldHVybmluZyB0aGUgbWluaW1hbCB0eXBlIGFibGUgdG8gcmVwcmVzZW50IHRoZSBnaXZlbiBudW1iZXIuXG4gKlxuICogQHBhcmFtICB7bnVtYmVyfSB2YWx1ZSAtIFZhbHVlIHRvIHRlc3QuXG4gKiBAcmV0dXJuIHtUeXBlZEFycmF5Q2xhc3N9XG4gKi9cbmV4cG9ydHMuZ2V0TnVtYmVyVHlwZSA9IGZ1bmN0aW9uKHZhbHVlKSB7XG5cbiAgLy8gPD0gMzIgYml0cyBpdG50ZWdlcj9cbiAgaWYgKHZhbHVlID09PSAodmFsdWUgfCAwKSkge1xuXG4gICAgLy8gTmVnYXRpdmVcbiAgICBpZiAoTWF0aC5zaWduKHZhbHVlKSA9PT0gLTEpIHtcbiAgICAgIGlmICh2YWx1ZSA8PSAxMjcgJiYgdmFsdWUgPj0gLTEyOClcbiAgICAgICAgcmV0dXJuIEludDhBcnJheTtcblxuICAgICAgaWYgKHZhbHVlIDw9IDMyNzY3ICYmIHZhbHVlID49IC0zMjc2OClcbiAgICAgICAgcmV0dXJuIEludDE2QXJyYXk7XG5cbiAgICAgIHJldHVybiBJbnQzMkFycmF5O1xuICAgIH1cbiAgICBlbHNlIHtcblxuICAgICAgaWYgKHZhbHVlIDw9IDI1NSlcbiAgICAgICAgcmV0dXJuIFVpbnQ4QXJyYXk7XG5cbiAgICAgIGlmICh2YWx1ZSA8PSA2NTUzNSlcbiAgICAgICAgcmV0dXJuIFVpbnQxNkFycmF5O1xuXG4gICAgICByZXR1cm4gVWludDMyQXJyYXk7XG4gICAgfVxuICB9XG5cbiAgLy8gNTMgYml0cyBpbnRlZ2VyICYgZmxvYXRzXG4gIC8vIE5PVEU6IGl0J3Mga2luZGEgaGFyZCB0byB0ZWxsIHdoZXRoZXIgd2UgY291bGQgdXNlIDMyYml0cyBvciBub3QuLi5cbiAgcmV0dXJuIEZsb2F0NjRBcnJheTtcbn07XG5cbi8qKlxuICogRnVuY3Rpb24gcmV0dXJuaW5nIHRoZSBtaW5pbWFsIHR5cGUgYWJsZSB0byByZXByZXNlbnQgdGhlIGdpdmVuIGFycmF5XG4gKiBvZiBKYXZhU2NyaXB0IG51bWJlcnMuXG4gKlxuICogQHBhcmFtICB7YXJyYXl9ICAgIGFycmF5ICAtIEFycmF5IHRvIHJlcHJlc2VudC5cbiAqIEBwYXJhbSAge2Z1bmN0aW9ufSBnZXR0ZXIgLSBPcHRpb25hbCBnZXR0ZXIuXG4gKiBAcmV0dXJuIHtUeXBlZEFycmF5Q2xhc3N9XG4gKi9cbnZhciBUWVBFX1BSSU9SSVRZID0ge1xuICBVaW50OEFycmF5OiAxLFxuICBJbnQ4QXJyYXk6IDIsXG4gIFVpbnQxNkFycmF5OiAzLFxuICBJbnQxNkFycmF5OiA0LFxuICBVaW50MzJBcnJheTogNSxcbiAgSW50MzJBcnJheTogNixcbiAgRmxvYXQzMkFycmF5OiA3LFxuICBGbG9hdDY0QXJyYXk6IDhcbn07XG5cbi8vIFRPRE86IG1ha2UgdGhpcyBhIG9uZS1zaG90IGZvciBvbmUgdmFsdWVcbmV4cG9ydHMuZ2V0TWluaW1hbFJlcHJlc2VudGF0aW9uID0gZnVuY3Rpb24oYXJyYXksIGdldHRlcikge1xuICB2YXIgbWF4VHlwZSA9IG51bGwsXG4gICAgICBtYXhQcmlvcml0eSA9IDAsXG4gICAgICBwLFxuICAgICAgdCxcbiAgICAgIHYsXG4gICAgICBpLFxuICAgICAgbDtcblxuICBmb3IgKGkgPSAwLCBsID0gYXJyYXkubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgdiA9IGdldHRlciA/IGdldHRlcihhcnJheVtpXSkgOiBhcnJheVtpXTtcbiAgICB0ID0gZXhwb3J0cy5nZXROdW1iZXJUeXBlKHYpO1xuICAgIHAgPSBUWVBFX1BSSU9SSVRZW3QubmFtZV07XG5cbiAgICBpZiAocCA+IG1heFByaW9yaXR5KSB7XG4gICAgICBtYXhQcmlvcml0eSA9IHA7XG4gICAgICBtYXhUeXBlID0gdDtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gbWF4VHlwZTtcbn07XG5cbi8qKlxuICogRnVuY3Rpb24gcmV0dXJuaW5nIHdoZXRoZXIgdGhlIGdpdmVuIHZhbHVlIGlzIGEgdHlwZWQgYXJyYXkuXG4gKlxuICogQHBhcmFtICB7YW55fSB2YWx1ZSAtIFZhbHVlIHRvIHRlc3QuXG4gKiBAcmV0dXJuIHtib29sZWFufVxuICovXG5leHBvcnRzLmlzVHlwZWRBcnJheSA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gIHJldHVybiB0eXBlb2YgQXJyYXlCdWZmZXIgIT09ICd1bmRlZmluZWQnICYmIEFycmF5QnVmZmVyLmlzVmlldyh2YWx1ZSk7XG59O1xuXG4vKipcbiAqIEZ1bmN0aW9uIHVzZWQgdG8gY29uY2F0IGJ5dGUgYXJyYXlzLlxuICpcbiAqIEBwYXJhbSAgey4uLkJ5dGVBcnJheX1cbiAqIEByZXR1cm4ge0J5dGVBcnJheX1cbiAqL1xuZXhwb3J0cy5jb25jYXQgPSBmdW5jdGlvbigpIHtcbiAgdmFyIGxlbmd0aCA9IDAsXG4gICAgICBpLFxuICAgICAgbyxcbiAgICAgIGw7XG5cbiAgZm9yIChpID0gMCwgbCA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBsOyBpKyspXG4gICAgbGVuZ3RoICs9IGFyZ3VtZW50c1tpXS5sZW5ndGg7XG5cbiAgdmFyIGFycmF5ID0gbmV3IChhcmd1bWVudHNbMF0uY29uc3RydWN0b3IpKGxlbmd0aCk7XG5cbiAgZm9yIChpID0gMCwgbyA9IDA7IGkgPCBsOyBpKyspIHtcbiAgICBhcnJheS5zZXQoYXJndW1lbnRzW2ldLCBvKTtcbiAgICBvICs9IGFyZ3VtZW50c1tpXS5sZW5ndGg7XG4gIH1cblxuICByZXR1cm4gYXJyYXk7XG59O1xuXG4vKipcbiAqIEZ1bmN0aW9uIHVzZWQgdG8gaW5pdGlhbGl6ZSBhIGJ5dGUgYXJyYXkgb2YgaW5kaWNlcy5cbiAqXG4gKiBAcGFyYW0gIHtudW1iZXJ9ICAgIGxlbmd0aCAtIExlbmd0aCBvZiB0YXJnZXQuXG4gKiBAcmV0dXJuIHtCeXRlQXJyYXl9XG4gKi9cbmV4cG9ydHMuaW5kaWNlcyA9IGZ1bmN0aW9uKGxlbmd0aCkge1xuICB2YXIgUG9pbnRlckFycmF5ID0gZXhwb3J0cy5nZXRQb2ludGVyQXJyYXkobGVuZ3RoKTtcblxuICB2YXIgYXJyYXkgPSBuZXcgUG9pbnRlckFycmF5KGxlbmd0aCk7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKylcbiAgICBhcnJheVtpXSA9IGk7XG5cbiAgcmV0dXJuIGFycmF5O1xufTtcbiIsICIvKipcbiAqIEdyYXBob2xvZ3kgV2VpZ2h0IEdldHRlclxuICogPT09PT09PT09PT09PT09PT09PT09PT09PVxuICpcbiAqIEZ1bmN0aW9uIGNyZWF0aW5nIHdlaWdodCBnZXR0ZXJzLlxuICovXG5mdW5jdGlvbiBjb2VyY2VXZWlnaHQodmFsdWUpIHtcbiAgLy8gRW5zdXJpbmcgdGFyZ2V0IHZhbHVlIGlzIGEgY29ycmVjdCBudW1iZXJcbiAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gJ251bWJlcicgfHwgaXNOYU4odmFsdWUpKSByZXR1cm4gMTtcblxuICByZXR1cm4gdmFsdWU7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZU5vZGVWYWx1ZUdldHRlcihuYW1lT3JGdW5jdGlvbiwgZGVmYXVsdFZhbHVlKSB7XG4gIHZhciBnZXR0ZXIgPSB7fTtcblxuICB2YXIgY29lcmNlVG9EZWZhdWx0ID0gZnVuY3Rpb24gKHYpIHtcbiAgICBpZiAodHlwZW9mIHYgPT09ICd1bmRlZmluZWQnKSByZXR1cm4gZGVmYXVsdFZhbHVlO1xuXG4gICAgcmV0dXJuIHY7XG4gIH07XG5cbiAgaWYgKHR5cGVvZiBkZWZhdWx0VmFsdWUgPT09ICdmdW5jdGlvbicpIGNvZXJjZVRvRGVmYXVsdCA9IGRlZmF1bHRWYWx1ZTtcblxuICB2YXIgZ2V0ID0gZnVuY3Rpb24gKGF0dHJpYnV0ZXMpIHtcbiAgICByZXR1cm4gY29lcmNlVG9EZWZhdWx0KGF0dHJpYnV0ZXNbbmFtZU9yRnVuY3Rpb25dKTtcbiAgfTtcblxuICB2YXIgcmV0dXJuRGVmYXVsdCA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gY29lcmNlVG9EZWZhdWx0KHVuZGVmaW5lZCk7XG4gIH07XG5cbiAgaWYgKHR5cGVvZiBuYW1lT3JGdW5jdGlvbiA9PT0gJ3N0cmluZycpIHtcbiAgICBnZXR0ZXIuZnJvbUF0dHJpYnV0ZXMgPSBnZXQ7XG4gICAgZ2V0dGVyLmZyb21HcmFwaCA9IGZ1bmN0aW9uIChncmFwaCwgbm9kZSkge1xuICAgICAgcmV0dXJuIGdldChncmFwaC5nZXROb2RlQXR0cmlidXRlcyhub2RlKSk7XG4gICAgfTtcbiAgICBnZXR0ZXIuZnJvbUVudHJ5ID0gZnVuY3Rpb24gKG5vZGUsIGF0dHJpYnV0ZXMpIHtcbiAgICAgIHJldHVybiBnZXQoYXR0cmlidXRlcyk7XG4gICAgfTtcbiAgfSBlbHNlIGlmICh0eXBlb2YgbmFtZU9yRnVuY3Rpb24gPT09ICdmdW5jdGlvbicpIHtcbiAgICBnZXR0ZXIuZnJvbUF0dHJpYnV0ZXMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICdncmFwaG9sb2d5LXV0aWxzL2dldHRlcnMvY3JlYXRlTm9kZVZhbHVlR2V0dGVyOiBpcnJlbGV2YW50IHVzYWdlLidcbiAgICAgICk7XG4gICAgfTtcbiAgICBnZXR0ZXIuZnJvbUdyYXBoID0gZnVuY3Rpb24gKGdyYXBoLCBub2RlKSB7XG4gICAgICByZXR1cm4gY29lcmNlVG9EZWZhdWx0KFxuICAgICAgICBuYW1lT3JGdW5jdGlvbihub2RlLCBncmFwaC5nZXROb2RlQXR0cmlidXRlcyhub2RlKSlcbiAgICAgICk7XG4gICAgfTtcbiAgICBnZXR0ZXIuZnJvbUVudHJ5ID0gZnVuY3Rpb24gKG5vZGUsIGF0dHJpYnV0ZXMpIHtcbiAgICAgIHJldHVybiBjb2VyY2VUb0RlZmF1bHQobmFtZU9yRnVuY3Rpb24obm9kZSwgYXR0cmlidXRlcykpO1xuICAgIH07XG4gIH0gZWxzZSB7XG4gICAgZ2V0dGVyLmZyb21BdHRyaWJ1dGVzID0gcmV0dXJuRGVmYXVsdDtcbiAgICBnZXR0ZXIuZnJvbUdyYXBoID0gcmV0dXJuRGVmYXVsdDtcbiAgICBnZXR0ZXIuZnJvbUVudHJ5ID0gcmV0dXJuRGVmYXVsdDtcbiAgfVxuXG4gIHJldHVybiBnZXR0ZXI7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUVkZ2VWYWx1ZUdldHRlcihuYW1lT3JGdW5jdGlvbiwgZGVmYXVsdFZhbHVlKSB7XG4gIHZhciBnZXR0ZXIgPSB7fTtcblxuICB2YXIgY29lcmNlVG9EZWZhdWx0ID0gZnVuY3Rpb24gKHYpIHtcbiAgICBpZiAodHlwZW9mIHYgPT09ICd1bmRlZmluZWQnKSByZXR1cm4gZGVmYXVsdFZhbHVlO1xuXG4gICAgcmV0dXJuIHY7XG4gIH07XG5cbiAgaWYgKHR5cGVvZiBkZWZhdWx0VmFsdWUgPT09ICdmdW5jdGlvbicpIGNvZXJjZVRvRGVmYXVsdCA9IGRlZmF1bHRWYWx1ZTtcblxuICB2YXIgZ2V0ID0gZnVuY3Rpb24gKGF0dHJpYnV0ZXMpIHtcbiAgICByZXR1cm4gY29lcmNlVG9EZWZhdWx0KGF0dHJpYnV0ZXNbbmFtZU9yRnVuY3Rpb25dKTtcbiAgfTtcblxuICB2YXIgcmV0dXJuRGVmYXVsdCA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gY29lcmNlVG9EZWZhdWx0KHVuZGVmaW5lZCk7XG4gIH07XG5cbiAgaWYgKHR5cGVvZiBuYW1lT3JGdW5jdGlvbiA9PT0gJ3N0cmluZycpIHtcbiAgICBnZXR0ZXIuZnJvbUF0dHJpYnV0ZXMgPSBnZXQ7XG4gICAgZ2V0dGVyLmZyb21HcmFwaCA9IGZ1bmN0aW9uIChncmFwaCwgZWRnZSkge1xuICAgICAgcmV0dXJuIGdldChncmFwaC5nZXRFZGdlQXR0cmlidXRlcyhlZGdlKSk7XG4gICAgfTtcbiAgICBnZXR0ZXIuZnJvbUVudHJ5ID0gZnVuY3Rpb24gKGVkZ2UsIGF0dHJpYnV0ZXMpIHtcbiAgICAgIHJldHVybiBnZXQoYXR0cmlidXRlcyk7XG4gICAgfTtcbiAgICBnZXR0ZXIuZnJvbVBhcnRpYWxFbnRyeSA9IGdldHRlci5mcm9tRW50cnk7XG4gICAgZ2V0dGVyLmZyb21NaW5pbWFsRW50cnkgPSBnZXR0ZXIuZnJvbUVudHJ5O1xuICB9IGVsc2UgaWYgKHR5cGVvZiBuYW1lT3JGdW5jdGlvbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGdldHRlci5mcm9tQXR0cmlidXRlcyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgJ2dyYXBob2xvZ3ktdXRpbHMvZ2V0dGVycy9jcmVhdGVFZGdlVmFsdWVHZXR0ZXI6IGlycmVsZXZhbnQgdXNhZ2UuJ1xuICAgICAgKTtcbiAgICB9O1xuICAgIGdldHRlci5mcm9tR3JhcGggPSBmdW5jdGlvbiAoZ3JhcGgsIGVkZ2UpIHtcbiAgICAgIC8vIFRPRE86IHdlIGNhbiBkbyBiZXR0ZXIsIGNoZWNrICMzMTBcbiAgICAgIHZhciBleHRyZW1pdGllcyA9IGdyYXBoLmV4dHJlbWl0aWVzKGVkZ2UpO1xuICAgICAgcmV0dXJuIGNvZXJjZVRvRGVmYXVsdChcbiAgICAgICAgbmFtZU9yRnVuY3Rpb24oXG4gICAgICAgICAgZWRnZSxcbiAgICAgICAgICBncmFwaC5nZXRFZGdlQXR0cmlidXRlcyhlZGdlKSxcbiAgICAgICAgICBleHRyZW1pdGllc1swXSxcbiAgICAgICAgICBleHRyZW1pdGllc1sxXSxcbiAgICAgICAgICBncmFwaC5nZXROb2RlQXR0cmlidXRlcyhleHRyZW1pdGllc1swXSksXG4gICAgICAgICAgZ3JhcGguZ2V0Tm9kZUF0dHJpYnV0ZXMoZXh0cmVtaXRpZXNbMV0pLFxuICAgICAgICAgIGdyYXBoLmlzVW5kaXJlY3RlZChlZGdlKVxuICAgICAgICApXG4gICAgICApO1xuICAgIH07XG4gICAgZ2V0dGVyLmZyb21FbnRyeSA9IGZ1bmN0aW9uIChlLCBhLCBzLCB0LCBzYSwgdGEsIHUpIHtcbiAgICAgIHJldHVybiBjb2VyY2VUb0RlZmF1bHQobmFtZU9yRnVuY3Rpb24oZSwgYSwgcywgdCwgc2EsIHRhLCB1KSk7XG4gICAgfTtcbiAgICBnZXR0ZXIuZnJvbVBhcnRpYWxFbnRyeSA9IGZ1bmN0aW9uIChlLCBhLCBzLCB0KSB7XG4gICAgICByZXR1cm4gY29lcmNlVG9EZWZhdWx0KG5hbWVPckZ1bmN0aW9uKGUsIGEsIHMsIHQpKTtcbiAgICB9O1xuICAgIGdldHRlci5mcm9tTWluaW1hbEVudHJ5ID0gZnVuY3Rpb24gKGUsIGEpIHtcbiAgICAgIHJldHVybiBjb2VyY2VUb0RlZmF1bHQobmFtZU9yRnVuY3Rpb24oZSwgYSkpO1xuICAgIH07XG4gIH0gZWxzZSB7XG4gICAgZ2V0dGVyLmZyb21BdHRyaWJ1dGVzID0gcmV0dXJuRGVmYXVsdDtcbiAgICBnZXR0ZXIuZnJvbUdyYXBoID0gcmV0dXJuRGVmYXVsdDtcbiAgICBnZXR0ZXIuZnJvbUVudHJ5ID0gcmV0dXJuRGVmYXVsdDtcbiAgICBnZXR0ZXIuZnJvbU1pbmltYWxFbnRyeSA9IHJldHVybkRlZmF1bHQ7XG4gIH1cblxuICByZXR1cm4gZ2V0dGVyO1xufVxuXG5leHBvcnRzLmNyZWF0ZU5vZGVWYWx1ZUdldHRlciA9IGNyZWF0ZU5vZGVWYWx1ZUdldHRlcjtcbmV4cG9ydHMuY3JlYXRlRWRnZVZhbHVlR2V0dGVyID0gY3JlYXRlRWRnZVZhbHVlR2V0dGVyO1xuZXhwb3J0cy5jcmVhdGVFZGdlV2VpZ2h0R2V0dGVyID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgcmV0dXJuIGNyZWF0ZUVkZ2VWYWx1ZUdldHRlcihuYW1lLCBjb2VyY2VXZWlnaHQpO1xufTtcbiIsICIvKipcbiAqIEdyYXBob2xvZ3kgTG91dmFpbiBJbmRpY2VzXG4gKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqXG4gKiBVbmRpcmVjdGVkICYgRGlyZWN0ZWQgTG91dmFpbiBJbmRleCBzdHJ1Y3R1cmVzIHVzZWQgdG8gY29tcHV0ZSB0aGUgZmFtb3VzXG4gKiBMb3V2YWluIGNvbW11bml0eSBkZXRlY3Rpb24gYWxnb3JpdGhtLlxuICpcbiAqIE1vc3Qgb2YgdGhlIHJhdGlvbmFsZSBpcyBleHBsYWluZWQgaW4gYGdyYXBob2xvZ3ktbWV0cmljc2AuXG4gKlxuICogTm90ZSB0aGF0IHRoaXMgaW5kZXggc2hhcmVzIGEgbG90IHdpdGggdGhlIGNsYXNzaWMgVW5pb24tRmluZCBkYXRhXG4gKiBzdHJ1Y3R1cmUuIEl0IGFsc28gcmVsaWVzIG9uIGEgdW51c2VkIGlkIHN0YWNrIHRvIG1ha2Ugc3VyZSB3ZSBjYW5cbiAqIGluY3JlYXNlIGFnYWluIHRoZSBudW1iZXIgb2YgY29tbXVuaXRlcyB3aGVuIGlzb2xhdGluZyBub2Rlcy5cbiAqXG4gKiBbQXJ0aWNsZXNdXG4gKiBNLiBFLiBKLiBOZXdtYW4sIFx1MDBBQiBNb2R1bGFyaXR5IGFuZCBjb21tdW5pdHkgc3RydWN0dXJlIGluIG5ldHdvcmtzIFx1MDBCQixcbiAqIFByb2MuIE5hdGwuIEFjYWQuIFNjaS4gVVNBLCB2b2wuIDEwMywgbm8gMjMsIDIwMDYsIHAuIDg1NzdcdTIwMTM4NTgyXG4gKiBodHRwczovL2R4LmRvaS5vcmcvMTAuMTA3MyUyRnBuYXMuMDYwMTYwMjEwM1xuICpcbiAqIE5ld21hbiwgTS4gRS4gSi4gXHUwMEFCIENvbW11bml0eSBkZXRlY3Rpb24gaW4gbmV0d29ya3M6IE1vZHVsYXJpdHkgb3B0aW1pemF0aW9uXG4gKiBhbmQgbWF4aW11bSBsaWtlbGlob29kIGFyZSBlcXVpdmFsZW50IFx1MDBCQi4gUGh5c2ljYWwgUmV2aWV3IEUsIHZvbC4gOTQsIG5vIDUsXG4gKiBub3ZlbWJyZSAyMDE2LCBwLiAwNTIzMTUuIGFyWGl2Lm9yZywgZG9pOjEwLjExMDMvUGh5c1JldkUuOTQuMDUyMzE1LlxuICogaHR0cHM6Ly9hcnhpdi5vcmcvcGRmLzE2MDYuMDIzMTkucGRmXG4gKlxuICogQmxvbmRlbCwgVmluY2VudCBELiwgZXQgYWwuIFx1MDBBQiBGYXN0IHVuZm9sZGluZyBvZiBjb21tdW5pdGllcyBpbiBsYXJnZVxuICogbmV0d29ya3MgXHUwMEJCLiBKb3VybmFsIG9mIFN0YXRpc3RpY2FsIE1lY2hhbmljczogVGhlb3J5IGFuZCBFeHBlcmltZW50LFxuICogdm9sLiAyMDA4LCBubyAxMCwgb2N0b2JyZSAyMDA4LCBwLiBQMTAwMDguIERPSS5vcmcgKENyb3NzcmVmKSxcbiAqIGRvaToxMC4xMDg4LzE3NDItNTQ2OC8yMDA4LzEwL1AxMDAwOC5cbiAqIGh0dHBzOi8vYXJ4aXYub3JnL3BkZi8wODAzLjA0NzYucGRmXG4gKlxuICogTmljb2xhcyBEdWd1ZVx1MDMwMSwgQW50aG9ueSBQZXJlei4gRGlyZWN0ZWQgTG91dmFpbjogbWF4aW1pemluZyBtb2R1bGFyaXR5IGluXG4gKiBkaXJlY3RlZCBuZXR3b3Jrcy4gW1Jlc2VhcmNoIFJlcG9ydF0gVW5pdmVyc2l0ZVx1MDMwMSBkXHUyMDE5T3JsZVx1MDMwMWFucy4gMjAxNS4gaGFsLTAxMjMxNzg0XG4gKiBodHRwczovL2hhbC5hcmNoaXZlcy1vdXZlcnRlcy5mci9oYWwtMDEyMzE3ODRcbiAqXG4gKiBSLiBMYW1iaW90dGUsIEouLUMuIERlbHZlbm5lIGFuZCBNLiBCYXJhaG9uYS4gTGFwbGFjaWFuIER5bmFtaWNzIGFuZFxuICogTXVsdGlzY2FsZSBNb2R1bGFyIFN0cnVjdHVyZSBpbiBOZXR3b3JrcyxcbiAqIGRvaToxMC4xMTA5L1ROU0UuMjAxNS4yMzkxOTk4LlxuICogaHR0cHM6Ly9hcnhpdi5vcmcvYWJzLzA4MTIuMTc3MFxuICpcbiAqIFtMYXRleF06XG4gKlxuICogVW5kaXJlY3RlZCBDYXNlOlxuICogLS0tLS0tLS0tLS0tLS0tLVxuICpcbiAqIFxcRGVsdGEgUT1cXGJpZ2d7W31cXGZyYWN7XFxzdW1ee2N9X3tpbn0tKDJkX3tjfStsKX17Mm19LVxcYmlnZ3sofVxcZnJhY3tcXHN1bV57Y31fe3RvdH0tKGQrbCl9ezJtfVxcYmlnZ3spfV57Mn0rXFxmcmFje1xcc3VtXnt0fV97aW59KygyZF97dH0rbCl9ezJtfS1cXGJpZ2d7KH1cXGZyYWN7XFxzdW1ee3R9X3t0b3R9KyhkK2wpfXsybX1cXGJpZ2d7KX1eezJ9XFxiaWdne119LVxcYmlnZ3tbfVxcZnJhY3tcXHN1bV57Y31fe2lufX17Mm19LVxcYmlnZ3sofVxcZnJhY3tcXHN1bV57Y31fe3RvdH19ezJtfVxcYmlnZ3spfV57Mn0rXFxmcmFje1xcc3VtXnt0fV97aW59fXsybX0tXFxiaWdneyh9XFxmcmFje1xcc3VtXnt0fV97dG90fX17Mm19XFxiaWdneyl9XnsyfVxcYmlnZ3tdfVxuICogXFxEZWx0YSBRPVxcZnJhY3tkX3t0fS1kX3tjfX17bX0rXFxmcmFje2xcXHN1bV57Y31fe3RvdH0rZFxcc3VtXntjfV97dG90fS1kXnsyfS1sXnsyfS0yZGwtbFxcc3VtXnt0fV97dG90fS1kXFxzdW1ee3R9X3t0b3R9fXsybV57Mn19XG4gKiBcXERlbHRhIFE9XFxmcmFje2Rfe3R9LWRfe2N9fXttfStcXGZyYWN7KGwrZClcXHN1bV57Y31fe3RvdH0tZF57Mn0tbF57Mn0tMmRsLShsK2QpXFxzdW1ee3R9X3t0b3R9fXsybV57Mn19XG4gKlxuICogRGlyZWN0ZWQgQ2FzZTpcbiAqIC0tLS0tLS0tLS0tLS0tXG4gKiBcXERlbHRhIFFfZD1cXGJpZ2d7W31cXGZyYWN7XFxzdW1ee2N9X3tpbn0tKGRfe2MuaW59K2Rfe2Mub3V0fStsKX17bX0tXFxmcmFjeyhcXHN1bV57Y31fe3RvdC5pbn0tKGRfe2lufStsKSkoXFxzdW1ee2N9X3t0b3Qub3V0fS0oZF97b3V0fStsKSl9e21eezJ9fStcXGZyYWN7XFxzdW1ee3R9X3tpbn0rKGRfe3QuaW59K2Rfe3Qub3V0fStsKX17bX0tXFxmcmFjeyhcXHN1bV57dH1fe3RvdC5pbn0rKGRfe2lufStsKSkoXFxzdW1ee3R9X3t0b3Qub3V0fSsoZF97b3V0fStsKSl9e21eezJ9fVxcYmlnZ3tdfS1cXGJpZ2d7W31cXGZyYWN7XFxzdW1ee2N9X3tpbn19e219LVxcZnJhY3tcXHN1bV57Y31fe3RvdC5pbn1cXHN1bV57Y31fe3RvdC5vdXR9fXttXnsyfX0rXFxmcmFje1xcc3VtXnt0fV97aW59fXttfS1cXGZyYWN7XFxzdW1ee3R9X3t0b3QuaW59XFxzdW1ee3R9X3t0b3Qub3V0fX17bV57Mn19XFxiaWdne119XG4gKlxuICogW05vdGVzXTpcbiAqIExvdXZhaW4gaXMgYSBiaXQgdW5jbGVhciBvbiB0aGlzIGJ1dCBkZWx0YSBjb21wdXRhdGlvbiBhcmUgbm90IGRlcml2ZWQgZnJvbVxuICogUTEgLSBRMiBidXQgcmF0aGVyIGJldHdlZW4gUSB3aGVuIGNvbnNpZGVyZWQgbm9kZSBpcyBpc29sYXRlZCBpbiBpdHMgb3duXG4gKiBjb21tdW5pdHkgdmVyc3VzIFEgd2l0aCB0aGlzIG5vZGUgaW4gdGFyZ2V0IGNvbW11bml0eS4gVGhpcyBpcyBpbiBmYWN0XG4gKiBhbiBvcHRpbWl6YXRpb24gYmVjYXVzZSB0aGUgc3VidHJhY3QgcGFydCBpcyBjb25zdGFudCBpbiB0aGUgZm9ybXVsYWUgYW5kXG4gKiBkb2VzIG5vdCBhZmZlY3QgZGVsdGEgY29tcGFyaXNvbnMuXG4gKi9cbnZhciB0eXBlZCA9IHJlcXVpcmUoJ21uZW1vbmlzdC91dGlscy90eXBlZC1hcnJheXMnKTtcbnZhciByZXNvbHZlRGVmYXVsdHMgPSByZXF1aXJlKCdncmFwaG9sb2d5LXV0aWxzL2RlZmF1bHRzJyk7XG52YXIgY3JlYXRlRWRnZVdlaWdodEdldHRlciA9XG4gIHJlcXVpcmUoJ2dyYXBob2xvZ3ktdXRpbHMvZ2V0dGVycycpLmNyZWF0ZUVkZ2VXZWlnaHRHZXR0ZXI7XG5cbnZhciBJTlNQRUNUID0gU3ltYm9sLmZvcignbm9kZWpzLnV0aWwuaW5zcGVjdC5jdXN0b20nKTtcblxudmFyIERFRkFVTFRTID0ge1xuICBnZXRFZGdlV2VpZ2h0OiAnd2VpZ2h0JyxcbiAga2VlcERlbmRyb2dyYW06IGZhbHNlLFxuICByZXNvbHV0aW9uOiAxXG59O1xuXG5mdW5jdGlvbiBVbmRpcmVjdGVkTG91dmFpbkluZGV4KGdyYXBoLCBvcHRpb25zKSB7XG4gIC8vIFNvbHZpbmcgb3B0aW9uc1xuICBvcHRpb25zID0gcmVzb2x2ZURlZmF1bHRzKG9wdGlvbnMsIERFRkFVTFRTKTtcblxuICB2YXIgcmVzb2x1dGlvbiA9IG9wdGlvbnMucmVzb2x1dGlvbjtcblxuICAvLyBXZWlnaHQgZ2V0dGVyc1xuICB2YXIgZ2V0RWRnZVdlaWdodCA9IGNyZWF0ZUVkZ2VXZWlnaHRHZXR0ZXIob3B0aW9ucy5nZXRFZGdlV2VpZ2h0KS5mcm9tRW50cnk7XG5cbiAgLy8gQnVpbGRpbmcgdGhlIGluZGV4XG4gIHZhciBzaXplID0gKGdyYXBoLnNpemUgLSBncmFwaC5zZWxmTG9vcENvdW50KSAqIDI7XG5cbiAgdmFyIE5laWdoYm9yaG9vZFBvaW50ZXJBcnJheSA9IHR5cGVkLmdldFBvaW50ZXJBcnJheShzaXplKTtcbiAgdmFyIE5vZGVzUG9pbnRlckFycmF5ID0gdHlwZWQuZ2V0UG9pbnRlckFycmF5KGdyYXBoLm9yZGVyICsgMSk7XG5cbiAgLy8gTk9URTogdGhpcyBtZW1vcnkgb3B0aW1pemF0aW9uIGNhbiB5aWVsZCBvdmVyZmxvdyBkZW9wdCB3aGVuIGNvbXB1dGluZyBkZWx0YXNcbiAgdmFyIFdlaWdodHNBcnJheSA9IG9wdGlvbnMuZ2V0RWRnZVdlaWdodFxuICAgID8gRmxvYXQ2NEFycmF5XG4gICAgOiB0eXBlZC5nZXRQb2ludGVyQXJyYXkoZ3JhcGguc2l6ZSAqIDIpO1xuXG4gIC8vIFByb3BlcnRpZXNcbiAgdGhpcy5DID0gZ3JhcGgub3JkZXI7XG4gIHRoaXMuTSA9IDA7XG4gIHRoaXMuRSA9IHNpemU7XG4gIHRoaXMuVSA9IDA7XG4gIHRoaXMucmVzb2x1dGlvbiA9IHJlc29sdXRpb247XG4gIHRoaXMubGV2ZWwgPSAwO1xuICB0aGlzLmdyYXBoID0gZ3JhcGg7XG4gIHRoaXMubm9kZXMgPSBuZXcgQXJyYXkoZ3JhcGgub3JkZXIpO1xuICB0aGlzLmtlZXBEZW5kcm9ncmFtID0gb3B0aW9ucy5rZWVwRGVuZHJvZ3JhbTtcblxuICAvLyBFZGdlLWxldmVsXG4gIHRoaXMubmVpZ2hib3Job29kID0gbmV3IE5vZGVzUG9pbnRlckFycmF5KHNpemUpO1xuICB0aGlzLndlaWdodHMgPSBuZXcgV2VpZ2h0c0FycmF5KHNpemUpO1xuXG4gIC8vIE5vZGUtbGV2ZWxcbiAgdGhpcy5sb29wcyA9IG5ldyBXZWlnaHRzQXJyYXkoZ3JhcGgub3JkZXIpO1xuICB0aGlzLnN0YXJ0cyA9IG5ldyBOZWlnaGJvcmhvb2RQb2ludGVyQXJyYXkoZ3JhcGgub3JkZXIgKyAxKTtcbiAgdGhpcy5iZWxvbmdpbmdzID0gbmV3IE5vZGVzUG9pbnRlckFycmF5KGdyYXBoLm9yZGVyKTtcbiAgdGhpcy5kZW5kcm9ncmFtID0gW107XG4gIHRoaXMubWFwcGluZyA9IG51bGw7XG5cbiAgLy8gQ29tbXVuaXR5LWxldmVsXG4gIHRoaXMuY291bnRzID0gbmV3IE5vZGVzUG9pbnRlckFycmF5KGdyYXBoLm9yZGVyKTtcbiAgdGhpcy51bnVzZWQgPSBuZXcgTm9kZXNQb2ludGVyQXJyYXkoZ3JhcGgub3JkZXIpO1xuICB0aGlzLnRvdGFsV2VpZ2h0cyA9IG5ldyBXZWlnaHRzQXJyYXkoZ3JhcGgub3JkZXIpO1xuXG4gIHZhciBpZHMgPSB7fTtcblxuICB2YXIgd2VpZ2h0O1xuXG4gIHZhciBpID0gMCxcbiAgICBuID0gMDtcblxuICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgZ3JhcGguZm9yRWFjaE5vZGUoZnVuY3Rpb24gKG5vZGUpIHtcbiAgICBzZWxmLm5vZGVzW2ldID0gbm9kZTtcblxuICAgIC8vIE5vZGUgbWFwIHRvIGluZGV4XG4gICAgaWRzW25vZGVdID0gaTtcblxuICAgIC8vIEluaXRpYWxpemluZyBzdGFydHNcbiAgICBuICs9IGdyYXBoLnVuZGlyZWN0ZWREZWdyZWVXaXRob3V0U2VsZkxvb3BzKG5vZGUpO1xuICAgIHNlbGYuc3RhcnRzW2ldID0gbjtcblxuICAgIC8vIEJlbG9uZ2luZ3NcbiAgICBzZWxmLmJlbG9uZ2luZ3NbaV0gPSBpO1xuICAgIHNlbGYuY291bnRzW2ldID0gMTtcbiAgICBpKys7XG4gIH0pO1xuXG4gIC8vIFNpbmdsZSBzd2VlcCBvdmVyIHRoZSBlZGdlc1xuICBncmFwaC5mb3JFYWNoRWRnZShmdW5jdGlvbiAoZWRnZSwgYXR0ciwgc291cmNlLCB0YXJnZXQsIHNhLCB0YSwgdSkge1xuICAgIHdlaWdodCA9IGdldEVkZ2VXZWlnaHQoZWRnZSwgYXR0ciwgc291cmNlLCB0YXJnZXQsIHNhLCB0YSwgdSk7XG5cbiAgICBzb3VyY2UgPSBpZHNbc291cmNlXTtcbiAgICB0YXJnZXQgPSBpZHNbdGFyZ2V0XTtcblxuICAgIHNlbGYuTSArPSB3ZWlnaHQ7XG5cbiAgICAvLyBTZWxmIGxvb3A/XG4gICAgaWYgKHNvdXJjZSA9PT0gdGFyZ2V0KSB7XG4gICAgICBzZWxmLnRvdGFsV2VpZ2h0c1tzb3VyY2VdICs9IHdlaWdodCAqIDI7XG4gICAgICBzZWxmLmxvb3BzW3NvdXJjZV0gPSB3ZWlnaHQgKiAyO1xuICAgIH0gZWxzZSB7XG4gICAgICBzZWxmLnRvdGFsV2VpZ2h0c1tzb3VyY2VdICs9IHdlaWdodDtcbiAgICAgIHNlbGYudG90YWxXZWlnaHRzW3RhcmdldF0gKz0gd2VpZ2h0O1xuXG4gICAgICB2YXIgc3RhcnRTb3VyY2UgPSAtLXNlbGYuc3RhcnRzW3NvdXJjZV0sXG4gICAgICAgIHN0YXJ0VGFyZ2V0ID0gLS1zZWxmLnN0YXJ0c1t0YXJnZXRdO1xuXG4gICAgICBzZWxmLm5laWdoYm9yaG9vZFtzdGFydFNvdXJjZV0gPSB0YXJnZXQ7XG4gICAgICBzZWxmLm5laWdoYm9yaG9vZFtzdGFydFRhcmdldF0gPSBzb3VyY2U7XG5cbiAgICAgIHNlbGYud2VpZ2h0c1tzdGFydFNvdXJjZV0gPSB3ZWlnaHQ7XG4gICAgICBzZWxmLndlaWdodHNbc3RhcnRUYXJnZXRdID0gd2VpZ2h0O1xuICAgIH1cbiAgfSk7XG5cbiAgdGhpcy5zdGFydHNbaV0gPSB0aGlzLkU7XG5cbiAgaWYgKHRoaXMua2VlcERlbmRyb2dyYW0pIHRoaXMuZGVuZHJvZ3JhbS5wdXNoKHRoaXMuYmVsb25naW5ncy5zbGljZSgpKTtcbiAgZWxzZSB0aGlzLm1hcHBpbmcgPSB0aGlzLmJlbG9uZ2luZ3Muc2xpY2UoKTtcbn1cblxuVW5kaXJlY3RlZExvdXZhaW5JbmRleC5wcm90b3R5cGUuaXNvbGF0ZSA9IGZ1bmN0aW9uIChpLCBkZWdyZWUpIHtcbiAgdmFyIGN1cnJlbnRDb21tdW5pdHkgPSB0aGlzLmJlbG9uZ2luZ3NbaV07XG5cbiAgLy8gVGhlIG5vZGUgaXMgYWxyZWFkeSBpc29sYXRlZFxuICBpZiAodGhpcy5jb3VudHNbY3VycmVudENvbW11bml0eV0gPT09IDEpIHJldHVybiBjdXJyZW50Q29tbXVuaXR5O1xuXG4gIHZhciBuZXdDb21tdW5pdHkgPSB0aGlzLnVudXNlZFstLXRoaXMuVV07XG5cbiAgdmFyIGxvb3BzID0gdGhpcy5sb29wc1tpXTtcblxuICB0aGlzLnRvdGFsV2VpZ2h0c1tjdXJyZW50Q29tbXVuaXR5XSAtPSBkZWdyZWUgKyBsb29wcztcbiAgdGhpcy50b3RhbFdlaWdodHNbbmV3Q29tbXVuaXR5XSArPSBkZWdyZWUgKyBsb29wcztcblxuICB0aGlzLmJlbG9uZ2luZ3NbaV0gPSBuZXdDb21tdW5pdHk7XG5cbiAgdGhpcy5jb3VudHNbY3VycmVudENvbW11bml0eV0tLTtcbiAgdGhpcy5jb3VudHNbbmV3Q29tbXVuaXR5XSsrO1xuXG4gIHJldHVybiBuZXdDb21tdW5pdHk7XG59O1xuXG5VbmRpcmVjdGVkTG91dmFpbkluZGV4LnByb3RvdHlwZS5tb3ZlID0gZnVuY3Rpb24gKGksIGRlZ3JlZSwgdGFyZ2V0Q29tbXVuaXR5KSB7XG4gIHZhciBjdXJyZW50Q29tbXVuaXR5ID0gdGhpcy5iZWxvbmdpbmdzW2ldLFxuICAgIGxvb3BzID0gdGhpcy5sb29wc1tpXTtcblxuICB0aGlzLnRvdGFsV2VpZ2h0c1tjdXJyZW50Q29tbXVuaXR5XSAtPSBkZWdyZWUgKyBsb29wcztcbiAgdGhpcy50b3RhbFdlaWdodHNbdGFyZ2V0Q29tbXVuaXR5XSArPSBkZWdyZWUgKyBsb29wcztcblxuICB0aGlzLmJlbG9uZ2luZ3NbaV0gPSB0YXJnZXRDb21tdW5pdHk7XG5cbiAgdmFyIG5vd0VtcHR5ID0gdGhpcy5jb3VudHNbY3VycmVudENvbW11bml0eV0tLSA9PT0gMTtcbiAgdGhpcy5jb3VudHNbdGFyZ2V0Q29tbXVuaXR5XSsrO1xuXG4gIGlmIChub3dFbXB0eSkgdGhpcy51bnVzZWRbdGhpcy5VKytdID0gY3VycmVudENvbW11bml0eTtcbn07XG5cblVuZGlyZWN0ZWRMb3V2YWluSW5kZXgucHJvdG90eXBlLmNvbXB1dGVOb2RlRGVncmVlID0gZnVuY3Rpb24gKGkpIHtcbiAgdmFyIG8sIGwsIHdlaWdodDtcblxuICB2YXIgZGVncmVlID0gMDtcblxuICBmb3IgKG8gPSB0aGlzLnN0YXJ0c1tpXSwgbCA9IHRoaXMuc3RhcnRzW2kgKyAxXTsgbyA8IGw7IG8rKykge1xuICAgIHdlaWdodCA9IHRoaXMud2VpZ2h0c1tvXTtcblxuICAgIGRlZ3JlZSArPSB3ZWlnaHQ7XG4gIH1cblxuICByZXR1cm4gZGVncmVlO1xufTtcblxuVW5kaXJlY3RlZExvdXZhaW5JbmRleC5wcm90b3R5cGUuZXhwZW5zaXZlSXNvbGF0ZSA9IGZ1bmN0aW9uIChpKSB7XG4gIHZhciBkZWdyZWUgPSB0aGlzLmNvbXB1dGVOb2RlRGVncmVlKGkpO1xuICByZXR1cm4gdGhpcy5pc29sYXRlKGksIGRlZ3JlZSk7XG59O1xuXG5VbmRpcmVjdGVkTG91dmFpbkluZGV4LnByb3RvdHlwZS5leHBlbnNpdmVNb3ZlID0gZnVuY3Rpb24gKGksIGNpKSB7XG4gIHZhciBkZWdyZWUgPSB0aGlzLmNvbXB1dGVOb2RlRGVncmVlKGkpO1xuICB0aGlzLm1vdmUoaSwgZGVncmVlLCBjaSk7XG59O1xuXG5VbmRpcmVjdGVkTG91dmFpbkluZGV4LnByb3RvdHlwZS56b29tT3V0ID0gZnVuY3Rpb24gKCkge1xuICB2YXIgaW5kdWNlZEdyYXBoID0gbmV3IEFycmF5KHRoaXMuQyAtIHRoaXMuVSksXG4gICAgbmV3TGFiZWxzID0ge307XG5cbiAgdmFyIE4gPSB0aGlzLm5vZGVzLmxlbmd0aDtcblxuICB2YXIgQyA9IDAsXG4gICAgRSA9IDA7XG5cbiAgdmFyIGksIGosIGwsIG0sIG4sIGNpLCBjaiwgZGF0YSwgYWRqO1xuXG4gIC8vIFJlbnVtYmVyaW5nIGNvbW11bml0aWVzXG4gIGZvciAoaSA9IDAsIGwgPSB0aGlzLkM7IGkgPCBsOyBpKyspIHtcbiAgICBjaSA9IHRoaXMuYmVsb25naW5nc1tpXTtcblxuICAgIGlmICghKGNpIGluIG5ld0xhYmVscykpIHtcbiAgICAgIG5ld0xhYmVsc1tjaV0gPSBDO1xuICAgICAgaW5kdWNlZEdyYXBoW0NdID0ge1xuICAgICAgICBhZGo6IHt9LFxuICAgICAgICB0b3RhbFdlaWdodHM6IHRoaXMudG90YWxXZWlnaHRzW2NpXSxcbiAgICAgICAgaW50ZXJuYWxXZWlnaHRzOiAwXG4gICAgICB9O1xuICAgICAgQysrO1xuICAgIH1cblxuICAgIC8vIFdlIGRvIHRoaXMgdG8gb3RwaW1pemUgdGhlIG51bWJlciBvZiBsb29rdXBzIGluIG5leHQgbG9vcFxuICAgIHRoaXMuYmVsb25naW5nc1tpXSA9IG5ld0xhYmVsc1tjaV07XG4gIH1cblxuICAvLyBBY3R1YWxpemluZyBkZW5kcm9ncmFtXG4gIHZhciBjdXJyZW50TGV2ZWwsIG5leHRMZXZlbDtcblxuICBpZiAodGhpcy5rZWVwRGVuZHJvZ3JhbSkge1xuICAgIGN1cnJlbnRMZXZlbCA9IHRoaXMuZGVuZHJvZ3JhbVt0aGlzLmxldmVsXTtcbiAgICBuZXh0TGV2ZWwgPSBuZXcgKHR5cGVkLmdldFBvaW50ZXJBcnJheShDKSkoTik7XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgTjsgaSsrKSBuZXh0TGV2ZWxbaV0gPSB0aGlzLmJlbG9uZ2luZ3NbY3VycmVudExldmVsW2ldXTtcblxuICAgIHRoaXMuZGVuZHJvZ3JhbS5wdXNoKG5leHRMZXZlbCk7XG4gIH0gZWxzZSB7XG4gICAgZm9yIChpID0gMDsgaSA8IE47IGkrKykgdGhpcy5tYXBwaW5nW2ldID0gdGhpcy5iZWxvbmdpbmdzW3RoaXMubWFwcGluZ1tpXV07XG4gIH1cblxuICAvLyBCdWlsZGluZyBpbmR1Y2VkIGdyYXBoIG1hdHJpeFxuICBmb3IgKGkgPSAwLCBsID0gdGhpcy5DOyBpIDwgbDsgaSsrKSB7XG4gICAgY2kgPSB0aGlzLmJlbG9uZ2luZ3NbaV07XG5cbiAgICBkYXRhID0gaW5kdWNlZEdyYXBoW2NpXTtcbiAgICBhZGogPSBkYXRhLmFkajtcbiAgICBkYXRhLmludGVybmFsV2VpZ2h0cyArPSB0aGlzLmxvb3BzW2ldO1xuXG4gICAgZm9yIChqID0gdGhpcy5zdGFydHNbaV0sIG0gPSB0aGlzLnN0YXJ0c1tpICsgMV07IGogPCBtOyBqKyspIHtcbiAgICAgIG4gPSB0aGlzLm5laWdoYm9yaG9vZFtqXTtcbiAgICAgIGNqID0gdGhpcy5iZWxvbmdpbmdzW25dO1xuXG4gICAgICBpZiAoY2kgPT09IGNqKSB7XG4gICAgICAgIGRhdGEuaW50ZXJuYWxXZWlnaHRzICs9IHRoaXMud2VpZ2h0c1tqXTtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIGlmICghKGNqIGluIGFkaikpIGFkaltjal0gPSAwO1xuXG4gICAgICBhZGpbY2pdICs9IHRoaXMud2VpZ2h0c1tqXTtcbiAgICB9XG4gIH1cblxuICAvLyBSZXdyaXRpbmcgbmVpZ2hib3Job29kXG4gIHRoaXMuQyA9IEM7XG5cbiAgbiA9IDA7XG5cbiAgZm9yIChjaSA9IDA7IGNpIDwgQzsgY2krKykge1xuICAgIGRhdGEgPSBpbmR1Y2VkR3JhcGhbY2ldO1xuICAgIGFkaiA9IGRhdGEuYWRqO1xuXG4gICAgY2kgPSArY2k7XG5cbiAgICB0aGlzLnRvdGFsV2VpZ2h0c1tjaV0gPSBkYXRhLnRvdGFsV2VpZ2h0cztcbiAgICB0aGlzLmxvb3BzW2NpXSA9IGRhdGEuaW50ZXJuYWxXZWlnaHRzO1xuICAgIHRoaXMuY291bnRzW2NpXSA9IDE7XG5cbiAgICB0aGlzLnN0YXJ0c1tjaV0gPSBuO1xuICAgIHRoaXMuYmVsb25naW5nc1tjaV0gPSBjaTtcblxuICAgIGZvciAoY2ogaW4gYWRqKSB7XG4gICAgICB0aGlzLm5laWdoYm9yaG9vZFtuXSA9ICtjajtcbiAgICAgIHRoaXMud2VpZ2h0c1tuXSA9IGFkaltjal07XG5cbiAgICAgIEUrKztcbiAgICAgIG4rKztcbiAgICB9XG4gIH1cblxuICB0aGlzLnN0YXJ0c1tDXSA9IEU7XG5cbiAgdGhpcy5FID0gRTtcbiAgdGhpcy5VID0gMDtcbiAgdGhpcy5sZXZlbCsrO1xuXG4gIHJldHVybiBuZXdMYWJlbHM7XG59O1xuXG5VbmRpcmVjdGVkTG91dmFpbkluZGV4LnByb3RvdHlwZS5tb2R1bGFyaXR5ID0gZnVuY3Rpb24gKCkge1xuICB2YXIgY2ksIGNqLCBpLCBqLCBtO1xuXG4gIHZhciBRID0gMDtcbiAgdmFyIE0yID0gdGhpcy5NICogMjtcbiAgdmFyIGludGVybmFsV2VpZ2h0cyA9IG5ldyBGbG9hdDY0QXJyYXkodGhpcy5DKTtcblxuICBmb3IgKGkgPSAwOyBpIDwgdGhpcy5DOyBpKyspIHtcbiAgICBjaSA9IHRoaXMuYmVsb25naW5nc1tpXTtcbiAgICBpbnRlcm5hbFdlaWdodHNbY2ldICs9IHRoaXMubG9vcHNbaV07XG5cbiAgICBmb3IgKGogPSB0aGlzLnN0YXJ0c1tpXSwgbSA9IHRoaXMuc3RhcnRzW2kgKyAxXTsgaiA8IG07IGorKykge1xuICAgICAgY2ogPSB0aGlzLmJlbG9uZ2luZ3NbdGhpcy5uZWlnaGJvcmhvb2Rbal1dO1xuXG4gICAgICBpZiAoY2kgIT09IGNqKSBjb250aW51ZTtcblxuICAgICAgaW50ZXJuYWxXZWlnaHRzW2NpXSArPSB0aGlzLndlaWdodHNbal07XG4gICAgfVxuICB9XG5cbiAgZm9yIChpID0gMDsgaSA8IHRoaXMuQzsgaSsrKSB7XG4gICAgUSArPVxuICAgICAgaW50ZXJuYWxXZWlnaHRzW2ldIC8gTTIgLVxuICAgICAgTWF0aC5wb3codGhpcy50b3RhbFdlaWdodHNbaV0gLyBNMiwgMikgKiB0aGlzLnJlc29sdXRpb247XG4gIH1cblxuICByZXR1cm4gUTtcbn07XG5cblVuZGlyZWN0ZWRMb3V2YWluSW5kZXgucHJvdG90eXBlLmRlbHRhID0gZnVuY3Rpb24gKFxuICBpLFxuICBkZWdyZWUsXG4gIHRhcmdldENvbW11bml0eURlZ3JlZSxcbiAgdGFyZ2V0Q29tbXVuaXR5XG4pIHtcbiAgdmFyIE0gPSB0aGlzLk07XG5cbiAgdmFyIHRhcmdldENvbW11bml0eVRvdGFsV2VpZ2h0ID0gdGhpcy50b3RhbFdlaWdodHNbdGFyZ2V0Q29tbXVuaXR5XTtcblxuICBkZWdyZWUgKz0gdGhpcy5sb29wc1tpXTtcblxuICByZXR1cm4gKFxuICAgIHRhcmdldENvbW11bml0eURlZ3JlZSAvIE0gLSAvLyBOT1RFOiBmb3JtdWxhIGlzIGEgYml0IGRpZmZlcmVudCBoZXJlIGJlY2F1c2UgdGFyZ2V0Q29tbXVuaXR5RGVncmVlIGlzIHBhc3NlZCB3aXRob3V0ICogMlxuICAgICh0YXJnZXRDb21tdW5pdHlUb3RhbFdlaWdodCAqIGRlZ3JlZSAqIHRoaXMucmVzb2x1dGlvbikgLyAoMiAqIE0gKiBNKVxuICApO1xufTtcblxuVW5kaXJlY3RlZExvdXZhaW5JbmRleC5wcm90b3R5cGUuZGVsdGFXaXRoT3duQ29tbXVuaXR5ID0gZnVuY3Rpb24gKFxuICBpLFxuICBkZWdyZWUsXG4gIHRhcmdldENvbW11bml0eURlZ3JlZSxcbiAgdGFyZ2V0Q29tbXVuaXR5XG4pIHtcbiAgdmFyIE0gPSB0aGlzLk07XG5cbiAgdmFyIHRhcmdldENvbW11bml0eVRvdGFsV2VpZ2h0ID0gdGhpcy50b3RhbFdlaWdodHNbdGFyZ2V0Q29tbXVuaXR5XTtcblxuICBkZWdyZWUgKz0gdGhpcy5sb29wc1tpXTtcblxuICByZXR1cm4gKFxuICAgIHRhcmdldENvbW11bml0eURlZ3JlZSAvIE0gLSAvLyBOT1RFOiBmb3JtdWxhIGlzIGEgYml0IGRpZmZlcmVudCBoZXJlIGJlY2F1c2UgdGFyZ2V0Q29tbXVuaXR5RGVncmVlIGlzIHBhc3NlZCB3aXRob3V0ICogMlxuICAgICgodGFyZ2V0Q29tbXVuaXR5VG90YWxXZWlnaHQgLSBkZWdyZWUpICogZGVncmVlICogdGhpcy5yZXNvbHV0aW9uKSAvXG4gICAgICAoMiAqIE0gKiBNKVxuICApO1xufTtcblxuLy8gTk9URTogdGhpcyBpcyBqdXN0IGEgZmFzdGVyIGJ1dCBlcXVpdmFsZW50IHZlcnNpb24gb2YgIy5kZWx0YVxuLy8gSXQgaXMganVzdCBvZmYgYnkgYSBjb25zdGFudCBmYWN0b3IgYW5kIGlzIGp1c3QgZmFzdGVyIHRvIGNvbXB1dGVcblVuZGlyZWN0ZWRMb3V2YWluSW5kZXgucHJvdG90eXBlLmZhc3REZWx0YSA9IGZ1bmN0aW9uIChcbiAgaSxcbiAgZGVncmVlLFxuICB0YXJnZXRDb21tdW5pdHlEZWdyZWUsXG4gIHRhcmdldENvbW11bml0eVxuKSB7XG4gIHZhciBNID0gdGhpcy5NO1xuXG4gIHZhciB0YXJnZXRDb21tdW5pdHlUb3RhbFdlaWdodCA9IHRoaXMudG90YWxXZWlnaHRzW3RhcmdldENvbW11bml0eV07XG5cbiAgZGVncmVlICs9IHRoaXMubG9vcHNbaV07XG5cbiAgcmV0dXJuIChcbiAgICB0YXJnZXRDb21tdW5pdHlEZWdyZWUgLVxuICAgIChkZWdyZWUgKiB0YXJnZXRDb21tdW5pdHlUb3RhbFdlaWdodCAqIHRoaXMucmVzb2x1dGlvbikgLyAoMiAqIE0pXG4gICk7XG59O1xuXG5VbmRpcmVjdGVkTG91dmFpbkluZGV4LnByb3RvdHlwZS5mYXN0RGVsdGFXaXRoT3duQ29tbXVuaXR5ID0gZnVuY3Rpb24gKFxuICBpLFxuICBkZWdyZWUsXG4gIHRhcmdldENvbW11bml0eURlZ3JlZSxcbiAgdGFyZ2V0Q29tbXVuaXR5XG4pIHtcbiAgdmFyIE0gPSB0aGlzLk07XG5cbiAgdmFyIHRhcmdldENvbW11bml0eVRvdGFsV2VpZ2h0ID0gdGhpcy50b3RhbFdlaWdodHNbdGFyZ2V0Q29tbXVuaXR5XTtcblxuICBkZWdyZWUgKz0gdGhpcy5sb29wc1tpXTtcblxuICByZXR1cm4gKFxuICAgIHRhcmdldENvbW11bml0eURlZ3JlZSAtXG4gICAgKGRlZ3JlZSAqICh0YXJnZXRDb21tdW5pdHlUb3RhbFdlaWdodCAtIGRlZ3JlZSkgKiB0aGlzLnJlc29sdXRpb24pIC8gKDIgKiBNKVxuICApO1xufTtcblxuVW5kaXJlY3RlZExvdXZhaW5JbmRleC5wcm90b3R5cGUuYm91bmRzID0gZnVuY3Rpb24gKGkpIHtcbiAgcmV0dXJuIFt0aGlzLnN0YXJ0c1tpXSwgdGhpcy5zdGFydHNbaSArIDFdXTtcbn07XG5cblVuZGlyZWN0ZWRMb3V2YWluSW5kZXgucHJvdG90eXBlLnByb2plY3QgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBzZWxmID0gdGhpcztcblxuICB2YXIgcHJvamVjdGlvbiA9IHt9O1xuXG4gIHNlbGYubm9kZXMuc2xpY2UoMCwgdGhpcy5DKS5mb3JFYWNoKGZ1bmN0aW9uIChub2RlLCBpKSB7XG4gICAgcHJvamVjdGlvbltub2RlXSA9IEFycmF5LmZyb20oXG4gICAgICBzZWxmLm5laWdoYm9yaG9vZC5zbGljZShzZWxmLnN0YXJ0c1tpXSwgc2VsZi5zdGFydHNbaSArIDFdKVxuICAgICkubWFwKGZ1bmN0aW9uIChqKSB7XG4gICAgICByZXR1cm4gc2VsZi5ub2Rlc1tqXTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgcmV0dXJuIHByb2plY3Rpb247XG59O1xuXG5VbmRpcmVjdGVkTG91dmFpbkluZGV4LnByb3RvdHlwZS5jb2xsZWN0ID0gZnVuY3Rpb24gKGxldmVsKSB7XG4gIGlmIChhcmd1bWVudHMubGVuZ3RoIDwgMSkgbGV2ZWwgPSB0aGlzLmxldmVsO1xuXG4gIHZhciBvID0ge307XG5cbiAgdmFyIG1hcHBpbmcgPSB0aGlzLmtlZXBEZW5kcm9ncmFtID8gdGhpcy5kZW5kcm9ncmFtW2xldmVsXSA6IHRoaXMubWFwcGluZztcblxuICB2YXIgaSwgbDtcblxuICBmb3IgKGkgPSAwLCBsID0gbWFwcGluZy5sZW5ndGg7IGkgPCBsOyBpKyspIG9bdGhpcy5ub2Rlc1tpXV0gPSBtYXBwaW5nW2ldO1xuXG4gIHJldHVybiBvO1xufTtcblxuVW5kaXJlY3RlZExvdXZhaW5JbmRleC5wcm90b3R5cGUuYXNzaWduID0gZnVuY3Rpb24gKHByb3AsIGxldmVsKSB7XG4gIGlmIChhcmd1bWVudHMubGVuZ3RoIDwgMikgbGV2ZWwgPSB0aGlzLmxldmVsO1xuXG4gIHZhciBtYXBwaW5nID0gdGhpcy5rZWVwRGVuZHJvZ3JhbSA/IHRoaXMuZGVuZHJvZ3JhbVtsZXZlbF0gOiB0aGlzLm1hcHBpbmc7XG5cbiAgdmFyIGksIGw7XG5cbiAgZm9yIChpID0gMCwgbCA9IG1hcHBpbmcubGVuZ3RoOyBpIDwgbDsgaSsrKVxuICAgIHRoaXMuZ3JhcGguc2V0Tm9kZUF0dHJpYnV0ZSh0aGlzLm5vZGVzW2ldLCBwcm9wLCBtYXBwaW5nW2ldKTtcbn07XG5cblVuZGlyZWN0ZWRMb3V2YWluSW5kZXgucHJvdG90eXBlW0lOU1BFQ1RdID0gZnVuY3Rpb24gKCkge1xuICB2YXIgcHJveHkgPSB7fTtcblxuICAvLyBUcmljayBzbyB0aGF0IG5vZGUgZGlzcGxheXMgdGhlIG5hbWUgb2YgdGhlIGNvbnN0cnVjdG9yXG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShwcm94eSwgJ2NvbnN0cnVjdG9yJywge1xuICAgIHZhbHVlOiBVbmRpcmVjdGVkTG91dmFpbkluZGV4LFxuICAgIGVudW1lcmFibGU6IGZhbHNlXG4gIH0pO1xuXG4gIHByb3h5LkMgPSB0aGlzLkM7XG4gIHByb3h5Lk0gPSB0aGlzLk07XG4gIHByb3h5LkUgPSB0aGlzLkU7XG4gIHByb3h5LlUgPSB0aGlzLlU7XG4gIHByb3h5LnJlc29sdXRpb24gPSB0aGlzLnJlc29sdXRpb247XG4gIHByb3h5LmxldmVsID0gdGhpcy5sZXZlbDtcbiAgcHJveHkubm9kZXMgPSB0aGlzLm5vZGVzO1xuICBwcm94eS5zdGFydHMgPSB0aGlzLnN0YXJ0cy5zbGljZSgwLCBwcm94eS5DICsgMSk7XG5cbiAgdmFyIGVUcnVuY2F0ZWQgPSBbJ25laWdoYm9yaG9vZCcsICd3ZWlnaHRzJ107XG4gIHZhciBjVHJ1bmNhdGVkID0gWydjb3VudHMnLCAnbG9vcHMnLCAnYmVsb25naW5ncycsICd0b3RhbFdlaWdodHMnXTtcblxuICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgZVRydW5jYXRlZC5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICBwcm94eVtrZXldID0gc2VsZltrZXldLnNsaWNlKDAsIHByb3h5LkUpO1xuICB9KTtcblxuICBjVHJ1bmNhdGVkLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgIHByb3h5W2tleV0gPSBzZWxmW2tleV0uc2xpY2UoMCwgcHJveHkuQyk7XG4gIH0pO1xuXG4gIHByb3h5LnVudXNlZCA9IHRoaXMudW51c2VkLnNsaWNlKDAsIHRoaXMuVSk7XG5cbiAgaWYgKHRoaXMua2VlcERlbmRyb2dyYW0pIHByb3h5LmRlbmRyb2dyYW0gPSB0aGlzLmRlbmRyb2dyYW07XG4gIGVsc2UgcHJveHkubWFwcGluZyA9IHRoaXMubWFwcGluZztcblxuICByZXR1cm4gcHJveHk7XG59O1xuXG5mdW5jdGlvbiBEaXJlY3RlZExvdXZhaW5JbmRleChncmFwaCwgb3B0aW9ucykge1xuICAvLyBTb2x2aW5nIG9wdGlvbnNcbiAgb3B0aW9ucyA9IHJlc29sdmVEZWZhdWx0cyhvcHRpb25zLCBERUZBVUxUUyk7XG5cbiAgdmFyIHJlc29sdXRpb24gPSBvcHRpb25zLnJlc29sdXRpb247XG5cbiAgLy8gV2VpZ2h0IGdldHRlcnNcbiAgdmFyIGdldEVkZ2VXZWlnaHQgPSBjcmVhdGVFZGdlV2VpZ2h0R2V0dGVyKG9wdGlvbnMuZ2V0RWRnZVdlaWdodCkuZnJvbUVudHJ5O1xuXG4gIC8vIEJ1aWxkaW5nIHRoZSBpbmRleFxuICB2YXIgc2l6ZSA9IChncmFwaC5zaXplIC0gZ3JhcGguc2VsZkxvb3BDb3VudCkgKiAyO1xuXG4gIHZhciBOZWlnaGJvcmhvb2RQb2ludGVyQXJyYXkgPSB0eXBlZC5nZXRQb2ludGVyQXJyYXkoc2l6ZSk7XG4gIHZhciBOb2Rlc1BvaW50ZXJBcnJheSA9IHR5cGVkLmdldFBvaW50ZXJBcnJheShncmFwaC5vcmRlciArIDEpO1xuXG4gIC8vIE5PVEU6IHRoaXMgbWVtb3J5IG9wdGltaXphdGlvbiBjYW4geWllbGQgb3ZlcmZsb3cgZGVvcHQgd2hlbiBjb21wdXRpbmcgZGVsdGFzXG4gIHZhciBXZWlnaHRzQXJyYXkgPSBvcHRpb25zLmdldEVkZ2VXZWlnaHRcbiAgICA/IEZsb2F0NjRBcnJheVxuICAgIDogdHlwZWQuZ2V0UG9pbnRlckFycmF5KGdyYXBoLnNpemUgKiAyKTtcblxuICAvLyBQcm9wZXJ0aWVzXG4gIHRoaXMuQyA9IGdyYXBoLm9yZGVyO1xuICB0aGlzLk0gPSAwO1xuICB0aGlzLkUgPSBzaXplO1xuICB0aGlzLlUgPSAwO1xuICB0aGlzLnJlc29sdXRpb24gPSByZXNvbHV0aW9uO1xuICB0aGlzLmxldmVsID0gMDtcbiAgdGhpcy5ncmFwaCA9IGdyYXBoO1xuICB0aGlzLm5vZGVzID0gbmV3IEFycmF5KGdyYXBoLm9yZGVyKTtcbiAgdGhpcy5rZWVwRGVuZHJvZ3JhbSA9IG9wdGlvbnMua2VlcERlbmRyb2dyYW07XG5cbiAgLy8gRWRnZS1sZXZlbFxuICAvLyBOT1RFOiBlZGdlcyBhcmUgc3RvcmVkIG91dCB0aGVuIGluLCBpbiB0aGlzIG9yZGVyXG4gIHRoaXMubmVpZ2hib3Job29kID0gbmV3IE5vZGVzUG9pbnRlckFycmF5KHNpemUpO1xuICB0aGlzLndlaWdodHMgPSBuZXcgV2VpZ2h0c0FycmF5KHNpemUpO1xuXG4gIC8vIE5vZGUtbGV2ZWxcbiAgdGhpcy5sb29wcyA9IG5ldyBXZWlnaHRzQXJyYXkoZ3JhcGgub3JkZXIpO1xuICB0aGlzLnN0YXJ0cyA9IG5ldyBOZWlnaGJvcmhvb2RQb2ludGVyQXJyYXkoZ3JhcGgub3JkZXIgKyAxKTtcbiAgdGhpcy5vZmZzZXRzID0gbmV3IE5laWdoYm9yaG9vZFBvaW50ZXJBcnJheShncmFwaC5vcmRlcik7XG4gIHRoaXMuYmVsb25naW5ncyA9IG5ldyBOb2Rlc1BvaW50ZXJBcnJheShncmFwaC5vcmRlcik7XG4gIHRoaXMuZGVuZHJvZ3JhbSA9IFtdO1xuXG4gIC8vIENvbW11bml0eS1sZXZlbFxuICB0aGlzLmNvdW50cyA9IG5ldyBOb2Rlc1BvaW50ZXJBcnJheShncmFwaC5vcmRlcik7XG4gIHRoaXMudW51c2VkID0gbmV3IE5vZGVzUG9pbnRlckFycmF5KGdyYXBoLm9yZGVyKTtcbiAgdGhpcy50b3RhbEluV2VpZ2h0cyA9IG5ldyBXZWlnaHRzQXJyYXkoZ3JhcGgub3JkZXIpO1xuICB0aGlzLnRvdGFsT3V0V2VpZ2h0cyA9IG5ldyBXZWlnaHRzQXJyYXkoZ3JhcGgub3JkZXIpO1xuXG4gIHZhciBpZHMgPSB7fTtcblxuICB2YXIgd2VpZ2h0O1xuXG4gIHZhciBpID0gMCxcbiAgICBuID0gMDtcblxuICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgZ3JhcGguZm9yRWFjaE5vZGUoZnVuY3Rpb24gKG5vZGUpIHtcbiAgICBzZWxmLm5vZGVzW2ldID0gbm9kZTtcblxuICAgIC8vIE5vZGUgbWFwIHRvIGluZGV4XG4gICAgaWRzW25vZGVdID0gaTtcblxuICAgIC8vIEluaXRpYWxpemluZyBzdGFydHMgJiBvZmZzZXRzXG4gICAgbiArPSBncmFwaC5vdXREZWdyZWVXaXRob3V0U2VsZkxvb3BzKG5vZGUpO1xuICAgIHNlbGYuc3RhcnRzW2ldID0gbjtcblxuICAgIG4gKz0gZ3JhcGguaW5EZWdyZWVXaXRob3V0U2VsZkxvb3BzKG5vZGUpO1xuICAgIHNlbGYub2Zmc2V0c1tpXSA9IG47XG5cbiAgICAvLyBCZWxvbmdpbmdzXG4gICAgc2VsZi5iZWxvbmdpbmdzW2ldID0gaTtcbiAgICBzZWxmLmNvdW50c1tpXSA9IDE7XG4gICAgaSsrO1xuICB9KTtcblxuICAvLyBTaW5nbGUgc3dlZXAgb3ZlciB0aGUgZWRnZXNcbiAgZ3JhcGguZm9yRWFjaEVkZ2UoZnVuY3Rpb24gKGVkZ2UsIGF0dHIsIHNvdXJjZSwgdGFyZ2V0LCBzYSwgdGEsIHUpIHtcbiAgICB3ZWlnaHQgPSBnZXRFZGdlV2VpZ2h0KGVkZ2UsIGF0dHIsIHNvdXJjZSwgdGFyZ2V0LCBzYSwgdGEsIHUpO1xuXG4gICAgc291cmNlID0gaWRzW3NvdXJjZV07XG4gICAgdGFyZ2V0ID0gaWRzW3RhcmdldF07XG5cbiAgICBzZWxmLk0gKz0gd2VpZ2h0O1xuXG4gICAgLy8gU2VsZiBsb29wP1xuICAgIGlmIChzb3VyY2UgPT09IHRhcmdldCkge1xuICAgICAgc2VsZi5sb29wc1tzb3VyY2VdICs9IHdlaWdodDtcbiAgICAgIHNlbGYudG90YWxJbldlaWdodHNbc291cmNlXSArPSB3ZWlnaHQ7XG4gICAgICBzZWxmLnRvdGFsT3V0V2VpZ2h0c1tzb3VyY2VdICs9IHdlaWdodDtcbiAgICB9IGVsc2Uge1xuICAgICAgc2VsZi50b3RhbE91dFdlaWdodHNbc291cmNlXSArPSB3ZWlnaHQ7XG4gICAgICBzZWxmLnRvdGFsSW5XZWlnaHRzW3RhcmdldF0gKz0gd2VpZ2h0O1xuXG4gICAgICB2YXIgc3RhcnRTb3VyY2UgPSAtLXNlbGYuc3RhcnRzW3NvdXJjZV0sXG4gICAgICAgIHN0YXJ0VGFyZ2V0ID0gLS1zZWxmLm9mZnNldHNbdGFyZ2V0XTtcblxuICAgICAgc2VsZi5uZWlnaGJvcmhvb2Rbc3RhcnRTb3VyY2VdID0gdGFyZ2V0O1xuICAgICAgc2VsZi5uZWlnaGJvcmhvb2Rbc3RhcnRUYXJnZXRdID0gc291cmNlO1xuXG4gICAgICBzZWxmLndlaWdodHNbc3RhcnRTb3VyY2VdID0gd2VpZ2h0O1xuICAgICAgc2VsZi53ZWlnaHRzW3N0YXJ0VGFyZ2V0XSA9IHdlaWdodDtcbiAgICB9XG4gIH0pO1xuXG4gIHRoaXMuc3RhcnRzW2ldID0gdGhpcy5FO1xuXG4gIGlmICh0aGlzLmtlZXBEZW5kcm9ncmFtKSB0aGlzLmRlbmRyb2dyYW0ucHVzaCh0aGlzLmJlbG9uZ2luZ3Muc2xpY2UoKSk7XG4gIGVsc2UgdGhpcy5tYXBwaW5nID0gdGhpcy5iZWxvbmdpbmdzLnNsaWNlKCk7XG59XG5cbkRpcmVjdGVkTG91dmFpbkluZGV4LnByb3RvdHlwZS5ib3VuZHMgPSBVbmRpcmVjdGVkTG91dmFpbkluZGV4LnByb3RvdHlwZS5ib3VuZHM7XG5cbkRpcmVjdGVkTG91dmFpbkluZGV4LnByb3RvdHlwZS5pbkJvdW5kcyA9IGZ1bmN0aW9uIChpKSB7XG4gIHJldHVybiBbdGhpcy5vZmZzZXRzW2ldLCB0aGlzLnN0YXJ0c1tpICsgMV1dO1xufTtcblxuRGlyZWN0ZWRMb3V2YWluSW5kZXgucHJvdG90eXBlLm91dEJvdW5kcyA9IGZ1bmN0aW9uIChpKSB7XG4gIHJldHVybiBbdGhpcy5zdGFydHNbaV0sIHRoaXMub2Zmc2V0c1tpXV07XG59O1xuXG5EaXJlY3RlZExvdXZhaW5JbmRleC5wcm90b3R5cGUucHJvamVjdCA9XG4gIFVuZGlyZWN0ZWRMb3V2YWluSW5kZXgucHJvdG90eXBlLnByb2plY3Q7XG5cbkRpcmVjdGVkTG91dmFpbkluZGV4LnByb3RvdHlwZS5wcm9qZWN0SW4gPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBzZWxmID0gdGhpcztcblxuICB2YXIgcHJvamVjdGlvbiA9IHt9O1xuXG4gIHNlbGYubm9kZXMuc2xpY2UoMCwgdGhpcy5DKS5mb3JFYWNoKGZ1bmN0aW9uIChub2RlLCBpKSB7XG4gICAgcHJvamVjdGlvbltub2RlXSA9IEFycmF5LmZyb20oXG4gICAgICBzZWxmLm5laWdoYm9yaG9vZC5zbGljZShzZWxmLm9mZnNldHNbaV0sIHNlbGYuc3RhcnRzW2kgKyAxXSlcbiAgICApLm1hcChmdW5jdGlvbiAoaikge1xuICAgICAgcmV0dXJuIHNlbGYubm9kZXNbal07XG4gICAgfSk7XG4gIH0pO1xuXG4gIHJldHVybiBwcm9qZWN0aW9uO1xufTtcblxuRGlyZWN0ZWRMb3V2YWluSW5kZXgucHJvdG90eXBlLnByb2plY3RPdXQgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBzZWxmID0gdGhpcztcblxuICB2YXIgcHJvamVjdGlvbiA9IHt9O1xuXG4gIHNlbGYubm9kZXMuc2xpY2UoMCwgdGhpcy5DKS5mb3JFYWNoKGZ1bmN0aW9uIChub2RlLCBpKSB7XG4gICAgcHJvamVjdGlvbltub2RlXSA9IEFycmF5LmZyb20oXG4gICAgICBzZWxmLm5laWdoYm9yaG9vZC5zbGljZShzZWxmLnN0YXJ0c1tpXSwgc2VsZi5vZmZzZXRzW2ldKVxuICAgICkubWFwKGZ1bmN0aW9uIChqKSB7XG4gICAgICByZXR1cm4gc2VsZi5ub2Rlc1tqXTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgcmV0dXJuIHByb2plY3Rpb247XG59O1xuXG5EaXJlY3RlZExvdXZhaW5JbmRleC5wcm90b3R5cGUuaXNvbGF0ZSA9IGZ1bmN0aW9uIChpLCBpbkRlZ3JlZSwgb3V0RGVncmVlKSB7XG4gIHZhciBjdXJyZW50Q29tbXVuaXR5ID0gdGhpcy5iZWxvbmdpbmdzW2ldO1xuXG4gIC8vIFRoZSBub2RlIGlzIGFscmVhZHkgaXNvbGF0ZWRcbiAgaWYgKHRoaXMuY291bnRzW2N1cnJlbnRDb21tdW5pdHldID09PSAxKSByZXR1cm4gY3VycmVudENvbW11bml0eTtcblxuICB2YXIgbmV3Q29tbXVuaXR5ID0gdGhpcy51bnVzZWRbLS10aGlzLlVdO1xuXG4gIHZhciBsb29wcyA9IHRoaXMubG9vcHNbaV07XG5cbiAgdGhpcy50b3RhbEluV2VpZ2h0c1tjdXJyZW50Q29tbXVuaXR5XSAtPSBpbkRlZ3JlZSArIGxvb3BzO1xuICB0aGlzLnRvdGFsSW5XZWlnaHRzW25ld0NvbW11bml0eV0gKz0gaW5EZWdyZWUgKyBsb29wcztcblxuICB0aGlzLnRvdGFsT3V0V2VpZ2h0c1tjdXJyZW50Q29tbXVuaXR5XSAtPSBvdXREZWdyZWUgKyBsb29wcztcbiAgdGhpcy50b3RhbE91dFdlaWdodHNbbmV3Q29tbXVuaXR5XSArPSBvdXREZWdyZWUgKyBsb29wcztcblxuICB0aGlzLmJlbG9uZ2luZ3NbaV0gPSBuZXdDb21tdW5pdHk7XG5cbiAgdGhpcy5jb3VudHNbY3VycmVudENvbW11bml0eV0tLTtcbiAgdGhpcy5jb3VudHNbbmV3Q29tbXVuaXR5XSsrO1xuXG4gIHJldHVybiBuZXdDb21tdW5pdHk7XG59O1xuXG5EaXJlY3RlZExvdXZhaW5JbmRleC5wcm90b3R5cGUubW92ZSA9IGZ1bmN0aW9uIChcbiAgaSxcbiAgaW5EZWdyZWUsXG4gIG91dERlZ3JlZSxcbiAgdGFyZ2V0Q29tbXVuaXR5XG4pIHtcbiAgdmFyIGN1cnJlbnRDb21tdW5pdHkgPSB0aGlzLmJlbG9uZ2luZ3NbaV0sXG4gICAgbG9vcHMgPSB0aGlzLmxvb3BzW2ldO1xuXG4gIHRoaXMudG90YWxJbldlaWdodHNbY3VycmVudENvbW11bml0eV0gLT0gaW5EZWdyZWUgKyBsb29wcztcbiAgdGhpcy50b3RhbEluV2VpZ2h0c1t0YXJnZXRDb21tdW5pdHldICs9IGluRGVncmVlICsgbG9vcHM7XG5cbiAgdGhpcy50b3RhbE91dFdlaWdodHNbY3VycmVudENvbW11bml0eV0gLT0gb3V0RGVncmVlICsgbG9vcHM7XG4gIHRoaXMudG90YWxPdXRXZWlnaHRzW3RhcmdldENvbW11bml0eV0gKz0gb3V0RGVncmVlICsgbG9vcHM7XG5cbiAgdGhpcy5iZWxvbmdpbmdzW2ldID0gdGFyZ2V0Q29tbXVuaXR5O1xuXG4gIHZhciBub3dFbXB0eSA9IHRoaXMuY291bnRzW2N1cnJlbnRDb21tdW5pdHldLS0gPT09IDE7XG4gIHRoaXMuY291bnRzW3RhcmdldENvbW11bml0eV0rKztcblxuICBpZiAobm93RW1wdHkpIHRoaXMudW51c2VkW3RoaXMuVSsrXSA9IGN1cnJlbnRDb21tdW5pdHk7XG59O1xuXG5EaXJlY3RlZExvdXZhaW5JbmRleC5wcm90b3R5cGUuY29tcHV0ZU5vZGVJbkRlZ3JlZSA9IGZ1bmN0aW9uIChpKSB7XG4gIHZhciBvLCBsLCB3ZWlnaHQ7XG5cbiAgdmFyIGluRGVncmVlID0gMDtcblxuICBmb3IgKG8gPSB0aGlzLm9mZnNldHNbaV0sIGwgPSB0aGlzLnN0YXJ0c1tpICsgMV07IG8gPCBsOyBvKyspIHtcbiAgICB3ZWlnaHQgPSB0aGlzLndlaWdodHNbb107XG5cbiAgICBpbkRlZ3JlZSArPSB3ZWlnaHQ7XG4gIH1cblxuICByZXR1cm4gaW5EZWdyZWU7XG59O1xuXG5EaXJlY3RlZExvdXZhaW5JbmRleC5wcm90b3R5cGUuY29tcHV0ZU5vZGVPdXREZWdyZWUgPSBmdW5jdGlvbiAoaSkge1xuICB2YXIgbywgbCwgd2VpZ2h0O1xuXG4gIHZhciBvdXREZWdyZWUgPSAwO1xuXG4gIGZvciAobyA9IHRoaXMuc3RhcnRzW2ldLCBsID0gdGhpcy5vZmZzZXRzW2ldOyBvIDwgbDsgbysrKSB7XG4gICAgd2VpZ2h0ID0gdGhpcy53ZWlnaHRzW29dO1xuXG4gICAgb3V0RGVncmVlICs9IHdlaWdodDtcbiAgfVxuXG4gIHJldHVybiBvdXREZWdyZWU7XG59O1xuXG5EaXJlY3RlZExvdXZhaW5JbmRleC5wcm90b3R5cGUuZXhwZW5zaXZlTW92ZSA9IGZ1bmN0aW9uIChpLCBjaSkge1xuICB2YXIgaW5EZWdyZWUgPSB0aGlzLmNvbXB1dGVOb2RlSW5EZWdyZWUoaSksXG4gICAgb3V0RGVncmVlID0gdGhpcy5jb21wdXRlTm9kZU91dERlZ3JlZShpKTtcblxuICB0aGlzLm1vdmUoaSwgaW5EZWdyZWUsIG91dERlZ3JlZSwgY2kpO1xufTtcblxuRGlyZWN0ZWRMb3V2YWluSW5kZXgucHJvdG90eXBlLnpvb21PdXQgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBpbmR1Y2VkR3JhcGggPSBuZXcgQXJyYXkodGhpcy5DIC0gdGhpcy5VKSxcbiAgICBuZXdMYWJlbHMgPSB7fTtcblxuICB2YXIgTiA9IHRoaXMubm9kZXMubGVuZ3RoO1xuXG4gIHZhciBDID0gMCxcbiAgICBFID0gMDtcblxuICB2YXIgaSwgaiwgbCwgbSwgbiwgY2ksIGNqLCBkYXRhLCBvZmZzZXQsIG91dCwgYWRqLCBpbkFkaiwgb3V0QWRqO1xuXG4gIC8vIFJlbnVtYmVyaW5nIGNvbW11bml0aWVzXG4gIGZvciAoaSA9IDAsIGwgPSB0aGlzLkM7IGkgPCBsOyBpKyspIHtcbiAgICBjaSA9IHRoaXMuYmVsb25naW5nc1tpXTtcblxuICAgIGlmICghKGNpIGluIG5ld0xhYmVscykpIHtcbiAgICAgIG5ld0xhYmVsc1tjaV0gPSBDO1xuICAgICAgaW5kdWNlZEdyYXBoW0NdID0ge1xuICAgICAgICBpbkFkajoge30sXG4gICAgICAgIG91dEFkajoge30sXG4gICAgICAgIHRvdGFsSW5XZWlnaHRzOiB0aGlzLnRvdGFsSW5XZWlnaHRzW2NpXSxcbiAgICAgICAgdG90YWxPdXRXZWlnaHRzOiB0aGlzLnRvdGFsT3V0V2VpZ2h0c1tjaV0sXG4gICAgICAgIGludGVybmFsV2VpZ2h0czogMFxuICAgICAgfTtcbiAgICAgIEMrKztcbiAgICB9XG5cbiAgICAvLyBXZSBkbyB0aGlzIHRvIG90cGltaXplIHRoZSBudW1iZXIgb2YgbG9va3VwcyBpbiBuZXh0IGxvb3BcbiAgICB0aGlzLmJlbG9uZ2luZ3NbaV0gPSBuZXdMYWJlbHNbY2ldO1xuICB9XG5cbiAgLy8gQWN0dWFsaXppbmcgZGVuZHJvZ3JhbVxuICB2YXIgY3VycmVudExldmVsLCBuZXh0TGV2ZWw7XG5cbiAgaWYgKHRoaXMua2VlcERlbmRyb2dyYW0pIHtcbiAgICBjdXJyZW50TGV2ZWwgPSB0aGlzLmRlbmRyb2dyYW1bdGhpcy5sZXZlbF07XG4gICAgbmV4dExldmVsID0gbmV3ICh0eXBlZC5nZXRQb2ludGVyQXJyYXkoQykpKE4pO1xuXG4gICAgZm9yIChpID0gMDsgaSA8IE47IGkrKykgbmV4dExldmVsW2ldID0gdGhpcy5iZWxvbmdpbmdzW2N1cnJlbnRMZXZlbFtpXV07XG5cbiAgICB0aGlzLmRlbmRyb2dyYW0ucHVzaChuZXh0TGV2ZWwpO1xuICB9IGVsc2Uge1xuICAgIGZvciAoaSA9IDA7IGkgPCBOOyBpKyspIHRoaXMubWFwcGluZ1tpXSA9IHRoaXMuYmVsb25naW5nc1t0aGlzLm1hcHBpbmdbaV1dO1xuICB9XG5cbiAgLy8gQnVpbGRpbmcgaW5kdWNlZCBncmFwaCBtYXRyaXhcbiAgZm9yIChpID0gMCwgbCA9IHRoaXMuQzsgaSA8IGw7IGkrKykge1xuICAgIGNpID0gdGhpcy5iZWxvbmdpbmdzW2ldO1xuICAgIG9mZnNldCA9IHRoaXMub2Zmc2V0c1tpXTtcblxuICAgIGRhdGEgPSBpbmR1Y2VkR3JhcGhbY2ldO1xuICAgIGluQWRqID0gZGF0YS5pbkFkajtcbiAgICBvdXRBZGogPSBkYXRhLm91dEFkajtcbiAgICBkYXRhLmludGVybmFsV2VpZ2h0cyArPSB0aGlzLmxvb3BzW2ldO1xuXG4gICAgZm9yIChqID0gdGhpcy5zdGFydHNbaV0sIG0gPSB0aGlzLnN0YXJ0c1tpICsgMV07IGogPCBtOyBqKyspIHtcbiAgICAgIG4gPSB0aGlzLm5laWdoYm9yaG9vZFtqXTtcbiAgICAgIGNqID0gdGhpcy5iZWxvbmdpbmdzW25dO1xuICAgICAgb3V0ID0gaiA8IG9mZnNldDtcblxuICAgICAgYWRqID0gb3V0ID8gb3V0QWRqIDogaW5BZGo7XG5cbiAgICAgIGlmIChjaSA9PT0gY2opIHtcbiAgICAgICAgaWYgKG91dCkgZGF0YS5pbnRlcm5hbFdlaWdodHMgKz0gdGhpcy53ZWlnaHRzW2pdO1xuXG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICBpZiAoIShjaiBpbiBhZGopKSBhZGpbY2pdID0gMDtcblxuICAgICAgYWRqW2NqXSArPSB0aGlzLndlaWdodHNbal07XG4gICAgfVxuICB9XG5cbiAgLy8gUmV3cml0aW5nIG5laWdoYm9yaG9vZFxuICB0aGlzLkMgPSBDO1xuXG4gIG4gPSAwO1xuXG4gIGZvciAoY2kgPSAwOyBjaSA8IEM7IGNpKyspIHtcbiAgICBkYXRhID0gaW5kdWNlZEdyYXBoW2NpXTtcbiAgICBpbkFkaiA9IGRhdGEuaW5BZGo7XG4gICAgb3V0QWRqID0gZGF0YS5vdXRBZGo7XG5cbiAgICBjaSA9ICtjaTtcblxuICAgIHRoaXMudG90YWxJbldlaWdodHNbY2ldID0gZGF0YS50b3RhbEluV2VpZ2h0cztcbiAgICB0aGlzLnRvdGFsT3V0V2VpZ2h0c1tjaV0gPSBkYXRhLnRvdGFsT3V0V2VpZ2h0cztcbiAgICB0aGlzLmxvb3BzW2NpXSA9IGRhdGEuaW50ZXJuYWxXZWlnaHRzO1xuICAgIHRoaXMuY291bnRzW2NpXSA9IDE7XG5cbiAgICB0aGlzLnN0YXJ0c1tjaV0gPSBuO1xuICAgIHRoaXMuYmVsb25naW5nc1tjaV0gPSBjaTtcblxuICAgIGZvciAoY2ogaW4gb3V0QWRqKSB7XG4gICAgICB0aGlzLm5laWdoYm9yaG9vZFtuXSA9ICtjajtcbiAgICAgIHRoaXMud2VpZ2h0c1tuXSA9IG91dEFkaltjal07XG5cbiAgICAgIEUrKztcbiAgICAgIG4rKztcbiAgICB9XG5cbiAgICB0aGlzLm9mZnNldHNbY2ldID0gbjtcblxuICAgIGZvciAoY2ogaW4gaW5BZGopIHtcbiAgICAgIHRoaXMubmVpZ2hib3Job29kW25dID0gK2NqO1xuICAgICAgdGhpcy53ZWlnaHRzW25dID0gaW5BZGpbY2pdO1xuXG4gICAgICBFKys7XG4gICAgICBuKys7XG4gICAgfVxuICB9XG5cbiAgdGhpcy5zdGFydHNbQ10gPSBFO1xuXG4gIHRoaXMuRSA9IEU7XG4gIHRoaXMuVSA9IDA7XG4gIHRoaXMubGV2ZWwrKztcblxuICByZXR1cm4gbmV3TGFiZWxzO1xufTtcblxuRGlyZWN0ZWRMb3V2YWluSW5kZXgucHJvdG90eXBlLm1vZHVsYXJpdHkgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBjaSwgY2osIGksIGosIG07XG5cbiAgdmFyIFEgPSAwO1xuICB2YXIgTSA9IHRoaXMuTTtcbiAgdmFyIGludGVybmFsV2VpZ2h0cyA9IG5ldyBGbG9hdDY0QXJyYXkodGhpcy5DKTtcblxuICBmb3IgKGkgPSAwOyBpIDwgdGhpcy5DOyBpKyspIHtcbiAgICBjaSA9IHRoaXMuYmVsb25naW5nc1tpXTtcbiAgICBpbnRlcm5hbFdlaWdodHNbY2ldICs9IHRoaXMubG9vcHNbaV07XG5cbiAgICBmb3IgKGogPSB0aGlzLnN0YXJ0c1tpXSwgbSA9IHRoaXMub2Zmc2V0c1tpXTsgaiA8IG07IGorKykge1xuICAgICAgY2ogPSB0aGlzLmJlbG9uZ2luZ3NbdGhpcy5uZWlnaGJvcmhvb2Rbal1dO1xuXG4gICAgICBpZiAoY2kgIT09IGNqKSBjb250aW51ZTtcblxuICAgICAgaW50ZXJuYWxXZWlnaHRzW2NpXSArPSB0aGlzLndlaWdodHNbal07XG4gICAgfVxuICB9XG5cbiAgZm9yIChpID0gMDsgaSA8IHRoaXMuQzsgaSsrKVxuICAgIFEgKz1cbiAgICAgIGludGVybmFsV2VpZ2h0c1tpXSAvIE0gLVxuICAgICAgKCh0aGlzLnRvdGFsSW5XZWlnaHRzW2ldICogdGhpcy50b3RhbE91dFdlaWdodHNbaV0pIC8gTWF0aC5wb3coTSwgMikpICpcbiAgICAgICAgdGhpcy5yZXNvbHV0aW9uO1xuXG4gIHJldHVybiBRO1xufTtcblxuRGlyZWN0ZWRMb3V2YWluSW5kZXgucHJvdG90eXBlLmRlbHRhID0gZnVuY3Rpb24gKFxuICBpLFxuICBpbkRlZ3JlZSxcbiAgb3V0RGVncmVlLFxuICB0YXJnZXRDb21tdW5pdHlEZWdyZWUsXG4gIHRhcmdldENvbW11bml0eVxuKSB7XG4gIHZhciBNID0gdGhpcy5NO1xuXG4gIHZhciB0YXJnZXRDb21tdW5pdHlUb3RhbEluV2VpZ2h0ID0gdGhpcy50b3RhbEluV2VpZ2h0c1t0YXJnZXRDb21tdW5pdHldLFxuICAgIHRhcmdldENvbW11bml0eVRvdGFsT3V0V2VpZ2h0ID0gdGhpcy50b3RhbE91dFdlaWdodHNbdGFyZ2V0Q29tbXVuaXR5XTtcblxuICB2YXIgbG9vcHMgPSB0aGlzLmxvb3BzW2ldO1xuXG4gIGluRGVncmVlICs9IGxvb3BzO1xuICBvdXREZWdyZWUgKz0gbG9vcHM7XG5cbiAgcmV0dXJuIChcbiAgICB0YXJnZXRDb21tdW5pdHlEZWdyZWUgLyBNIC1cbiAgICAoKG91dERlZ3JlZSAqIHRhcmdldENvbW11bml0eVRvdGFsSW5XZWlnaHQgK1xuICAgICAgaW5EZWdyZWUgKiB0YXJnZXRDb21tdW5pdHlUb3RhbE91dFdlaWdodCkgKlxuICAgICAgdGhpcy5yZXNvbHV0aW9uKSAvXG4gICAgICAoTSAqIE0pXG4gICk7XG59O1xuXG5EaXJlY3RlZExvdXZhaW5JbmRleC5wcm90b3R5cGUuZGVsdGFXaXRoT3duQ29tbXVuaXR5ID0gZnVuY3Rpb24gKFxuICBpLFxuICBpbkRlZ3JlZSxcbiAgb3V0RGVncmVlLFxuICB0YXJnZXRDb21tdW5pdHlEZWdyZWUsXG4gIHRhcmdldENvbW11bml0eVxuKSB7XG4gIHZhciBNID0gdGhpcy5NO1xuXG4gIHZhciB0YXJnZXRDb21tdW5pdHlUb3RhbEluV2VpZ2h0ID0gdGhpcy50b3RhbEluV2VpZ2h0c1t0YXJnZXRDb21tdW5pdHldLFxuICAgIHRhcmdldENvbW11bml0eVRvdGFsT3V0V2VpZ2h0ID0gdGhpcy50b3RhbE91dFdlaWdodHNbdGFyZ2V0Q29tbXVuaXR5XTtcblxuICB2YXIgbG9vcHMgPSB0aGlzLmxvb3BzW2ldO1xuXG4gIGluRGVncmVlICs9IGxvb3BzO1xuICBvdXREZWdyZWUgKz0gbG9vcHM7XG5cbiAgcmV0dXJuIChcbiAgICB0YXJnZXRDb21tdW5pdHlEZWdyZWUgLyBNIC1cbiAgICAoKG91dERlZ3JlZSAqICh0YXJnZXRDb21tdW5pdHlUb3RhbEluV2VpZ2h0IC0gaW5EZWdyZWUpICtcbiAgICAgIGluRGVncmVlICogKHRhcmdldENvbW11bml0eVRvdGFsT3V0V2VpZ2h0IC0gb3V0RGVncmVlKSkgKlxuICAgICAgdGhpcy5yZXNvbHV0aW9uKSAvXG4gICAgICAoTSAqIE0pXG4gICk7XG59O1xuXG5EaXJlY3RlZExvdXZhaW5JbmRleC5wcm90b3R5cGUuY29sbGVjdCA9XG4gIFVuZGlyZWN0ZWRMb3V2YWluSW5kZXgucHJvdG90eXBlLmNvbGxlY3Q7XG5EaXJlY3RlZExvdXZhaW5JbmRleC5wcm90b3R5cGUuYXNzaWduID0gVW5kaXJlY3RlZExvdXZhaW5JbmRleC5wcm90b3R5cGUuYXNzaWduO1xuXG5EaXJlY3RlZExvdXZhaW5JbmRleC5wcm90b3R5cGVbSU5TUEVDVF0gPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBwcm94eSA9IHt9O1xuXG4gIC8vIFRyaWNrIHNvIHRoYXQgbm9kZSBkaXNwbGF5cyB0aGUgbmFtZSBvZiB0aGUgY29uc3RydWN0b3JcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHByb3h5LCAnY29uc3RydWN0b3InLCB7XG4gICAgdmFsdWU6IERpcmVjdGVkTG91dmFpbkluZGV4LFxuICAgIGVudW1lcmFibGU6IGZhbHNlXG4gIH0pO1xuXG4gIHByb3h5LkMgPSB0aGlzLkM7XG4gIHByb3h5Lk0gPSB0aGlzLk07XG4gIHByb3h5LkUgPSB0aGlzLkU7XG4gIHByb3h5LlUgPSB0aGlzLlU7XG4gIHByb3h5LnJlc29sdXRpb24gPSB0aGlzLnJlc29sdXRpb247XG4gIHByb3h5LmxldmVsID0gdGhpcy5sZXZlbDtcbiAgcHJveHkubm9kZXMgPSB0aGlzLm5vZGVzO1xuICBwcm94eS5zdGFydHMgPSB0aGlzLnN0YXJ0cy5zbGljZSgwLCBwcm94eS5DICsgMSk7XG5cbiAgdmFyIGVUcnVuY2F0ZWQgPSBbJ25laWdoYm9yaG9vZCcsICd3ZWlnaHRzJ107XG4gIHZhciBjVHJ1bmNhdGVkID0gW1xuICAgICdjb3VudHMnLFxuICAgICdvZmZzZXRzJyxcbiAgICAnbG9vcHMnLFxuICAgICdiZWxvbmdpbmdzJyxcbiAgICAndG90YWxJbldlaWdodHMnLFxuICAgICd0b3RhbE91dFdlaWdodHMnXG4gIF07XG5cbiAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gIGVUcnVuY2F0ZWQuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgcHJveHlba2V5XSA9IHNlbGZba2V5XS5zbGljZSgwLCBwcm94eS5FKTtcbiAgfSk7XG5cbiAgY1RydW5jYXRlZC5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICBwcm94eVtrZXldID0gc2VsZltrZXldLnNsaWNlKDAsIHByb3h5LkMpO1xuICB9KTtcblxuICBwcm94eS51bnVzZWQgPSB0aGlzLnVudXNlZC5zbGljZSgwLCB0aGlzLlUpO1xuXG4gIGlmICh0aGlzLmtlZXBEZW5kcm9ncmFtKSBwcm94eS5kZW5kcm9ncmFtID0gdGhpcy5kZW5kcm9ncmFtO1xuICBlbHNlIHByb3h5Lm1hcHBpbmcgPSB0aGlzLm1hcHBpbmc7XG5cbiAgcmV0dXJuIHByb3h5O1xufTtcblxuZXhwb3J0cy5VbmRpcmVjdGVkTG91dmFpbkluZGV4ID0gVW5kaXJlY3RlZExvdXZhaW5JbmRleDtcbmV4cG9ydHMuRGlyZWN0ZWRMb3V2YWluSW5kZXggPSBEaXJlY3RlZExvdXZhaW5JbmRleDtcbiIsICIvKipcbiAqIEdyYXBob2xvZ3kgTG91dmFpbiBBbGdvcml0aG1cbiAqID09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKlxuICogSmF2YVNjcmlwdCBpbXBsZW1lbnRhdGlvbiBvZiB0aGUgZmFtb3VzIExvdXZhaW4gY29tbXVuaXR5IGRldGVjdGlvblxuICogYWxnb3JpdGhtIGZvciBncmFwaG9sb2d5LlxuICpcbiAqIFtBcnRpY2xlc11cbiAqIE0uIEUuIEouIE5ld21hbiwgXHUwMEFCIE1vZHVsYXJpdHkgYW5kIGNvbW11bml0eSBzdHJ1Y3R1cmUgaW4gbmV0d29ya3MgXHUwMEJCLFxuICogUHJvYy4gTmF0bC4gQWNhZC4gU2NpLiBVU0EsIHZvbC4gMTAzLCBubyAyMywgMjAwNiwgcC4gODU3N1x1MjAxMzg1ODJcbiAqIGh0dHBzOi8vZHguZG9pLm9yZy8xMC4xMDczJTJGcG5hcy4wNjAxNjAyMTAzXG4gKlxuICogTmV3bWFuLCBNLiBFLiBKLiBcdTAwQUIgQ29tbXVuaXR5IGRldGVjdGlvbiBpbiBuZXR3b3JrczogTW9kdWxhcml0eSBvcHRpbWl6YXRpb25cbiAqIGFuZCBtYXhpbXVtIGxpa2VsaWhvb2QgYXJlIGVxdWl2YWxlbnQgXHUwMEJCLiBQaHlzaWNhbCBSZXZpZXcgRSwgdm9sLiA5NCwgbm8gNSxcbiAqIG5vdmVtYnJlIDIwMTYsIHAuIDA1MjMxNS4gYXJYaXYub3JnLCBkb2k6MTAuMTEwMy9QaHlzUmV2RS45NC4wNTIzMTUuXG4gKiBodHRwczovL2FyeGl2Lm9yZy9wZGYvMTYwNi4wMjMxOS5wZGZcbiAqXG4gKiBCbG9uZGVsLCBWaW5jZW50IEQuLCBldCBhbC4gXHUwMEFCIEZhc3QgdW5mb2xkaW5nIG9mIGNvbW11bml0aWVzIGluIGxhcmdlXG4gKiBuZXR3b3JrcyBcdTAwQkIuIEpvdXJuYWwgb2YgU3RhdGlzdGljYWwgTWVjaGFuaWNzOiBUaGVvcnkgYW5kIEV4cGVyaW1lbnQsXG4gKiB2b2wuIDIwMDgsIG5vIDEwLCBvY3RvYnJlIDIwMDgsIHAuIFAxMDAwOC4gRE9JLm9yZyAoQ3Jvc3NyZWYpLFxuICogZG9pOjEwLjEwODgvMTc0Mi01NDY4LzIwMDgvMTAvUDEwMDA4LlxuICogaHR0cHM6Ly9hcnhpdi5vcmcvcGRmLzA4MDMuMDQ3Ni5wZGZcbiAqXG4gKiBOaWNvbGFzIER1Z3VlXHUwMzAxLCBBbnRob255IFBlcmV6LiBEaXJlY3RlZCBMb3V2YWluOiBtYXhpbWl6aW5nIG1vZHVsYXJpdHkgaW5cbiAqIGRpcmVjdGVkIG5ldHdvcmtzLiBbUmVzZWFyY2ggUmVwb3J0XSBVbml2ZXJzaXRlXHUwMzAxIGRcdTIwMTlPcmxlXHUwMzAxYW5zLiAyMDE1LiBoYWwtMDEyMzE3ODRcbiAqIGh0dHBzOi8vaGFsLmFyY2hpdmVzLW91dmVydGVzLmZyL2hhbC0wMTIzMTc4NFxuICpcbiAqIFIuIExhbWJpb3R0ZSwgSi4tQy4gRGVsdmVubmUgYW5kIE0uIEJhcmFob25hLiBMYXBsYWNpYW4gRHluYW1pY3MgYW5kXG4gKiBNdWx0aXNjYWxlIE1vZHVsYXIgU3RydWN0dXJlIGluIE5ldHdvcmtzLFxuICogZG9pOjEwLjExMDkvVE5TRS4yMDE1LjIzOTE5OTguXG4gKiBodHRwczovL2FyeGl2Lm9yZy9hYnMvMDgxMi4xNzcwXG4gKlxuICogVHJhYWcsIFYuIEEuLCBldCBhbC4gXHUwMEFCIEZyb20gTG91dmFpbiB0byBMZWlkZW46IEd1YXJhbnRlZWluZyBXZWxsLUNvbm5lY3RlZFxuICogQ29tbXVuaXRpZXMgXHUwMEJCLiBTY2llbnRpZmljIFJlcG9ydHMsIHZvbC4gOSwgbm8gMSwgZFx1MDBFOWNlbWJyZSAyMDE5LCBwLiA1MjMzLlxuICogRE9JLm9yZyAoQ3Jvc3NyZWYpLCBkb2k6MTAuMTAzOC9zNDE1OTgtMDE5LTQxNjk1LXouXG4gKiBodHRwczovL2FyeGl2Lm9yZy9hYnMvMTgxMC4wODQ3M1xuICovXG52YXIgcmVzb2x2ZURlZmF1bHRzID0gcmVxdWlyZSgnZ3JhcGhvbG9neS11dGlscy9kZWZhdWx0cycpO1xudmFyIGlzR3JhcGggPSByZXF1aXJlKCdncmFwaG9sb2d5LXV0aWxzL2lzLWdyYXBoJyk7XG52YXIgaW5mZXJUeXBlID0gcmVxdWlyZSgnZ3JhcGhvbG9neS11dGlscy9pbmZlci10eXBlJyk7XG52YXIgU3BhcnNlTWFwID0gcmVxdWlyZSgnbW5lbW9uaXN0L3NwYXJzZS1tYXAnKTtcbnZhciBTcGFyc2VRdWV1ZVNldCA9IHJlcXVpcmUoJ21uZW1vbmlzdC9zcGFyc2UtcXVldWUtc2V0Jyk7XG52YXIgY3JlYXRlUmFuZG9tSW5kZXggPSByZXF1aXJlKCdwYW5kZW1vbml1bS9yYW5kb20taW5kZXgnKS5jcmVhdGVSYW5kb21JbmRleDtcblxudmFyIGluZGljZXMgPSByZXF1aXJlKCdncmFwaG9sb2d5LWluZGljZXMvbG91dmFpbicpO1xuXG52YXIgVW5kaXJlY3RlZExvdXZhaW5JbmRleCA9IGluZGljZXMuVW5kaXJlY3RlZExvdXZhaW5JbmRleDtcbnZhciBEaXJlY3RlZExvdXZhaW5JbmRleCA9IGluZGljZXMuRGlyZWN0ZWRMb3V2YWluSW5kZXg7XG5cbnZhciBERUZBVUxUUyA9IHtcbiAgYXR0cmlidXRlczoge1xuICAgIGNvbW11bml0eTogJ2NvbW11bml0eScsXG4gICAgd2VpZ2h0OiAnd2VpZ2h0J1xuICB9LFxuICBmYXN0TG9jYWxNb3ZlczogdHJ1ZSxcbiAgcmFuZG9tV2FsazogdHJ1ZSxcbiAgcmVzb2x1dGlvbjogMSxcbiAgcm5nOiBNYXRoLnJhbmRvbSxcbiAgd2VpZ2h0ZWQ6IGZhbHNlXG59O1xuXG5mdW5jdGlvbiBhZGRXZWlnaHRUb0NvbW11bml0eShtYXAsIGNvbW11bml0eSwgd2VpZ2h0KSB7XG4gIHZhciBjdXJyZW50V2VpZ2h0ID0gbWFwLmdldChjb21tdW5pdHkpO1xuXG4gIGlmICh0eXBlb2YgY3VycmVudFdlaWdodCA9PT0gJ3VuZGVmaW5lZCcpIGN1cnJlbnRXZWlnaHQgPSAwO1xuXG4gIGN1cnJlbnRXZWlnaHQgKz0gd2VpZ2h0O1xuXG4gIG1hcC5zZXQoY29tbXVuaXR5LCBjdXJyZW50V2VpZ2h0KTtcbn1cblxudmFyIEVQU0lMT04gPSAxZS0xMDtcblxuZnVuY3Rpb24gdGllQnJlYWtlcihcbiAgYmVzdENvbW11bml0eSxcbiAgY3VycmVudENvbW11bml0eSxcbiAgdGFyZ2V0Q29tbXVuaXR5LFxuICBkZWx0YSxcbiAgYmVzdERlbHRhXG4pIHtcbiAgaWYgKE1hdGguYWJzKGRlbHRhIC0gYmVzdERlbHRhKSA8IEVQU0lMT04pIHtcbiAgICBpZiAoYmVzdENvbW11bml0eSA9PT0gY3VycmVudENvbW11bml0eSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gdGFyZ2V0Q29tbXVuaXR5ID4gYmVzdENvbW11bml0eTtcbiAgICB9XG4gIH0gZWxzZSBpZiAoZGVsdGEgPiBiZXN0RGVsdGEpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn1cblxuZnVuY3Rpb24gdW5kaXJlY3RlZExvdXZhaW4oZGV0YWlsZWQsIGdyYXBoLCBvcHRpb25zKSB7XG4gIHZhciBpbmRleCA9IG5ldyBVbmRpcmVjdGVkTG91dmFpbkluZGV4KGdyYXBoLCB7XG4gICAgYXR0cmlidXRlczoge1xuICAgICAgd2VpZ2h0OiBvcHRpb25zLmF0dHJpYnV0ZXMud2VpZ2h0XG4gICAgfSxcbiAgICBrZWVwRGVuZHJvZ3JhbTogZGV0YWlsZWQsXG4gICAgcmVzb2x1dGlvbjogb3B0aW9ucy5yZXNvbHV0aW9uLFxuICAgIHdlaWdodGVkOiBvcHRpb25zLndlaWdodGVkXG4gIH0pO1xuXG4gIHZhciByYW5kb21JbmRleCA9IGNyZWF0ZVJhbmRvbUluZGV4KG9wdGlvbnMucm5nKTtcblxuICAvLyBTdGF0ZSB2YXJpYWJsZXNcbiAgdmFyIG1vdmVXYXNNYWRlID0gdHJ1ZSxcbiAgICBsb2NhbE1vdmVXYXNNYWRlID0gdHJ1ZTtcblxuICAvLyBDb21tdW5pdGllc1xuICB2YXIgY3VycmVudENvbW11bml0eSwgdGFyZ2V0Q29tbXVuaXR5O1xuICB2YXIgY29tbXVuaXRpZXMgPSBuZXcgU3BhcnNlTWFwKEZsb2F0NjRBcnJheSwgaW5kZXguQyk7XG5cbiAgLy8gVHJhdmVyc2FsXG4gIHZhciBxdWV1ZSwgc3RhcnQsIGVuZCwgd2VpZ2h0LCBjaSwgcmksIHMsIGksIGosIGw7XG5cbiAgLy8gTWV0cmljc1xuICB2YXIgZGVncmVlLCB0YXJnZXRDb21tdW5pdHlEZWdyZWU7XG5cbiAgLy8gTW92ZXNcbiAgdmFyIGJlc3RDb21tdW5pdHksIGJlc3REZWx0YSwgZGVsdGFJc0JldHRlciwgZGVsdGE7XG5cbiAgLy8gRGV0YWlsc1xuICB2YXIgZGVsdGFDb21wdXRhdGlvbnMgPSAwLFxuICAgIG5vZGVzVmlzaXRlZCA9IDAsXG4gICAgbW92ZXMgPSBbXSxcbiAgICBsb2NhbE1vdmVzLFxuICAgIGN1cnJlbnRNb3ZlcztcblxuICBpZiAob3B0aW9ucy5mYXN0TG9jYWxNb3ZlcykgcXVldWUgPSBuZXcgU3BhcnNlUXVldWVTZXQoaW5kZXguQyk7XG5cbiAgd2hpbGUgKG1vdmVXYXNNYWRlKSB7XG4gICAgbCA9IGluZGV4LkM7XG5cbiAgICBtb3ZlV2FzTWFkZSA9IGZhbHNlO1xuICAgIGxvY2FsTW92ZVdhc01hZGUgPSB0cnVlO1xuXG4gICAgaWYgKG9wdGlvbnMuZmFzdExvY2FsTW92ZXMpIHtcbiAgICAgIGN1cnJlbnRNb3ZlcyA9IDA7XG5cbiAgICAgIC8vIFRyYXZlcnNhbCBvZiB0aGUgZ3JhcGhcbiAgICAgIHJpID0gb3B0aW9ucy5yYW5kb21XYWxrID8gcmFuZG9tSW5kZXgobCkgOiAwO1xuXG4gICAgICBmb3IgKHMgPSAwOyBzIDwgbDsgcysrLCByaSsrKSB7XG4gICAgICAgIGkgPSByaSAlIGw7XG4gICAgICAgIHF1ZXVlLmVucXVldWUoaSk7XG4gICAgICB9XG5cbiAgICAgIHdoaWxlIChxdWV1ZS5zaXplICE9PSAwKSB7XG4gICAgICAgIGkgPSBxdWV1ZS5kZXF1ZXVlKCk7XG4gICAgICAgIG5vZGVzVmlzaXRlZCsrO1xuXG4gICAgICAgIGRlZ3JlZSA9IDA7XG4gICAgICAgIGNvbW11bml0aWVzLmNsZWFyKCk7XG5cbiAgICAgICAgY3VycmVudENvbW11bml0eSA9IGluZGV4LmJlbG9uZ2luZ3NbaV07XG5cbiAgICAgICAgc3RhcnQgPSBpbmRleC5zdGFydHNbaV07XG4gICAgICAgIGVuZCA9IGluZGV4LnN0YXJ0c1tpICsgMV07XG5cbiAgICAgICAgLy8gVHJhdmVyc2luZyBuZWlnaGJvcnNcbiAgICAgICAgZm9yICg7IHN0YXJ0IDwgZW5kOyBzdGFydCsrKSB7XG4gICAgICAgICAgaiA9IGluZGV4Lm5laWdoYm9yaG9vZFtzdGFydF07XG4gICAgICAgICAgd2VpZ2h0ID0gaW5kZXgud2VpZ2h0c1tzdGFydF07XG5cbiAgICAgICAgICB0YXJnZXRDb21tdW5pdHkgPSBpbmRleC5iZWxvbmdpbmdzW2pdO1xuXG4gICAgICAgICAgLy8gSW5jcmVtZW50aW5nIG1ldHJpY3NcbiAgICAgICAgICBkZWdyZWUgKz0gd2VpZ2h0O1xuICAgICAgICAgIGFkZFdlaWdodFRvQ29tbXVuaXR5KGNvbW11bml0aWVzLCB0YXJnZXRDb21tdW5pdHksIHdlaWdodCk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBGaW5kaW5nIGJlc3QgY29tbXVuaXR5IHRvIG1vdmUgdG9cbiAgICAgICAgYmVzdERlbHRhID0gaW5kZXguZmFzdERlbHRhV2l0aE93bkNvbW11bml0eShcbiAgICAgICAgICBpLFxuICAgICAgICAgIGRlZ3JlZSxcbiAgICAgICAgICBjb21tdW5pdGllcy5nZXQoY3VycmVudENvbW11bml0eSkgfHwgMCxcbiAgICAgICAgICBjdXJyZW50Q29tbXVuaXR5XG4gICAgICAgICk7XG4gICAgICAgIGJlc3RDb21tdW5pdHkgPSBjdXJyZW50Q29tbXVuaXR5O1xuXG4gICAgICAgIGZvciAoY2kgPSAwOyBjaSA8IGNvbW11bml0aWVzLnNpemU7IGNpKyspIHtcbiAgICAgICAgICB0YXJnZXRDb21tdW5pdHkgPSBjb21tdW5pdGllcy5kZW5zZVtjaV07XG5cbiAgICAgICAgICBpZiAodGFyZ2V0Q29tbXVuaXR5ID09PSBjdXJyZW50Q29tbXVuaXR5KSBjb250aW51ZTtcblxuICAgICAgICAgIHRhcmdldENvbW11bml0eURlZ3JlZSA9IGNvbW11bml0aWVzLnZhbHNbY2ldO1xuXG4gICAgICAgICAgZGVsdGFDb21wdXRhdGlvbnMrKztcblxuICAgICAgICAgIGRlbHRhID0gaW5kZXguZmFzdERlbHRhKFxuICAgICAgICAgICAgaSxcbiAgICAgICAgICAgIGRlZ3JlZSxcbiAgICAgICAgICAgIHRhcmdldENvbW11bml0eURlZ3JlZSxcbiAgICAgICAgICAgIHRhcmdldENvbW11bml0eVxuICAgICAgICAgICk7XG5cbiAgICAgICAgICBkZWx0YUlzQmV0dGVyID0gdGllQnJlYWtlcihcbiAgICAgICAgICAgIGJlc3RDb21tdW5pdHksXG4gICAgICAgICAgICBjdXJyZW50Q29tbXVuaXR5LFxuICAgICAgICAgICAgdGFyZ2V0Q29tbXVuaXR5LFxuICAgICAgICAgICAgZGVsdGEsXG4gICAgICAgICAgICBiZXN0RGVsdGFcbiAgICAgICAgICApO1xuXG4gICAgICAgICAgaWYgKGRlbHRhSXNCZXR0ZXIpIHtcbiAgICAgICAgICAgIGJlc3REZWx0YSA9IGRlbHRhO1xuICAgICAgICAgICAgYmVzdENvbW11bml0eSA9IHRhcmdldENvbW11bml0eTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBTaG91bGQgd2UgbW92ZSB0aGUgbm9kZT9cbiAgICAgICAgaWYgKGJlc3REZWx0YSA8IDApIHtcbiAgICAgICAgICAvLyBOT1RFOiB0aGlzIGlzIHRvIGFsbG93IG5vZGVzIHRvIG1vdmUgYmFjayB0byB0aGVpciBvd24gc2luZ2xldG9uXG4gICAgICAgICAgLy8gVGhpcyBjb2RlIGhvd2V2ZXIgb25seSBkZWFscyB3aXRoIG1vZHVsYXJpdHkgKGUuZy4gdGhlIGNvbmRpdGlvblxuICAgICAgICAgIC8vIGFib3V0IGJlc3REZWx0YSA8IDAsIHdoaWNoIGlzIHRoZSBkZWx0YSBmb3IgbW92aW5nIGJhY2sgdG9cbiAgICAgICAgICAvLyBzaW5nbGV0b24gd3J0LiBtb2R1bGFyaXR5KS4gSW5kZWVkLCByYXJlbHksIHRoZSBMb3V2YWluXG4gICAgICAgICAgLy8gYWxnb3JpdGhtIGNhbiBwcm9kdWNlIHN1Y2ggY2FzZXMgd2hlbiBhIG5vZGUgd291bGQgYmUgYmV0dGVyIGluXG4gICAgICAgICAgLy8gYSBzaW5nbGV0b24gdGhhdCBpbiBpdHMgb3duIGNvbW11bml0eSB3aGVuIGNvbnNpZGVyaW5nIHNlbGYgbG9vcHNcbiAgICAgICAgICAvLyBvciBhIHJlc29sdXRpb24gIT0gMS4gSW4gdGhpcyBjYXNlLCBkZWx0YSB3aXRoIHlvdXIgb3duIGNvbW11bml0eVxuICAgICAgICAgIC8vIGlzIGluZGVlZCBsZXNzIHRoYW4gMC4gVG8gaGFuZGxlIGRpZmZlcmVudCBtZXRyaWNzLCBvbmUgc2hvdWxkXG4gICAgICAgICAgLy8gY29uc2lkZXIgY29tcHV0aW5nIHRoZSBkZWx0YSBmb3IgZ29pbmcgYmFjayB0byBzaW5nbGV0b24gYmVjYXVzZVxuICAgICAgICAgIC8vIGl0IG1pZ2h0IG5vdCBiZSAwLlxuICAgICAgICAgIGJlc3RDb21tdW5pdHkgPSBpbmRleC5pc29sYXRlKGksIGRlZ3JlZSk7XG5cbiAgICAgICAgICAvLyBJZiB0aGUgbm9kZSB3YXMgYWxyZWFkeSBpbiBhIHNpbmdsZXRvbiBjb21tdW5pdHksIHdlIGRvbid0IGNvbnNpZGVyXG4gICAgICAgICAgLy8gYSBtb3ZlIHdhcyBtYWRlXG4gICAgICAgICAgaWYgKGJlc3RDb21tdW5pdHkgPT09IGN1cnJlbnRDb21tdW5pdHkpIGNvbnRpbnVlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIElmIG5vIG1vdmUgd2FzIG1hZGUsIHdlIGNvbnRpbnVlIHRvIG5leHQgbm9kZVxuICAgICAgICAgIGlmIChiZXN0Q29tbXVuaXR5ID09PSBjdXJyZW50Q29tbXVuaXR5KSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gQWN0dWFsbHkgbW92aW5nIHRoZSBub2RlIHRvIGEgbmV3IGNvbW11bml0eVxuICAgICAgICAgICAgaW5kZXgubW92ZShpLCBkZWdyZWUsIGJlc3RDb21tdW5pdHkpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIG1vdmVXYXNNYWRlID0gdHJ1ZTtcbiAgICAgICAgY3VycmVudE1vdmVzKys7XG5cbiAgICAgICAgLy8gQWRkaW5nIG5laWdoYm9ycyBmcm9tIG90aGVyIGNvbW11bml0aWVzIHRvIHRoZSBxdWV1ZVxuICAgICAgICBzdGFydCA9IGluZGV4LnN0YXJ0c1tpXTtcbiAgICAgICAgZW5kID0gaW5kZXguc3RhcnRzW2kgKyAxXTtcblxuICAgICAgICBmb3IgKDsgc3RhcnQgPCBlbmQ7IHN0YXJ0KyspIHtcbiAgICAgICAgICBqID0gaW5kZXgubmVpZ2hib3Job29kW3N0YXJ0XTtcbiAgICAgICAgICB0YXJnZXRDb21tdW5pdHkgPSBpbmRleC5iZWxvbmdpbmdzW2pdO1xuXG4gICAgICAgICAgaWYgKHRhcmdldENvbW11bml0eSAhPT0gYmVzdENvbW11bml0eSkgcXVldWUuZW5xdWV1ZShqKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBtb3Zlcy5wdXNoKGN1cnJlbnRNb3Zlcyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGxvY2FsTW92ZXMgPSBbXTtcbiAgICAgIG1vdmVzLnB1c2gobG9jYWxNb3Zlcyk7XG5cbiAgICAgIC8vIFRyYWRpdGlvbmFsIExvdXZhaW4gaXRlcmF0aXZlIHRyYXZlcnNhbCBvZiB0aGUgZ3JhcGhcbiAgICAgIHdoaWxlIChsb2NhbE1vdmVXYXNNYWRlKSB7XG4gICAgICAgIGxvY2FsTW92ZVdhc01hZGUgPSBmYWxzZTtcbiAgICAgICAgY3VycmVudE1vdmVzID0gMDtcblxuICAgICAgICByaSA9IG9wdGlvbnMucmFuZG9tV2FsayA/IHJhbmRvbUluZGV4KGwpIDogMDtcblxuICAgICAgICBmb3IgKHMgPSAwOyBzIDwgbDsgcysrLCByaSsrKSB7XG4gICAgICAgICAgaSA9IHJpICUgbDtcblxuICAgICAgICAgIG5vZGVzVmlzaXRlZCsrO1xuXG4gICAgICAgICAgZGVncmVlID0gMDtcbiAgICAgICAgICBjb21tdW5pdGllcy5jbGVhcigpO1xuXG4gICAgICAgICAgY3VycmVudENvbW11bml0eSA9IGluZGV4LmJlbG9uZ2luZ3NbaV07XG5cbiAgICAgICAgICBzdGFydCA9IGluZGV4LnN0YXJ0c1tpXTtcbiAgICAgICAgICBlbmQgPSBpbmRleC5zdGFydHNbaSArIDFdO1xuXG4gICAgICAgICAgLy8gVHJhdmVyc2luZyBuZWlnaGJvcnNcbiAgICAgICAgICBmb3IgKDsgc3RhcnQgPCBlbmQ7IHN0YXJ0KyspIHtcbiAgICAgICAgICAgIGogPSBpbmRleC5uZWlnaGJvcmhvb2Rbc3RhcnRdO1xuICAgICAgICAgICAgd2VpZ2h0ID0gaW5kZXgud2VpZ2h0c1tzdGFydF07XG5cbiAgICAgICAgICAgIHRhcmdldENvbW11bml0eSA9IGluZGV4LmJlbG9uZ2luZ3Nbal07XG5cbiAgICAgICAgICAgIC8vIEluY3JlbWVudGluZyBtZXRyaWNzXG4gICAgICAgICAgICBkZWdyZWUgKz0gd2VpZ2h0O1xuICAgICAgICAgICAgYWRkV2VpZ2h0VG9Db21tdW5pdHkoY29tbXVuaXRpZXMsIHRhcmdldENvbW11bml0eSwgd2VpZ2h0KTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICAvLyBGaW5kaW5nIGJlc3QgY29tbXVuaXR5IHRvIG1vdmUgdG9cbiAgICAgICAgICBiZXN0RGVsdGEgPSBpbmRleC5mYXN0RGVsdGFXaXRoT3duQ29tbXVuaXR5KFxuICAgICAgICAgICAgaSxcbiAgICAgICAgICAgIGRlZ3JlZSxcbiAgICAgICAgICAgIGNvbW11bml0aWVzLmdldChjdXJyZW50Q29tbXVuaXR5KSB8fCAwLFxuICAgICAgICAgICAgY3VycmVudENvbW11bml0eVxuICAgICAgICAgICk7XG4gICAgICAgICAgYmVzdENvbW11bml0eSA9IGN1cnJlbnRDb21tdW5pdHk7XG5cbiAgICAgICAgICBmb3IgKGNpID0gMDsgY2kgPCBjb21tdW5pdGllcy5zaXplOyBjaSsrKSB7XG4gICAgICAgICAgICB0YXJnZXRDb21tdW5pdHkgPSBjb21tdW5pdGllcy5kZW5zZVtjaV07XG5cbiAgICAgICAgICAgIGlmICh0YXJnZXRDb21tdW5pdHkgPT09IGN1cnJlbnRDb21tdW5pdHkpIGNvbnRpbnVlO1xuXG4gICAgICAgICAgICB0YXJnZXRDb21tdW5pdHlEZWdyZWUgPSBjb21tdW5pdGllcy52YWxzW2NpXTtcblxuICAgICAgICAgICAgZGVsdGFDb21wdXRhdGlvbnMrKztcblxuICAgICAgICAgICAgZGVsdGEgPSBpbmRleC5mYXN0RGVsdGEoXG4gICAgICAgICAgICAgIGksXG4gICAgICAgICAgICAgIGRlZ3JlZSxcbiAgICAgICAgICAgICAgdGFyZ2V0Q29tbXVuaXR5RGVncmVlLFxuICAgICAgICAgICAgICB0YXJnZXRDb21tdW5pdHlcbiAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgIGRlbHRhSXNCZXR0ZXIgPSB0aWVCcmVha2VyKFxuICAgICAgICAgICAgICBiZXN0Q29tbXVuaXR5LFxuICAgICAgICAgICAgICBjdXJyZW50Q29tbXVuaXR5LFxuICAgICAgICAgICAgICB0YXJnZXRDb21tdW5pdHksXG4gICAgICAgICAgICAgIGRlbHRhLFxuICAgICAgICAgICAgICBiZXN0RGVsdGFcbiAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgIGlmIChkZWx0YUlzQmV0dGVyKSB7XG4gICAgICAgICAgICAgIGJlc3REZWx0YSA9IGRlbHRhO1xuICAgICAgICAgICAgICBiZXN0Q29tbXVuaXR5ID0gdGFyZ2V0Q29tbXVuaXR5O1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIC8vIFNob3VsZCB3ZSBtb3ZlIHRoZSBub2RlP1xuICAgICAgICAgIGlmIChiZXN0RGVsdGEgPCAwKSB7XG4gICAgICAgICAgICAvLyBOT1RFOiB0aGlzIGlzIHRvIGFsbG93IG5vZGVzIHRvIG1vdmUgYmFjayB0byB0aGVpciBvd24gc2luZ2xldG9uXG4gICAgICAgICAgICAvLyBUaGlzIGNvZGUgaG93ZXZlciBvbmx5IGRlYWxzIHdpdGggbW9kdWxhcml0eSAoZS5nLiB0aGUgY29uZGl0aW9uXG4gICAgICAgICAgICAvLyBhYm91dCBiZXN0RGVsdGEgPCAwLCB3aGljaCBpcyB0aGUgZGVsdGEgZm9yIG1vdmluZyBiYWNrIHRvXG4gICAgICAgICAgICAvLyBzaW5nbGV0b24gd3J0LiBtb2R1bGFyaXR5KS4gSW5kZWVkLCByYXJlbHksIHRoZSBMb3V2YWluXG4gICAgICAgICAgICAvLyBhbGdvcml0aG0gY2FuIHByb2R1Y2Ugc3VjaCBjYXNlcyB3aGVuIGEgbm9kZSB3b3VsZCBiZSBiZXR0ZXIgaW5cbiAgICAgICAgICAgIC8vIGEgc2luZ2xldG9uIHRoYXQgaW4gaXRzIG93biBjb21tdW5pdHkgd2hlbiBjb25zaWRlcmluZyBzZWxmIGxvb3BzXG4gICAgICAgICAgICAvLyBvciBhIHJlc29sdXRpb24gIT0gMS4gSW4gdGhpcyBjYXNlLCBkZWx0YSB3aXRoIHlvdXIgb3duIGNvbW11bml0eVxuICAgICAgICAgICAgLy8gaXMgaW5kZWVkIGxlc3MgdGhhbiAwLiBUbyBoYW5kbGUgZGlmZmVyZW50IG1ldHJpY3MsIG9uZSBzaG91bGRcbiAgICAgICAgICAgIC8vIGNvbnNpZGVyIGNvbXB1dGluZyB0aGUgZGVsdGEgZm9yIGdvaW5nIGJhY2sgdG8gc2luZ2xldG9uIGJlY2F1c2VcbiAgICAgICAgICAgIC8vIGl0IG1pZ2h0IG5vdCBiZSAwLlxuICAgICAgICAgICAgYmVzdENvbW11bml0eSA9IGluZGV4Lmlzb2xhdGUoaSwgZGVncmVlKTtcblxuICAgICAgICAgICAgLy8gSWYgdGhlIG5vZGUgd2FzIGFscmVhZHkgaW4gYSBzaW5nbGV0b24gY29tbXVuaXR5LCB3ZSBkb24ndCBjb25zaWRlclxuICAgICAgICAgICAgLy8gYSBtb3ZlIHdhcyBtYWRlXG4gICAgICAgICAgICBpZiAoYmVzdENvbW11bml0eSA9PT0gY3VycmVudENvbW11bml0eSkgY29udGludWU7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIElmIG5vIG1vdmUgd2FzIG1hZGUsIHdlIGNvbnRpbnVlIHRvIG5leHQgbm9kZVxuICAgICAgICAgICAgaWYgKGJlc3RDb21tdW5pdHkgPT09IGN1cnJlbnRDb21tdW5pdHkpIHtcbiAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAvLyBBY3R1YWxseSBtb3ZpbmcgdGhlIG5vZGUgdG8gYSBuZXcgY29tbXVuaXR5XG4gICAgICAgICAgICAgIGluZGV4Lm1vdmUoaSwgZGVncmVlLCBiZXN0Q29tbXVuaXR5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBsb2NhbE1vdmVXYXNNYWRlID0gdHJ1ZTtcbiAgICAgICAgICBjdXJyZW50TW92ZXMrKztcbiAgICAgICAgfVxuXG4gICAgICAgIGxvY2FsTW92ZXMucHVzaChjdXJyZW50TW92ZXMpO1xuXG4gICAgICAgIG1vdmVXYXNNYWRlID0gbG9jYWxNb3ZlV2FzTWFkZSB8fCBtb3ZlV2FzTWFkZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBXZSBjb250aW51ZSB3b3JraW5nIG9uIHRoZSBpbmR1Y2VkIGdyYXBoXG4gICAgaWYgKG1vdmVXYXNNYWRlKSBpbmRleC56b29tT3V0KCk7XG4gIH1cblxuICB2YXIgcmVzdWx0cyA9IHtcbiAgICBpbmRleDogaW5kZXgsXG4gICAgZGVsdGFDb21wdXRhdGlvbnM6IGRlbHRhQ29tcHV0YXRpb25zLFxuICAgIG5vZGVzVmlzaXRlZDogbm9kZXNWaXNpdGVkLFxuICAgIG1vdmVzOiBtb3Zlc1xuICB9O1xuXG4gIHJldHVybiByZXN1bHRzO1xufVxuXG5mdW5jdGlvbiBkaXJlY3RlZExvdXZhaW4oZGV0YWlsZWQsIGdyYXBoLCBvcHRpb25zKSB7XG4gIHZhciBpbmRleCA9IG5ldyBEaXJlY3RlZExvdXZhaW5JbmRleChncmFwaCwge1xuICAgIGF0dHJpYnV0ZXM6IHtcbiAgICAgIHdlaWdodDogb3B0aW9ucy5hdHRyaWJ1dGVzLndlaWdodFxuICAgIH0sXG4gICAga2VlcERlbmRyb2dyYW06IGRldGFpbGVkLFxuICAgIHJlc29sdXRpb246IG9wdGlvbnMucmVzb2x1dGlvbixcbiAgICB3ZWlnaHRlZDogb3B0aW9ucy53ZWlnaHRlZFxuICB9KTtcblxuICB2YXIgcmFuZG9tSW5kZXggPSBjcmVhdGVSYW5kb21JbmRleChvcHRpb25zLnJuZyk7XG5cbiAgLy8gU3RhdGUgdmFyaWFibGVzXG4gIHZhciBtb3ZlV2FzTWFkZSA9IHRydWUsXG4gICAgbG9jYWxNb3ZlV2FzTWFkZSA9IHRydWU7XG5cbiAgLy8gQ29tbXVuaXRpZXNcbiAgdmFyIGN1cnJlbnRDb21tdW5pdHksIHRhcmdldENvbW11bml0eTtcbiAgdmFyIGNvbW11bml0aWVzID0gbmV3IFNwYXJzZU1hcChGbG9hdDY0QXJyYXksIGluZGV4LkMpO1xuXG4gIC8vIFRyYXZlcnNhbFxuICB2YXIgcXVldWUsIHN0YXJ0LCBlbmQsIG9mZnNldCwgb3V0LCB3ZWlnaHQsIGNpLCByaSwgcywgaSwgaiwgbDtcblxuICAvLyBNZXRyaWNzXG4gIHZhciBpbkRlZ3JlZSwgb3V0RGVncmVlLCB0YXJnZXRDb21tdW5pdHlEZWdyZWU7XG5cbiAgLy8gTW92ZXNcbiAgdmFyIGJlc3RDb21tdW5pdHksIGJlc3REZWx0YSwgZGVsdGFJc0JldHRlciwgZGVsdGE7XG5cbiAgLy8gRGV0YWlsc1xuICB2YXIgZGVsdGFDb21wdXRhdGlvbnMgPSAwLFxuICAgIG5vZGVzVmlzaXRlZCA9IDAsXG4gICAgbW92ZXMgPSBbXSxcbiAgICBsb2NhbE1vdmVzLFxuICAgIGN1cnJlbnRNb3ZlcztcblxuICBpZiAob3B0aW9ucy5mYXN0TG9jYWxNb3ZlcykgcXVldWUgPSBuZXcgU3BhcnNlUXVldWVTZXQoaW5kZXguQyk7XG5cbiAgd2hpbGUgKG1vdmVXYXNNYWRlKSB7XG4gICAgbCA9IGluZGV4LkM7XG5cbiAgICBtb3ZlV2FzTWFkZSA9IGZhbHNlO1xuICAgIGxvY2FsTW92ZVdhc01hZGUgPSB0cnVlO1xuXG4gICAgaWYgKG9wdGlvbnMuZmFzdExvY2FsTW92ZXMpIHtcbiAgICAgIGN1cnJlbnRNb3ZlcyA9IDA7XG5cbiAgICAgIC8vIFRyYXZlcnNhbCBvZiB0aGUgZ3JhcGhcbiAgICAgIHJpID0gb3B0aW9ucy5yYW5kb21XYWxrID8gcmFuZG9tSW5kZXgobCkgOiAwO1xuXG4gICAgICBmb3IgKHMgPSAwOyBzIDwgbDsgcysrLCByaSsrKSB7XG4gICAgICAgIGkgPSByaSAlIGw7XG4gICAgICAgIHF1ZXVlLmVucXVldWUoaSk7XG4gICAgICB9XG5cbiAgICAgIHdoaWxlIChxdWV1ZS5zaXplICE9PSAwKSB7XG4gICAgICAgIGkgPSBxdWV1ZS5kZXF1ZXVlKCk7XG4gICAgICAgIG5vZGVzVmlzaXRlZCsrO1xuXG4gICAgICAgIGluRGVncmVlID0gMDtcbiAgICAgICAgb3V0RGVncmVlID0gMDtcbiAgICAgICAgY29tbXVuaXRpZXMuY2xlYXIoKTtcblxuICAgICAgICBjdXJyZW50Q29tbXVuaXR5ID0gaW5kZXguYmVsb25naW5nc1tpXTtcblxuICAgICAgICBzdGFydCA9IGluZGV4LnN0YXJ0c1tpXTtcbiAgICAgICAgZW5kID0gaW5kZXguc3RhcnRzW2kgKyAxXTtcbiAgICAgICAgb2Zmc2V0ID0gaW5kZXgub2Zmc2V0c1tpXTtcblxuICAgICAgICAvLyBUcmF2ZXJzaW5nIG5laWdoYm9yc1xuICAgICAgICBmb3IgKDsgc3RhcnQgPCBlbmQ7IHN0YXJ0KyspIHtcbiAgICAgICAgICBvdXQgPSBzdGFydCA8IG9mZnNldDtcbiAgICAgICAgICBqID0gaW5kZXgubmVpZ2hib3Job29kW3N0YXJ0XTtcbiAgICAgICAgICB3ZWlnaHQgPSBpbmRleC53ZWlnaHRzW3N0YXJ0XTtcblxuICAgICAgICAgIHRhcmdldENvbW11bml0eSA9IGluZGV4LmJlbG9uZ2luZ3Nbal07XG5cbiAgICAgICAgICAvLyBJbmNyZW1lbnRpbmcgbWV0cmljc1xuICAgICAgICAgIGlmIChvdXQpIG91dERlZ3JlZSArPSB3ZWlnaHQ7XG4gICAgICAgICAgZWxzZSBpbkRlZ3JlZSArPSB3ZWlnaHQ7XG5cbiAgICAgICAgICBhZGRXZWlnaHRUb0NvbW11bml0eShjb21tdW5pdGllcywgdGFyZ2V0Q29tbXVuaXR5LCB3ZWlnaHQpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gRmluZGluZyBiZXN0IGNvbW11bml0eSB0byBtb3ZlIHRvXG4gICAgICAgIGJlc3REZWx0YSA9IGluZGV4LmRlbHRhV2l0aE93bkNvbW11bml0eShcbiAgICAgICAgICBpLFxuICAgICAgICAgIGluRGVncmVlLFxuICAgICAgICAgIG91dERlZ3JlZSxcbiAgICAgICAgICBjb21tdW5pdGllcy5nZXQoY3VycmVudENvbW11bml0eSkgfHwgMCxcbiAgICAgICAgICBjdXJyZW50Q29tbXVuaXR5XG4gICAgICAgICk7XG4gICAgICAgIGJlc3RDb21tdW5pdHkgPSBjdXJyZW50Q29tbXVuaXR5O1xuXG4gICAgICAgIGZvciAoY2kgPSAwOyBjaSA8IGNvbW11bml0aWVzLnNpemU7IGNpKyspIHtcbiAgICAgICAgICB0YXJnZXRDb21tdW5pdHkgPSBjb21tdW5pdGllcy5kZW5zZVtjaV07XG5cbiAgICAgICAgICBpZiAodGFyZ2V0Q29tbXVuaXR5ID09PSBjdXJyZW50Q29tbXVuaXR5KSBjb250aW51ZTtcblxuICAgICAgICAgIHRhcmdldENvbW11bml0eURlZ3JlZSA9IGNvbW11bml0aWVzLnZhbHNbY2ldO1xuXG4gICAgICAgICAgZGVsdGFDb21wdXRhdGlvbnMrKztcblxuICAgICAgICAgIGRlbHRhID0gaW5kZXguZGVsdGEoXG4gICAgICAgICAgICBpLFxuICAgICAgICAgICAgaW5EZWdyZWUsXG4gICAgICAgICAgICBvdXREZWdyZWUsXG4gICAgICAgICAgICB0YXJnZXRDb21tdW5pdHlEZWdyZWUsXG4gICAgICAgICAgICB0YXJnZXRDb21tdW5pdHlcbiAgICAgICAgICApO1xuXG4gICAgICAgICAgZGVsdGFJc0JldHRlciA9IHRpZUJyZWFrZXIoXG4gICAgICAgICAgICBiZXN0Q29tbXVuaXR5LFxuICAgICAgICAgICAgY3VycmVudENvbW11bml0eSxcbiAgICAgICAgICAgIHRhcmdldENvbW11bml0eSxcbiAgICAgICAgICAgIGRlbHRhLFxuICAgICAgICAgICAgYmVzdERlbHRhXG4gICAgICAgICAgKTtcblxuICAgICAgICAgIGlmIChkZWx0YUlzQmV0dGVyKSB7XG4gICAgICAgICAgICBiZXN0RGVsdGEgPSBkZWx0YTtcbiAgICAgICAgICAgIGJlc3RDb21tdW5pdHkgPSB0YXJnZXRDb21tdW5pdHk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gU2hvdWxkIHdlIG1vdmUgdGhlIG5vZGU/XG4gICAgICAgIGlmIChiZXN0RGVsdGEgPCAwKSB7XG4gICAgICAgICAgLy8gTk9URTogdGhpcyBpcyB0byBhbGxvdyBub2RlcyB0byBtb3ZlIGJhY2sgdG8gdGhlaXIgb3duIHNpbmdsZXRvblxuICAgICAgICAgIC8vIFRoaXMgY29kZSBob3dldmVyIG9ubHkgZGVhbHMgd2l0aCBtb2R1bGFyaXR5IChlLmcuIHRoZSBjb25kaXRpb25cbiAgICAgICAgICAvLyBhYm91dCBiZXN0RGVsdGEgPCAwLCB3aGljaCBpcyB0aGUgZGVsdGEgZm9yIG1vdmluZyBiYWNrIHRvXG4gICAgICAgICAgLy8gc2luZ2xldG9uIHdydC4gbW9kdWxhcml0eSkuIEluZGVlZCwgcmFyZWx5LCB0aGUgTG91dmFpblxuICAgICAgICAgIC8vIGFsZ29yaXRobSBjYW4gcHJvZHVjZSBzdWNoIGNhc2VzIHdoZW4gYSBub2RlIHdvdWxkIGJlIGJldHRlciBpblxuICAgICAgICAgIC8vIGEgc2luZ2xldG9uIHRoYXQgaW4gaXRzIG93biBjb21tdW5pdHkgd2hlbiBjb25zaWRlcmluZyBzZWxmIGxvb3BzXG4gICAgICAgICAgLy8gb3IgYSByZXNvbHV0aW9uICE9IDEuIEluIHRoaXMgY2FzZSwgZGVsdGEgd2l0aCB5b3VyIG93biBjb21tdW5pdHlcbiAgICAgICAgICAvLyBpcyBpbmRlZWQgbGVzcyB0aGFuIDAuIFRvIGhhbmRsZSBkaWZmZXJlbnQgbWV0cmljcywgb25lIHNob3VsZFxuICAgICAgICAgIC8vIGNvbnNpZGVyIGNvbXB1dGluZyB0aGUgZGVsdGEgZm9yIGdvaW5nIGJhY2sgdG8gc2luZ2xldG9uIGJlY2F1c2VcbiAgICAgICAgICAvLyBpdCBtaWdodCBub3QgYmUgMC5cbiAgICAgICAgICBiZXN0Q29tbXVuaXR5ID0gaW5kZXguaXNvbGF0ZShpLCBpbkRlZ3JlZSwgb3V0RGVncmVlKTtcblxuICAgICAgICAgIC8vIElmIHRoZSBub2RlIHdhcyBhbHJlYWR5IGluIGEgc2luZ2xldG9uIGNvbW11bml0eSwgd2UgZG9uJ3QgY29uc2lkZXJcbiAgICAgICAgICAvLyBhIG1vdmUgd2FzIG1hZGVcbiAgICAgICAgICBpZiAoYmVzdENvbW11bml0eSA9PT0gY3VycmVudENvbW11bml0eSkgY29udGludWU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gSWYgbm8gbW92ZSB3YXMgbWFkZSwgd2UgY29udGludWUgdG8gbmV4dCBub2RlXG4gICAgICAgICAgaWYgKGJlc3RDb21tdW5pdHkgPT09IGN1cnJlbnRDb21tdW5pdHkpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBBY3R1YWxseSBtb3ZpbmcgdGhlIG5vZGUgdG8gYSBuZXcgY29tbXVuaXR5XG4gICAgICAgICAgICBpbmRleC5tb3ZlKGksIGluRGVncmVlLCBvdXREZWdyZWUsIGJlc3RDb21tdW5pdHkpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIG1vdmVXYXNNYWRlID0gdHJ1ZTtcbiAgICAgICAgY3VycmVudE1vdmVzKys7XG5cbiAgICAgICAgLy8gQWRkaW5nIG5laWdoYm9ycyBmcm9tIG90aGVyIGNvbW11bml0aWVzIHRvIHRoZSBxdWV1ZVxuICAgICAgICBzdGFydCA9IGluZGV4LnN0YXJ0c1tpXTtcbiAgICAgICAgZW5kID0gaW5kZXguc3RhcnRzW2kgKyAxXTtcblxuICAgICAgICBmb3IgKDsgc3RhcnQgPCBlbmQ7IHN0YXJ0KyspIHtcbiAgICAgICAgICBqID0gaW5kZXgubmVpZ2hib3Job29kW3N0YXJ0XTtcbiAgICAgICAgICB0YXJnZXRDb21tdW5pdHkgPSBpbmRleC5iZWxvbmdpbmdzW2pdO1xuXG4gICAgICAgICAgaWYgKHRhcmdldENvbW11bml0eSAhPT0gYmVzdENvbW11bml0eSkgcXVldWUuZW5xdWV1ZShqKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBtb3Zlcy5wdXNoKGN1cnJlbnRNb3Zlcyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGxvY2FsTW92ZXMgPSBbXTtcbiAgICAgIG1vdmVzLnB1c2gobG9jYWxNb3Zlcyk7XG5cbiAgICAgIC8vIFRyYWRpdGlvbmFsIExvdXZhaW4gaXRlcmF0aXZlIHRyYXZlcnNhbCBvZiB0aGUgZ3JhcGhcbiAgICAgIHdoaWxlIChsb2NhbE1vdmVXYXNNYWRlKSB7XG4gICAgICAgIGxvY2FsTW92ZVdhc01hZGUgPSBmYWxzZTtcbiAgICAgICAgY3VycmVudE1vdmVzID0gMDtcblxuICAgICAgICByaSA9IG9wdGlvbnMucmFuZG9tV2FsayA/IHJhbmRvbUluZGV4KGwpIDogMDtcblxuICAgICAgICBmb3IgKHMgPSAwOyBzIDwgbDsgcysrLCByaSsrKSB7XG4gICAgICAgICAgaSA9IHJpICUgbDtcblxuICAgICAgICAgIG5vZGVzVmlzaXRlZCsrO1xuXG4gICAgICAgICAgaW5EZWdyZWUgPSAwO1xuICAgICAgICAgIG91dERlZ3JlZSA9IDA7XG4gICAgICAgICAgY29tbXVuaXRpZXMuY2xlYXIoKTtcblxuICAgICAgICAgIGN1cnJlbnRDb21tdW5pdHkgPSBpbmRleC5iZWxvbmdpbmdzW2ldO1xuXG4gICAgICAgICAgc3RhcnQgPSBpbmRleC5zdGFydHNbaV07XG4gICAgICAgICAgZW5kID0gaW5kZXguc3RhcnRzW2kgKyAxXTtcbiAgICAgICAgICBvZmZzZXQgPSBpbmRleC5vZmZzZXRzW2ldO1xuXG4gICAgICAgICAgLy8gVHJhdmVyc2luZyBuZWlnaGJvcnNcbiAgICAgICAgICBmb3IgKDsgc3RhcnQgPCBlbmQ7IHN0YXJ0KyspIHtcbiAgICAgICAgICAgIG91dCA9IHN0YXJ0IDwgb2Zmc2V0O1xuICAgICAgICAgICAgaiA9IGluZGV4Lm5laWdoYm9yaG9vZFtzdGFydF07XG4gICAgICAgICAgICB3ZWlnaHQgPSBpbmRleC53ZWlnaHRzW3N0YXJ0XTtcblxuICAgICAgICAgICAgdGFyZ2V0Q29tbXVuaXR5ID0gaW5kZXguYmVsb25naW5nc1tqXTtcblxuICAgICAgICAgICAgLy8gSW5jcmVtZW50aW5nIG1ldHJpY3NcbiAgICAgICAgICAgIGlmIChvdXQpIG91dERlZ3JlZSArPSB3ZWlnaHQ7XG4gICAgICAgICAgICBlbHNlIGluRGVncmVlICs9IHdlaWdodDtcblxuICAgICAgICAgICAgYWRkV2VpZ2h0VG9Db21tdW5pdHkoY29tbXVuaXRpZXMsIHRhcmdldENvbW11bml0eSwgd2VpZ2h0KTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICAvLyBGaW5kaW5nIGJlc3QgY29tbXVuaXR5IHRvIG1vdmUgdG9cbiAgICAgICAgICBiZXN0RGVsdGEgPSBpbmRleC5kZWx0YVdpdGhPd25Db21tdW5pdHkoXG4gICAgICAgICAgICBpLFxuICAgICAgICAgICAgaW5EZWdyZWUsXG4gICAgICAgICAgICBvdXREZWdyZWUsXG4gICAgICAgICAgICBjb21tdW5pdGllcy5nZXQoY3VycmVudENvbW11bml0eSkgfHwgMCxcbiAgICAgICAgICAgIGN1cnJlbnRDb21tdW5pdHlcbiAgICAgICAgICApO1xuICAgICAgICAgIGJlc3RDb21tdW5pdHkgPSBjdXJyZW50Q29tbXVuaXR5O1xuXG4gICAgICAgICAgZm9yIChjaSA9IDA7IGNpIDwgY29tbXVuaXRpZXMuc2l6ZTsgY2krKykge1xuICAgICAgICAgICAgdGFyZ2V0Q29tbXVuaXR5ID0gY29tbXVuaXRpZXMuZGVuc2VbY2ldO1xuXG4gICAgICAgICAgICBpZiAodGFyZ2V0Q29tbXVuaXR5ID09PSBjdXJyZW50Q29tbXVuaXR5KSBjb250aW51ZTtcblxuICAgICAgICAgICAgdGFyZ2V0Q29tbXVuaXR5RGVncmVlID0gY29tbXVuaXRpZXMudmFsc1tjaV07XG5cbiAgICAgICAgICAgIGRlbHRhQ29tcHV0YXRpb25zKys7XG5cbiAgICAgICAgICAgIGRlbHRhID0gaW5kZXguZGVsdGEoXG4gICAgICAgICAgICAgIGksXG4gICAgICAgICAgICAgIGluRGVncmVlLFxuICAgICAgICAgICAgICBvdXREZWdyZWUsXG4gICAgICAgICAgICAgIHRhcmdldENvbW11bml0eURlZ3JlZSxcbiAgICAgICAgICAgICAgdGFyZ2V0Q29tbXVuaXR5XG4gICAgICAgICAgICApO1xuXG4gICAgICAgICAgICBkZWx0YUlzQmV0dGVyID0gdGllQnJlYWtlcihcbiAgICAgICAgICAgICAgYmVzdENvbW11bml0eSxcbiAgICAgICAgICAgICAgY3VycmVudENvbW11bml0eSxcbiAgICAgICAgICAgICAgdGFyZ2V0Q29tbXVuaXR5LFxuICAgICAgICAgICAgICBkZWx0YSxcbiAgICAgICAgICAgICAgYmVzdERlbHRhXG4gICAgICAgICAgICApO1xuXG4gICAgICAgICAgICBpZiAoZGVsdGFJc0JldHRlcikge1xuICAgICAgICAgICAgICBiZXN0RGVsdGEgPSBkZWx0YTtcbiAgICAgICAgICAgICAgYmVzdENvbW11bml0eSA9IHRhcmdldENvbW11bml0eTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICAvLyBTaG91bGQgd2UgbW92ZSB0aGUgbm9kZT9cbiAgICAgICAgICBpZiAoYmVzdERlbHRhIDwgMCkge1xuICAgICAgICAgICAgLy8gTk9URTogdGhpcyBpcyB0byBhbGxvdyBub2RlcyB0byBtb3ZlIGJhY2sgdG8gdGhlaXIgb3duIHNpbmdsZXRvblxuICAgICAgICAgICAgLy8gVGhpcyBjb2RlIGhvd2V2ZXIgb25seSBkZWFscyB3aXRoIG1vZHVsYXJpdHkgKGUuZy4gdGhlIGNvbmRpdGlvblxuICAgICAgICAgICAgLy8gYWJvdXQgYmVzdERlbHRhIDwgMCwgd2hpY2ggaXMgdGhlIGRlbHRhIGZvciBtb3ZpbmcgYmFjayB0b1xuICAgICAgICAgICAgLy8gc2luZ2xldG9uIHdydC4gbW9kdWxhcml0eSkuIEluZGVlZCwgcmFyZWx5LCB0aGUgTG91dmFpblxuICAgICAgICAgICAgLy8gYWxnb3JpdGhtIGNhbiBwcm9kdWNlIHN1Y2ggY2FzZXMgd2hlbiBhIG5vZGUgd291bGQgYmUgYmV0dGVyIGluXG4gICAgICAgICAgICAvLyBhIHNpbmdsZXRvbiB0aGF0IGluIGl0cyBvd24gY29tbXVuaXR5IHdoZW4gY29uc2lkZXJpbmcgc2VsZiBsb29wc1xuICAgICAgICAgICAgLy8gb3IgYSByZXNvbHV0aW9uICE9IDEuIEluIHRoaXMgY2FzZSwgZGVsdGEgd2l0aCB5b3VyIG93biBjb21tdW5pdHlcbiAgICAgICAgICAgIC8vIGlzIGluZGVlZCBsZXNzIHRoYW4gMC4gVG8gaGFuZGxlIGRpZmZlcmVudCBtZXRyaWNzLCBvbmUgc2hvdWxkXG4gICAgICAgICAgICAvLyBjb25zaWRlciBjb21wdXRpbmcgdGhlIGRlbHRhIGZvciBnb2luZyBiYWNrIHRvIHNpbmdsZXRvbiBiZWNhdXNlXG4gICAgICAgICAgICAvLyBpdCBtaWdodCBub3QgYmUgMC5cbiAgICAgICAgICAgIGJlc3RDb21tdW5pdHkgPSBpbmRleC5pc29sYXRlKGksIGluRGVncmVlLCBvdXREZWdyZWUpO1xuXG4gICAgICAgICAgICAvLyBJZiB0aGUgbm9kZSB3YXMgYWxyZWFkeSBpbiBhIHNpbmdsZXRvbiBjb21tdW5pdHksIHdlIGRvbid0IGNvbnNpZGVyXG4gICAgICAgICAgICAvLyBhIG1vdmUgd2FzIG1hZGVcbiAgICAgICAgICAgIGlmIChiZXN0Q29tbXVuaXR5ID09PSBjdXJyZW50Q29tbXVuaXR5KSBjb250aW51ZTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gSWYgbm8gbW92ZSB3YXMgbWFkZSwgd2UgY29udGludWUgdG8gbmV4dCBub2RlXG4gICAgICAgICAgICBpZiAoYmVzdENvbW11bml0eSA9PT0gY3VycmVudENvbW11bml0eSkge1xuICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIC8vIEFjdHVhbGx5IG1vdmluZyB0aGUgbm9kZSB0byBhIG5ldyBjb21tdW5pdHlcbiAgICAgICAgICAgICAgaW5kZXgubW92ZShpLCBpbkRlZ3JlZSwgb3V0RGVncmVlLCBiZXN0Q29tbXVuaXR5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBsb2NhbE1vdmVXYXNNYWRlID0gdHJ1ZTtcbiAgICAgICAgICBjdXJyZW50TW92ZXMrKztcbiAgICAgICAgfVxuXG4gICAgICAgIGxvY2FsTW92ZXMucHVzaChjdXJyZW50TW92ZXMpO1xuXG4gICAgICAgIG1vdmVXYXNNYWRlID0gbG9jYWxNb3ZlV2FzTWFkZSB8fCBtb3ZlV2FzTWFkZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBXZSBjb250aW51ZSB3b3JraW5nIG9uIHRoZSBpbmR1Y2VkIGdyYXBoXG4gICAgaWYgKG1vdmVXYXNNYWRlKSBpbmRleC56b29tT3V0KCk7XG4gIH1cblxuICB2YXIgcmVzdWx0cyA9IHtcbiAgICBpbmRleDogaW5kZXgsXG4gICAgZGVsdGFDb21wdXRhdGlvbnM6IGRlbHRhQ29tcHV0YXRpb25zLFxuICAgIG5vZGVzVmlzaXRlZDogbm9kZXNWaXNpdGVkLFxuICAgIG1vdmVzOiBtb3Zlc1xuICB9O1xuXG4gIHJldHVybiByZXN1bHRzO1xufVxuXG4vKipcbiAqIEZ1bmN0aW9uIHJldHVybmluZyB0aGUgY29tbXVuaXRpZXMgbWFwcGluZyBvZiB0aGUgZ3JhcGguXG4gKlxuICogQHBhcmFtICB7Ym9vbGVhbn0gYXNzaWduICAgICAgICAgICAgIC0gQXNzaWduIGNvbW11bml0aWVzIHRvIG5vZGVzIGF0dHJpYnV0ZXM/XG4gKiBAcGFyYW0gIHtib29sZWFufSBkZXRhaWxlZCAgICAgICAgICAgLSBXaGV0aGVyIHRvIHJldHVybiBkZXRhaWxlZCBpbmZvcm1hdGlvbi5cbiAqIEBwYXJhbSAge0dyYXBofSAgIGdyYXBoICAgICAgICAgICAgICAtIFRhcmdldCBncmFwaC5cbiAqIEBwYXJhbSAge29iamVjdH0gIG9wdGlvbnMgICAgICAgICAgICAtIE9wdGlvbnM6XG4gKiBAcGFyYW0gIHtvYmplY3R9ICAgIGF0dHJpYnV0ZXMgICAgICAgICAtIEF0dHJpYnV0ZSBuYW1lczpcbiAqIEBwYXJhbSAge3N0cmluZ30gICAgICBjb21tdW5pdHkgICAgICAgICAgLSBDb21tdW5pdHkgbm9kZSBhdHRyaWJ1dGUgbmFtZS5cbiAqIEBwYXJhbSAge3N0cmluZ30gICAgICB3ZWlnaHQgICAgICAgICAgICAgLSBXZWlnaHQgZWRnZSBhdHRyaWJ1dGUgbmFtZS5cbiAqIEBwYXJhbSAge3N0cmluZ30gICAgZGVsdGFDb21wdXRhdGlvbiAgIC0gTWV0aG9kIHRvIHVzZSB0byBjb21wdXRlIGRlbHRhIGNvbXB1dGF0aW9ucy5cbiAqIEBwYXJhbSAge2Jvb2xlYW59ICAgZmFzdExvY2FsTW92ZXMgICAgIC0gV2hldGhlciB0byB1c2UgdGhlIGZhc3QgbG9jYWwgbW92ZSBvcHRpbWl6YXRpb24uXG4gKiBAcGFyYW0gIHtib29sZWFufSAgIHJhbmRvbVdhbGsgICAgICAgICAtIFdoZXRoZXIgdG8gdHJhdmVyc2UgdGhlIGdyYXBoIGluIHJhbmRvbSBvcmRlci5cbiAqIEBwYXJhbSAge251bWJlcn0gICAgcmVzb2x1dGlvbiAgICAgICAgIC0gUmVzb2x1dGlvbiBwYXJhbWV0ZXIuXG4gKiBAcGFyYW0gIHtmdW5jdGlvbn0gIHJuZyAgICAgICAgICAgICAgICAtIFJORyBmdW5jdGlvbiB0byB1c2UuXG4gKiBAcGFyYW0gIHtib29sZWFufSAgIHdlaWdodGVkICAgICAgICAgICAtIFdoZXRoZXIgdG8gY29tcHV0ZSB0aGUgd2VpZ2h0ZWQgdmVyc2lvbi5cbiAqIEByZXR1cm4ge29iamVjdH1cbiAqL1xuZnVuY3Rpb24gbG91dmFpbihhc3NpZ24sIGRldGFpbGVkLCBncmFwaCwgb3B0aW9ucykge1xuICBpZiAoIWlzR3JhcGgoZ3JhcGgpKVxuICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICdncmFwaG9sb2d5LWNvbW11bml0aWVzLWxvdXZhaW46IHRoZSBnaXZlbiBncmFwaCBpcyBub3QgYSB2YWxpZCBncmFwaG9sb2d5IGluc3RhbmNlLidcbiAgICApO1xuXG4gIHZhciB0eXBlID0gaW5mZXJUeXBlKGdyYXBoKTtcblxuICBpZiAodHlwZSA9PT0gJ21peGVkJylcbiAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAnZ3JhcGhvbG9neS1jb21tdW5pdGllcy1sb3V2YWluOiBjYW5ub3QgcnVuIHRoZSBhbGdvcml0aG0gb24gYSB0cnVlIG1peGVkIGdyYXBoLidcbiAgICApO1xuXG4gIC8vIEF0dHJpYnV0ZXMgbmFtZVxuICBvcHRpb25zID0gcmVzb2x2ZURlZmF1bHRzKG9wdGlvbnMsIERFRkFVTFRTKTtcblxuICAvLyBFbXB0eSBncmFwaCBjYXNlXG4gIHZhciBjID0gMDtcblxuICBpZiAoZ3JhcGguc2l6ZSA9PT0gMCkge1xuICAgIGlmIChhc3NpZ24pIHtcbiAgICAgIGdyYXBoLmZvckVhY2hOb2RlKGZ1bmN0aW9uIChub2RlKSB7XG4gICAgICAgIGdyYXBoLnNldE5vZGVBdHRyaWJ1dGUobm9kZSwgb3B0aW9ucy5hdHRyaWJ1dGVzLmNvbW11bml0aWVzLCBjKyspO1xuICAgICAgfSk7XG5cbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgY29tbXVuaXRpZXMgPSB7fTtcblxuICAgIGdyYXBoLmZvckVhY2hOb2RlKGZ1bmN0aW9uIChub2RlKSB7XG4gICAgICBjb21tdW5pdGllc1tub2RlXSA9IGMrKztcbiAgICB9KTtcblxuICAgIGlmICghZGV0YWlsZWQpIHJldHVybiBjb21tdW5pdGllcztcblxuICAgIHJldHVybiB7XG4gICAgICBjb21tdW5pdGllczogY29tbXVuaXRpZXMsXG4gICAgICBjb3VudDogZ3JhcGgub3JkZXIsXG4gICAgICBkZWx0YUNvbXB1dGF0aW9uczogMCxcbiAgICAgIGRlbmRyb2dyYW06IG51bGwsXG4gICAgICBsZXZlbDogMCxcbiAgICAgIG1vZHVsYXJpdHk6IE5hTixcbiAgICAgIG1vdmVzOiBudWxsLFxuICAgICAgbm9kZXNWaXNpdGVkOiAwLFxuICAgICAgcmVzb2x1dGlvbjogb3B0aW9ucy5yZXNvbHV0aW9uXG4gICAgfTtcbiAgfVxuXG4gIHZhciBmbiA9IHR5cGUgPT09ICd1bmRpcmVjdGVkJyA/IHVuZGlyZWN0ZWRMb3V2YWluIDogZGlyZWN0ZWRMb3V2YWluO1xuXG4gIHZhciByZXN1bHRzID0gZm4oZGV0YWlsZWQsIGdyYXBoLCBvcHRpb25zKTtcblxuICB2YXIgaW5kZXggPSByZXN1bHRzLmluZGV4O1xuXG4gIC8vIFN0YW5kYXJkIG91dHB1dFxuICBpZiAoIWRldGFpbGVkKSB7XG4gICAgaWYgKGFzc2lnbikge1xuICAgICAgaW5kZXguYXNzaWduKG9wdGlvbnMuYXR0cmlidXRlcy5jb21tdW5pdHkpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHJldHVybiBpbmRleC5jb2xsZWN0KCk7XG4gIH1cblxuICAvLyBEZXRhaWxlZCBvdXRwdXRcbiAgdmFyIG91dHB1dCA9IHtcbiAgICBjb3VudDogaW5kZXguQyxcbiAgICBkZWx0YUNvbXB1dGF0aW9uczogcmVzdWx0cy5kZWx0YUNvbXB1dGF0aW9ucyxcbiAgICBkZW5kcm9ncmFtOiBpbmRleC5kZW5kcm9ncmFtLFxuICAgIGxldmVsOiBpbmRleC5sZXZlbCxcbiAgICBtb2R1bGFyaXR5OiBpbmRleC5tb2R1bGFyaXR5KCksXG4gICAgbW92ZXM6IHJlc3VsdHMubW92ZXMsXG4gICAgbm9kZXNWaXNpdGVkOiByZXN1bHRzLm5vZGVzVmlzaXRlZCxcbiAgICByZXNvbHV0aW9uOiBvcHRpb25zLnJlc29sdXRpb25cbiAgfTtcblxuICBpZiAoYXNzaWduKSB7XG4gICAgaW5kZXguYXNzaWduKG9wdGlvbnMuYXR0cmlidXRlcy5jb21tdW5pdHkpO1xuICAgIHJldHVybiBvdXRwdXQ7XG4gIH1cblxuICBvdXRwdXQuY29tbXVuaXRpZXMgPSBpbmRleC5jb2xsZWN0KCk7XG5cbiAgcmV0dXJuIG91dHB1dDtcbn1cblxuLyoqXG4gKiBFeHBvcnRpbmcuXG4gKi9cbnZhciBmbiA9IGxvdXZhaW4uYmluZChudWxsLCBmYWxzZSwgZmFsc2UpO1xuZm4uYXNzaWduID0gbG91dmFpbi5iaW5kKG51bGwsIHRydWUsIGZhbHNlKTtcbmZuLmRldGFpbGVkID0gbG91dmFpbi5iaW5kKG51bGwsIGZhbHNlLCB0cnVlKTtcbmZuLmRlZmF1bHRzID0gREVGQVVMVFM7XG5cbm1vZHVsZS5leHBvcnRzID0gZm47XG4iLCAiLyoqXG4gKiBHcmFwaG9sb2d5IEhJVFMgQWxnb3JpdGhtXG4gKiA9PT09PT09PT09PT09PT09PT09PT09PT09PVxuICpcbiAqIEltcGxlbWVudGF0aW9uIG9mIHRoZSBISVRTIGFsZ29yaXRobSBmb3IgdGhlIGdyYXBob2xvZ3kgc3BlY3MuXG4gKi9cbnZhciByZXNvbHZlRGVmYXVsdHMgPSByZXF1aXJlKCdncmFwaG9sb2d5LXV0aWxzL2RlZmF1bHRzJyk7XG52YXIgaXNHcmFwaCA9IHJlcXVpcmUoJ2dyYXBob2xvZ3ktdXRpbHMvaXMtZ3JhcGgnKTtcblxuLyoqXG4gKiBEZWZhdWx0cy5cbiAqL1xudmFyIERFRkFVTFRTID0ge1xuICBhdHRyaWJ1dGVzOiB7XG4gICAgYXV0aG9yaXR5OiAnYXV0aG9yaXR5JyxcbiAgICBodWI6ICdodWInLFxuICAgIHdlaWdodDogJ3dlaWdodCdcbiAgfSxcbiAgbWF4SXRlcmF0aW9uczogMTAwLFxuICBub3JtYWxpemU6IHRydWUsXG4gIHRvbGVyYW5jZTogMWUtOFxufTtcblxuLyoqXG4gKiBGdW5jdGlvbiByZXR1cm5pbmcgYW4gb2JqZWN0IHdpdGggdGhlIGdpdmVuIGtleXMgc2V0IHRvIHRoZSBnaXZlbiB2YWx1ZS5cbiAqXG4gKiBAcGFyYW0gIHthcnJheX0gIGtleXMgIC0gS2V5cyB0byBzZXQuXG4gKiBAcGFyYW0gIHtudW1iZXJ9IHZhbHVlIC0gVmFsdWUgdG8gc2V0LlxuICogQHJldHVybiB7b2JqZWN0fSAgICAgICAtIFRoZSBjcmVhdGVkIG9iamVjdC5cbiAqL1xuZnVuY3Rpb24gZGljdChrZXlzLCB2YWx1ZSkge1xuICB2YXIgbyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG5cbiAgdmFyIGksIGw7XG5cbiAgZm9yIChpID0gMCwgbCA9IGtleXMubGVuZ3RoOyBpIDwgbDsgaSsrKSBvW2tleXNbaV1dID0gdmFsdWU7XG5cbiAgcmV0dXJuIG87XG59XG5cbi8qKlxuICogRnVuY3Rpb24gcmV0dXJuaW5nIHRoZSBzdW0gb2YgYW4gb2JqZWN0J3MgdmFsdWVzLlxuICpcbiAqIEBwYXJhbSAge29iamVjdH0gbyAtIFRhcmdldCBvYmplY3QuXG4gKiBAcmV0dXJuIHtudW1iZXJ9ICAgLSBUaGUgc3VtLlxuICovXG5mdW5jdGlvbiBzdW0obykge1xuICB2YXIgbmIgPSAwO1xuXG4gIGZvciAodmFyIGsgaW4gbykgbmIgKz0gb1trXTtcblxuICByZXR1cm4gbmI7XG59XG5cbi8qKlxuICogSElUUyBmdW5jdGlvbiB0YWtpbmcgYSBHcmFwaCBpbnN0YW5jZSAmIHNvbWUgb3B0aW9ucyBhbmQgcmV0dXJuaW5nIGEgbWFwXG4gKiBvZiBub2RlcyB0byB0aGVpciBodWJzICYgYXV0aG9yaXRpZXMuXG4gKlxuICogQHBhcmFtICB7Ym9vbGVhbn0gYXNzaWduICAgIC0gU2hvdWxkIHdlIGFzc2lnbiB0aGUgcmVzdWx0cyBhcyBub2RlIGF0dHJpYnV0ZXM/XG4gKiBAcGFyYW0gIHtHcmFwaH0gICBncmFwaCAgICAgLSBBIEdyYXBoIGluc3RhbmNlLlxuICogQHBhcmFtICB7b2JqZWN0fSAgW29wdGlvbnNdIC0gT3B0aW9uczpcbiAqIEBwYXJhbSAge251bWJlcn0gICAgW21heEl0ZXJhdGlvbnNdIC0gTWF4aW11bSBudW1iZXIgb2YgaXRlcmF0aW9ucyB0byBwZXJmb3JtLlxuICogQHBhcmFtICB7Ym9vbGVhbn0gICBbbm9ybWFsaXplXSAgICAgLSBXaGV0aGVyIHRvIG5vcm1hbGl6ZSB0aGUgcmVzdWx0cyBieSB0aGVcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3VtIG9mIGFsbCB2YWx1ZXMuXG4gKiBAcGFyYW0gIHtudW1iZXJ9ICAgIFt0b2xlcmFuY2VdICAgICAtIEVycm9yIHRvbGVyYW5jZSB1c2VkIHRvIGNoZWNrXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnZlcmdlbmNlIGluIHBvd2VyIG1ldGhvZCBpdGVyYXRpb24uXG4gKi9cbmZ1bmN0aW9uIGhpdHMoYXNzaWduLCBncmFwaCwgb3B0aW9ucykge1xuICBpZiAoIWlzR3JhcGgoZ3JhcGgpKVxuICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICdncmFwaG9sb2d5LWhpdHM6IHRoZSBnaXZlbiBncmFwaCBpcyBub3QgYSB2YWxpZCBncmFwaG9sb2d5IGluc3RhbmNlLidcbiAgICApO1xuXG4gIGlmIChncmFwaC5tdWx0aSlcbiAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAnZ3JhcGhvbG9neS1oaXRzOiB0aGUgSElUUyBhbGdvcml0aG0gZG9lcyBub3Qgd29yayB3aXRoIE11bHRpR3JhcGhzLidcbiAgICApO1xuXG4gIG9wdGlvbnMgPSByZXNvbHZlRGVmYXVsdHMob3B0aW9ucywgREVGQVVMVFMpO1xuXG4gIC8vIFZhcmlhYmxlc1xuICB2YXIgb3JkZXIgPSBncmFwaC5vcmRlcixcbiAgICBzaXplID0gZ3JhcGguc2l6ZSxcbiAgICBub2RlcyA9IGdyYXBoLm5vZGVzKCksXG4gICAgZWRnZXMgPSBncmFwaC5lZGdlcygpLFxuICAgIGh1YnMgPSBkaWN0KG5vZGVzLCAxIC8gb3JkZXIpLFxuICAgIHdlaWdodHMgPSB7fSxcbiAgICBjb252ZXJnZWQgPSBmYWxzZSxcbiAgICBsYXN0SHVicyxcbiAgICBhdXRob3JpdGllcztcblxuICAvLyBJdGVyYXRpb24gdmFyaWFibGVzXG4gIHZhciBub2RlLCBuZWlnaGJvciwgZWRnZSwgaXRlcmF0aW9uLCBtYXhBdXRob3JpdHksIG1heEh1YiwgZXJyb3IsIHMsIGksIGosIG07XG5cbiAgLy8gSW5kZXhpbmcgd2VpZ2h0c1xuICBmb3IgKGkgPSAwOyBpIDwgc2l6ZTsgaSsrKSB7XG4gICAgZWRnZSA9IGVkZ2VzW2ldO1xuICAgIHdlaWdodHNbZWRnZV0gPVxuICAgICAgZ3JhcGguZ2V0RWRnZUF0dHJpYnV0ZShlZGdlLCBvcHRpb25zLmF0dHJpYnV0ZXMud2VpZ2h0KSB8fCAxO1xuICB9XG5cbiAgLy8gUGVyZm9ybWluZyBpdGVyYXRpb25zXG4gIGZvciAoaXRlcmF0aW9uID0gMDsgaXRlcmF0aW9uIDwgb3B0aW9ucy5tYXhJdGVyYXRpb25zOyBpdGVyYXRpb24rKykge1xuICAgIGxhc3RIdWJzID0gaHVicztcbiAgICBodWJzID0gZGljdChub2RlcywgMCk7XG4gICAgYXV0aG9yaXRpZXMgPSBkaWN0KG5vZGVzLCAwKTtcbiAgICBtYXhIdWIgPSAwO1xuICAgIG1heEF1dGhvcml0eSA9IDA7XG5cbiAgICAvLyBJdGVyYXRpbmcgb3ZlciBub2RlcyB0byB1cGRhdGUgYXV0aG9yaXRpZXNcbiAgICBmb3IgKGkgPSAwOyBpIDwgb3JkZXI7IGkrKykge1xuICAgICAgbm9kZSA9IG5vZGVzW2ldO1xuICAgICAgZWRnZXMgPSBncmFwaC5vdXRFZGdlcyhub2RlKS5jb25jYXQoZ3JhcGgudW5kaXJlY3RlZEVkZ2VzKG5vZGUpKTtcblxuICAgICAgLy8gSXRlcmF0aW5nIG92ZXIgbmVpZ2hib3JzXG4gICAgICBmb3IgKGogPSAwLCBtID0gZWRnZXMubGVuZ3RoOyBqIDwgbTsgaisrKSB7XG4gICAgICAgIGVkZ2UgPSBlZGdlc1tqXTtcbiAgICAgICAgbmVpZ2hib3IgPSBncmFwaC5vcHBvc2l0ZShub2RlLCBlZGdlKTtcblxuICAgICAgICBhdXRob3JpdGllc1tuZWlnaGJvcl0gKz0gbGFzdEh1YnNbbm9kZV0gKiB3ZWlnaHRzW2VkZ2VdO1xuXG4gICAgICAgIGlmIChhdXRob3JpdGllc1tuZWlnaGJvcl0gPiBtYXhBdXRob3JpdHkpXG4gICAgICAgICAgbWF4QXV0aG9yaXR5ID0gYXV0aG9yaXRpZXNbbmVpZ2hib3JdO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIEl0ZXJhdGluZyBvdmVyIG5vZGVzIHRvIHVwZGF0ZSBodWJzXG4gICAgZm9yIChpID0gMDsgaSA8IG9yZGVyOyBpKyspIHtcbiAgICAgIG5vZGUgPSBub2Rlc1tpXTtcbiAgICAgIGVkZ2VzID0gZ3JhcGgub3V0RWRnZXMobm9kZSkuY29uY2F0KGdyYXBoLnVuZGlyZWN0ZWRFZGdlcyhub2RlKSk7XG5cbiAgICAgIGZvciAoaiA9IDAsIG0gPSBlZGdlcy5sZW5ndGg7IGogPCBtOyBqKyspIHtcbiAgICAgICAgZWRnZSA9IGVkZ2VzW2pdO1xuICAgICAgICBuZWlnaGJvciA9IGdyYXBoLm9wcG9zaXRlKG5vZGUsIGVkZ2UpO1xuXG4gICAgICAgIGh1YnNbbm9kZV0gKz0gYXV0aG9yaXRpZXNbbmVpZ2hib3JdICogd2VpZ2h0c1tlZGdlXTtcblxuICAgICAgICBpZiAoaHVic1tuZWlnaGJvcl0gPiBtYXhIdWIpIG1heEh1YiA9IGh1YnNbbmVpZ2hib3JdO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIE5vcm1hbGl6aW5nXG4gICAgcyA9IDEgLyBtYXhIdWI7XG5cbiAgICBmb3IgKG5vZGUgaW4gaHVicykgaHVic1tub2RlXSAqPSBzO1xuXG4gICAgcyA9IDEgLyBtYXhBdXRob3JpdHk7XG5cbiAgICBmb3IgKG5vZGUgaW4gYXV0aG9yaXRpZXMpIGF1dGhvcml0aWVzW25vZGVdICo9IHM7XG5cbiAgICAvLyBDaGVja2luZyBjb252ZXJnZW5jZVxuICAgIGVycm9yID0gMDtcblxuICAgIGZvciAobm9kZSBpbiBodWJzKSBlcnJvciArPSBNYXRoLmFicyhodWJzW25vZGVdIC0gbGFzdEh1YnNbbm9kZV0pO1xuXG4gICAgaWYgKGVycm9yIDwgb3B0aW9ucy50b2xlcmFuY2UpIHtcbiAgICAgIGNvbnZlcmdlZCA9IHRydWU7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cblxuICAvLyBTaG91bGQgd2Ugbm9ybWFsaXplIHRoZSByZXN1bHQ/XG4gIGlmIChvcHRpb25zLm5vcm1hbGl6ZSkge1xuICAgIHMgPSAxIC8gc3VtKGF1dGhvcml0aWVzKTtcblxuICAgIGZvciAobm9kZSBpbiBhdXRob3JpdGllcykgYXV0aG9yaXRpZXNbbm9kZV0gKj0gcztcblxuICAgIHMgPSAxIC8gc3VtKGh1YnMpO1xuXG4gICAgZm9yIChub2RlIGluIGh1YnMpIGh1YnNbbm9kZV0gKj0gcztcbiAgfVxuXG4gIC8vIFNob3VsZCB3ZSBhc3NpZ24gdGhlIHJlc3VsdHMgdG8gdGhlIGdyYXBoP1xuICBpZiAoYXNzaWduKSB7XG4gICAgZm9yIChpID0gMDsgaSA8IG9yZGVyOyBpKyspIHtcbiAgICAgIG5vZGUgPSBub2Rlc1tpXTtcbiAgICAgIGdyYXBoLnNldE5vZGVBdHRyaWJ1dGUoXG4gICAgICAgIG5vZGUsXG4gICAgICAgIG9wdGlvbnMuYXR0cmlidXRlcy5hdXRob3JpdHksXG4gICAgICAgIGF1dGhvcml0aWVzW25vZGVdXG4gICAgICApO1xuICAgICAgZ3JhcGguc2V0Tm9kZUF0dHJpYnV0ZShub2RlLCBvcHRpb25zLmF0dHJpYnV0ZXMuaHViLCBodWJzW25vZGVdKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4ge2NvbnZlcmdlZDogY29udmVyZ2VkLCBodWJzOiBodWJzLCBhdXRob3JpdGllczogYXV0aG9yaXRpZXN9O1xufVxuXG4vKipcbiAqIEV4cG9ydGluZy5cbiAqL1xudmFyIG1haW4gPSBoaXRzLmJpbmQobnVsbCwgZmFsc2UpO1xubWFpbi5hc3NpZ24gPSBoaXRzLmJpbmQobnVsbCwgdHJ1ZSk7XG5cbm1vZHVsZS5leHBvcnRzID0gbWFpbjtcbiIsICJcclxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBzYW5pdGl6ZUh0bWwodGV4dCwgb3B0cykge1xyXG4gIC8vIFN0cmlwIEhUTUwgZnJvbSBUZXh0IHVzaW5nIGJyb3dzZXIgSFRNTCBwYXJzZXJcclxuICBpZiAoKHR5cGVvZiB0ZXh0ID09ICdzdHJpbmcnIHx8IHRleHQgaW5zdGFuY2VvZiBTdHJpbmcpICYmIHR5cGVvZiBkb2N1bWVudCAhPT0gXCJ1bmRlZmluZWRcIikge1xyXG4gICAgdmFyICRkaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiRElWXCIpO1xyXG4gICAgJGRpdi5pbm5lckhUTUwgPSB0ZXh0O1xyXG4gICAgdGV4dCA9ICgkZGl2LnRleHRDb250ZW50IHx8ICcnKS50cmltKCk7XHJcbiAgfVxyXG4gIC8vRE9NIE9iamVjdFxyXG4gIGVsc2UgaWYgKHR5cGVvZiB0ZXh0ID09PSAnb2JqZWN0JyAmJiB0ZXh0LnRleHRDb250ZW50KSB7XHJcbiAgICB0ZXh0ID0gKHRleHQudGV4dENvbnRlbnQgfHwgJycpLnRyaW0oKTtcclxuICB9XHJcblxyXG4gIHJldHVybiB0ZXh0O1xyXG59O1xyXG4iLCAiXHJcbmV4cG9ydHMuZW5kc1dpdGhDaGFyID0gZnVuY3Rpb24gZW5kc193aXRoX2NoYXIod29yZCwgYykge1xyXG4gICAgaWYgKGMubGVuZ3RoID4gMSkge1xyXG4gICAgICAgIHJldHVybiBjLmluZGV4T2Yod29yZC5zbGljZSgtMSkpID4gLTE7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHdvcmQuc2xpY2UoLTEpID09PSBjO1xyXG59O1xyXG5cclxuZXhwb3J0cy5lbmRzV2l0aCA9IGZ1bmN0aW9uIGVuZHNfd2l0aCh3b3JkLCBlbmQpIHtcclxuICAgIHJldHVybiB3b3JkLnNsaWNlKHdvcmQubGVuZ3RoIC0gZW5kLmxlbmd0aCkgPT09IGVuZDtcclxufTsiLCAidmFyIGFiYnJldmlhdGlvbnM7XHJcblxyXG52YXIgZW5nbGlzaEFiYnJldmlhdGlvbnMgPSBbXHJcbiAgICBcImFsXCIsXHJcbiAgICBcImFkalwiLFxyXG4gICAgXCJhc3NuXCIsXHJcbiAgICBcIkF2ZVwiLFxyXG4gICAgXCJCU2NcIiwgXCJNU2NcIixcclxuICAgIFwiQ2VsbFwiLFxyXG4gICAgXCJDaFwiLFxyXG4gICAgXCJDb1wiLFxyXG4gICAgXCJjY1wiLFxyXG4gICAgXCJDb3JwXCIsXHJcbiAgICBcIkRlbVwiLFxyXG4gICAgXCJEZXB0XCIsXHJcbiAgICBcImVkXCIsXHJcbiAgICBcImVnXCIsXHJcbiAgICBcIkVxXCIsXHJcbiAgICBcIkVxc1wiLFxyXG4gICAgXCJlc3RcIixcclxuICAgIFwiZXN0XCIsXHJcbiAgICBcImV0Y1wiLFxyXG4gICAgXCJFeFwiLFxyXG4gICAgXCJleHRcIiwgLy8gKyBudW1iZXI/XHJcbiAgICBcIkZpZ1wiLFxyXG4gICAgXCJmaWdcIixcclxuICAgIFwiRmlnc1wiLFxyXG4gICAgXCJmaWdzXCIsXHJcbiAgICBcImkuZVwiLFxyXG4gICAgXCJpZVwiLFxyXG4gICAgXCJJbmNcIixcclxuICAgIFwiaW5jXCIsXHJcbiAgICBcIkphblwiLFwiRmViXCIsXCJNYXJcIixcIkFwclwiLFwiSnVuXCIsXCJKdWxcIixcIkF1Z1wiLFwiU2VwXCIsXCJTZXB0XCIsXCJPY3RcIixcIk5vdlwiLFwiRGVjXCIsXHJcbiAgICBcImpyXCIsXHJcbiAgICBcIm1pXCIsXHJcbiAgICBcIk1pc3NcIiwgXCJNcnNcIiwgXCJNclwiLCBcIk1zXCIsXHJcbiAgICBcIk1vbFwiLFxyXG4gICAgXCJtdFwiLFxyXG4gICAgXCJtdHNcIixcclxuICAgIFwibm9cIixcclxuICAgIFwiTm9zXCIsXHJcbiAgICBcIlBoRFwiLCBcIk1EXCIsIFwiQkFcIiwgXCJNQVwiLCBcIk1NXCIsXHJcbiAgICBcInBsXCIsXHJcbiAgICBcInBvcFwiLFxyXG4gICAgXCJwcFwiLFxyXG4gICAgXCJQcm9mXCIsIFwiRHJcIixcclxuICAgIFwicHRcIixcclxuICAgIFwiUmVmXCIsXHJcbiAgICBcIlJlZnNcIixcclxuICAgIFwiUmVwXCIsXHJcbiAgICBcInJlcHJcIixcclxuICAgIFwicmV2XCIsXHJcbiAgICBcIlNlY1wiLFxyXG4gICAgXCJTZWNzXCIsXHJcbiAgICBcIlNndFwiLCBcIkNvbFwiLCBcIkdlblwiLCBcIlJlcFwiLCBcIlNlblwiLCdHb3YnLCBcIkx0XCIsIFwiTWFqXCIsIFwiQ2FwdFwiLFwiU3RcIixcclxuICAgIFwiU3JcIiwgXCJzclwiLCBcIkpyXCIsIFwianJcIiwgXCJSZXZcIixcclxuICAgIFwiU3VuXCIsXCJNb25cIixcIlR1XCIsXCJUdWVcIixcIlR1ZXNcIixcIldlZFwiLFwiVGhcIixcIlRodVwiLFwiVGh1clwiLFwiVGh1cnNcIixcIkZyaVwiLFwiU2F0XCIsXHJcbiAgICBcInRyYW5zXCIsXHJcbiAgICBcIlVuaXZcIixcclxuICAgIFwiVml6XCIsXHJcbiAgICBcIlZvbFwiLFxyXG4gICAgXCJ2c1wiLFxyXG4gICAgXCJ2XCIsXHJcbl07XHJcblxyXG5leHBvcnRzLnNldEFiYnJldmlhdGlvbnMgPSBmdW5jdGlvbihhYmJyKSB7XHJcbiAgICBpZiAoYWJicikge1xyXG4gICAgICAgIGFiYnJldmlhdGlvbnMgPSBhYmJyO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgICBhYmJyZXZpYXRpb25zID0gZW5nbGlzaEFiYnJldmlhdGlvbnM7XHJcbiAgICB9XHJcbn1cclxuXHJcbnZhciBpc0NhcGl0YWxpemVkID0gZXhwb3J0cy5pc0NhcGl0YWxpemVkID0gZnVuY3Rpb24oc3RyKSB7XHJcbiAgICByZXR1cm4gL15bQS1aXVthLXpdLiovLnRlc3Qoc3RyKSB8fCBpc051bWJlcihzdHIpO1xyXG59XHJcblxyXG4vLyBTdGFydCB3aXRoIG9wZW5pbmcgcXVvdGVzIG9yIGNhcGl0YWxpemVkIGxldHRlclxyXG5leHBvcnRzLmlzU2VudGVuY2VTdGFydGVyID0gZnVuY3Rpb24oc3RyKSB7XHJcbiAgICByZXR1cm4gaXNDYXBpdGFsaXplZChzdHIpIHx8IC9gYHxcInwnLy50ZXN0KHN0ci5zdWJzdHJpbmcoMCwyKSk7XHJcbn1cclxuXHJcbmV4cG9ydHMuaXNDb21tb25BYmJyZXZpYXRpb24gPSBmdW5jdGlvbihzdHIpIHtcclxuICAgIHZhciBub1N5bWJvbHMgPSBzdHIucmVwbGFjZSgvWy0nYH4hQCMkJV4mKigpX3wrPT87OidcIiwuPD5cXHtcXH1cXFtcXF1cXFxcXFwvXS9naSwgXCJcIik7XHJcblxyXG4gICAgcmV0dXJuIH5hYmJyZXZpYXRpb25zLmluZGV4T2Yobm9TeW1ib2xzKTtcclxufVxyXG5cclxuLy8gVGhpcyBpcyBnb2luZyB0b3dhcmRzIHRvbyBtdWNoIHJ1bGUgYmFzZWRcclxuZXhwb3J0cy5pc1RpbWVBYmJyZXZpYXRpb24gPSBmdW5jdGlvbih3b3JkLCBuZXh0KSB7XHJcbiAgICBpZiAod29yZCA9PT0gXCJhLm0uXCIgfHwgd29yZCA9PT0gXCJwLm0uXCIpIHtcclxuICAgICAgICB2YXIgdG1wID0gbmV4dC5yZXBsYWNlKC9cXFcrL2csICcnKS5zbGljZSgtMykudG9Mb3dlckNhc2UoKTtcclxuXHJcbiAgICAgICAgaWYgKHRtcCA9PT0gXCJkYXlcIikge1xyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIGZhbHNlO1xyXG59XHJcblxyXG5leHBvcnRzLmlzRG90dGVkQWJicmV2aWF0aW9uID0gZnVuY3Rpb24od29yZCkge1xyXG4gICAgdmFyIG1hdGNoZXMgPSB3b3JkLnJlcGxhY2UoL1tcXChcXClcXFtcXF1cXHtcXH1dL2csICcnKS5tYXRjaCgvKC5cXC4pKi8pO1xyXG4gICAgcmV0dXJuIG1hdGNoZXMgJiYgbWF0Y2hlc1swXS5sZW5ndGggPiAwO1xyXG59XHJcblxyXG4vLyBUT0RPIGxvb2sgZm9yIG5leHQgd29yZHMsIGlmIG11bHRpcGxlIGFyZSBjYXBpdGFsaXplZCxcclxuLy8gdGhlbiBpdCdzIHByb2JhYmx5IG5vdCBhIHNlbnRlbmNlIGVuZGluZ1xyXG5leHBvcnRzLmlzQ3VzdG9tQWJicmV2aWF0aW9uID0gZnVuY3Rpb24oc3RyKSB7XHJcbiAgICBpZiAoc3RyLmxlbmd0aCA8PSAzKSB7XHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIGlzQ2FwaXRhbGl6ZWQoc3RyKTtcclxufVxyXG5cclxuLy8gVXNlcyBjdXJyZW50IHdvcmQgY291bnQgaW4gc2VudGVuY2UgYW5kIG5leHQgZmV3IHdvcmRzIHRvIGNoZWNrIGlmIGl0IGlzXHJcbi8vIG1vcmUgbGlrZWx5IGFuIGFiYnJldmlhdGlvbiArIG5hbWUgb3IgbmV3IHNlbnRlbmNlLlxyXG5leHBvcnRzLmlzTmFtZUFiYnJldmlhdGlvbiA9IGZ1bmN0aW9uKHdvcmRDb3VudCwgd29yZHMpIHtcclxuICAgIGlmICh3b3Jkcy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgaWYgKHdvcmRDb3VudCA8IDUgJiYgd29yZHNbMF0ubGVuZ3RoIDwgNiAmJiBpc0NhcGl0YWxpemVkKHdvcmRzWzBdKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHZhciBjYXBpdGFsaXplZCA9IHdvcmRzLmZpbHRlcihmdW5jdGlvbihzdHIpIHtcclxuICAgICAgICAgICAgcmV0dXJuIC9bQS1aXS8udGVzdChzdHIuY2hhckF0KDApKTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgcmV0dXJuIGNhcGl0YWxpemVkLmxlbmd0aCA+PSAzO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBmYWxzZTtcclxufVxyXG5cclxudmFyIGlzTnVtYmVyID0gZXhwb3J0cy5pc051bWJlciA9IGZ1bmN0aW9uKHN0ciwgZG90UG9zKSB7XHJcbiAgICBpZiAoZG90UG9zKSB7XHJcbiAgICAgICAgc3RyID0gc3RyLnNsaWNlKGRvdFBvcy0xLCBkb3RQb3MrMik7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuICFpc05hTihzdHIpO1xyXG59O1xyXG5cclxuLy8gUGhvbmUgbnVtYmVyIG1hdGNoaW5nXHJcbi8vIGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9hLzEyMzY2Ni85NTE1MTdcclxuZXhwb3J0cy5pc1Bob25lTnIgPSBmdW5jdGlvbihzdHIpIHtcclxuICAgIHJldHVybiBzdHIubWF0Y2goL14oPzooPzpcXCs/MVxccyooPzpbLi1dXFxzKik/KT8oPzpcXChcXHMqKFsyLTldMVswMi05XXxbMi05XVswMi04XTF8WzItOV1bMDItOF1bMDItOV0pXFxzKlxcKXwoWzItOV0xWzAyLTldfFsyLTldWzAyLThdMXxbMi05XVswMi04XVswMi05XSkpXFxzKig/OlsuLV1cXHMqKT8pPyhbMi05XTFbMDItOV18WzItOV1bMDItOV0xfFsyLTldWzAyLTldezJ9KVxccyooPzpbLi1dXFxzKik/KFswLTldezR9KSg/OlxccyooPzojfHhcXC4/fGV4dFxcLj98ZXh0ZW5zaW9uKVxccyooXFxkKykpPyQvKTtcclxufTtcclxuXHJcbi8vIE1hdGNoIHVybHMgLyBlbWFpbHNcclxuLy8gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL2EvMzgwOTQzNS85NTE1MTdcclxuZXhwb3J0cy5pc1VSTCA9IGZ1bmN0aW9uKHN0cikge1xyXG4gICAgcmV0dXJuIHN0ci5tYXRjaCgvWy1hLXpBLVowLTlAOiUuX1xcK34jPV17MiwyNTZ9XFwuW2Etel17Miw2fVxcYihbLWEtekEtWjAtOUA6JV9cXCsufiM/Ji8vPV0qKS8pO1xyXG59O1xyXG5cclxuLy8gU3RhcnRpbmcgYSBuZXcgc2VudGVuY2UgaWYgYmVnaW5uaW5nIHdpdGggY2FwaXRhbCBsZXR0ZXJcclxuLy8gRXhjZXB0aW9uOiBUaGUgd29yZCBpcyBlbmNsb3NlZCBpbiBicmFja2V0c1xyXG5leHBvcnRzLmlzQ29uY2F0ZW5hdGVkID0gZnVuY3Rpb24od29yZCkge1xyXG4gICAgdmFyIGkgPSAwO1xyXG5cclxuICAgIGlmICgoaSA9IHdvcmQuaW5kZXhPZihcIi5cIikpID4gLTEgfHxcclxuICAgICAgICAoaSA9IHdvcmQuaW5kZXhPZihcIiFcIikpID4gLTEgfHxcclxuICAgICAgICAoaSA9IHdvcmQuaW5kZXhPZihcIj9cIikpID4gLTEpXHJcbiAgICB7XHJcbiAgICAgICAgdmFyIGMgPSB3b3JkLmNoYXJBdChpICsgMSk7XHJcblxyXG4gICAgICAgIC8vIENoZWNrIGlmIHRoZSBuZXh0IHdvcmQgc3RhcnRzIHdpdGggYSBsZXR0ZXJcclxuICAgICAgICBpZiAoYy5tYXRjaCgvW2EtekEtWl0uKi8pKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBbd29yZC5zbGljZSgwLCBpKSwgd29yZC5zbGljZShpKzEpXTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIGZhbHNlO1xyXG59O1xyXG5cclxuZXhwb3J0cy5pc0JvdW5kYXJ5Q2hhciA9IGZ1bmN0aW9uKHdvcmQpIHtcclxuICAgIHJldHVybiB3b3JkID09PSBcIi5cIiB8fFxyXG4gICAgICAgICAgIHdvcmQgPT09IFwiIVwiIHx8XHJcbiAgICAgICAgICAgd29yZCA9PT0gXCI/XCI7XHJcbn07XHJcbiIsICIvKmpzaGludCBub2RlOnRydWUsIGxheGNvbW1hOnRydWUgKi9cclxuXHJcbnZhciBzYW5pdGl6ZUh0bWwgPSByZXF1aXJlKFwic2FuaXRpemUtaHRtbFwiKTtcclxuXHJcbnZhciBzdHJpbmdIZWxwZXIgPSByZXF1aXJlKFwiLi9zdHJpbmdIZWxwZXJcIik7XHJcbnZhciBNYXRjaCAgPSByZXF1aXJlKFwiLi9NYXRjaFwiKTtcclxuXHJcbnZhciBuZXdsaW5lX3BsYWNlaG9sZGVyID0gXCIgQH5AIFwiO1xyXG52YXIgbmV3bGluZV9wbGFjZWhvbGRlcl90ID0gbmV3bGluZV9wbGFjZWhvbGRlci50cmltKCk7XHJcblxyXG5cclxudmFyIHdoaXRlU3BhY2VDaGVjayA9IG5ldyBSZWdFeHAoXCJcXFxcU1wiLCBcIlwiKTtcclxudmFyIGFkZE5ld0xpbmVCb3VuZGFyaWVzID0gbmV3IFJlZ0V4cChcIlxcXFxuK3xbLSM9XysqXXs0LH1cIiwgXCJnXCIpO1xyXG52YXIgc3BsaXRJbnRvV29yZHMgPSBuZXcgUmVnRXhwKFwiXFxcXFMrfFxcXFxuXCIsIFwiZ1wiKTtcclxuXHJcblxyXG4vLyBTcGxpdCB0aGUgZW50cnkgaW50byBzZW50ZW5jZXMuXHJcbmV4cG9ydHMuc2VudGVuY2VzID0gZnVuY3Rpb24odGV4dCwgdXNlcl9vcHRpb25zKSB7XHJcbiAgICBpZiAoIXRleHQgfHwgdHlwZW9mIHRleHQgIT09IFwic3RyaW5nXCIgfHwgIXRleHQubGVuZ3RoKSB7XHJcbiAgICAgICAgcmV0dXJuIFtdO1xyXG4gICAgfVxyXG5cclxuICAgIGlmICghd2hpdGVTcGFjZUNoZWNrLnRlc3QodGV4dCkpIHtcclxuICAgICAgLy8gd2hpdGVzcGFjZS1vbmx5IHN0cmluZyBoYXMgbm8gc2VudGVuY2VzXHJcbiAgICAgIHJldHVybiBbXTtcclxuICAgIH1cclxuXHJcbiAgICB2YXIgb3B0aW9ucyA9IHtcclxuICAgICAgICBcIm5ld2xpbmVfYm91bmRhcmllc1wiICA6IGZhbHNlLFxyXG4gICAgICAgIFwiaHRtbF9ib3VuZGFyaWVzXCIgICAgIDogZmFsc2UsXHJcbiAgICAgICAgXCJodG1sX2JvdW5kYXJpZXNfdGFnc1wiOiBbXCJwXCIsXCJkaXZcIixcInVsXCIsXCJvbFwiXSxcclxuICAgICAgICBcInNhbml0aXplXCIgICAgICAgICAgICA6IGZhbHNlLFxyXG4gICAgICAgIFwiYWxsb3dlZF90YWdzXCIgICAgICAgIDogZmFsc2UsXHJcbiAgICAgICAgXCJwcmVzZXJ2ZV93aGl0ZXNwYWNlXCIgOiBmYWxzZSxcclxuICAgICAgICBcImFiYnJldmlhdGlvbnNcIiAgICAgICA6IG51bGxcclxuICAgIH07XHJcblxyXG4gICAgaWYgKHR5cGVvZiB1c2VyX29wdGlvbnMgPT09IFwiYm9vbGVhblwiKSB7XHJcbiAgICAgICAgLy8gRGVwcmVjYXRlZCBxdWljayBvcHRpb25cclxuICAgICAgICBvcHRpb25zLm5ld2xpbmVfYm91bmRhcmllcyA9IHRydWU7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICAvLyBFeHRlbmQgb3B0aW9uc1xyXG4gICAgICAgIGZvciAodmFyIGsgaW4gdXNlcl9vcHRpb25zKSB7XHJcbiAgICAgICAgICAgIG9wdGlvbnNba10gPSB1c2VyX29wdGlvbnNba107XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIE1hdGNoLnNldEFiYnJldmlhdGlvbnMob3B0aW9ucy5hYmJyZXZpYXRpb25zKTtcclxuXHJcbiAgICBpZiAob3B0aW9ucy5uZXdsaW5lX2JvdW5kYXJpZXMpIHtcclxuICAgICAgICB0ZXh0ID0gdGV4dC5yZXBsYWNlKGFkZE5ld0xpbmVCb3VuZGFyaWVzLCBuZXdsaW5lX3BsYWNlaG9sZGVyKTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAob3B0aW9ucy5odG1sX2JvdW5kYXJpZXMpIHtcclxuICAgICAgICB2YXIgaHRtbF9ib3VuZGFyaWVzX3JlZ2V4cCA9IFwiKDxiclxcXFxzKlxcXFwvPz58PFxcXFwvKFwiICsgb3B0aW9ucy5odG1sX2JvdW5kYXJpZXNfdGFncy5qb2luKFwifFwiKSArIFwiKT4pXCI7XHJcbiAgICAgICAgdmFyIHJlID0gbmV3IFJlZ0V4cChodG1sX2JvdW5kYXJpZXNfcmVnZXhwLCBcImdcIik7XHJcbiAgICAgICAgdGV4dCA9IHRleHQucmVwbGFjZShyZSwgXCIkMVwiICsgbmV3bGluZV9wbGFjZWhvbGRlcik7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKG9wdGlvbnMuc2FuaXRpemUgfHwgb3B0aW9ucy5hbGxvd2VkX3RhZ3MpIHtcclxuICAgICAgICBpZiAoISBvcHRpb25zLmFsbG93ZWRfdGFncykge1xyXG4gICAgICAgICAgICBvcHRpb25zLmFsbG93ZWRfdGFncyA9IFtcIlwiXTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRleHQgPSBzYW5pdGl6ZUh0bWwodGV4dCwgeyBcImFsbG93ZWRUYWdzXCIgOiBvcHRpb25zLmFsbG93ZWRfdGFncyB9KTtcclxuICAgIH1cclxuXHJcblxyXG4gICAgLy8gU3BsaXQgdGhlIHRleHQgaW50byB3b3Jkc1xyXG4gICAgdmFyIHdvcmRzO1xyXG4gICAgdmFyIHRva2VucztcclxuXHJcbiAgICAvLyBTcGxpdCB0aGUgdGV4dCBpbnRvIHdvcmRzXHJcbiAgICBpZiAob3B0aW9ucy5wcmVzZXJ2ZV93aGl0ZXNwYWNlKSB7XHJcbiAgICAgICAgLy8gPGJyPiB0YWdzIGFyZSB0aGUgb2RkIG1hbiBvdXQsIGFzIHdoaXRlc3BhY2UgaXMgYWxsb3dlZCBpbnNpZGUgdGhlIHRhZ1xyXG4gICAgICAgIHRva2VucyA9IHRleHQuc3BsaXQoLyg8YnJcXHMqXFwvPz58XFxTK3xcXG4rKS8pO1xyXG5cclxuICAgICAgICAvLyBldmVyeSBvdGhlciB0b2tlbiBpcyBhIHdvcmRcclxuICAgICAgICB3b3JkcyA9IHRva2Vucy5maWx0ZXIoZnVuY3Rpb24gKHRva2VuLCBpaSkge1xyXG4gICAgICAgICAgcmV0dXJuIGlpICUgMjtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIC8vIC0gc2VlIGh0dHA6Ly9ibG9nLnRvbXBhd2xhay5vcmcvc3BsaXQtc3RyaW5nLWludG8tdG9rZW5zLWphdmFzY3JpcHRcclxuICAgICAgICB3b3JkcyA9IHRleHQudHJpbSgpLm1hdGNoKHNwbGl0SW50b1dvcmRzKTtcclxuICAgIH1cclxuXHJcblxyXG4gICAgdmFyIHdvcmRDb3VudCA9IDA7XHJcbiAgICB2YXIgaW5kZXggPSAwO1xyXG4gICAgdmFyIHRlbXAgID0gW107XHJcbiAgICB2YXIgc2VudGVuY2VzID0gW107XHJcbiAgICB2YXIgY3VycmVudCAgID0gW107XHJcblxyXG4gICAgLy8gSWYgZ2l2ZW4gdGV4dCBpcyBvbmx5IHdoaXRlc3BhY2UgKG9yIG5vdGhpbmcgb2YgXFxTKylcclxuICAgIGlmICghd29yZHMgfHwgIXdvcmRzLmxlbmd0aCkge1xyXG4gICAgICAgIHJldHVybiBbXTtcclxuICAgIH1cclxuXHJcbiAgICBmb3IgKHZhciBpPTAsIEw9d29yZHMubGVuZ3RoOyBpIDwgTDsgaSsrKSB7XHJcbiAgICAgICAgd29yZENvdW50Kys7XHJcblxyXG4gICAgICAgIC8vIEFkZCB0aGUgd29yZCB0byBjdXJyZW50IHNlbnRlbmNlXHJcbiAgICAgICAgY3VycmVudC5wdXNoKHdvcmRzW2ldKTtcclxuXHJcbiAgICAgICAgLy8gU3ViLXNlbnRlbmNlcywgcmVzZXQgY291bnRlclxyXG4gICAgICAgIGlmICh+d29yZHNbaV0uaW5kZXhPZihcIixcIikpIHtcclxuICAgICAgICAgICAgd29yZENvdW50ID0gMDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChNYXRjaC5pc0JvdW5kYXJ5Q2hhcih3b3Jkc1tpXSkgfHwgc3RyaW5nSGVscGVyLmVuZHNXaXRoQ2hhcih3b3Jkc1tpXSwgXCI/IVwiKSB8fCB3b3Jkc1tpXSA9PT0gbmV3bGluZV9wbGFjZWhvbGRlcl90KSB7XHJcbiAgICAgICAgICAgIGlmICgob3B0aW9ucy5uZXdsaW5lX2JvdW5kYXJpZXMgfHwgb3B0aW9ucy5odG1sX2JvdW5kYXJpZXMpICYmIHdvcmRzW2ldID09PSBuZXdsaW5lX3BsYWNlaG9sZGVyX3QpIHtcclxuICAgICAgICAgICAgICAgIGN1cnJlbnQucG9wKCk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHNlbnRlbmNlcy5wdXNoKGN1cnJlbnQpO1xyXG5cclxuICAgICAgICAgICAgd29yZENvdW50ID0gMDtcclxuICAgICAgICAgICAgY3VycmVudCAgID0gW107XHJcblxyXG4gICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICB9XHJcblxyXG5cclxuICAgICAgICBpZiAoc3RyaW5nSGVscGVyLmVuZHNXaXRoQ2hhcih3b3Jkc1tpXSwgXCJcXFwiXCIpIHx8IHN0cmluZ0hlbHBlci5lbmRzV2l0aENoYXIod29yZHNbaV0sIFwiXHUyMDFEXCIpKSB7XHJcbiAgICAgICAgICAgIHdvcmRzW2ldID0gd29yZHNbaV0uc2xpY2UoMCwgLTEpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gQSBkb3QgbWlnaHQgaW5kaWNhdGUgdGhlIGVuZCBzZW50ZW5jZXNcclxuICAgICAgICAvLyBFeGNlcHRpb246IFRoZSBuZXh0IHNlbnRlbmNlIHN0YXJ0cyB3aXRoIGEgd29yZCAobm9uIGFiYnJldmlhdGlvbilcclxuICAgICAgICAvLyAgICAgICAgICAgIHRoYXQgaGFzIGEgY2FwaXRhbCBsZXR0ZXIuXHJcbiAgICAgICAgaWYgKHN0cmluZ0hlbHBlci5lbmRzV2l0aENoYXIod29yZHNbaV0sIFwiLlwiKSkge1xyXG4gICAgICAgICAgICAvLyBDaGVjayBpZiB0aGVyZSBpcyBhIG5leHQgd29yZFxyXG4gICAgICAgICAgICAvLyBUaGlzIHByb2JhYmx5IG5lZWRzIHRvIGJlIGltcHJvdmVkIHdpdGggbWFjaGluZSBsZWFybmluZ1xyXG4gICAgICAgICAgICBpZiAoaSsxIDwgTCkge1xyXG4gICAgICAgICAgICAgICAgLy8gU2luZ2xlIGNoYXJhY3RlciBhYmJyLlxyXG4gICAgICAgICAgICAgICAgaWYgKHdvcmRzW2ldLmxlbmd0aCA9PT0gMiAmJiBpc05hTih3b3Jkc1tpXS5jaGFyQXQoMCkpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gQ29tbW9uIGFiYnIuIHRoYXQgb2Z0ZW4gZG8gbm90IGVuZCBzZW50ZW5jZXNcclxuICAgICAgICAgICAgICAgIGlmIChNYXRjaC5pc0NvbW1vbkFiYnJldmlhdGlvbih3b3Jkc1tpXSkpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAvLyBOZXh0IHdvcmQgc3RhcnRzIHdpdGggY2FwaXRhbCB3b3JkLCBidXQgY3VycmVudCBzZW50ZW5jZSBpc1xyXG4gICAgICAgICAgICAgICAgLy8gcXVpdGUgc2hvcnRcclxuICAgICAgICAgICAgICAgIGlmIChNYXRjaC5pc1NlbnRlbmNlU3RhcnRlcih3b3Jkc1tpKzFdKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChNYXRjaC5pc1RpbWVBYmJyZXZpYXRpb24od29yZHNbaV0sIHdvcmRzW2krMV0pKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gRGVhbGluZyB3aXRoIG5hbWVzIGF0IHRoZSBzdGFydCBvZiBzZW50ZW5jZXNcclxuICAgICAgICAgICAgICAgICAgICBpZiAoTWF0Y2guaXNOYW1lQWJicmV2aWF0aW9uKHdvcmRDb3VudCwgd29yZHMuc2xpY2UoaSwgNikpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKE1hdGNoLmlzTnVtYmVyKHdvcmRzW2krMV0pKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChNYXRjaC5pc0N1c3RvbUFiYnJldmlhdGlvbih3b3Jkc1tpXSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gU2tpcCBlbGxpcHNpc1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChzdHJpbmdIZWxwZXIuZW5kc1dpdGgod29yZHNbaV0sIFwiLi5cIikpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAvLy8vIFNraXAgYWJicmV2aWF0aW9uc1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIFNob3J0IHdvcmRzICsgZG90IG9yIGEgZG90IGFmdGVyIGVhY2ggbGV0dGVyXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKE1hdGNoLmlzRG90dGVkQWJicmV2aWF0aW9uKHdvcmRzW2ldKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChNYXRjaC5pc05hbWVBYmJyZXZpYXRpb24od29yZENvdW50LCB3b3Jkcy5zbGljZShpLCA1KSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBzZW50ZW5jZXMucHVzaChjdXJyZW50KTtcclxuICAgICAgICAgICAgY3VycmVudCAgID0gW107XHJcbiAgICAgICAgICAgIHdvcmRDb3VudCA9IDA7XHJcblxyXG4gICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIENoZWNrIGlmIHRoZSB3b3JkIGhhcyBhIGRvdCBpbiBpdFxyXG4gICAgICAgIGlmICgoaW5kZXggPSB3b3Jkc1tpXS5pbmRleE9mKFwiLlwiKSkgPiAtMSkge1xyXG4gICAgICAgICAgICBpZiAoTWF0Y2guaXNOdW1iZXIod29yZHNbaV0sIGluZGV4KSkge1xyXG4gICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vIEN1c3RvbSBkb3R0ZWQgYWJicmV2aWF0aW9ucyAobGlrZSBLLkwuTSBvciBJLkMuVClcclxuICAgICAgICAgICAgaWYgKE1hdGNoLmlzRG90dGVkQWJicmV2aWF0aW9uKHdvcmRzW2ldKSkge1xyXG4gICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vIFNraXAgdXJscyAvIGVtYWlscyBhbmQgdGhlIGxpa2VcclxuICAgICAgICAgICAgaWYgKE1hdGNoLmlzVVJMKHdvcmRzW2ldKSB8fCBNYXRjaC5pc1Bob25lTnIod29yZHNbaV0pKSB7XHJcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHRlbXAgPSBNYXRjaC5pc0NvbmNhdGVuYXRlZCh3b3Jkc1tpXSkpIHtcclxuICAgICAgICAgICAgY3VycmVudC5wb3AoKTtcclxuICAgICAgICAgICAgY3VycmVudC5wdXNoKHRlbXBbMF0pO1xyXG4gICAgICAgICAgICBzZW50ZW5jZXMucHVzaChjdXJyZW50KTtcclxuXHJcbiAgICAgICAgICAgIGN1cnJlbnQgPSBbXTtcclxuICAgICAgICAgICAgd29yZENvdW50ID0gMDtcclxuICAgICAgICAgICAgY3VycmVudC5wdXNoKHRlbXBbMV0pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBpZiAoY3VycmVudC5sZW5ndGgpIHtcclxuICAgICAgICBzZW50ZW5jZXMucHVzaChjdXJyZW50KTtcclxuICAgIH1cclxuXHJcblxyXG4gICAgLy8gQ2xlYXIgXCJlbXB0eVwiIHNlbnRlbmNlc1xyXG4gICAgc2VudGVuY2VzID0gc2VudGVuY2VzLmZpbHRlcihmdW5jdGlvbihzKSB7XHJcbiAgICAgICAgcmV0dXJuIHMubGVuZ3RoID4gMDtcclxuICAgIH0pO1xyXG5cclxuICAgIHZhciByZXN1bHQgPSBzZW50ZW5jZXMuc2xpY2UoMSkucmVkdWNlKGZ1bmN0aW9uIChvdXQsIHNlbnRlbmNlKSB7XHJcbiAgICAgIHZhciBsYXN0U2VudGVuY2UgPSBvdXRbb3V0Lmxlbmd0aCAtIDFdO1xyXG5cclxuICAgICAgLy8gU2luZ2xlIHdvcmRzLCBjb3VsZCBiZSBcImVudW1lcmF0aW9uIGxpc3RzXCJcclxuICAgICAgaWYgKGxhc3RTZW50ZW5jZS5sZW5ndGggPT09IDEgJiYgL14uezEsMn1bLl0kLy50ZXN0KGxhc3RTZW50ZW5jZVswXSkpIHtcclxuICAgICAgICAgIC8vIENoZWNrIGlmIHRoZXJlIGlzIGEgbmV4dCBzZW50ZW5jZVxyXG4gICAgICAgICAgLy8gSXQgc2hvdWxkIG5vdCBiZSBhbm90aGVyIGxpc3QgaXRlbVxyXG4gICAgICAgICAgaWYgKCEvWy5dLy50ZXN0KHNlbnRlbmNlWzBdKSkge1xyXG4gICAgICAgICAgICAgIG91dC5wb3AoKVxyXG4gICAgICAgICAgICAgIG91dC5wdXNoKGxhc3RTZW50ZW5jZS5jb25jYXQoc2VudGVuY2UpKTtcclxuICAgICAgICAgICAgICByZXR1cm4gb3V0O1xyXG4gICAgICAgICAgfVxyXG4gICAgICB9XHJcblxyXG4gICAgICBvdXQucHVzaChzZW50ZW5jZSk7XHJcblxyXG4gICAgICByZXR1cm4gb3V0O1xyXG4gICAgfSwgWyBzZW50ZW5jZXNbMF0gXSk7XHJcblxyXG4gICAgLy8gam9pbiB0b2tlbnMgYmFjayB0b2dldGhlclxyXG4gICAgcmV0dXJuIHJlc3VsdC5tYXAoZnVuY3Rpb24gKHNlbnRlbmNlLCBpaSkge1xyXG4gICAgICBpZiAob3B0aW9ucy5wcmVzZXJ2ZV93aGl0ZXNwYWNlICYmICFvcHRpb25zLm5ld2xpbmVfYm91bmRhcmllcyAmJiAhb3B0aW9ucy5odG1sX2JvdW5kYXJpZXMpIHtcclxuICAgICAgICAvLyB0b2tlbnMgbG9va3MgbGlrZSBzbzogW2xlYWRpbmctc3BhY2UgdG9rZW4sIG5vbi1zcGFjZSB0b2tlbiwgc3BhY2VcclxuICAgICAgICAvLyB0b2tlbiwgbm9uLXNwYWNlIHRva2VuLCBzcGFjZSB0b2tlbi4uLiBdLiBJbiBvdGhlciB3b3JkcywgdGhlIGZpcnN0XHJcbiAgICAgICAgLy8gaXRlbSBpcyB0aGUgbGVhZGluZyBzcGFjZSAob3IgdGhlIGVtcHR5IHN0cmluZyksIGFuZCB0aGUgcmVzdCBvZlxyXG4gICAgICAgIC8vIHRoZSB0b2tlbnMgYXJlIFtub24tc3BhY2UsIHNwYWNlXSB0b2tlbiBwYWlycy5cclxuICAgICAgICB2YXIgdG9rZW5Db3VudCA9IHNlbnRlbmNlLmxlbmd0aCAqIDI7XHJcblxyXG4gICAgICAgIGlmIChpaSA9PT0gMCkge1xyXG4gICAgICAgICAgdG9rZW5Db3VudCArPSAxO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHRva2Vucy5zcGxpY2UoMCwgdG9rZW5Db3VudCkuam9pbihcIlwiKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgcmV0dXJuIHNlbnRlbmNlLmpvaW4oXCIgXCIpO1xyXG4gICAgfSk7XHJcbn07XHJcbiIsICIvLyAgICAgd2luay1ubHBcbi8vXG4vLyAgICAgQ29weXJpZ2h0IChDKSBHUkFZUEUgU3lzdGVtcyBQcml2YXRlIExpbWl0ZWRcbi8vXG4vLyAgICAgVGhpcyBmaWxlIGlzIHBhcnQgb2YgXHUyMDFDd2luay1ubHBcdTIwMUQuXG4vL1xuLy8gICAgIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnlcbi8vICAgICBwZXJzb24gb2J0YWluaW5nIGEgY29weSBvZiB0aGlzIHNvZnR3YXJlIGFuZFxuLy8gICAgIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvXG4vLyAgICAgZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nXG4vLyAgICAgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMgdG8gdXNlLCBjb3B5LCBtb2RpZnksXG4vLyAgICAgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsXG4vLyAgICAgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvXG4vLyAgICAgd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvXG4vLyAgICAgdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxuLy9cbi8vICAgICBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZVxuLy8gICAgIHNoYWxsIGJlIGluY2x1ZGVkIGluIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWxcbi8vICAgICBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4vL1xuLy8gICAgIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0Zcbi8vICAgICBBTlkgS0lORCwgRVhQUkVTUyBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEXG4vLyAgICAgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTIEZPUiBBXG4vLyAgICAgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMXG4vLyAgICAgVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sXG4vLyAgICAgREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GXG4vLyAgICAgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTlxuLy8gICAgIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUlxuLy8gICAgIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS5cblxuLy9cblxudmFyIHNpbWlsYXJpdHkgPSBPYmplY3QuY3JlYXRlKCBudWxsICk7XG5zaW1pbGFyaXR5LmJvdyA9IE9iamVjdC5jcmVhdGUoIG51bGwgKTtcbnNpbWlsYXJpdHkuc2V0ID0gT2JqZWN0LmNyZWF0ZSggbnVsbCApO1xuXG4vKipcbiAqXG4gKiBDb21wdXRlcyB0aGUgY29zaW5lIHNpbWlsYXJpdHkgYmV0d2VlbiB0aGUgaW5wdXQgYmFnIG9mIHdvcmRzIChib3cpXG4gKiBgYm93QWAgYW5kIGBib3dCYCBhbmQgcmV0dXJucyBhIHZhbHVlIGJldHdlZW4gMCBhbmQgMS5cbiAqXG4gKiBAcGFyYW0ge29iamVjdH0gYm93QSB0aGUgZmlyc3QgYm93IGkuZSB3b3JkIChpLmUuIGtleSkgYW5kIGl0J3MgZnJlcXVlbmN5XG4gKiAoaS5lLiB2YWx1ZSkgcGFpcnMuXG4gKiBAcGFyYW0ge29iamVjdH0gYm93QiB0aGUgc2Vjb25kIGJvdy5cbiAqIEByZXR1cm4ge251bWJlcn0gY29zaW5lIHNpbWlsYXJpdHkgYmV0d2VlbiBgYm93QWAgYW5kIGBib3dCYC5cbiAqL1xuc2ltaWxhcml0eS5ib3cuY29zaW5lID0gZnVuY3Rpb24gKCBib3dBLCBib3dCICkge1xuICAvLyBgYWJgICYgYGJhYCBhZGRpdGlvbmFsIHZhcmlhYmxlcyBhcmUgcmVxdWlyZWQgYXMgeW91IGRvbnQgd2FudCB0byBjb3JydXB0XG4gIC8vIGBib3dBYCAmIGBib3dCYCFcbiAgLy8gVXBkYXRlZCBgYWAgd2l0aCB3b3JkcyBpbiBgYmAgc2V0IGFzIDAgaW4gYGFgLlxuICB2YXIgYWIgPSBPYmplY3QuY3JlYXRlKCBudWxsICk7XG4gIC8vIFVwZGF0ZWQgYGJgIHdpdGggd29yZHMgaW4gYGFgIHNldCBhcyAwIGluIGBiYC5cbiAgdmFyIGJhID0gT2JqZWN0LmNyZWF0ZSggbnVsbCApO1xuICAvLyBTaW1pbGFybHkgc2NvcmUuXG4gIHZhciBzcztcbiAgdmFyIHc7IC8vIGEgd29yZCFcblxuICAvLyBGaWxsIHVwIGBhYmAgYW5kIGBiYWBcbiAgZm9yICggdyBpbiBib3dBICkgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIGd1YXJkLWZvci1pblxuICAgIGFiWyB3IF0gPSBib3dBWyB3IF07XG4gICAgYmFbIHcgXSA9IDA7XG4gIH1cbiAgZm9yICggdyBpbiBib3dCICkgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIGd1YXJkLWZvci1pblxuICAgIGJhWyB3IF0gPSBib3dCWyB3IF07XG4gICAgYWJbIHcgXSA9IGFiWyB3IF0gfHwgMDtcbiAgfVxuICAvLyBXaXRoIGBhYmAgJiBgYmFgIGluIGhhbmQsIGl0cyBlYXN5IHRvIHRyYW5zZm9ybSBpbiB0b1xuICAvLyB2ZWN0b3I6IGl0cyBhIGZyZXF1ZW5jeSBvZiBlYWNoIHdvcmQgZm91bmQgaW4gYm90aCBzdHJpbmdzXG4gIC8vIFdlIGRvIG5vdCBuZWVkIHRvIHN0b3JlIHRoZXNlIHZlY3RvcnMgaW4gYXJyYXlzLCBpbnN0ZWFkIHdlIGNhbiBwZXJmb3JtXG4gIC8vIHByb2Nlc3NpbmcgaW4gdGhlIHNhbWUgbG9vcC5cbiAgdmFyIHNhMiA9IDAsICAvLyBzdW0gb2YgYWleMlxuICAgICBzYXhiID0gMCwgLy8gc3VtIG9mIGFpIHggYmlcbiAgICAgc2IyID0gMCwgIC8vIHN1bSBvZiBiaV4yXG4gICAgIHZhLCB2YjsgIC8vIHZhbHVlIG9mIGFpIGFuZCBiaVxuICAvLyBPbmUgY291bGQgaGF2ZSB1c2VkIGBiYWAsIGFzIGJvdGggaGF2ZSBzYW1lIHdvcmRzIG5vdyFcbiAgZm9yICggdyBpbiBhYiApIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBndWFyZC1mb3ItaW5cbiAgICB2YSA9IGFiWyB3IF07XG4gICAgdmIgPSBiYVsgdyBdO1xuICAgIHNhMiArPSB2YSAqIHZhO1xuICAgIHNiMiArPSB2YiAqIHZiO1xuICAgIHNheGIgKz0gdmEgKiB2YjtcbiAgfVxuICAvLyBDb21wdXRlIGNvc2luZSBzaW1pbGFyaXR5OyBlbnN1cmUgeW91IGRvbnQgZ2V0IGBOYU4gaS5lLiAwLzBgIGJ5IHRlc3RpbmcgZm9yXG4gIC8vIGBzYTJgIGFuZCBgc2IyYC5cbiAgc3MgPSAoXG4gICAgKCBzYTIgJiYgc2IyICkgP1xuICAgICAgLy8gQ29tcHV0ZSBjb3NpbmUgaWYgYm90aCBvZiB0aGVtIGFyZSBub24temVyby5cbiAgICAgICsoIHNheGIgLyAoIE1hdGguc3FydCggc2EyICkgKiBNYXRoLnNxcnQoIHNiMiApICkgKS50b0ZpeGVkKCA2ICkgOlxuICAgICAgLy8gSWYgb25lIG9mIHRoZW0gaXMgMCBtZWFucyAqKjAqKiBzcyBvdGhlcndpc2UgYSBzcyBvZiAqKjEqKi5cbiAgICAgICggIXNhMiBeICFzYjIgKSA/IDAgOiAxIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tYml0d2lzZVxuICApO1xuICByZXR1cm4gc3M7XG59OyAvLyBzaW1pbGFyaXR5LmJvdy5jb3NpbmUoKVxuXG4vLyAjIyMgdHZlcnNreVxuLyoqXG4gKlxuICogQ29tcHV0ZXMgdGhlIHR2ZXJza3kgc2ltaWxhcml0eSBiZXR3ZWVuIGlucHV0IHNldHMgYHNldEFgIGFuZCBgc2V0QmAuXG4gKiBUaGlzIHNpbWlsYXJpdHkgaXMgYWx3YXlzIGJldHdlZW4gMCBhbmQgMS4gVHZlcnNreSBjYWxscyBgc2V0QWAgYXNcbiAqICoqcHJvdG90eXBlKiogYW5kIGBzZXRCYCBhcyAqKnZhcmlhbnQqKi4gVGhlIGBhbHBoYWAgY29ycmVzcG9uZHNcbiAqIHRvIHRoZSB3ZWlnaHQgb2YgcHJvdG90eXBlLCB3aGVyZWFzIGBiZXRhYCBjb3JyZXNwb25kcyB0byB0aGVcbiAqIHdlaWdodCBvZiB2YXJpYW50LlxuICpcbiAqIEBwYXJhbSB7c2V0fSBzZXRBIHRoZSBmaXJzdCBzZXQgb3IgdGhlIHByb3RvdHlwZS5cbiAqIEBwYXJhbSB7c2V0fSBzZXRCIHRoZSBzZWNvbmQgc2V0IG9yIHRoZSB2YXJpYW50LlxuICogQHBhcmFtIHtudW1iZXJ9IFthbHBoYT0wLjVdIHRoZSBwcm90b3R5cGUgd2VpZ2h0LlxuICogQHBhcmFtIHtudW1iZXJ9IFtiZXRhPTAuNV0gdGhlIHZhcmlhbnQgd2VpZ2h0LlxuICogQHJldHVybiB7bnVtYmVyfSB0aGUgdHZlcnNreSBzaW1pbGFyaXR5IGJldHdlZW4gYHNldEFgIGFuZCBgc2V0QmAuXG4gKi9cbnNpbWlsYXJpdHkuc2V0LnR2ZXJza3kgPSBmdW5jdGlvbiAoIHNldEEsIHNldEIsIGFscGhhLCBiZXRhICkge1xuICAvLyBFYXJseSByZXR1cm4uXG4gIGlmICggc2V0QS5zaXplID09PSAwICYmIHNldEIuc2l6ZSA9PT0gMCApIHJldHVybiAxO1xuICBpZiAoIHNldEEuc2l6ZSA9PT0gMCB8fCBzZXRCLnNpemUgPT09IDAgKSByZXR1cm4gMDtcblxuICAvLyBDb250YWlucyBgYWxwaGFgICYgYGJldGFgIHZhbHVlcyByZXNwZWN0aXZlbHkgYWZ0ZXIgdGhlIHZhbGlkYXRpb25zLlxuICB2YXIgYSwgYjtcbiAgLy8gU2l6ZSBvZiB0aGUgaW50ZXJzZWN0aW9uIGJldHdlZW4gc2V0IGBzZXRBYCBhbmQgYHNldEJgLlxuICB2YXIgaW50ZXJzZWN0U2l6ZSA9IDA7XG4gIC8vIFRoZWlyIGRpZmZlcmVuY2VzIVxuICB2YXIgc2FESUZGc2IsIHNiRElGRnNhO1xuICAvLyBUaGUgc2ltaWxhcml0eSBzY29yZSBiZXR3ZWVuIGBzZXRBYCBhbmQgYHNldEJgLlxuICB2YXIgc3M7XG4gIGEgPSAoIGlzTmFOKCBhbHBoYSApICkgPyAwLjUgOiArYWxwaGE7XG4gIGIgPSAoIGlzTmFOKCBiZXRhICkgKSA/IDAuNSA6ICtiZXRhO1xuICBpZiAoIGEgPCAwIHx8IGIgPCAwICkge1xuICAgIHRocm93IEVycm9yKCAnd2luay1ubHA6IHR2ZXJza3kgcmVxdWlyZXMgYXBsaGEgJiBiZXRhIHRvIGJlIHBvc2l0aXZlIG51bWJlcnMuJyApO1xuICB9XG4gIC8vIFVzZSBzbWFsbGVyIHNpemVkIHNldCBmb3IgaXRlcmF0aW9uLlxuICBpZiAoIHNldEEuc2l6ZSA8IHNldEIuc2l6ZSApIHtcbiAgc2V0QS5mb3JFYWNoKCBmdW5jdGlvbiAoIGVsZW1lbnQgKSB7XG4gICAgaWYgKCBzZXRCLmhhcyggZWxlbWVudCApICkgaW50ZXJzZWN0U2l6ZSArPSAxO1xuICB9ICk7XG4gIH0gZWxzZSB7XG4gICAgc2V0Qi5mb3JFYWNoKCBmdW5jdGlvbiAoIGVsZW1lbnQgKSB7XG4gICAgICBpZiAoIHNldEEuaGFzKCBlbGVtZW50ICkgKSBpbnRlcnNlY3RTaXplICs9IDE7XG4gICAgfSApO1xuICB9XG4gIHNhRElGRnNiID0gc2V0QS5zaXplIC0gaW50ZXJzZWN0U2l6ZTtcbiAgc2JESUZGc2EgPSBzZXRCLnNpemUgLSBpbnRlcnNlY3RTaXplO1xuICAvLyBDb21wdXRlIFR2ZXJza3kgc2ltaWxhcml0eS5cbiAgc3MgPSAoIGludGVyc2VjdFNpemUgLyAoIGludGVyc2VjdFNpemUgKyAoIGEgKiBzYURJRkZzYiApICsgKCBiICogc2JESUZGc2EgKSApICk7XG4gIHJldHVybiArc3MudG9GaXhlZCggNiApO1xufTsgLy8gdHZlcnNreSgpXG5cblxuLy8gIyMjIG9vXG4vKipcbiAqXG4gKiBDb21wdXRlcyB0aGUgT3RzdWthLU9jaGlhaSBzaW1pbGFyaXR5IGJldHdlZW4gaW5wdXQgc2V0cyBgc2V0QWAgYW5kIGBzZXRCYC5cbiAqIFRoaXMgc2ltaWxhcml0eSBpcyBhbHdheXMgYmV0d2VlbiAwIGFuZCAxLiBJdCBpcyBlcXVpdmFsZW50IHRvIGJpbmFyeSBib3dcbiAqIGNvc2luZSBzaW1pbGFyaXR5LlxuICpcbiAqIEBwYXJhbSB7c2V0fSBzZXRBIHRoZSBmaXJzdCBzZXQuXG4gKiBAcGFyYW0ge3NldH0gc2V0QiB0aGUgc2Vjb25kIHNldC5cbiAqIEByZXR1cm4ge251bWJlcn0gdGhlIG9vIHNpbWlsYXJpdHkgYmV0d2VlbiBgc2V0QWAgYW5kIGBzZXRCYC5cbiAqL1xuc2ltaWxhcml0eS5zZXQub28gPSBmdW5jdGlvbiAoIHNldEEsIHNldEIgKSB7XG4gIC8vIEVhcmx5IHJldHVybi5cbiAgaWYgKCBzZXRBLnNpemUgPT09IDAgJiYgc2V0Qi5zaXplID09PSAwICkgcmV0dXJuIDE7XG4gIGlmICggc2V0QS5zaXplID09PSAwIHx8IHNldEIuc2l6ZSA9PT0gMCApIHJldHVybiAwO1xuXG4gIC8vIFNpemUgb2YgdGhlIGludGVyc2VjdGlvbiBiZXR3ZWVuIHNldCBgc2V0QWAgYW5kIGBzZXRCYC5cbiAgdmFyIGludGVyc2VjdFNpemUgPSAwO1xuXG4gIC8vIFVzZSBzbWFsbGVyIHNpemVkIHNldCBmb3IgaXRlcmF0aW9uLlxuICBpZiAoIHNldEEuc2l6ZSA8IHNldEIuc2l6ZSApIHtcbiAgc2V0QS5mb3JFYWNoKCBmdW5jdGlvbiAoIGVsZW1lbnQgKSB7XG4gICAgaWYgKCBzZXRCLmhhcyggZWxlbWVudCApICkgaW50ZXJzZWN0U2l6ZSArPSAxO1xuICB9ICk7XG4gIH0gZWxzZSB7XG4gICAgc2V0Qi5mb3JFYWNoKCBmdW5jdGlvbiAoIGVsZW1lbnQgKSB7XG4gICAgICBpZiAoIHNldEEuaGFzKCBlbGVtZW50ICkgKSBpbnRlcnNlY3RTaXplICs9IDE7XG4gICAgfSApO1xuICB9XG5cbiAgcmV0dXJuICsoIGludGVyc2VjdFNpemUgLyAoIE1hdGguc3FydCggc2V0QS5zaXplICogc2V0Qi5zaXplICkgKSApLnRvRml4ZWQoIDYgKTtcblxufTsgLy8gc2ltaWxhcml0eS5zZXQub28oKVxuXG4vLyBFeHBvcnQgc2ltaWxhcml0eVxubW9kdWxlLmV4cG9ydHMgPSBzaW1pbGFyaXR5O1xuIiwgImltcG9ydCB7IGFkZEljb24sIE5vdGljZSwgUGx1Z2luLCBXb3Jrc3BhY2VMZWFmIH0gZnJvbSAnb2JzaWRpYW4nXHJcbmltcG9ydCB7IG9wZW5WaWV3LCB3YWl0IH0gZnJvbSAnb2JzaWRpYW4tY29tbXVuaXR5LWxpYidcclxuaW1wb3J0IEFuYWx5c2lzVmlldyBmcm9tICdzcmMvQW5hbHlzaXNWaWV3J1xyXG5pbXBvcnQge1xyXG4gIEFOQUxZU0lTX1RZUEVTLFxyXG4gIERFRkFVTFRfU0VUVElOR1MsXHJcbiAgaWNvblNWRyxcclxuICBWSUVXX1RZUEVfR1JBUEhfQU5BTFlTSVMsXHJcbn0gZnJvbSAnc3JjL0NvbnN0YW50cydcclxuaW1wb3J0IHR5cGUgeyBHcmFwaEFuYWx5c2lzU2V0dGluZ3MgfSBmcm9tICdzcmMvSW50ZXJmYWNlcydcclxuaW1wb3J0IE15R3JhcGggZnJvbSAnc3JjL015R3JhcGgnXHJcbmltcG9ydCB7IFNhbXBsZVNldHRpbmdUYWIgfSBmcm9tICdzcmMvU2V0dGluZ3MnXHJcbmltcG9ydCB7IGRlYnVnIH0gZnJvbSAnLi9VdGlsaXR5J1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgR3JhcGhBbmFseXNpc1BsdWdpbiBleHRlbmRzIFBsdWdpbiB7XHJcbiAgc2V0dGluZ3M6IEdyYXBoQW5hbHlzaXNTZXR0aW5nc1xyXG4gIGc6IE15R3JhcGhcclxuXHJcbiAgYXN5bmMgb25sb2FkKCkge1xyXG4gICAgY29uc29sZS5sb2coJ2xvYWRpbmcgZ3JhcGggYW5hbHlzaXMgcGx1Z2luJylcclxuXHJcbiAgICBhd2FpdCB0aGlzLmxvYWRTZXR0aW5ncygpXHJcbiAgICBhZGRJY29uKCdHQS1JQ09OJywgaWNvblNWRylcclxuXHJcbiAgICB0aGlzLmFkZENvbW1hbmQoe1xyXG4gICAgICBpZDogJ3Nob3ctZ3JhcGgtYW5hbHlzaXMtdmlldycsXHJcbiAgICAgIG5hbWU6ICdPcGVuIEdyYXBoIEFuYWx5c2lzIFZpZXcnLFxyXG4gICAgICBjaGVja0NhbGxiYWNrOiAoY2hlY2tpbmc6IGJvb2xlYW4pID0+IHtcclxuICAgICAgICBsZXQgY2hlY2tSZXN1bHQgPVxyXG4gICAgICAgICAgdGhpcy5hcHAud29ya3NwYWNlLmdldExlYXZlc09mVHlwZShWSUVXX1RZUEVfR1JBUEhfQU5BTFlTSVMpXHJcbiAgICAgICAgICAgIC5sZW5ndGggPT09IDBcclxuXHJcbiAgICAgICAgaWYgKGNoZWNrUmVzdWx0KSB7XHJcbiAgICAgICAgICAvLyBPbmx5IHBlcmZvcm0gd29yayB3aGVuIGNoZWNraW5nIGlzIGZhbHNlXHJcbiAgICAgICAgICBpZiAoIWNoZWNraW5nKSB7XHJcbiAgICAgICAgICAgIG9wZW5WaWV3KHRoaXMuYXBwLCBWSUVXX1RZUEVfR1JBUEhfQU5BTFlTSVMsIEFuYWx5c2lzVmlldylcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIHJldHVybiB0cnVlXHJcbiAgICAgICAgfVxyXG4gICAgICB9LFxyXG4gICAgfSlcclxuXHJcbiAgICB0aGlzLmFkZENvbW1hbmQoe1xyXG4gICAgICBpZDogJ3JlZnJlc2gtYW5hbHlzaXMtdmlldycsXHJcbiAgICAgIG5hbWU6ICdSZWZyZXNoIEdyYXBoIEFuYWx5c2lzIFZpZXcnLFxyXG4gICAgICBjYWxsYmFjazogYXN5bmMgKCkgPT4ge1xyXG4gICAgICAgIGF3YWl0IHRoaXMucmVmcmVzaEdyYXBoKClcclxuICAgICAgICBjb25zdCBjdXJyVmlldyA9IGF3YWl0IHRoaXMuZ2V0Q3VycmVudFZpZXcoKVxyXG4gICAgICAgIGF3YWl0IGN1cnJWaWV3LmRyYXcoY3VyclZpZXcuY3VyclN1YnR5cGUpXHJcbiAgICAgIH0sXHJcbiAgICB9KVxyXG5cclxuICAgIEFOQUxZU0lTX1RZUEVTLmZvckVhY2goKHN1YikgPT4ge1xyXG4gICAgICB0aGlzLmFkZENvbW1hbmQoe1xyXG4gICAgICAgIGlkOiBgb3Blbi0ke3N1Yi5zdWJ0eXBlfWAsXHJcbiAgICAgICAgbmFtZTogYE9wZW4gJHtzdWIuc3VidHlwZX1gLFxyXG4gICAgICAgIGNhbGxiYWNrOiBhc3luYyAoKSA9PiB7XHJcbiAgICAgICAgICBjb25zdCBjdXJyVmlldyA9IGF3YWl0IHRoaXMuZ2V0Q3VycmVudFZpZXcoKVxyXG4gICAgICAgICAgYXdhaXQgY3VyclZpZXcuZHJhdyhzdWIuc3VidHlwZSlcclxuICAgICAgICB9LFxyXG4gICAgICB9KVxyXG4gICAgfSlcclxuXHJcbiAgICB0aGlzLmFkZFNldHRpbmdUYWIobmV3IFNhbXBsZVNldHRpbmdUYWIodGhpcy5hcHAsIHRoaXMpKVxyXG5cclxuICAgIHRoaXMucmVnaXN0ZXJWaWV3KFxyXG4gICAgICBWSUVXX1RZUEVfR1JBUEhfQU5BTFlTSVMsXHJcbiAgICAgIChsZWFmOiBXb3Jrc3BhY2VMZWFmKSA9PiBuZXcgQW5hbHlzaXNWaWV3KGxlYWYsIHRoaXMsIG51bGwpXHJcbiAgICApXHJcblxyXG4gICAgdGhpcy5hcHAud29ya3NwYWNlLm9uTGF5b3V0UmVhZHkoYXN5bmMgKCkgPT4ge1xyXG4gICAgICBjb25zdCBub0ZpbGVzID0gdGhpcy5hcHAudmF1bHQuZ2V0TWFya2Rvd25GaWxlcygpLmxlbmd0aFxyXG4gICAgICB3aGlsZSAoIXRoaXMucmVzb2x2ZWRMaW5rc0NvbXBsZXRlKG5vRmlsZXMpKSB7XHJcbiAgICAgICAgYXdhaXQgd2FpdCgxMDAwKVxyXG4gICAgICB9XHJcblxyXG4gICAgICBhd2FpdCB0aGlzLnJlZnJlc2hHcmFwaCgpXHJcbiAgICAgIGF3YWl0IG9wZW5WaWV3KHRoaXMuYXBwLCBWSUVXX1RZUEVfR1JBUEhfQU5BTFlTSVMsIEFuYWx5c2lzVmlldylcclxuICAgIH0pXHJcbiAgfVxyXG5cclxuICByZXNvbHZlZExpbmtzQ29tcGxldGUobm9GaWxlczogbnVtYmVyKSB7XHJcbiAgICBjb25zdCB7IHJlc29sdmVkTGlua3MgfSA9IHRoaXMuYXBwLm1ldGFkYXRhQ2FjaGVcclxuICAgIHJldHVybiBPYmplY3Qua2V5cyhyZXNvbHZlZExpbmtzKS5sZW5ndGggPT09IG5vRmlsZXNcclxuICB9XHJcblxyXG4gIGdldEN1cnJlbnRWaWV3ID0gYXN5bmMgKG9wZW5JZk5vdCA9IHRydWUpID0+IHtcclxuICAgIGNvbnN0IHZpZXcgPSB0aGlzLmFwcC53b3Jrc3BhY2UuZ2V0TGVhdmVzT2ZUeXBlKFxyXG4gICAgICBWSUVXX1RZUEVfR1JBUEhfQU5BTFlTSVNcclxuICAgICk/LlswXT8udmlldyBhcyBBbmFseXNpc1ZpZXdcclxuXHJcbiAgICBpZiAodmlldykgcmV0dXJuIHZpZXdcclxuICAgIGVsc2UgaWYgKG9wZW5JZk5vdCkge1xyXG4gICAgICByZXR1cm4gYXdhaXQgb3BlblZpZXcodGhpcy5hcHAsIFZJRVdfVFlQRV9HUkFQSF9BTkFMWVNJUywgQW5hbHlzaXNWaWV3KVxyXG4gICAgfSBlbHNlIHJldHVybiBudWxsXHJcbiAgfVxyXG5cclxuICBhc3luYyByZWZyZXNoR3JhcGgoKSB7XHJcbiAgICB0cnkge1xyXG4gICAgICBjb25zb2xlLnRpbWUoJ0luaXRpYWxpc2UgR3JhcGgnKVxyXG4gICAgICB0aGlzLmcgPSBuZXcgTXlHcmFwaCh0aGlzLmFwcCwgdGhpcy5zZXR0aW5ncylcclxuICAgICAgYXdhaXQgdGhpcy5nLmluaXRHcmFwaCgpXHJcbiAgICAgIC8vIGF3YWl0IHRoaXMuZy5pbml0RGF0YSgpXHJcbiAgICAgIGRlYnVnKHRoaXMuc2V0dGluZ3MsIHsgZzogdGhpcy5nIH0pXHJcbiAgICAgIGNvbnNvbGUudGltZUVuZCgnSW5pdGlhbGlzZSBHcmFwaCcpXHJcbiAgICAgIG5ldyBOb3RpY2UoJ0luZGV4IFJlZnJlc2hlZCcpXHJcbiAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICBjb25zb2xlLmxvZyhlcnJvcilcclxuICAgICAgbmV3IE5vdGljZShcclxuICAgICAgICAnQW4gZXJyb3Igb2NjdXJlZCB3aXRoIEdyYXBoIEFuYWx5c2lzLCBwbGVhc2UgY2hlY2sgdGhlIGNvbnNvbGUuJ1xyXG4gICAgICApXHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBvbnVubG9hZCgpIHtcclxuICAgIGNvbnNvbGUubG9nKCd1bmxvYWRpbmcgZ3JhcGggYW5hbHlzaXMgcGx1Z2luJylcclxuICAgIHRoaXMuYXBwLndvcmtzcGFjZVxyXG4gICAgICAuZ2V0TGVhdmVzT2ZUeXBlKFZJRVdfVFlQRV9HUkFQSF9BTkFMWVNJUylcclxuICAgICAgLmZvckVhY2goKGxlYWYpID0+IHtcclxuICAgICAgICBsZWFmLnZpZXcudW5sb2FkKClcclxuICAgICAgICBsZWFmLmRldGFjaCgpXHJcbiAgICAgIH0pXHJcbiAgfVxyXG5cclxuICBhc3luYyBsb2FkU2V0dGluZ3MoKSB7XHJcbiAgICB0aGlzLnNldHRpbmdzID0gT2JqZWN0LmFzc2lnbih7fSwgREVGQVVMVF9TRVRUSU5HUywgYXdhaXQgdGhpcy5sb2FkRGF0YSgpKVxyXG4gIH1cclxuXHJcbiAgYXN5bmMgc2F2ZVNldHRpbmdzKCkge1xyXG4gICAgYXdhaXQgdGhpcy5zYXZlRGF0YSh0aGlzLnNldHRpbmdzKVxyXG4gIH1cclxufVxyXG4iLCAiLyoqXHJcbiAqIFRoaXMgbW9kdWxlIGNvbnRhaW5zIHZhcmlvdXMgdXRpbGl0eSBmdW5jdGlvbnMgY29tbW9ubHkgdXNlZCBpbiBPYnNpZGlhbiBwbHVnaW5zLlxyXG4gKiBAbW9kdWxlIG9ic2lkaWFuLWNvbW11bml0eS1saWJcclxuICovXHJcbmltcG9ydCAqIGFzIGZlYXRoZXIgZnJvbSBcImZlYXRoZXItaWNvbnNcIjtcclxuaW1wb3J0IHsgYWRkSWNvbiwgTWFya2Rvd25SZW5kZXJlciwgTWFya2Rvd25WaWV3LCBNb2RhbCwgbm9ybWFsaXplUGF0aCwgTm90aWNlLCByZXF1ZXN0LCBURmlsZSwgfSBmcm9tIFwib2JzaWRpYW5cIjtcclxuLyoqXHJcbiAqIFlvdSBjYW4gYXdhaXQgdGhpcyBGdW5jdGlvbiB0byBkZWxheSBleGVjdXRpb25cclxuICpcclxuICogQHBhcmFtIGRlbGF5IFRoZSBkZWxheSBpbiBtc1xyXG4gKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHdhaXQoZGVsYXkpIHtcclxuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4gc2V0VGltZW91dChyZXNvbHZlLCBkZWxheSkpO1xyXG59XHJcbi8qKlxyXG4gKiBBZGRzIGFsbCBvZmZpY2lhbCBGZWF0aGVyIEljb25zIHRvIE9ic2lkaWFuLlxyXG4gKiBodHRwczovL2ZlYXRoZXJpY29ucy5jb20vXHJcbiAqXHJcbiAqIEBwYXJhbSBhdHRyIFNWRyBBdHRyaWJ1dGVzIGZvciB0aGUgSWNvbi4gVGhlIGRlZmF1bHQgc2hvdWxkIHdvcmsgZm9yIG1vc3QgdXNlY2FzZXMuXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gYWRkQWxsRmVhdGhlckljb25zKGF0dHIgPSB7IHZpZXdCb3g6IFwiMCAwIDI0IDI0XCIsIHdpZHRoOiBcIjEwMFwiLCBoZWlnaHQ6IFwiMTAwXCIgfSkge1xyXG4gICAgT2JqZWN0LnZhbHVlcyhmZWF0aGVyLmljb25zKS5mb3JFYWNoKChpKSA9PiB7XHJcbiAgICAgICAgY29uc3Qgc3ZnID0gaS50b1N2ZyhhdHRyKTtcclxuICAgICAgICBhZGRJY29uKGBmZWF0aGVyLSR7aS5uYW1lfWAsIHN2Zyk7XHJcbiAgICB9KTtcclxufVxyXG4vKipcclxuICogQWRkcyBhIHNwZWNpZmljIEZlYXRoZXIgSWNvbiB0byBPYnNpZGlhbi5cclxuICpcclxuICogQHBhcmFtIG5hbWUgb2ZmaWNpYWwgTmFtZSBvZiB0aGUgSWNvbiAoaHR0cHM6Ly9mZWF0aGVyaWNvbnMuY29tLylcclxuICogQHBhcmFtIGF0dHIgU1ZHIEF0dHJpYnV0ZXMgZm9yIHRoZSBJY29uLiBUaGUgZGVmYXVsdCBzaG91bGQgd29yayBmb3IgbW9zdCB1c2VjYXNlcy5cclxuICogQHJldHVybnMge3N0cmluZ30gSWNvbiBuYW1lXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gYWRkRmVhdGhlckljb24obmFtZSwgYXR0ciA9IHsgdmlld0JveDogXCIwIDAgMjQgMjRcIiwgd2lkdGg6IFwiMTAwXCIsIGhlaWdodDogXCIxMDBcIiB9KSB7XHJcbiAgICBpZiAoZmVhdGhlci5pY29uc1tuYW1lXSkge1xyXG4gICAgICAgIGNvbnN0IGljb25OYW1lID0gYGZlYXRoZXItJHtuYW1lfWA7XHJcbiAgICAgICAgYWRkSWNvbihpY29uTmFtZSwgZmVhdGhlci5pY29uc1tuYW1lXS50b1N2ZyhhdHRyKSk7XHJcbiAgICAgICAgcmV0dXJuIGljb25OYW1lO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgdGhyb3cgRXJyb3IoYFRoaXMgSWNvbiAoJHtuYW1lfSkgZG9lc24ndCBleGlzdCBpbiB0aGUgRmVhdGhlciBMaWJyYXJ5LmApO1xyXG4gICAgfVxyXG59XHJcbi8qKlxyXG4gKiBDb252ZXJ0IGEgYmFzZTY0IFN0cmluZyB0byBhbiBBcnJheUJ1ZmZlci5cclxuICogWW91IGNhbiB0aGVuIHVzZSB0aGUgQXJyYXlCdWZmZXIgdG8gc2F2ZSB0aGUgYXNzZXQgdG8gZGlzay5cclxuICpcclxuICogQHBhcmFtIGJhc2U2NCBiYXNlNjQgc3RyaW5nIHRvIGJlIGNvbnZlcnRlZC5cclxuICogQHJldHVybnMgQXJyYXlCdWZmZXJcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBiYXNlNjRUb0FycmF5QnVmZmVyKGJhc2U2NCkge1xyXG4gICAgY29uc3QgYmluYXJ5X3N0cmluZyA9IHdpbmRvdy5hdG9iKGJhc2U2NCk7XHJcbiAgICBjb25zdCBsZW4gPSBiaW5hcnlfc3RyaW5nLmxlbmd0aDtcclxuICAgIGxldCBieXRlcyA9IG5ldyBVaW50OEFycmF5KGxlbik7XHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XHJcbiAgICAgICAgYnl0ZXNbaV0gPSBiaW5hcnlfc3RyaW5nLmNoYXJDb2RlQXQoaSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gYnl0ZXMuYnVmZmVyO1xyXG59XHJcbi8qKlxyXG4gKiBUaGlzIGlzIGEgaGVscGVyIG1ldGhvZCBmb3IgYW4gdW5kb2N1bWVudGVkIEFQSSBvZiBPYnNpZGlhbi5cclxuICpcclxuICogQHBhcmFtIHZhdWx0IFlvdSBjYW4gZ2V0IHRoaXMgdmlhIGB0aGlzLmFwcC52YXVsdGBcclxuICogQHBhcmFtIGZpbGVOYW1lIFRoZSBGaWxlbmFtZSBmb3IgeW91ciBBdHRhY2htZW50XHJcbiAqIEBwYXJhbSBmb3JtYXQgVGhlIEZpbGVmb3JtYXQgb2YgeW91ciBBdHRhY2htZW50XHJcbiAqIEBwYXJhbSBzb3VyY2VGaWxlIFRoZSBTb3VyY2VmaWxlIGZyb20gd2hlcmUgdGhlIEF0dGFjaG1lbnQgZ2V0cyBhZGRlZCwgdGhpcyBpcyBuZWVkZWQgYmVjYXVzZSB0aGUgQXR0YWNobWVudCBGb2xkZXIgbWlnaHQgYmUgZGlmZmVyZW50IGJhc2VkIG9uIHdoZXJlIGl0IGdldHMgaW5zZXJ0ZWQuXHJcbiAqIEByZXR1cm5zIFRoZSBBdHRhY2htZW50IFBhdGhcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRBdmFpbGFibGVQYXRoRm9yQXR0YWNobWVudHModmF1bHQsIGZpbGVOYW1lLCBmb3JtYXQsIHNvdXJjZUZpbGUpIHtcclxuICAgIC8vQHRzLWV4cGVjdC1lcnJvclxyXG4gICAgcmV0dXJuIHZhdWx0LmdldEF2YWlsYWJsZVBhdGhGb3JBdHRhY2htZW50cyhmaWxlTmFtZSwgZm9ybWF0LCBzb3VyY2VGaWxlKTtcclxufVxyXG4vKipcclxuICogQ29weSBgY29udGVudGAgdG8gdGhlIHVzZXJzIGNsaXBib2FyZC5cclxuICpcclxuICogQHBhcmFtIHtzdHJpbmd9IGNvbnRlbnQgVGhlIGNvbnRlbnQgdG8gYmUgY29waWVkIHRvIGNsaXBib2FyZC5cclxuICogQHBhcmFtIHsoKSA9PiBhbnl9IHN1Y2Nlc3MgVGhlIGNhbGxiYWNrIHRvIHJ1biB3aGVuIHRleHQgaXMgc3VjY2Vzc2Z1bGx5IGNvcGllZC4gRGVmYXVsdCB0aHJvd3MgYSBuZXcgYE5vdGljZWBcclxuICogQHBhcmFtIHsocmVhc29uPykgPT4gYW55fSBmYWlsdXJlIFRoZSBjYWxsYmFjayB0byBydW4gd2hlbiB0ZXh0IHdhcyBub3QgYWJsZSB0byBiZSBjb3BpZWQuIERlZmF1bHQgdGhyb3dzIGEgbmV3IGBOb3RpY2VgLCBhbmQgY29uc29sZSBsb2dzIHRoZSBlcnJvci5gXHJcbiAqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gY29weShjb250ZW50LCBzdWNjZXNzID0gKCkgPT4gbmV3IE5vdGljZShcIkNvcGllZCB0byBjbGlwYm9hcmRcIiksIGZhaWx1cmUgPSAocmVhc29uKSA9PiB7XHJcbiAgICBuZXcgTm90aWNlKFwiQ291bGQgbm90IGNvcHkgdG8gY2xpcGJvYXJkXCIpO1xyXG4gICAgY29uc29sZS5sb2coeyByZWFzb24gfSk7XHJcbn0pIHtcclxuICAgIGF3YWl0IG5hdmlnYXRvci5jbGlwYm9hcmQud3JpdGVUZXh0KGNvbnRlbnQpLnRoZW4oc3VjY2VzcywgZmFpbHVyZSk7XHJcbn1cclxuLyoqXHJcbiAqIEdpdmVuIGFuIGVkaXRvciwgY2hlY2sgaWYgc29tZXRoaW5nIGlzIHNlbGVjdGVkIGFuZCByZXR1cm4gdGhhdCBzZWxlY3Rpb24sIG90aGVyd2lzZSByZXR1cm4gdGhlIGVudGlyZSBjb250ZW50IG9mIHRoZSBlZGl0b3JcclxuICogQHBhcmFtICB7RWRpdG9yfSBlZGl0b3JcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRTZWxlY3Rpb25Gcm9tRWRpdG9yKGVkaXRvcikge1xyXG4gICAgaWYgKGVkaXRvci5zb21ldGhpbmdTZWxlY3RlZCgpKSB7XHJcbiAgICAgICAgcmV0dXJuIGVkaXRvci5nZXRTZWxlY3Rpb24oKTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIHJldHVybiBlZGl0b3IuZ2V0VmFsdWUoKTtcclxuICAgIH1cclxufVxyXG4vKipcclxuICogQ2hlY2sgaWYgc29tZXRoaW5nIGlzIHNlbGVjdGVkIGluIHRoZSBjdXJyZW50IGZpbGUgYW5kIHJldHVybiB0aGF0IHNlbGVjdGlvbiwgb3RoZXJ3aXNlIHJldHVybiB0aGUgZW50aXJlIGNvbnRlbnQgb2YgdGhlIGN1cnJlbnQgZmlsZS5cclxuICogQHBhcmFtICB7QXBwfSBhcHBcclxuICogQHBhcmFtICB7Ym9vbGVhbn0gW2NhY2hlZD10cnVlXSBVc2UgYGNhY2hlZFJlYWRgIG9yIGByZWFkYC4gYGNhY2hlZFJlYWRgIGJ5IGRlZmF1bHQuXHJcbiAqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2V0U2VsZWN0aW9uRnJvbUN1cnJGaWxlKGFwcCwgY2FjaGVkID0gdHJ1ZSkge1xyXG4gICAgdmFyIF9hO1xyXG4gICAgY29uc3QgdGV4dCA9IChfYSA9IHdpbmRvdyA9PT0gbnVsbCB8fCB3aW5kb3cgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHdpbmRvdy5nZXRTZWxlY3Rpb24oKSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLnRvU3RyaW5nKCk7XHJcbiAgICBpZiAodGV4dCkge1xyXG4gICAgICAgIHJldHVybiB0ZXh0O1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgY29uc3QgY3VyckZpbGUgPSBhcHAud29ya3NwYWNlLmdldEFjdGl2ZUZpbGUoKTtcclxuICAgICAgICBpZiAoY3VyckZpbGUgaW5zdGFuY2VvZiBURmlsZSkge1xyXG4gICAgICAgICAgICBpZiAoY2FjaGVkKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gYXdhaXQgYXBwLnZhdWx0LmNhY2hlZFJlYWQoY3VyckZpbGUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGF3YWl0IGFwcC52YXVsdC5yZWFkKGN1cnJGaWxlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgbmV3IE5vdGljZShcIllvdSBtdXN0IGJlIGZvY3VzZWQgb24gYSBtYXJrZG93biBmaWxlLlwiKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuLyoqXHJcbiAqIENoZWNrIGlmIGBub3RlTmFtZWAgaXMgdGhlIG5hbWUgb2YgYSBub3RlIHRoYXQgZXhpc3RzIGluIHRoZSB2YXVsdC5cclxuICogQHBhcmFtICB7QXBwfSBhcHBcclxuICogQHBhcmFtICB7c3RyaW5nfSBub3RlTmFtZSBCYXNlbmFtZSBvZiB0aGUgbm90ZSB0byBzZWFyY2ggZm9yLlxyXG4gKiBAcGFyYW0gIHtzdHJpbmd9IFtzb3VyY2VQYXRoPVwiXCJdIE9wdGlvbmFsIGZpbGUgcGF0aCB0byBzdGFydCBzZWFyY2hpbmcgZnJvbS4gRGVmYXVsdCBpcyB0aGUgY3VycmVudCBmaWxlLlxyXG4gKiBAcmV0dXJucyBib29sZWFuXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgaXNJblZhdWx0ID0gKGFwcCwgbm90ZU5hbWUsIHNvdXJjZVBhdGggPSBcIlwiKSA9PiAhIWFwcC5tZXRhZGF0YUNhY2hlLmdldEZpcnN0TGlua3BhdGhEZXN0KG5vdGVOYW1lLCBzb3VyY2VQYXRoKTtcclxuLyoqXHJcbiAqIFdoZW4gaG92ZXJpbmcgYSBsaW5rIGdvaW5nIHRvIGB0b2AsIHNob3cgdGhlIE9ic2lkaWFuIGhvdmVyLXByZXZpZXcgb2YgdGhhdCBub3RlLlxyXG4gKlxyXG4gKiBZb3UgcHJvYmFibHkgaGF2ZSB0byBob2xkIGRvd24gYEN0cmxgIHdoZW4gaG92ZXJpbmcgdGhlIGxpbmsgZm9yIHRoZSBwcmV2aWV3IHRvIGFwcGVhciFcclxuICogQHBhcmFtICB7TW91c2VFdmVudH0gZXZlbnRcclxuICogQHBhcmFtICB7WW91clZpZXd9IHZpZXcgVGhlIHZpZXcgd2l0aCB0aGUgbGluayBiZWluZyBob3ZlcmVkXHJcbiAqIEBwYXJhbSAge3N0cmluZ30gdG8gVGhlIGJhc2VuYW1lIG9mIHRoZSBub3RlIHRvIHByZXZpZXcuXHJcbiAqIEB0ZW1wbGF0ZSBZb3VyVmlldyBUaGUgVmlld1R5cGUgb2YgeW91ciB2aWV3XHJcbiAqIEByZXR1cm5zIHZvaWRcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBob3ZlclByZXZpZXcoZXZlbnQsIHZpZXcsIHRvKSB7XHJcbiAgICBjb25zdCB0YXJnZXRFbCA9IGV2ZW50LnRhcmdldDtcclxuICAgIHZpZXcuYXBwLndvcmtzcGFjZS50cmlnZ2VyKFwiaG92ZXItbGlua1wiLCB7XHJcbiAgICAgICAgZXZlbnQsXHJcbiAgICAgICAgc291cmNlOiB2aWV3LmdldFZpZXdUeXBlKCksXHJcbiAgICAgICAgaG92ZXJQYXJlbnQ6IHZpZXcsXHJcbiAgICAgICAgdGFyZ2V0RWwsXHJcbiAgICAgICAgbGlua3RleHQ6IHRvLFxyXG4gICAgfSk7XHJcbn1cclxuLyoqXHJcbiAqIENyZWF0ZSBhIG5ldyBtYXJrZG93biBub3RlIG5hbWVkIGBuZXdOYW1lYCBpbiB0aGUgdXNlcidzIHByZWZmZXJlZCBuZXctbm90ZS1mb2xkZXIuXHJcbiAqIEBwYXJhbSAge0FwcH0gYXBwXHJcbiAqIEBwYXJhbSAge3N0cmluZ30gbmV3TmFtZSBOYW1lIG9mIG5ldyBub3RlICh3aXRoIG9yIHdpdGhvdXQgJy5tZCcpXHJcbiAqIEBwYXJhbSAge3N0cmluZ30gW2N1cnJGaWxlUGF0aD1cIlwiXSBGaWxlIHBhdGggb2YgdGhlIGN1cnJlbnQgbm90ZS4gVXNlIGFuIGVtcHR5IHN0cmluZyBpZiB0aGVyZSBpcyBubyBhY3RpdmUgZmlsZS5cclxuICogQHJldHVybnMge1Byb21pc2U8VEZpbGU+fSBuZXcgVEZpbGVcclxuICovXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBjcmVhdGVOZXdNRE5vdGUoYXBwLCBuZXdOYW1lLCBjdXJyRmlsZVBhdGggPSBcIlwiKSB7XHJcbiAgICBjb25zdCBuZXdGaWxlRm9sZGVyID0gYXBwLmZpbGVNYW5hZ2VyLmdldE5ld0ZpbGVQYXJlbnQoY3VyckZpbGVQYXRoKS5wYXRoO1xyXG4gICAgY29uc3QgbmV3RmlsZVBhdGggPSBub3JtYWxpemVQYXRoKGAke25ld0ZpbGVGb2xkZXJ9JHtuZXdGaWxlRm9sZGVyID09PSBcIi9cIiA/IFwiXCIgOiBcIi9cIn0ke2FkZE1EKG5ld05hbWUpfWApO1xyXG4gICAgcmV0dXJuIGF3YWl0IGFwcC52YXVsdC5jcmVhdGUobmV3RmlsZVBhdGgsIFwiXCIpO1xyXG59XHJcbi8qKlxyXG4gKiBBZGQgJy5tZCcgdG8gYSBgbm90ZU5hbWVgIGlmIGl0IGlzbid0IGFscmVhZHkgdGhlcmUuXHJcbiAqIEBwYXJhbSAge3N0cmluZ30gbm90ZU5hbWUgd2l0aCBvciB3aXRob3V0ICcubWQnIG9uIHRoZSBlbmQuXHJcbiAqIEByZXR1cm5zIHtzdHJpbmd9IG5vdGVOYW1lIHdpdGggJy5tZCcgb24gdGhlIGVuZC5cclxuICovXHJcbmV4cG9ydCBjb25zdCBhZGRNRCA9IChub3RlTmFtZSkgPT4ge1xyXG4gICAgbGV0IHdpdGhNRCA9IG5vdGVOYW1lLnNsaWNlKCk7XHJcbiAgICBpZiAoIXdpdGhNRC5lbmRzV2l0aChcIi5tZFwiKSkge1xyXG4gICAgICAgIHdpdGhNRCArPSBcIi5tZFwiO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHdpdGhNRDtcclxufTtcclxuLyoqXHJcbiAqIFN0cmlwICcubWQnIG9mZiB0aGUgZW5kIG9mIGEgbm90ZSBuYW1lIHRvIGdldCBpdHMgYmFzZW5hbWUuXHJcbiAqXHJcbiAqIFdvcmtzIHdpdGggdGhlIGVkZ2VjYXNlIHdoZXJlIGEgbm90ZSBoYXMgJy5tZCcgaW4gaXRzIGJhc2VuYW1lOiBgT2JzaWRpYW4ubWQubWRgLCBmb3IgZXhhbXBsZS5cclxuICogQHBhcmFtICB7c3RyaW5nfSBub3RlTmFtZSB3aXRoIG9yIHdpdGhvdXQgJy5tZCcgb24gdGhlIGVuZC5cclxuICogQHJldHVybnMge3N0cmluZ30gbm90ZU5hbWUgd2l0aG91dCAnLm1kJ1xyXG4gKi9cclxuZXhwb3J0IGNvbnN0IHN0cmlwTUQgPSAobm90ZU5hbWUpID0+IHtcclxuICAgIGlmIChub3RlTmFtZS5lbmRzV2l0aChcIi5tZFwiKSkge1xyXG4gICAgICAgIHJldHVybiBub3RlTmFtZS5zcGxpdChcIi5tZFwiKS5zbGljZSgwLCAtMSkuam9pbihcIi5tZFwiKTtcclxuICAgIH1cclxuICAgIGVsc2VcclxuICAgICAgICByZXR1cm4gbm90ZU5hbWU7XHJcbn07XHJcbi8qKlxyXG4gKiBXaGVuIGNsaWNraW5nIGEgbGluaywgY2hlY2sgaWYgdGhhdCBub3RlIGlzIGFscmVhZHkgb3BlbiBpbiBhbm90aGVyIGxlYWYsIGFuZCBzd2l0Y2ggdG8gdGhhdCBsZWFmLCBpZiBzby4gT3RoZXJ3aXNlLCBvcGVuIHRoZSBub3RlIGluIGEgbmV3IHBhbmUuXHJcbiAqIEBwYXJhbSAge0FwcH0gYXBwXHJcbiAqIEBwYXJhbSAge3N0cmluZ30gZGVzdCBCYXNlbmFtZSBvZiBub3RlIHRvIG9wZW5cclxuICogQHBhcmFtICB7TW91c2VFdmVudH0gZXZlbnRcclxuICogQHBhcmFtICB7e2NyZWF0ZU5ld0ZpbGU6Ym9vbGVhbn19IFtvcHRpb25zPXtjcmVhdGVOZXdGaWxlOnRydWV9XSBXaGV0aGVyIG9yIG5vdCB0byBjcmVhdGUgYGRlc3RgIGZpbGUgaWYgaXQgZG9lc24ndCBleGlzdC4gSWYgYGZhbHNlYCwgc2ltcGx5IHJldHVybiBmcm9tIHRoZSBmdW5jdGlvbi5cclxuICogQHJldHVybnMgUHJvbWlzZVxyXG4gKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG9wZW5PclN3aXRjaChhcHAsIGRlc3QsIGV2ZW50LCBvcHRpb25zID0geyBjcmVhdGVOZXdGaWxlOiB0cnVlIH0pIHtcclxuICAgIGNvbnN0IHsgd29ya3NwYWNlIH0gPSBhcHA7XHJcbiAgICBjb25zdCBkZXN0U3RyaXBwZWQgPSBzdHJpcE1EKGRlc3QpO1xyXG4gICAgbGV0IGRlc3RGaWxlID0gYXBwLm1ldGFkYXRhQ2FjaGUuZ2V0Rmlyc3RMaW5rcGF0aERlc3QoZGVzdFN0cmlwcGVkLCBcIlwiKTtcclxuICAgIC8vIElmIGRlc3QgZG9lc24ndCBleGlzdCwgbWFrZSBpdFxyXG4gICAgaWYgKCFkZXN0RmlsZSAmJiBvcHRpb25zLmNyZWF0ZU5ld0ZpbGUpIHtcclxuICAgICAgICBkZXN0RmlsZSA9IGF3YWl0IGNyZWF0ZU5ld01ETm90ZShhcHAsIGRlc3RTdHJpcHBlZCk7XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmICghZGVzdEZpbGUgJiYgIW9wdGlvbnMuY3JlYXRlTmV3RmlsZSlcclxuICAgICAgICByZXR1cm47XHJcbiAgICAvLyBDaGVjayBpZiBpdCdzIGFscmVhZHkgb3BlblxyXG4gICAgY29uc3QgbGVhdmVzV2l0aERlc3RBbHJlYWR5T3BlbiA9IFtdO1xyXG4gICAgLy8gRm9yIGFsbCBvcGVuIGxlYXZlcywgaWYgdGhlIGxlYXZlJ3MgYmFzZW5hbWUgaXMgZXF1YWwgdG8gdGhlIGxpbmsgZGVzdGluYXRpb24sIHJhdGhlciBhY3RpdmF0ZSB0aGF0IGxlYWYgaW5zdGVhZCBvZiBvcGVuaW5nIGl0IGluIHR3byBwYW5lc1xyXG4gICAgd29ya3NwYWNlLml0ZXJhdGVBbGxMZWF2ZXMoKGxlYWYpID0+IHtcclxuICAgICAgICB2YXIgX2EsIF9iO1xyXG4gICAgICAgIGlmIChsZWFmLnZpZXcgaW5zdGFuY2VvZiBNYXJrZG93blZpZXcpIHtcclxuICAgICAgICAgICAgaWYgKCgoX2IgPSAoX2EgPSBsZWFmLnZpZXcpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5maWxlKSA9PT0gbnVsbCB8fCBfYiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2IuYmFzZW5hbWUpID09PSBkZXN0U3RyaXBwZWQpIHtcclxuICAgICAgICAgICAgICAgIGxlYXZlc1dpdGhEZXN0QWxyZWFkeU9wZW4ucHVzaChsZWFmKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG4gICAgLy8gUmF0aGVyIHN3aXRjaCB0byBpdCBpZiBpdCBpcyBvcGVuXHJcbiAgICBpZiAobGVhdmVzV2l0aERlc3RBbHJlYWR5T3Blbi5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgd29ya3NwYWNlLnNldEFjdGl2ZUxlYWYobGVhdmVzV2l0aERlc3RBbHJlYWR5T3BlblswXSk7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICAvLyBAdHMtaWdub3JlXHJcbiAgICAgICAgY29uc3QgbW9kZSA9IGFwcC52YXVsdC5nZXRDb25maWcoXCJkZWZhdWx0Vmlld01vZGVcIik7XHJcbiAgICAgICAgY29uc3QgbGVhZiA9IGV2ZW50LmN0cmxLZXkgfHwgZXZlbnQuZ2V0TW9kaWZpZXJTdGF0ZShcIk1ldGFcIilcclxuICAgICAgICAgICAgPyB3b3Jrc3BhY2Uuc3BsaXRBY3RpdmVMZWFmKClcclxuICAgICAgICAgICAgOiB3b3Jrc3BhY2UuZ2V0VW5waW5uZWRMZWFmKCk7XHJcbiAgICAgICAgYXdhaXQgbGVhZi5vcGVuRmlsZShkZXN0RmlsZSwgeyBhY3RpdmU6IHRydWUsIG1vZGUgfSk7XHJcbiAgICB9XHJcbn1cclxuLyoqXHJcbiAqIEdpdmVuIGEgbGlzdCBvZiByZXNvbHZlZCBsaW5rcyBmcm9tIGFwcC5tZXRhZGF0YUNhY2hlLCBjaGVjayBpZiBgZnJvbWAgaGFzIGEgbGluayB0byBgdG9gXHJcbiAqIEBwYXJhbSAge1Jlc29sdmVkTGlua3N9IHJlc29sdmVkTGlua3NcclxuICogQHBhcmFtICB7c3RyaW5nfSBmcm9tIE5vdGUgbmFtZSB3aXRoIGxpbmsgbGVhdmluZyAoV2l0aCBvciB3aXRob3V0ICcubWQnKVxyXG4gKiBAcGFyYW0gIHtzdHJpbmd9IHRvIE5vdGUgbmFtZSB3aXRoIGxpbmsgYXJyaXZpbmcgKFdpdGggb3Igd2l0aG91dCAnLm1kJylcclxuICogQHBhcmFtIHtib29sZWFufSBbZGlyZWN0ZWQ9dHJ1ZV0gT25seSBjaGVjayBpZiBgZnJvbWAgaGFzIGEgbGluayB0byBgdG9gLiBJZiBub3QgZGlyZWN0ZWQsIGNoZWNrIGluIGJvdGggZGlyZWN0aW9uc1xyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGlzTGlua2VkKHJlc29sdmVkTGlua3MsIGZyb20sIHRvLCBkaXJlY3RlZCA9IHRydWUpIHtcclxuICAgIHZhciBfYSwgX2I7XHJcbiAgICBpZiAoIWZyb20uZW5kc1dpdGgoXCIubWRcIikpIHtcclxuICAgICAgICBmcm9tICs9IFwiLm1kXCI7XHJcbiAgICB9XHJcbiAgICBpZiAoIXRvLmVuZHNXaXRoKFwiLm1kXCIpKSB7XHJcbiAgICAgICAgdG8gKz0gXCIubWRcIjtcclxuICAgIH1cclxuICAgIGNvbnN0IGZyb21UbyA9IChfYSA9IHJlc29sdmVkTGlua3NbZnJvbV0pID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5oYXNPd25Qcm9wZXJ0eSh0byk7XHJcbiAgICBpZiAoIWZyb21UbyAmJiAhZGlyZWN0ZWQpIHtcclxuICAgICAgICBjb25zdCB0b0Zyb20gPSAoX2IgPSByZXNvbHZlZExpbmtzW3RvXSkgPT09IG51bGwgfHwgX2IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9iLmhhc093blByb3BlcnR5KGZyb20pO1xyXG4gICAgICAgIHJldHVybiB0b0Zyb207XHJcbiAgICB9XHJcbiAgICBlbHNlXHJcbiAgICAgICAgcmV0dXJuIGZyb21UbztcclxufVxyXG4vKipcclxuICogQ2hlY2sgaWYgdGhlIGxpbmsgYGZyb21gIFx1MjE5MiBgdG9gIGlzIHJlc29sdmVkIG9yIG5vdC5cclxuICogQHBhcmFtICB7QXBwfSBhcHBcclxuICogQHBhcmFtICB7c3RyaW5nfSB0b1xyXG4gKiBAcGFyYW0gIHtzdHJpbmd9IGZyb21cclxuICogQHJldHVybnMgYm9vbGVhblxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGlzUmVzb2x2ZWQoYXBwLCB0bywgZnJvbSkge1xyXG4gICAgdmFyIF9hO1xyXG4gICAgY29uc3QgeyByZXNvbHZlZExpbmtzIH0gPSBhcHAubWV0YWRhdGFDYWNoZTtcclxuICAgIHJldHVybiAoKF9hID0gcmVzb2x2ZWRMaW5rcyA9PT0gbnVsbCB8fCByZXNvbHZlZExpbmtzID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZXNvbHZlZExpbmtzW2Zyb21dKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2FbdG9dKSA+IDA7XHJcbn1cclxuLyoqXHJcbiAqIE9wZW4geW91ciB2aWV3IG9uIHRoZSBjaG9zZW4gYHNpZGVgIGlmIGl0IGlzbid0IGFscmVhZHkgb3BlblxyXG4gKiBAcGFyYW0gIHtBcHB9IGFwcFxyXG4gKiBAcGFyYW0gIHtzdHJpbmd9IHZpZXdUeXBlXHJcbiAqIEBwYXJhbSAge0NvbnN0cnVjdG9yPFlvdXJWaWV3Pn0gdmlld0NsYXNzIFRoZSBjbGFzcyBjb25zdHJ1Y3RvciBvZiB5b3VyIHZpZXdcclxuICogQHBhcmFtICB7XCJsZWZ0XCJ8XCJyaWdodFwifSBbc2lkZT1cInJpZ2h0XCJdXHJcbiAqIEByZXR1cm5zIHtQcm9taXNlPFlvdXJWaWV3Pn0gVGhlIG9wZW5lZCB2aWV3XHJcbiAqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gb3BlblZpZXcoYXBwLCB2aWV3VHlwZSwgdmlld0NsYXNzLCBzaWRlID0gXCJyaWdodFwiKSB7XHJcbiAgICBsZXQgbGVhZiA9IG51bGw7XHJcbiAgICBmb3IgKGxlYWYgb2YgYXBwLndvcmtzcGFjZS5nZXRMZWF2ZXNPZlR5cGUodmlld1R5cGUpKSB7XHJcbiAgICAgICAgaWYgKGxlYWYudmlldyBpbnN0YW5jZW9mIHZpZXdDbGFzcykge1xyXG4gICAgICAgICAgICByZXR1cm4gbGVhZi52aWV3O1xyXG4gICAgICAgIH1cclxuICAgICAgICBhd2FpdCBsZWFmLnNldFZpZXdTdGF0ZSh7IHR5cGU6IFwiZW1wdHlcIiB9KTtcclxuICAgICAgICBicmVhaztcclxuICAgIH1cclxuICAgIGxlYWYgPVxyXG4gICAgICAgIChsZWFmICE9PSBudWxsICYmIGxlYWYgIT09IHZvaWQgMCA/IGxlYWYgOiBzaWRlID09PSBcInJpZ2h0XCIpXHJcbiAgICAgICAgICAgID8gYXBwLndvcmtzcGFjZS5nZXRSaWdodExlYWYoZmFsc2UpXHJcbiAgICAgICAgICAgIDogYXBwLndvcmtzcGFjZS5nZXRMZWZ0TGVhZihmYWxzZSk7XHJcbiAgICBhd2FpdCBsZWFmLnNldFZpZXdTdGF0ZSh7XHJcbiAgICAgICAgdHlwZTogdmlld1R5cGUsXHJcbiAgICAgICAgYWN0aXZlOiB0cnVlLFxyXG4gICAgfSk7XHJcbiAgICByZXR1cm4gbGVhZi52aWV3O1xyXG59XHJcbi8qKlxyXG4gKiBDaGVjayB3aGljaCBzaWRlIG9mIHRoZSB3b3Jrc3BhY2UgeW91ciBgdmlld1R5cGVgIGlzIG9uLCBhbmQgc2F2ZSBpdCBpbnRvIGBwbHVnaW4uc2V0dGluZ3Nbc2V0dGluZ05hbWVdYC5cclxuICpcclxuICogKipUaXAqKjogUnVuIHRoaXMgZnVuY3Rpb24gb24gYHBsdWdpbi51bmxvYWRgIHRvIHNhdmUgdGhlIGxhc3Qgc2lkZSB5b3VyIHZpZXcgd2FzIG9uIHdoZW4gY2xvc2luZywgdGhlbiB7QGxpbmsgb3BlblZpZXd9IG9uIHRoZSBzYW1lIHNpZGUgaXQgd2FzIGxhc3QuXHJcbiAqIEBwYXJhbSAge0FwcH0gYXBwXHJcbiAqIEBwYXJhbSAge1lvdXJQbHVnaW59IHBsdWdpblxyXG4gKiBAcGFyYW0gIHtzdHJpbmd9IHZpZXdUeXBlXHJcbiAqIEBwYXJhbSAge3N0cmluZ30gc2V0dGluZ05hbWVcclxuICogQHJldHVybnMge1wibGVmdFwiIHwgXCJyaWdodFwifSBgc2lkZWBcclxuICovXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBzYXZlVmlld1NpZGUoYXBwLCBwbHVnaW4sIHZpZXdUeXBlLCBzZXR0aW5nTmFtZSkge1xyXG4gICAgY29uc3QgbGVhZiA9IGFwcC53b3Jrc3BhY2UuZ2V0TGVhdmVzT2ZUeXBlKHZpZXdUeXBlKVswXTtcclxuICAgIGlmICghbGVhZikge1xyXG4gICAgICAgIGNvbnNvbGUuaW5mbyhgT2JzaWRpYW4tQ29tbXVuaXR5LUxpYjogTm8gaW5zdGFuY2Ugb2YgJyR7dmlld1R5cGV9JyBvcGVuLCBjYW5ub3Qgc2F2ZSBzaWRlYCk7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgLy9AdHMtaWdub3JlXHJcbiAgICBjb25zdCBzaWRlID0gbGVhZi5nZXRSb290KCkuc2lkZTtcclxuICAgIC8vQHRzLWlnbm9yZVxyXG4gICAgcGx1Z2luLnNldHRpbmdzW3NldHRpbmdOYW1lXSA9IHNpZGU7XHJcbiAgICAvL0B0cy1pZ25vcmVcclxuICAgIGF3YWl0IHBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcclxuICAgIHJldHVybiBzaWRlO1xyXG59XHJcbi8qKlxyXG4gKiBBIE1vZGFsIHVzZWQgaW4ge0BsaW5rIGFkZFJlbmRlcmVkTWFya2Rvd25CdXR0b259IHRvIGRpc3BsYXkgcmVuZGVyZWQgbWFya2Rvd24gZnJvbSBhIHJhdyBzdHJpbmcsIG9yIGZldGNoZWQgZnJvbSBhIHByb3ZpZGVkIHVybC5cclxuICpcclxuICogIVtdKGh0dHBzOi8vaS5pbWd1ci5jb20vTk13TTUwRS5wbmcpXHJcbiAqIEBwYXJhbSAge0FwcH0gYXBwXHJcbiAqIEBwYXJhbSAge1lvdXJQbHVnaW59IHBsdWdpblxyXG4gKiBAcGFyYW0gIHtzdHJpbmd9IHNvdXJjZSBSYXcgbWFya2Rvd24gY29udGVudCBvciB1cmwgdG8gZmluZCByYXcgbWFya2Rvd24uXHJcbiAqIEBwYXJhbSAge2Jvb2xlYW59IGZldGNoIFRydWUgXHUyMTkyIGZldGNoIG1hcmtkb3duIGZyb20gYHNvdXJjZWAgYXMgdXJsLiBGYWxzZSBcdTIxOTIgYHNvdXJjZWAgaXMgYWxyZWFkeSBhIG1hcmtkb3duIHN0cmluZy5cclxuICovXHJcbmV4cG9ydCBjbGFzcyBSZW5kZXJlZE1hcmtkb3duTW9kYWwgZXh0ZW5kcyBNb2RhbCB7XHJcbiAgICBjb25zdHJ1Y3RvcihhcHAsIHBsdWdpbiwgc291cmNlLCBmZXRjaCkge1xyXG4gICAgICAgIHN1cGVyKGFwcCk7XHJcbiAgICAgICAgdGhpcy5wbHVnaW4gPSBwbHVnaW47XHJcbiAgICAgICAgdGhpcy5zb3VyY2UgPSBzb3VyY2U7XHJcbiAgICAgICAgdGhpcy5mZXRjaCA9IGZldGNoO1xyXG4gICAgfVxyXG4gICAgYXN5bmMgb25PcGVuKCkge1xyXG4gICAgICAgIGxldCB7IGNvbnRlbnRFbCwgc291cmNlLCBwbHVnaW4sIGZldGNoIH0gPSB0aGlzO1xyXG4gICAgICAgIGxldCBjb250ZW50ID0gc291cmNlO1xyXG4gICAgICAgIGlmIChmZXRjaCkge1xyXG4gICAgICAgICAgICBjb250ZW50RWwuY3JlYXRlRGl2KHsgdGV4dDogYFdhaXRpbmcgZm9yIGNvbnRlbnQgZnJvbTogJyR7c291cmNlfSdgIH0pO1xyXG4gICAgICAgICAgICBjb250ZW50ID0gYXdhaXQgcmVxdWVzdCh7IHVybDogc291cmNlIH0pO1xyXG4gICAgICAgICAgICBjb250ZW50RWwuZW1wdHkoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgbG9nRGl2ID0gY29udGVudEVsLmNyZWF0ZURpdih7IGNsczogXCJPQ0wtUmVuZGVyZWRNYXJrZG93bk1vZGFsXCIgfSk7XHJcbiAgICAgICAgTWFya2Rvd25SZW5kZXJlci5yZW5kZXJNYXJrZG93bihjb250ZW50LCBsb2dEaXYsIFwiXCIsIHBsdWdpbik7XHJcbiAgICB9XHJcbiAgICBvbkNsb3NlKCkge1xyXG4gICAgICAgIHRoaXMuY29udGVudEVsLmVtcHR5KCk7XHJcbiAgICB9XHJcbn1cclxuLyoqXHJcbiAqIEFkZCBhIGJ1dHRvbiB0byBhbiBIVE1MRUxlbWVudCwgd2hpY2gsIHdoZW4gY2xpY2tlZCwgcG9wcyB1cCBhIHtAbGluayBSZW5kZXJlZE1hcmtkb3duTW9kYWx9IHNob3dpbmcgcmVuZGVyZWQgbWFya2Rvd24uXHJcbiAqXHJcbiAqIFVzZSBgZmV0Y2hgIHRvIGluZGljYXRlIHdoZXRoZXIgdGhlIG1hcmtkb3duIHN0cmluZyBuZWVkcyB0byBiZSBmZXRjaGVkLCBvciBpZiBpdCBoYXMgYmVlbiBwcm92aWRlZCBhcyBhIHN0cmluZyBhbHJlYWR5LlxyXG4gKlxyXG4gKiAhW10oaHR0cHM6Ly9pLmltZ3VyLmNvbS9IaTRneXl2LnBuZylcclxuICogQHBhcmFtICB7QXBwfSBhcHBcclxuICogQHBhcmFtICB7WW91clBsdWdpbn0gcGx1Z2luXHJcbiAqIEBwYXJhbSAge0hUTUxFbGVtZW50fSBjb250YWluZXJFbCBIVE1MRWxlbWVudCB0byBhZGQgdGhlIGJ1dHRvbiB0b1xyXG4gKiBAcGFyYW0gIHtzdHJpbmd9IHNvdXJjZSBSYXcgbWFya2Rvd24gY29udGVudCBvciB1cmwgdG8gZmluZCByYXcgbWFya2Rvd24uXHJcbiAqIEBwYXJhbSAge2Jvb2xlYW59IGZldGNoIFRydWUgXHUyMTkyIGZldGNoIG1hcmtkb3duIGZyb20gYHNvdXJjZWAgYXMgdXJsLiBGYWxzZSBcdTIxOTIgYHNvdXJjZWAgaXMgYWxyZWFkeSBhIG1hcmtkb3duIHN0cmluZy5cclxuICogQHBhcmFtICB7c3RyaW5nfSBkaXNwbGF5VGV4dCBUZXh0IHRvIGRpc3BsYXkgaW4gdGhlIGJ1dHRvbi5cclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBhZGRSZW5kZXJlZE1hcmtkb3duQnV0dG9uKGFwcCwgcGx1Z2luLCBjb250YWluZXJFbCwgc291cmNlLCBmZXRjaCwgZGlzcGxheVRleHQpIHtcclxuICAgIGNvbnRhaW5lckVsLmNyZWF0ZUVsKFwiYnV0dG9uXCIsIHsgdGV4dDogZGlzcGxheVRleHQgfSwgKGJ1dCkgPT4gYnV0Lm9uQ2xpY2tFdmVudCgoKSA9PiB7XHJcbiAgICAgICAgbmV3IFJlbmRlcmVkTWFya2Rvd25Nb2RhbChhcHAsIHBsdWdpbiwgc291cmNlLCBmZXRjaCkub3BlbigpO1xyXG4gICAgfSkpO1xyXG59XHJcbi8qKlxyXG4gKiBDaGVjayBpZiBgYXBwLm1ldGFkYXRhQ2FjaGUuUmVzb2x2ZWRMaW5rc2AgaGF2ZSBmdWxseSBpbml0YWxpc2VkLlxyXG4gKlxyXG4gKiBVc2VkIHdpdGgge0BsaW5rIHdhaXRGb3JSZXNvbHZlZExpbmtzfS5cclxuICogQHBhcmFtIHtBcHB9IGFwcFxyXG4gKiBAcGFyYW0gIHtudW1iZXJ9IG5vRmlsZXMgTnVtYmVyIG9mIGZpbGVzIGluIHlvdXIgdmF1bHQuXHJcbiAqIEByZXR1cm5zIHtib29sZWFufVxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIHJlc29sdmVkTGlua3NDb21wbGV0ZShhcHAsIG5vRmlsZXMpIHtcclxuICAgIGNvbnN0IHsgcmVzb2x2ZWRMaW5rcyB9ID0gYXBwLm1ldGFkYXRhQ2FjaGU7XHJcbiAgICByZXR1cm4gT2JqZWN0LmtleXMocmVzb2x2ZWRMaW5rcykubGVuZ3RoID09PSBub0ZpbGVzO1xyXG59XHJcbi8qKlxyXG4gKiBXYWl0IGZvciBgYXBwLm1ldGFkYXRhQ2FjaGUuUmVzb2x2ZWRMaW5rc2AgdG8gaGF2ZSBmdWxseSBpbml0aWFsaXNlZC5cclxuICogQHBhcmFtIHtBcHB9IGFwcFxyXG4gKiBAcGFyYW0gIHtudW1iZXJ9IFtkZWxheT0xMDAwXSBOdW1iZXIgb2YgbWlsbGlzZWNvbmRzIHRvIHdhaXQgYmV0d2VlbiBlYWNoIGNoZWNrLlxyXG4gKiBAcGFyYW0ge251bWJlcn0gW21heD01MF0gTWF4aW11bSBudW1iZXIgb2YgaXRlcmF0aW9ucyB0byBjaGVjayBiZWZvcmUgdGhyb3dpbmcgYW4gZXJyb3IgYW5kIGJyZWFraW5nIG91dCBvZiB0aGUgbG9vcC5cclxuICovXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiB3YWl0Rm9yUmVzb2x2ZWRMaW5rcyhhcHAsIGRlbGF5ID0gMTAwMCwgbWF4ID0gNTApIHtcclxuICAgIGNvbnN0IG5vRmlsZXMgPSBhcHAudmF1bHQuZ2V0TWFya2Rvd25GaWxlcygpLmxlbmd0aDtcclxuICAgIGxldCBpID0gMDtcclxuICAgIHdoaWxlICghcmVzb2x2ZWRMaW5rc0NvbXBsZXRlKGFwcCwgbm9GaWxlcykgJiYgaSA8IG1heCkge1xyXG4gICAgICAgIGF3YWl0IHdhaXQoZGVsYXkpO1xyXG4gICAgICAgIGkrKztcclxuICAgIH1cclxuICAgIGlmIChpID09PSBtYXgpIHtcclxuICAgICAgICB0aHJvdyBFcnJvcihcIk9ic2lkaWFuLUNvbW11bml0eS1MaWI6IFJlc29sdmVkTGlua3MgZGlkIG5vdCBmaW5pc2ggaW5pdGlhbGlzaW5nLiBgbWF4YCBpdGVyYXRpb25zIHdhcyByZWFjaGVkIGZpcnN0LlwiKTtcclxuICAgIH1cclxufVxyXG4iLCAiaW1wb3J0IHsgSXRlbVZpZXcsIFdvcmtzcGFjZUxlYWYgfSBmcm9tICdvYnNpZGlhbidcclxuaW1wb3J0IHsgVklFV19UWVBFX0dSQVBIX0FOQUxZU0lTIH0gZnJvbSAnc3JjL0NvbnN0YW50cydcclxuaW1wb3J0IHR5cGUgeyBTdWJ0eXBlIH0gZnJvbSAnc3JjL0ludGVyZmFjZXMnXHJcbmltcG9ydCB0eXBlIEdyYXBoQW5hbHlzaXNQbHVnaW4gZnJvbSAnc3JjL21haW4nXHJcbmltcG9ydCBBbmFseXNpc0NvbXBvbmVudCBmcm9tICcuL0NvbXBvbmVudHMvQW5hbHlzaXNDb21wb25lbnQuc3ZlbHRlJ1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQW5hbHlzaXNWaWV3IGV4dGVuZHMgSXRlbVZpZXcge1xyXG4gIHBsdWdpbjogR3JhcGhBbmFseXNpc1BsdWdpblxyXG4gIGN1cnJTdWJ0eXBlOiBTdWJ0eXBlXHJcbiAgY29tcG9uZW50OiBBbmFseXNpc0NvbXBvbmVudFxyXG5cclxuICBjb25zdHJ1Y3RvcihcclxuICAgIGxlYWY6IFdvcmtzcGFjZUxlYWYsXHJcbiAgICBwbHVnaW46IEdyYXBoQW5hbHlzaXNQbHVnaW4sXHJcbiAgICBjdXJyU3VidHlwZTogU3VidHlwZSB8IG51bGxcclxuICApIHtcclxuICAgIHN1cGVyKGxlYWYpXHJcbiAgICB0aGlzLnBsdWdpbiA9IHBsdWdpblxyXG4gICAgdGhpcy5jdXJyU3VidHlwZSA9IGN1cnJTdWJ0eXBlXHJcbiAgfVxyXG5cclxuICBhc3luYyBvbmxvYWQoKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgICBzdXBlci5vbmxvYWQoKVxyXG4gIH1cclxuXHJcbiAgZ2V0Vmlld1R5cGUoKTogc3RyaW5nIHtcclxuICAgIHJldHVybiBWSUVXX1RZUEVfR1JBUEhfQU5BTFlTSVNcclxuICB9XHJcblxyXG4gIGdldERpc3BsYXlUZXh0KCk6IHN0cmluZyB7XHJcbiAgICByZXR1cm4gJ0dyYXBoIEFuYWx5c2lzJ1xyXG4gIH1cclxuXHJcbiAgaWNvbiA9ICdHQS1JQ09OJ1xyXG5cclxuICBhc3luYyBvbk9wZW4oKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgICBhd2FpdCB0aGlzLmRyYXcodGhpcy5jdXJyU3VidHlwZSA/PyB0aGlzLnBsdWdpbi5zZXR0aW5ncy5kZWZhdWx0U3VidHlwZVR5cGUpXHJcbiAgfVxyXG5cclxuICBvbkNsb3NlKCk6IFByb21pc2U8dm9pZD4ge1xyXG4gICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpXHJcbiAgfVxyXG5cclxuICBhc3luYyBkcmF3KGN1cnJTdWJ0eXBlOiBTdWJ0eXBlKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgICBjb25zdCB7IGFwcCwgY29udGVudEVsIH0gPSB0aGlzXHJcbiAgICBjb25zdCB7IHNldHRpbmdzIH0gPSB0aGlzLnBsdWdpblxyXG5cclxuICAgIGNvbnRlbnRFbC5lbXB0eSgpXHJcbiAgICBjb250ZW50RWwuYWRkQ2xhc3MoJ0dBLVZpZXcnKVxyXG5cclxuICAgIHRoaXMuY29tcG9uZW50Py4kZGVzdHJveSgpXHJcblxyXG4gICAgdGhpcy5jb21wb25lbnQgPSBuZXcgQW5hbHlzaXNDb21wb25lbnQoe1xyXG4gICAgICB0YXJnZXQ6IGNvbnRlbnRFbCxcclxuICAgICAgcHJvcHM6IHtcclxuICAgICAgICBhcHAsXHJcbiAgICAgICAgcGx1Z2luOiB0aGlzLnBsdWdpbixcclxuICAgICAgICBzZXR0aW5ncyxcclxuICAgICAgICB2aWV3OiB0aGlzLFxyXG4gICAgICAgIGN1cnJTdWJ0eXBlLFxyXG4gICAgICB9LFxyXG4gICAgfSlcclxuICB9XHJcbn1cclxuIiwgImltcG9ydCB0eXBlIHsgR3JhcGhBbmFseXNpc1NldHRpbmdzLCBTdWJ0eXBlSW5mbyB9IGZyb20gJ3NyYy9JbnRlcmZhY2VzJ1xyXG5cclxuZXhwb3J0IGNvbnN0IERFRkFVTFRfU0VUVElOR1M6IEdyYXBoQW5hbHlzaXNTZXR0aW5ncyA9IHtcclxuICBub0luZmluaXR5OiB0cnVlLFxyXG4gIG5vWmVybzogdHJ1ZSxcclxuICBhbGxGaWxlRXh0ZW5zaW9uczogdHJ1ZSxcclxuICBzaG93SW1nVGh1bWJuYWlsczogdHJ1ZSxcclxuICBhZGRVbnJlc29sdmVkOiB0cnVlLFxyXG4gIGNvVGFnczogdHJ1ZSxcclxuICBkZWZhdWx0U3VidHlwZVR5cGU6ICdDby1DaXRhdGlvbnMnLFxyXG4gIGRlYnVnTW9kZTogZmFsc2UsXHJcbiAgc3VwZXJEZWJ1Z01vZGU6IGZhbHNlLFxyXG4gIGV4Y2x1c2lvblJlZ2V4OiAnJyxcclxuICBleGNsdXNpb25UYWdzOiBbXSxcclxuICBhbGdzVG9TaG93OiBbXHJcbiAgICAnQWRhbWljIEFkYXInLFxyXG4gICAgJ0phY2NhcmQnLFxyXG4gICAgJ090c3VrYS1DaGlhaScsXHJcbiAgICAnQ28tQ2l0YXRpb25zJyxcclxuICAgICdMYWJlbCBQcm9wYWdhdGlvbicsXHJcbiAgXSxcclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IERFQ0lNQUxTID0gNFxyXG5cclxuZXhwb3J0IGNvbnN0IFZJRVdfVFlQRV9HUkFQSF9BTkFMWVNJUyA9ICdncmFwaC1hbmFseXNpcydcclxuXHJcbmV4cG9ydCBjb25zdCBMSU5LRUQgPSAnR0EtbGlua2VkJ1xyXG5leHBvcnQgY29uc3QgTk9UX0xJTktFRCA9ICdHQS1ub3QtbGlua2VkJ1xyXG5cclxuZXhwb3J0IGNvbnN0IE1FQVNVUkUgPSAnR0EtbWVhc3VyZSdcclxuZXhwb3J0IGNvbnN0IE5PREUgPSAnR0Etbm9kZSdcclxuXHJcbmV4cG9ydCBjb25zdCBJQ09OID0gJ0dBLWljb24nXHJcblxyXG5leHBvcnQgY29uc3QgQU5BTFlTSVNfVFlQRVM6IFN1YnR5cGVJbmZvW10gPSBbXHJcbiAge1xyXG4gICAgYW5sOiAnQ28tQ2l0YXRpb25zJyxcclxuICAgIHN1YnR5cGU6ICdDby1DaXRhdGlvbnMnLFxyXG4gICAgZGVzYzogJ1NlZSB3aGljaCBvZiB5b3VyIG5vdGVzIGFyZSByZWZlcmVuY2VkIHRvZ2V0aGVyIG1vc3Qgb2Z0ZW4uJyxcclxuICAgIGdsb2JhbDogZmFsc2UsXHJcbiAgICBubHA6IGZhbHNlLFxyXG4gIH0sXHJcbiAge1xyXG4gICAgYW5sOiAnQ2VudHJhbGl0eScsXHJcbiAgICBzdWJ0eXBlOiAnSElUUycsXHJcbiAgICBkZXNjOiAnQW4gYXV0aG9yaXR5IGhhcyBsb3RzIG9mIGxpbmtzIGNvbWluZyBpblxcbkEgaHViIGhhcyBsb3RzIG9mIGxpbmtzIGdvaW5nIG91dC4nLFxyXG4gICAgZ2xvYmFsOiB0cnVlLFxyXG4gICAgbmxwOiBmYWxzZSxcclxuICB9LFxyXG4gIHtcclxuICAgIGFubDogJ0xpbmsgUHJlZGljdGlvbicsXHJcbiAgICBzdWJ0eXBlOiAnQWRhbWljIEFkYXInLFxyXG4gICAgZGVzYzogJ0Jhc2VkIG9uIHRoZSBzdHJ1Y3R1cmUgb2YgeW91ciBncmFwaCwgdGhpcyBhbGcgcHJlZGljdHMgd2hpY2ggbm90ZXMgX3Nob3VsZF8gYmUgbGlua2VkIHRvIHRoZSBjdXJyZW50IG5vdGUuJyxcclxuICAgIGdsb2JhbDogZmFsc2UsXHJcbiAgICBubHA6IGZhbHNlLFxyXG4gIH0sXHJcbiAgLy8ge1xyXG4gIC8vICAgYW5sOiAnTGluayBQcmVkaWN0aW9uJyxcclxuICAvLyAgIHN1YnR5cGU6ICdDb21tb24gTmVpZ2hib3VycycsXHJcbiAgLy8gICBkZXNjOiAnVGVsbHMgeW91IGhvdyBtYW55IG5vdGVzIGFyZSBsaW5rZWQgdG8gdGhlIGN1cnJlbnQgKGFjdGl2ZSkgbm90ZSwgYW5kIHRoZSBub3RlIGluIHRoZSB0YWJsZS5cXG5Ib3ZlciBvdmVyIGEgY2VsbCBpbiB0aGUgdGFibGUgdG8gc2VlIGEgbGlzdCBvZiBjb21tb24gbmVpZ2hib3VycycsXHJcbiAgLy8gICBnbG9iYWw6IGZhbHNlLFxyXG4gIC8vICAgbmxwOiBmYWxzZSxcclxuICAvLyB9LFxyXG5cclxuICB7XHJcbiAgICBhbmw6ICdTaW1pbGFyaXR5JyxcclxuICAgIHN1YnR5cGU6ICdKYWNjYXJkJyxcclxuICAgIGRlc2M6IFwiQmFzZWQgb24gdGhlIHN0cnVjdHVyZSBvZiB5b3VyIGdyYXBoLCB0aGlzIGFsZyBwcmVkaWN0cyB3aGljaCBub3RlcyBhcmUgbW9zdCBzaW1pbGFyIHRvIHRoZSBjdXJyZW50IG5vdGUuXFxuXFxuSXQgc2hvd3MgdGhlIHJhdGlvIG9mIHRoZSBudW1iZXJzIG9mIG5laWdoYm91cnMgdHdvIG5vdGVzIGhhdmUgaW4gY29tbW9uLCB0byB0aGUgdG90YWwgbnVtYmVyIG9mIG5laWdoYm91cnMgdGhleSBlYWNoIGhhdmUuXFxuXFxuJ1x1RDgzRFx1REQxNycgbWVhbnMgdGhhdCB0aGlzIG5vdGUgaXMgbGlua2VkIHRvIHRoZSBncm91cCBuYW1lLlwiLFxyXG4gICAgZ2xvYmFsOiBmYWxzZSxcclxuICAgIG5scDogZmFsc2UsXHJcbiAgfSxcclxuICB7XHJcbiAgICBhbmw6ICdTaW1pbGFyaXR5JyxcclxuICAgIHN1YnR5cGU6ICdPdmVybGFwJyxcclxuICAgIGRlc2M6ICc8Tm8gZGVzY3JpcHRpb24gZ2l2ZW4geWV0PicsXHJcbiAgICBnbG9iYWw6IGZhbHNlLFxyXG4gICAgbmxwOiBmYWxzZSxcclxuICB9LFxyXG5cclxuICB7XHJcbiAgICBhbmw6ICdDb21tdW5pdHkgRGV0ZWN0aW9uJyxcclxuICAgIHN1YnR5cGU6ICdMYWJlbCBQcm9wYWdhdGlvbicsXHJcbiAgICBkZXNjOiBcIlN0YXJ0IGJ5IGdpdmluZyBlYWNoIG5vZGUgYSB1bmlxdWUgbGFiZWwgKGl0cyBvd24gbmFtZSkuIFRoZW4sIGxvb2sgYXQgZWFjaCBub2RlJ3MgbmVpZ2hib3VycywgYW5kIGNoYW5nZSBpdCdzIGxhYmVsIHRvIHRoZSBtb3N0IGNvbW1vbiBhbW9uZyBpdCdzIG5laWdoYm91cnMuIFJlcGVhdCB0aGlzIHByb2Nlc3MgYGl0ZXJhdGlvbnNgIG51bWJlciBvZiB0aW1lcy4gU2hvdyB0aGUgbm9kZXMgZ3JvdXBlZCBieSB0aGUgbGFzdCBsYWJlbCB0aGV5IGhhZC5cXG5cXG4nXHVEODNEXHVERDE3JyBtZWFucyB0aGF0IHRoaXMgbm90ZSBpcyBsaW5rZWQgdG8gdGhlIGdyb3VwIG5hbWUuXCIsXHJcbiAgICBnbG9iYWw6IHRydWUsXHJcbiAgICBubHA6IGZhbHNlLFxyXG4gIH0sXHJcbiAge1xyXG4gICAgYW5sOiAnQ29tbXVuaXR5IERldGVjdGlvbicsXHJcbiAgICBzdWJ0eXBlOiAnTG91dmFpbicsXHJcbiAgICBkZXNjOiBcIlNob3cgdGhlIExvdXZhaW4gY29tbXVuaXR5IHRoYXQgdGhlIGN1cnJlbnQgbm90ZSBpcyBpbi5cXG5cXG4nXHVEODNEXHVERDE3JyBtZWFucyB0aGF0IHRoaXMgbm90ZSBpcyBsaW5rZWQgdG8gdGhlIGdyb3VwIG5hbWUuXCIsXHJcbiAgICBnbG9iYWw6IGZhbHNlLFxyXG4gICAgbmxwOiBmYWxzZSxcclxuICB9LFxyXG4gIHtcclxuICAgIGFubDogJ0NvbW11bml0eSBEZXRlY3Rpb24nLFxyXG4gICAgc3VidHlwZTogJ0NsdXN0ZXJpbmcgQ29lZmZpY2llbnQnLFxyXG4gICAgZGVzYzogJ0dpdmVzIHRoZSBsaWtlbGlob29kIHRoYXQgYSBub2RlcyBfbmVpZ2hib3Vyc18gYXJlIGNvbm5lY3RlZCB0byBlYWNoIG90aGVyLicsXHJcbiAgICBnbG9iYWw6IHRydWUsXHJcbiAgICBubHA6IGZhbHNlLFxyXG4gIH0sXHJcbiAge1xyXG4gICAgYW5sOiAnTkxQJyxcclxuICAgIHN1YnR5cGU6ICdCb1cnLFxyXG4gICAgZGVzYzogJ1NwbGl0IGEgbm90ZSBpbnRvIGl0cyB3b3JkcywgY291bnQgaG93IG1hbnkgdGltZXMgZWFjaCB3b3JkIGFwcGVhcnMsIGFuZCB1c2UgdGhhdCB0byBjb21wYXJlIHNpbWlsYXJpdHkgYmV0d2VlbiBub3Rlcy4nLFxyXG4gICAgZ2xvYmFsOiBmYWxzZSxcclxuICAgIG5scDogdHJ1ZSxcclxuICB9LFxyXG4gIC8vIHtcclxuICAvLyAgIGFubDogJ05MUCcsXHJcbiAgLy8gICBzdWJ0eXBlOiAnVHZlcnNreScsXHJcbiAgLy8gICBkZXNjOiAnJyxcclxuICAvLyAgIGdsb2JhbDogZmFsc2UsXHJcbiAgLy8gICBubHA6IHRydWUsXHJcbiAgLy8gfSxcclxuICB7XHJcbiAgICBhbmw6ICdOTFAnLFxyXG4gICAgc3VidHlwZTogJ090c3VrYS1DaGlhaScsXHJcbiAgICBkZXNjOiAnUmV0dXJucyB0aGUgXCJPdHN1a2EtQ2hpYWlcIiBzaW1pbGFyaXR5IGJldHdlZW4gdGhlIGN1cnJlbnQgbm90ZSBhbmQgZXZlcnkgb3RoZXIgbm90ZS4nLFxyXG4gICAgZ2xvYmFsOiBmYWxzZSxcclxuICAgIG5scDogdHJ1ZSxcclxuICB9LFxyXG4gIHtcclxuICAgIGFubDogJ05MUCcsXHJcbiAgICBzdWJ0eXBlOiAnU2VudGltZW50JyxcclxuICAgIGRlc2M6ICdHaXZlcyB0aGUgc2VudGltZW50IG9mIGV2ZXJ5IG5vdGUuIFBvc2l0aXZlIFx1MjE5MiBoaWdoZXIgc2VudGltZW50LicsXHJcbiAgICBnbG9iYWw6IHRydWUsXHJcbiAgICBubHA6IHRydWUsXHJcbiAgfSxcclxuXVxyXG5cclxuZXhwb3J0IGNvbnN0IElNR19FWFRFTlNJT05TID0gWydwbmcnLCAnanBnJywgJ2pwZWcnLCAnc3ZnJywgJ2dpZicsICd3ZWJwJ11cclxuXHJcbmV4cG9ydCBjb25zdCBpY29uU1ZHID0gYDxwYXRoIGZpbGw9XCJjdXJyZW50Q29sb3JcIiBzdHJva2U9XCJjdXJyZW50Q29sb3JcIiBkPVwiTTg4LjgsNjcuNWMtMywwLTUuNywxLjItNy43LDMuMWwtMTIuMi03YzAuNy0xLjksMS4yLTMuOSwxLjItNi4xQzcwLDQ3LjgsNjIuMiw0MCw1Mi41LDQwYy0xLjMsMC0yLjYsMC4yLTMuOCwwLjVsLTUtMTAuOFxyXG5jMi4zLTIuMSwzLjgtNSwzLjgtOC40YzAtNi4yLTUtMTEuMy0xMS4zLTExLjNTMjUsMTUsMjUsMjEuM3M1LDExLjMsMTEuMywxMS4zYzAuMSwwLDAuMywwLDAuNCwwbDUuMiwxMS4yXHJcbmMtNC4yLDMuMi02LjksOC4yLTYuOSwxMy44QzM1LDY3LjIsNDIuOCw3NSw1Mi41LDc1YzQuOCwwLDkuMi0xLjksMTIuMy01LjFsMTIuOCw3LjNjLTAuMSwwLjUtMC4yLDEtMC4yLDEuNVxyXG5jMCw2LjIsNSwxMS4zLDExLjMsMTEuM1MxMDAsODUsMTAwLDc4LjdTOTUsNjcuNSw4OC44LDY3LjV6IE0zNi4zLDI1Yy0yLjEsMC0zLjgtMS43LTMuOC0zLjhzMS43LTMuOCwzLjgtMy44czMuOCwxLjcsMy44LDMuOFxyXG5TMzguMywyNSwzNi4zLDI1eiBNNTIuNSw2Ny41Yy01LjUsMC0xMC00LjUtMTAtMTBzNC41LTEwLDEwLTEwczEwLDQuNSwxMCwxMFM1OCw2Ny41LDUyLjUsNjcuNXogTTg4LjgsODIuNWMtMi4xLDAtMy44LTEuNy0zLjgtMy44XHJcbnMxLjctMy44LDMuOC0zLjhzMy44LDEuNywzLjgsMy44UzkwLjgsODIuNSw4OC44LDgyLjV6IE04MC4zLDQxLjdsLTMtNGwtNy41LDUuNmwzLDRMODAuMyw0MS43eiBNOTAsNDBjNS41LDAsMTAtNC41LDEwLTEwXHJcbnMtNC41LTEwLTEwLTEwcy0xMCw0LjUtMTAsMTBTODQuNSw0MCw5MCw0MHogTTIzLjgsNjBoNy41di01aC03LjVWNjB6IE0xMCw0Ny41Yy01LjUsMC0xMCw0LjUtMTAsMTBzNC41LDEwLDEwLDEwczEwLTQuNSwxMC0xMFxyXG5TMTUuNSw0Ny41LDEwLDQ3LjV6XCIvPmBcclxuIiwgIi8qKiBAcmV0dXJucyB7dm9pZH0gKi9cbmV4cG9ydCBmdW5jdGlvbiBub29wKCkge31cblxuZXhwb3J0IGNvbnN0IGlkZW50aXR5ID0gKHgpID0+IHg7XG5cbi8qKlxuICogQHRlbXBsYXRlIFRcbiAqIEB0ZW1wbGF0ZSBTXG4gKiBAcGFyYW0ge1R9IHRhclxuICogQHBhcmFtIHtTfSBzcmNcbiAqIEByZXR1cm5zIHtUICYgU31cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGFzc2lnbih0YXIsIHNyYykge1xuXHQvLyBAdHMtaWdub3JlXG5cdGZvciAoY29uc3QgayBpbiBzcmMpIHRhcltrXSA9IHNyY1trXTtcblx0cmV0dXJuIC8qKiBAdHlwZSB7VCAmIFN9ICovICh0YXIpO1xufVxuXG4vLyBBZGFwdGVkIGZyb20gaHR0cHM6Ly9naXRodWIuY29tL3RoZW4vaXMtcHJvbWlzZS9ibG9iL21hc3Rlci9pbmRleC5qc1xuLy8gRGlzdHJpYnV0ZWQgdW5kZXIgTUlUIExpY2Vuc2UgaHR0cHM6Ly9naXRodWIuY29tL3RoZW4vaXMtcHJvbWlzZS9ibG9iL21hc3Rlci9MSUNFTlNFXG4vKipcbiAqIEBwYXJhbSB7YW55fSB2YWx1ZVxuICogQHJldHVybnMge3ZhbHVlIGlzIFByb21pc2VMaWtlPGFueT59XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc19wcm9taXNlKHZhbHVlKSB7XG5cdHJldHVybiAoXG5cdFx0ISF2YWx1ZSAmJlxuXHRcdCh0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnIHx8IHR5cGVvZiB2YWx1ZSA9PT0gJ2Z1bmN0aW9uJykgJiZcblx0XHR0eXBlb2YgKC8qKiBAdHlwZSB7YW55fSAqLyAodmFsdWUpLnRoZW4pID09PSAnZnVuY3Rpb24nXG5cdCk7XG59XG5cbi8qKiBAcmV0dXJucyB7dm9pZH0gKi9cbmV4cG9ydCBmdW5jdGlvbiBhZGRfbG9jYXRpb24oZWxlbWVudCwgZmlsZSwgbGluZSwgY29sdW1uLCBjaGFyKSB7XG5cdGVsZW1lbnQuX19zdmVsdGVfbWV0YSA9IHtcblx0XHRsb2M6IHsgZmlsZSwgbGluZSwgY29sdW1uLCBjaGFyIH1cblx0fTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJ1bihmbikge1xuXHRyZXR1cm4gZm4oKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGJsYW5rX29iamVjdCgpIHtcblx0cmV0dXJuIE9iamVjdC5jcmVhdGUobnVsbCk7XG59XG5cbi8qKlxuICogQHBhcmFtIHtGdW5jdGlvbltdfSBmbnNcbiAqIEByZXR1cm5zIHt2b2lkfVxuICovXG5leHBvcnQgZnVuY3Rpb24gcnVuX2FsbChmbnMpIHtcblx0Zm5zLmZvckVhY2gocnVuKTtcbn1cblxuLyoqXG4gKiBAcGFyYW0ge2FueX0gdGhpbmdcbiAqIEByZXR1cm5zIHt0aGluZyBpcyBGdW5jdGlvbn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzX2Z1bmN0aW9uKHRoaW5nKSB7XG5cdHJldHVybiB0eXBlb2YgdGhpbmcgPT09ICdmdW5jdGlvbic7XG59XG5cbi8qKiBAcmV0dXJucyB7Ym9vbGVhbn0gKi9cbmV4cG9ydCBmdW5jdGlvbiBzYWZlX25vdF9lcXVhbChhLCBiKSB7XG5cdHJldHVybiBhICE9IGEgPyBiID09IGIgOiBhICE9PSBiIHx8IChhICYmIHR5cGVvZiBhID09PSAnb2JqZWN0JykgfHwgdHlwZW9mIGEgPT09ICdmdW5jdGlvbic7XG59XG5cbmxldCBzcmNfdXJsX2VxdWFsX2FuY2hvcjtcblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gZWxlbWVudF9zcmNcbiAqIEBwYXJhbSB7c3RyaW5nfSB1cmxcbiAqIEByZXR1cm5zIHtib29sZWFufVxuICovXG5leHBvcnQgZnVuY3Rpb24gc3JjX3VybF9lcXVhbChlbGVtZW50X3NyYywgdXJsKSB7XG5cdGlmIChlbGVtZW50X3NyYyA9PT0gdXJsKSByZXR1cm4gdHJ1ZTtcblx0aWYgKCFzcmNfdXJsX2VxdWFsX2FuY2hvcikge1xuXHRcdHNyY191cmxfZXF1YWxfYW5jaG9yID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYScpO1xuXHR9XG5cdC8vIFRoaXMgaXMgYWN0dWFsbHkgZmFzdGVyIHRoYW4gZG9pbmcgVVJMKC4uKS5ocmVmXG5cdHNyY191cmxfZXF1YWxfYW5jaG9yLmhyZWYgPSB1cmw7XG5cdHJldHVybiBlbGVtZW50X3NyYyA9PT0gc3JjX3VybF9lcXVhbF9hbmNob3IuaHJlZjtcbn1cblxuLyoqIEBwYXJhbSB7c3RyaW5nfSBzcmNzZXQgKi9cbmZ1bmN0aW9uIHNwbGl0X3NyY3NldChzcmNzZXQpIHtcblx0cmV0dXJuIHNyY3NldC5zcGxpdCgnLCcpLm1hcCgoc3JjKSA9PiBzcmMudHJpbSgpLnNwbGl0KCcgJykuZmlsdGVyKEJvb2xlYW4pKTtcbn1cblxuLyoqXG4gKiBAcGFyYW0ge0hUTUxTb3VyY2VFbGVtZW50IHwgSFRNTEltYWdlRWxlbWVudH0gZWxlbWVudF9zcmNzZXRcbiAqIEBwYXJhbSB7c3RyaW5nIHwgdW5kZWZpbmVkIHwgbnVsbH0gc3Jjc2V0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNyY3NldF91cmxfZXF1YWwoZWxlbWVudF9zcmNzZXQsIHNyY3NldCkge1xuXHRjb25zdCBlbGVtZW50X3VybHMgPSBzcGxpdF9zcmNzZXQoZWxlbWVudF9zcmNzZXQuc3Jjc2V0KTtcblx0Y29uc3QgdXJscyA9IHNwbGl0X3NyY3NldChzcmNzZXQgfHwgJycpO1xuXG5cdHJldHVybiAoXG5cdFx0dXJscy5sZW5ndGggPT09IGVsZW1lbnRfdXJscy5sZW5ndGggJiZcblx0XHR1cmxzLmV2ZXJ5KFxuXHRcdFx0KFt1cmwsIHdpZHRoXSwgaSkgPT5cblx0XHRcdFx0d2lkdGggPT09IGVsZW1lbnRfdXJsc1tpXVsxXSAmJlxuXHRcdFx0XHQvLyBXZSBuZWVkIHRvIHRlc3QgYm90aCB3YXlzIGJlY2F1c2UgVml0ZSB3aWxsIGNyZWF0ZSBhbiBhIGZ1bGwgVVJMIHdpdGhcblx0XHRcdFx0Ly8gYG5ldyBVUkwoYXNzZXQsIGltcG9ydC5tZXRhLnVybCkuaHJlZmAgZm9yIHRoZSBjbGllbnQgd2hlbiBgYmFzZTogJy4vJ2AsIGFuZCB0aGVcblx0XHRcdFx0Ly8gcmVsYXRpdmUgVVJMcyBpbnNpZGUgc3Jjc2V0IGFyZSBub3QgYXV0b21hdGljYWxseSByZXNvbHZlZCB0byBhYnNvbHV0ZSBVUkxzIGJ5XG5cdFx0XHRcdC8vIGJyb3dzZXJzIChpbiBjb250cmFzdCB0byBpbWcuc3JjKS4gVGhpcyBtZWFucyBib3RoIFNTUiBhbmQgRE9NIGNvZGUgY291bGRcblx0XHRcdFx0Ly8gY29udGFpbiByZWxhdGl2ZSBvciBhYnNvbHV0ZSBVUkxzLlxuXHRcdFx0XHQoc3JjX3VybF9lcXVhbChlbGVtZW50X3VybHNbaV1bMF0sIHVybCkgfHwgc3JjX3VybF9lcXVhbCh1cmwsIGVsZW1lbnRfdXJsc1tpXVswXSkpXG5cdFx0KVxuXHQpO1xufVxuXG4vKiogQHJldHVybnMge2Jvb2xlYW59ICovXG5leHBvcnQgZnVuY3Rpb24gbm90X2VxdWFsKGEsIGIpIHtcblx0cmV0dXJuIGEgIT0gYSA/IGIgPT0gYiA6IGEgIT09IGI7XG59XG5cbi8qKiBAcmV0dXJucyB7Ym9vbGVhbn0gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc19lbXB0eShvYmopIHtcblx0cmV0dXJuIE9iamVjdC5rZXlzKG9iaikubGVuZ3RoID09PSAwO1xufVxuXG4vKiogQHJldHVybnMge3ZvaWR9ICovXG5leHBvcnQgZnVuY3Rpb24gdmFsaWRhdGVfc3RvcmUoc3RvcmUsIG5hbWUpIHtcblx0aWYgKHN0b3JlICE9IG51bGwgJiYgdHlwZW9mIHN0b3JlLnN1YnNjcmliZSAhPT0gJ2Z1bmN0aW9uJykge1xuXHRcdHRocm93IG5ldyBFcnJvcihgJyR7bmFtZX0nIGlzIG5vdCBhIHN0b3JlIHdpdGggYSAnc3Vic2NyaWJlJyBtZXRob2RgKTtcblx0fVxufVxuXG5leHBvcnQgZnVuY3Rpb24gc3Vic2NyaWJlKHN0b3JlLCAuLi5jYWxsYmFja3MpIHtcblx0aWYgKHN0b3JlID09IG51bGwpIHtcblx0XHRmb3IgKGNvbnN0IGNhbGxiYWNrIG9mIGNhbGxiYWNrcykge1xuXHRcdFx0Y2FsbGJhY2sodW5kZWZpbmVkKTtcblx0XHR9XG5cdFx0cmV0dXJuIG5vb3A7XG5cdH1cblx0Y29uc3QgdW5zdWIgPSBzdG9yZS5zdWJzY3JpYmUoLi4uY2FsbGJhY2tzKTtcblx0cmV0dXJuIHVuc3ViLnVuc3Vic2NyaWJlID8gKCkgPT4gdW5zdWIudW5zdWJzY3JpYmUoKSA6IHVuc3ViO1xufVxuXG4vKipcbiAqIEdldCB0aGUgY3VycmVudCB2YWx1ZSBmcm9tIGEgc3RvcmUgYnkgc3Vic2NyaWJpbmcgYW5kIGltbWVkaWF0ZWx5IHVuc3Vic2NyaWJpbmcuXG4gKlxuICogaHR0cHM6Ly9zdmVsdGUuZGV2L2RvY3Mvc3ZlbHRlLXN0b3JlI2dldFxuICogQHRlbXBsYXRlIFRcbiAqIEBwYXJhbSB7aW1wb3J0KCcuLi9zdG9yZS9wdWJsaWMuanMnKS5SZWFkYWJsZTxUPn0gc3RvcmVcbiAqIEByZXR1cm5zIHtUfVxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0X3N0b3JlX3ZhbHVlKHN0b3JlKSB7XG5cdGxldCB2YWx1ZTtcblx0c3Vic2NyaWJlKHN0b3JlLCAoXykgPT4gKHZhbHVlID0gXykpKCk7XG5cdHJldHVybiB2YWx1ZTtcbn1cblxuLyoqIEByZXR1cm5zIHt2b2lkfSAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNvbXBvbmVudF9zdWJzY3JpYmUoY29tcG9uZW50LCBzdG9yZSwgY2FsbGJhY2spIHtcblx0Y29tcG9uZW50LiQkLm9uX2Rlc3Ryb3kucHVzaChzdWJzY3JpYmUoc3RvcmUsIGNhbGxiYWNrKSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVfc2xvdChkZWZpbml0aW9uLCBjdHgsICQkc2NvcGUsIGZuKSB7XG5cdGlmIChkZWZpbml0aW9uKSB7XG5cdFx0Y29uc3Qgc2xvdF9jdHggPSBnZXRfc2xvdF9jb250ZXh0KGRlZmluaXRpb24sIGN0eCwgJCRzY29wZSwgZm4pO1xuXHRcdHJldHVybiBkZWZpbml0aW9uWzBdKHNsb3RfY3R4KTtcblx0fVxufVxuXG5mdW5jdGlvbiBnZXRfc2xvdF9jb250ZXh0KGRlZmluaXRpb24sIGN0eCwgJCRzY29wZSwgZm4pIHtcblx0cmV0dXJuIGRlZmluaXRpb25bMV0gJiYgZm4gPyBhc3NpZ24oJCRzY29wZS5jdHguc2xpY2UoKSwgZGVmaW5pdGlvblsxXShmbihjdHgpKSkgOiAkJHNjb3BlLmN0eDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldF9zbG90X2NoYW5nZXMoZGVmaW5pdGlvbiwgJCRzY29wZSwgZGlydHksIGZuKSB7XG5cdGlmIChkZWZpbml0aW9uWzJdICYmIGZuKSB7XG5cdFx0Y29uc3QgbGV0cyA9IGRlZmluaXRpb25bMl0oZm4oZGlydHkpKTtcblx0XHRpZiAoJCRzY29wZS5kaXJ0eSA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRyZXR1cm4gbGV0cztcblx0XHR9XG5cdFx0aWYgKHR5cGVvZiBsZXRzID09PSAnb2JqZWN0Jykge1xuXHRcdFx0Y29uc3QgbWVyZ2VkID0gW107XG5cdFx0XHRjb25zdCBsZW4gPSBNYXRoLm1heCgkJHNjb3BlLmRpcnR5Lmxlbmd0aCwgbGV0cy5sZW5ndGgpO1xuXHRcdFx0Zm9yIChsZXQgaSA9IDA7IGkgPCBsZW47IGkgKz0gMSkge1xuXHRcdFx0XHRtZXJnZWRbaV0gPSAkJHNjb3BlLmRpcnR5W2ldIHwgbGV0c1tpXTtcblx0XHRcdH1cblx0XHRcdHJldHVybiBtZXJnZWQ7XG5cdFx0fVxuXHRcdHJldHVybiAkJHNjb3BlLmRpcnR5IHwgbGV0cztcblx0fVxuXHRyZXR1cm4gJCRzY29wZS5kaXJ0eTtcbn1cblxuLyoqIEByZXR1cm5zIHt2b2lkfSAqL1xuZXhwb3J0IGZ1bmN0aW9uIHVwZGF0ZV9zbG90X2Jhc2UoXG5cdHNsb3QsXG5cdHNsb3RfZGVmaW5pdGlvbixcblx0Y3R4LFxuXHQkJHNjb3BlLFxuXHRzbG90X2NoYW5nZXMsXG5cdGdldF9zbG90X2NvbnRleHRfZm5cbikge1xuXHRpZiAoc2xvdF9jaGFuZ2VzKSB7XG5cdFx0Y29uc3Qgc2xvdF9jb250ZXh0ID0gZ2V0X3Nsb3RfY29udGV4dChzbG90X2RlZmluaXRpb24sIGN0eCwgJCRzY29wZSwgZ2V0X3Nsb3RfY29udGV4dF9mbik7XG5cdFx0c2xvdC5wKHNsb3RfY29udGV4dCwgc2xvdF9jaGFuZ2VzKTtcblx0fVxufVxuXG4vKiogQHJldHVybnMge3ZvaWR9ICovXG5leHBvcnQgZnVuY3Rpb24gdXBkYXRlX3Nsb3QoXG5cdHNsb3QsXG5cdHNsb3RfZGVmaW5pdGlvbixcblx0Y3R4LFxuXHQkJHNjb3BlLFxuXHRkaXJ0eSxcblx0Z2V0X3Nsb3RfY2hhbmdlc19mbixcblx0Z2V0X3Nsb3RfY29udGV4dF9mblxuKSB7XG5cdGNvbnN0IHNsb3RfY2hhbmdlcyA9IGdldF9zbG90X2NoYW5nZXMoc2xvdF9kZWZpbml0aW9uLCAkJHNjb3BlLCBkaXJ0eSwgZ2V0X3Nsb3RfY2hhbmdlc19mbik7XG5cdHVwZGF0ZV9zbG90X2Jhc2Uoc2xvdCwgc2xvdF9kZWZpbml0aW9uLCBjdHgsICQkc2NvcGUsIHNsb3RfY2hhbmdlcywgZ2V0X3Nsb3RfY29udGV4dF9mbik7XG59XG5cbi8qKiBAcmV0dXJucyB7YW55W10gfCAtMX0gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRfYWxsX2RpcnR5X2Zyb21fc2NvcGUoJCRzY29wZSkge1xuXHRpZiAoJCRzY29wZS5jdHgubGVuZ3RoID4gMzIpIHtcblx0XHRjb25zdCBkaXJ0eSA9IFtdO1xuXHRcdGNvbnN0IGxlbmd0aCA9ICQkc2NvcGUuY3R4Lmxlbmd0aCAvIDMyO1xuXHRcdGZvciAobGV0IGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcblx0XHRcdGRpcnR5W2ldID0gLTE7XG5cdFx0fVxuXHRcdHJldHVybiBkaXJ0eTtcblx0fVxuXHRyZXR1cm4gLTE7XG59XG5cbi8qKiBAcmV0dXJucyB7e319ICovXG5leHBvcnQgZnVuY3Rpb24gZXhjbHVkZV9pbnRlcm5hbF9wcm9wcyhwcm9wcykge1xuXHRjb25zdCByZXN1bHQgPSB7fTtcblx0Zm9yIChjb25zdCBrIGluIHByb3BzKSBpZiAoa1swXSAhPT0gJyQnKSByZXN1bHRba10gPSBwcm9wc1trXTtcblx0cmV0dXJuIHJlc3VsdDtcbn1cblxuLyoqIEByZXR1cm5zIHt7fX0gKi9cbmV4cG9ydCBmdW5jdGlvbiBjb21wdXRlX3Jlc3RfcHJvcHMocHJvcHMsIGtleXMpIHtcblx0Y29uc3QgcmVzdCA9IHt9O1xuXHRrZXlzID0gbmV3IFNldChrZXlzKTtcblx0Zm9yIChjb25zdCBrIGluIHByb3BzKSBpZiAoIWtleXMuaGFzKGspICYmIGtbMF0gIT09ICckJykgcmVzdFtrXSA9IHByb3BzW2tdO1xuXHRyZXR1cm4gcmVzdDtcbn1cblxuLyoqIEByZXR1cm5zIHt7fX0gKi9cbmV4cG9ydCBmdW5jdGlvbiBjb21wdXRlX3Nsb3RzKHNsb3RzKSB7XG5cdGNvbnN0IHJlc3VsdCA9IHt9O1xuXHRmb3IgKGNvbnN0IGtleSBpbiBzbG90cykge1xuXHRcdHJlc3VsdFtrZXldID0gdHJ1ZTtcblx0fVxuXHRyZXR1cm4gcmVzdWx0O1xufVxuXG4vKiogQHJldHVybnMgeyh0aGlzOiBhbnksIC4uLmFyZ3M6IGFueVtdKSA9PiB2b2lkfSAqL1xuZXhwb3J0IGZ1bmN0aW9uIG9uY2UoZm4pIHtcblx0bGV0IHJhbiA9IGZhbHNlO1xuXHRyZXR1cm4gZnVuY3Rpb24gKC4uLmFyZ3MpIHtcblx0XHRpZiAocmFuKSByZXR1cm47XG5cdFx0cmFuID0gdHJ1ZTtcblx0XHRmbi5jYWxsKHRoaXMsIC4uLmFyZ3MpO1xuXHR9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gbnVsbF90b19lbXB0eSh2YWx1ZSkge1xuXHRyZXR1cm4gdmFsdWUgPT0gbnVsbCA/ICcnIDogdmFsdWU7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzZXRfc3RvcmVfdmFsdWUoc3RvcmUsIHJldCwgdmFsdWUpIHtcblx0c3RvcmUuc2V0KHZhbHVlKTtcblx0cmV0dXJuIHJldDtcbn1cblxuZXhwb3J0IGNvbnN0IGhhc19wcm9wID0gKG9iaiwgcHJvcCkgPT4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgcHJvcCk7XG5cbmV4cG9ydCBmdW5jdGlvbiBhY3Rpb25fZGVzdHJveWVyKGFjdGlvbl9yZXN1bHQpIHtcblx0cmV0dXJuIGFjdGlvbl9yZXN1bHQgJiYgaXNfZnVuY3Rpb24oYWN0aW9uX3Jlc3VsdC5kZXN0cm95KSA/IGFjdGlvbl9yZXN1bHQuZGVzdHJveSA6IG5vb3A7XG59XG5cbi8qKiBAcGFyYW0ge251bWJlciB8IHN0cmluZ30gdmFsdWVcbiAqIEByZXR1cm5zIHtbbnVtYmVyLCBzdHJpbmddfVxuICovXG5leHBvcnQgZnVuY3Rpb24gc3BsaXRfY3NzX3VuaXQodmFsdWUpIHtcblx0Y29uc3Qgc3BsaXQgPSB0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnICYmIHZhbHVlLm1hdGNoKC9eXFxzKigtP1tcXGQuXSspKFteXFxzXSopXFxzKiQvKTtcblx0cmV0dXJuIHNwbGl0ID8gW3BhcnNlRmxvYXQoc3BsaXRbMV0pLCBzcGxpdFsyXSB8fCAncHgnXSA6IFsvKiogQHR5cGUge251bWJlcn0gKi8gKHZhbHVlKSwgJ3B4J107XG59XG5cbmV4cG9ydCBjb25zdCBjb250ZW50ZWRpdGFibGVfdHJ1dGh5X3ZhbHVlcyA9IFsnJywgdHJ1ZSwgMSwgJ3RydWUnLCAnY29udGVudGVkaXRhYmxlJ107XG4iLCAiLyoqIEB0eXBlIHt0eXBlb2YgZ2xvYmFsVGhpc30gKi9cbmV4cG9ydCBjb25zdCBnbG9iYWxzID1cblx0dHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCdcblx0XHQ/IHdpbmRvd1xuXHRcdDogdHlwZW9mIGdsb2JhbFRoaXMgIT09ICd1bmRlZmluZWQnXG5cdFx0PyBnbG9iYWxUaGlzXG5cdFx0OiAvLyBAdHMtaWdub3JlIE5vZGUgdHlwaW5ncyBoYXZlIHRoaXNcblx0XHQgIGdsb2JhbDtcbiIsICJpbXBvcnQgeyBnbG9iYWxzIH0gZnJvbSAnLi9nbG9iYWxzLmpzJztcblxuLyoqXG4gKiBSZXNpemUgb2JzZXJ2ZXIgc2luZ2xldG9uLlxuICogT25lIGxpc3RlbmVyIHBlciBlbGVtZW50IG9ubHkhXG4gKiBodHRwczovL2dyb3Vwcy5nb29nbGUuY29tL2EvY2hyb21pdW0ub3JnL2cvYmxpbmstZGV2L2MvejZpZW5PTlViNUEvbS9GNS1WY1VadEJBQUpcbiAqL1xuZXhwb3J0IGNsYXNzIFJlc2l6ZU9ic2VydmVyU2luZ2xldG9uIHtcblx0LyoqXG5cdCAqIEBwcml2YXRlXG5cdCAqIEByZWFkb25seVxuXHQgKiBAdHlwZSB7V2Vha01hcDxFbGVtZW50LCBpbXBvcnQoJy4vcHJpdmF0ZS5qcycpLkxpc3RlbmVyPn1cblx0ICovXG5cdF9saXN0ZW5lcnMgPSAnV2Vha01hcCcgaW4gZ2xvYmFscyA/IG5ldyBXZWFrTWFwKCkgOiB1bmRlZmluZWQ7XG5cblx0LyoqXG5cdCAqIEBwcml2YXRlXG5cdCAqIEB0eXBlIHtSZXNpemVPYnNlcnZlcn1cblx0ICovXG5cdF9vYnNlcnZlciA9IHVuZGVmaW5lZDtcblxuXHQvKiogQHR5cGUge1Jlc2l6ZU9ic2VydmVyT3B0aW9uc30gKi9cblx0b3B0aW9ucztcblxuXHQvKiogQHBhcmFtIHtSZXNpemVPYnNlcnZlck9wdGlvbnN9IG9wdGlvbnMgKi9cblx0Y29uc3RydWN0b3Iob3B0aW9ucykge1xuXHRcdHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG5cdH1cblxuXHQvKipcblx0ICogQHBhcmFtIHtFbGVtZW50fSBlbGVtZW50XG5cdCAqIEBwYXJhbSB7aW1wb3J0KCcuL3ByaXZhdGUuanMnKS5MaXN0ZW5lcn0gbGlzdGVuZXJcblx0ICogQHJldHVybnMgeygpID0+IHZvaWR9XG5cdCAqL1xuXHRvYnNlcnZlKGVsZW1lbnQsIGxpc3RlbmVyKSB7XG5cdFx0dGhpcy5fbGlzdGVuZXJzLnNldChlbGVtZW50LCBsaXN0ZW5lcik7XG5cdFx0dGhpcy5fZ2V0T2JzZXJ2ZXIoKS5vYnNlcnZlKGVsZW1lbnQsIHRoaXMub3B0aW9ucyk7XG5cdFx0cmV0dXJuICgpID0+IHtcblx0XHRcdHRoaXMuX2xpc3RlbmVycy5kZWxldGUoZWxlbWVudCk7XG5cdFx0XHR0aGlzLl9vYnNlcnZlci51bm9ic2VydmUoZWxlbWVudCk7IC8vIHRoaXMgbGluZSBjYW4gcHJvYmFibHkgYmUgcmVtb3ZlZFxuXHRcdH07XG5cdH1cblxuXHQvKipcblx0ICogQHByaXZhdGVcblx0ICovXG5cdF9nZXRPYnNlcnZlcigpIHtcblx0XHRyZXR1cm4gKFxuXHRcdFx0dGhpcy5fb2JzZXJ2ZXIgPz9cblx0XHRcdCh0aGlzLl9vYnNlcnZlciA9IG5ldyBSZXNpemVPYnNlcnZlcigoZW50cmllcykgPT4ge1xuXHRcdFx0XHRmb3IgKGNvbnN0IGVudHJ5IG9mIGVudHJpZXMpIHtcblx0XHRcdFx0XHRSZXNpemVPYnNlcnZlclNpbmdsZXRvbi5lbnRyaWVzLnNldChlbnRyeS50YXJnZXQsIGVudHJ5KTtcblx0XHRcdFx0XHR0aGlzLl9saXN0ZW5lcnMuZ2V0KGVudHJ5LnRhcmdldCk/LihlbnRyeSk7XG5cdFx0XHRcdH1cblx0XHRcdH0pKVxuXHRcdCk7XG5cdH1cbn1cblxuLy8gTmVlZHMgdG8gYmUgd3JpdHRlbiBsaWtlIHRoaXMgdG8gcGFzcyB0aGUgdHJlZS1zaGFrZS10ZXN0XG5SZXNpemVPYnNlcnZlclNpbmdsZXRvbi5lbnRyaWVzID0gJ1dlYWtNYXAnIGluIGdsb2JhbHMgPyBuZXcgV2Vha01hcCgpIDogdW5kZWZpbmVkO1xuIiwgImltcG9ydCB7IGNvbnRlbnRlZGl0YWJsZV90cnV0aHlfdmFsdWVzLCBoYXNfcHJvcCB9IGZyb20gJy4vdXRpbHMuanMnO1xuXG5pbXBvcnQgeyBSZXNpemVPYnNlcnZlclNpbmdsZXRvbiB9IGZyb20gJy4vUmVzaXplT2JzZXJ2ZXJTaW5nbGV0b24uanMnO1xuXG4vLyBUcmFjayB3aGljaCBub2RlcyBhcmUgY2xhaW1lZCBkdXJpbmcgaHlkcmF0aW9uLiBVbmNsYWltZWQgbm9kZXMgY2FuIHRoZW4gYmUgcmVtb3ZlZCBmcm9tIHRoZSBET01cbi8vIGF0IHRoZSBlbmQgb2YgaHlkcmF0aW9uIHdpdGhvdXQgdG91Y2hpbmcgdGhlIHJlbWFpbmluZyBub2Rlcy5cbmxldCBpc19oeWRyYXRpbmcgPSBmYWxzZTtcblxuLyoqXG4gKiBAcmV0dXJucyB7dm9pZH1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHN0YXJ0X2h5ZHJhdGluZygpIHtcblx0aXNfaHlkcmF0aW5nID0gdHJ1ZTtcbn1cblxuLyoqXG4gKiBAcmV0dXJucyB7dm9pZH1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGVuZF9oeWRyYXRpbmcoKSB7XG5cdGlzX2h5ZHJhdGluZyA9IGZhbHNlO1xufVxuXG4vKipcbiAqIEBwYXJhbSB7bnVtYmVyfSBsb3dcbiAqIEBwYXJhbSB7bnVtYmVyfSBoaWdoXG4gKiBAcGFyYW0geyhpbmRleDogbnVtYmVyKSA9PiBudW1iZXJ9IGtleVxuICogQHBhcmFtIHtudW1iZXJ9IHZhbHVlXG4gKiBAcmV0dXJucyB7bnVtYmVyfVxuICovXG5mdW5jdGlvbiB1cHBlcl9ib3VuZChsb3csIGhpZ2gsIGtleSwgdmFsdWUpIHtcblx0Ly8gUmV0dXJuIGZpcnN0IGluZGV4IG9mIHZhbHVlIGxhcmdlciB0aGFuIGlucHV0IHZhbHVlIGluIHRoZSByYW5nZSBbbG93LCBoaWdoKVxuXHR3aGlsZSAobG93IDwgaGlnaCkge1xuXHRcdGNvbnN0IG1pZCA9IGxvdyArICgoaGlnaCAtIGxvdykgPj4gMSk7XG5cdFx0aWYgKGtleShtaWQpIDw9IHZhbHVlKSB7XG5cdFx0XHRsb3cgPSBtaWQgKyAxO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRoaWdoID0gbWlkO1xuXHRcdH1cblx0fVxuXHRyZXR1cm4gbG93O1xufVxuXG4vKipcbiAqIEBwYXJhbSB7Tm9kZUV4fSB0YXJnZXRcbiAqIEByZXR1cm5zIHt2b2lkfVxuICovXG5mdW5jdGlvbiBpbml0X2h5ZHJhdGUodGFyZ2V0KSB7XG5cdGlmICh0YXJnZXQuaHlkcmF0ZV9pbml0KSByZXR1cm47XG5cdHRhcmdldC5oeWRyYXRlX2luaXQgPSB0cnVlO1xuXHQvLyBXZSBrbm93IHRoYXQgYWxsIGNoaWxkcmVuIGhhdmUgY2xhaW1fb3JkZXIgdmFsdWVzIHNpbmNlIHRoZSB1bmNsYWltZWQgaGF2ZSBiZWVuIGRldGFjaGVkIGlmIHRhcmdldCBpcyBub3QgPGhlYWQ+XG5cblx0bGV0IGNoaWxkcmVuID0gLyoqIEB0eXBlIHtBcnJheUxpa2U8Tm9kZUV4Mj59ICovICh0YXJnZXQuY2hpbGROb2Rlcyk7XG5cdC8vIElmIHRhcmdldCBpcyA8aGVhZD4sIHRoZXJlIG1heSBiZSBjaGlsZHJlbiB3aXRob3V0IGNsYWltX29yZGVyXG5cdGlmICh0YXJnZXQubm9kZU5hbWUgPT09ICdIRUFEJykge1xuXHRcdGNvbnN0IG15X2NoaWxkcmVuID0gW107XG5cdFx0Zm9yIChsZXQgaSA9IDA7IGkgPCBjaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuXHRcdFx0Y29uc3Qgbm9kZSA9IGNoaWxkcmVuW2ldO1xuXHRcdFx0aWYgKG5vZGUuY2xhaW1fb3JkZXIgIT09IHVuZGVmaW5lZCkge1xuXHRcdFx0XHRteV9jaGlsZHJlbi5wdXNoKG5vZGUpO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRjaGlsZHJlbiA9IG15X2NoaWxkcmVuO1xuXHR9XG5cdC8qXG5cdCAqIFJlb3JkZXIgY2xhaW1lZCBjaGlsZHJlbiBvcHRpbWFsbHkuXG5cdCAqIFdlIGNhbiByZW9yZGVyIGNsYWltZWQgY2hpbGRyZW4gb3B0aW1hbGx5IGJ5IGZpbmRpbmcgdGhlIGxvbmdlc3Qgc3Vic2VxdWVuY2Ugb2Zcblx0ICogbm9kZXMgdGhhdCBhcmUgYWxyZWFkeSBjbGFpbWVkIGluIG9yZGVyIGFuZCBvbmx5IG1vdmluZyB0aGUgcmVzdC4gVGhlIGxvbmdlc3Rcblx0ICogc3Vic2VxdWVuY2Ugb2Ygbm9kZXMgdGhhdCBhcmUgY2xhaW1lZCBpbiBvcmRlciBjYW4gYmUgZm91bmQgYnlcblx0ICogY29tcHV0aW5nIHRoZSBsb25nZXN0IGluY3JlYXNpbmcgc3Vic2VxdWVuY2Ugb2YgLmNsYWltX29yZGVyIHZhbHVlcy5cblx0ICpcblx0ICogVGhpcyBhbGdvcml0aG0gaXMgb3B0aW1hbCBpbiBnZW5lcmF0aW5nIHRoZSBsZWFzdCBhbW91bnQgb2YgcmVvcmRlciBvcGVyYXRpb25zXG5cdCAqIHBvc3NpYmxlLlxuXHQgKlxuXHQgKiBQcm9vZjpcblx0ICogV2Uga25vdyB0aGF0LCBnaXZlbiBhIHNldCBvZiByZW9yZGVyaW5nIG9wZXJhdGlvbnMsIHRoZSBub2RlcyB0aGF0IGRvIG5vdCBtb3ZlXG5cdCAqIGFsd2F5cyBmb3JtIGFuIGluY3JlYXNpbmcgc3Vic2VxdWVuY2UsIHNpbmNlIHRoZXkgZG8gbm90IG1vdmUgYW1vbmcgZWFjaCBvdGhlclxuXHQgKiBtZWFuaW5nIHRoYXQgdGhleSBtdXN0IGJlIGFscmVhZHkgb3JkZXJlZCBhbW9uZyBlYWNoIG90aGVyLiBUaHVzLCB0aGUgbWF4aW1hbFxuXHQgKiBzZXQgb2Ygbm9kZXMgdGhhdCBkbyBub3QgbW92ZSBmb3JtIGEgbG9uZ2VzdCBpbmNyZWFzaW5nIHN1YnNlcXVlbmNlLlxuXHQgKi9cblx0Ly8gQ29tcHV0ZSBsb25nZXN0IGluY3JlYXNpbmcgc3Vic2VxdWVuY2Vcblx0Ly8gbTogc3Vic2VxdWVuY2UgbGVuZ3RoIGogPT4gaW5kZXggayBvZiBzbWFsbGVzdCB2YWx1ZSB0aGF0IGVuZHMgYW4gaW5jcmVhc2luZyBzdWJzZXF1ZW5jZSBvZiBsZW5ndGggalxuXHRjb25zdCBtID0gbmV3IEludDMyQXJyYXkoY2hpbGRyZW4ubGVuZ3RoICsgMSk7XG5cdC8vIFByZWRlY2Vzc29yIGluZGljZXMgKyAxXG5cdGNvbnN0IHAgPSBuZXcgSW50MzJBcnJheShjaGlsZHJlbi5sZW5ndGgpO1xuXHRtWzBdID0gLTE7XG5cdGxldCBsb25nZXN0ID0gMDtcblx0Zm9yIChsZXQgaSA9IDA7IGkgPCBjaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuXHRcdGNvbnN0IGN1cnJlbnQgPSBjaGlsZHJlbltpXS5jbGFpbV9vcmRlcjtcblx0XHQvLyBGaW5kIHRoZSBsYXJnZXN0IHN1YnNlcXVlbmNlIGxlbmd0aCBzdWNoIHRoYXQgaXQgZW5kcyBpbiBhIHZhbHVlIGxlc3MgdGhhbiBvdXIgY3VycmVudCB2YWx1ZVxuXHRcdC8vIHVwcGVyX2JvdW5kIHJldHVybnMgZmlyc3QgZ3JlYXRlciB2YWx1ZSwgc28gd2Ugc3VidHJhY3Qgb25lXG5cdFx0Ly8gd2l0aCBmYXN0IHBhdGggZm9yIHdoZW4gd2UgYXJlIG9uIHRoZSBjdXJyZW50IGxvbmdlc3Qgc3Vic2VxdWVuY2Vcblx0XHRjb25zdCBzZXFfbGVuID1cblx0XHRcdChsb25nZXN0ID4gMCAmJiBjaGlsZHJlblttW2xvbmdlc3RdXS5jbGFpbV9vcmRlciA8PSBjdXJyZW50XG5cdFx0XHRcdD8gbG9uZ2VzdCArIDFcblx0XHRcdFx0OiB1cHBlcl9ib3VuZCgxLCBsb25nZXN0LCAoaWR4KSA9PiBjaGlsZHJlblttW2lkeF1dLmNsYWltX29yZGVyLCBjdXJyZW50KSkgLSAxO1xuXHRcdHBbaV0gPSBtW3NlcV9sZW5dICsgMTtcblx0XHRjb25zdCBuZXdfbGVuID0gc2VxX2xlbiArIDE7XG5cdFx0Ly8gV2UgY2FuIGd1YXJhbnRlZSB0aGF0IGN1cnJlbnQgaXMgdGhlIHNtYWxsZXN0IHZhbHVlLiBPdGhlcndpc2UsIHdlIHdvdWxkIGhhdmUgZ2VuZXJhdGVkIGEgbG9uZ2VyIHNlcXVlbmNlLlxuXHRcdG1bbmV3X2xlbl0gPSBpO1xuXHRcdGxvbmdlc3QgPSBNYXRoLm1heChuZXdfbGVuLCBsb25nZXN0KTtcblx0fVxuXHQvLyBUaGUgbG9uZ2VzdCBpbmNyZWFzaW5nIHN1YnNlcXVlbmNlIG9mIG5vZGVzIChpbml0aWFsbHkgcmV2ZXJzZWQpXG5cblx0LyoqXG5cdCAqIEB0eXBlIHtOb2RlRXgyW119XG5cdCAqL1xuXHRjb25zdCBsaXMgPSBbXTtcblx0Ly8gVGhlIHJlc3Qgb2YgdGhlIG5vZGVzLCBub2RlcyB0aGF0IHdpbGwgYmUgbW92ZWRcblxuXHQvKipcblx0ICogQHR5cGUge05vZGVFeDJbXX1cblx0ICovXG5cdGNvbnN0IHRvX21vdmUgPSBbXTtcblx0bGV0IGxhc3QgPSBjaGlsZHJlbi5sZW5ndGggLSAxO1xuXHRmb3IgKGxldCBjdXIgPSBtW2xvbmdlc3RdICsgMTsgY3VyICE9IDA7IGN1ciA9IHBbY3VyIC0gMV0pIHtcblx0XHRsaXMucHVzaChjaGlsZHJlbltjdXIgLSAxXSk7XG5cdFx0Zm9yICg7IGxhc3QgPj0gY3VyOyBsYXN0LS0pIHtcblx0XHRcdHRvX21vdmUucHVzaChjaGlsZHJlbltsYXN0XSk7XG5cdFx0fVxuXHRcdGxhc3QtLTtcblx0fVxuXHRmb3IgKDsgbGFzdCA+PSAwOyBsYXN0LS0pIHtcblx0XHR0b19tb3ZlLnB1c2goY2hpbGRyZW5bbGFzdF0pO1xuXHR9XG5cdGxpcy5yZXZlcnNlKCk7XG5cdC8vIFdlIHNvcnQgdGhlIG5vZGVzIGJlaW5nIG1vdmVkIHRvIGd1YXJhbnRlZSB0aGF0IHRoZWlyIGluc2VydGlvbiBvcmRlciBtYXRjaGVzIHRoZSBjbGFpbSBvcmRlclxuXHR0b19tb3ZlLnNvcnQoKGEsIGIpID0+IGEuY2xhaW1fb3JkZXIgLSBiLmNsYWltX29yZGVyKTtcblx0Ly8gRmluYWxseSwgd2UgbW92ZSB0aGUgbm9kZXNcblx0Zm9yIChsZXQgaSA9IDAsIGogPSAwOyBpIDwgdG9fbW92ZS5sZW5ndGg7IGkrKykge1xuXHRcdHdoaWxlIChqIDwgbGlzLmxlbmd0aCAmJiB0b19tb3ZlW2ldLmNsYWltX29yZGVyID49IGxpc1tqXS5jbGFpbV9vcmRlcikge1xuXHRcdFx0aisrO1xuXHRcdH1cblx0XHRjb25zdCBhbmNob3IgPSBqIDwgbGlzLmxlbmd0aCA/IGxpc1tqXSA6IG51bGw7XG5cdFx0dGFyZ2V0Lmluc2VydEJlZm9yZSh0b19tb3ZlW2ldLCBhbmNob3IpO1xuXHR9XG59XG5cbi8qKlxuICogQHBhcmFtIHtOb2RlfSB0YXJnZXRcbiAqIEBwYXJhbSB7Tm9kZX0gbm9kZVxuICogQHJldHVybnMge3ZvaWR9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBhcHBlbmQodGFyZ2V0LCBub2RlKSB7XG5cdHRhcmdldC5hcHBlbmRDaGlsZChub2RlKTtcbn1cblxuLyoqXG4gKiBAcGFyYW0ge05vZGV9IHRhcmdldFxuICogQHBhcmFtIHtzdHJpbmd9IHN0eWxlX3NoZWV0X2lkXG4gKiBAcGFyYW0ge3N0cmluZ30gc3R5bGVzXG4gKiBAcmV0dXJucyB7dm9pZH1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGFwcGVuZF9zdHlsZXModGFyZ2V0LCBzdHlsZV9zaGVldF9pZCwgc3R5bGVzKSB7XG5cdGNvbnN0IGFwcGVuZF9zdHlsZXNfdG8gPSBnZXRfcm9vdF9mb3Jfc3R5bGUodGFyZ2V0KTtcblx0aWYgKCFhcHBlbmRfc3R5bGVzX3RvLmdldEVsZW1lbnRCeUlkKHN0eWxlX3NoZWV0X2lkKSkge1xuXHRcdGNvbnN0IHN0eWxlID0gZWxlbWVudCgnc3R5bGUnKTtcblx0XHRzdHlsZS5pZCA9IHN0eWxlX3NoZWV0X2lkO1xuXHRcdHN0eWxlLnRleHRDb250ZW50ID0gc3R5bGVzO1xuXHRcdGFwcGVuZF9zdHlsZXNoZWV0KGFwcGVuZF9zdHlsZXNfdG8sIHN0eWxlKTtcblx0fVxufVxuXG4vKipcbiAqIEBwYXJhbSB7Tm9kZX0gbm9kZVxuICogQHJldHVybnMge1NoYWRvd1Jvb3QgfCBEb2N1bWVudH1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldF9yb290X2Zvcl9zdHlsZShub2RlKSB7XG5cdGlmICghbm9kZSkgcmV0dXJuIGRvY3VtZW50O1xuXHRjb25zdCByb290ID0gbm9kZS5nZXRSb290Tm9kZSA/IG5vZGUuZ2V0Um9vdE5vZGUoKSA6IG5vZGUub3duZXJEb2N1bWVudDtcblx0aWYgKHJvb3QgJiYgLyoqIEB0eXBlIHtTaGFkb3dSb290fSAqLyAocm9vdCkuaG9zdCkge1xuXHRcdHJldHVybiAvKiogQHR5cGUge1NoYWRvd1Jvb3R9ICovIChyb290KTtcblx0fVxuXHRyZXR1cm4gbm9kZS5vd25lckRvY3VtZW50O1xufVxuXG4vKipcbiAqIEBwYXJhbSB7Tm9kZX0gbm9kZVxuICogQHJldHVybnMge0NTU1N0eWxlU2hlZXR9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBhcHBlbmRfZW1wdHlfc3R5bGVzaGVldChub2RlKSB7XG5cdGNvbnN0IHN0eWxlX2VsZW1lbnQgPSBlbGVtZW50KCdzdHlsZScpO1xuXHQvLyBGb3IgdHJhbnNpdGlvbnMgdG8gd29yayB3aXRob3V0ICdzdHlsZS1zcmM6IHVuc2FmZS1pbmxpbmUnIENvbnRlbnQgU2VjdXJpdHkgUG9saWN5LFxuXHQvLyB0aGVzZSBlbXB0eSB0YWdzIG5lZWQgdG8gYmUgYWxsb3dlZCB3aXRoIGEgaGFzaCBhcyBhIHdvcmthcm91bmQgdW50aWwgd2UgbW92ZSB0byB0aGUgV2ViIEFuaW1hdGlvbnMgQVBJLlxuXHQvLyBVc2luZyB0aGUgaGFzaCBmb3IgdGhlIGVtcHR5IHN0cmluZyAoZm9yIGFuIGVtcHR5IHRhZykgd29ya3MgaW4gYWxsIGJyb3dzZXJzIGV4Y2VwdCBTYWZhcmkuXG5cdC8vIFNvIGFzIGEgd29ya2Fyb3VuZCBmb3IgdGhlIHdvcmthcm91bmQsIHdoZW4gd2UgYXBwZW5kIGVtcHR5IHN0eWxlIHRhZ3Mgd2Ugc2V0IHRoZWlyIGNvbnRlbnQgdG8gLyogZW1wdHkgKi8uXG5cdC8vIFRoZSBoYXNoICdzaGEyNTYtOU9sTk8wRE5FZWFWekhMNFJad0NMc0JIQThXQlE4dG9CcC80RjVYVjJuYz0nIHdpbGwgdGhlbiB3b3JrIGV2ZW4gaW4gU2FmYXJpLlxuXHRzdHlsZV9lbGVtZW50LnRleHRDb250ZW50ID0gJy8qIGVtcHR5ICovJztcblx0YXBwZW5kX3N0eWxlc2hlZXQoZ2V0X3Jvb3RfZm9yX3N0eWxlKG5vZGUpLCBzdHlsZV9lbGVtZW50KTtcblx0cmV0dXJuIHN0eWxlX2VsZW1lbnQuc2hlZXQ7XG59XG5cbi8qKlxuICogQHBhcmFtIHtTaGFkb3dSb290IHwgRG9jdW1lbnR9IG5vZGVcbiAqIEBwYXJhbSB7SFRNTFN0eWxlRWxlbWVudH0gc3R5bGVcbiAqIEByZXR1cm5zIHtDU1NTdHlsZVNoZWV0fVxuICovXG5mdW5jdGlvbiBhcHBlbmRfc3R5bGVzaGVldChub2RlLCBzdHlsZSkge1xuXHRhcHBlbmQoLyoqIEB0eXBlIHtEb2N1bWVudH0gKi8gKG5vZGUpLmhlYWQgfHwgbm9kZSwgc3R5bGUpO1xuXHRyZXR1cm4gc3R5bGUuc2hlZXQ7XG59XG5cbi8qKlxuICogQHBhcmFtIHtOb2RlRXh9IHRhcmdldFxuICogQHBhcmFtIHtOb2RlRXh9IG5vZGVcbiAqIEByZXR1cm5zIHt2b2lkfVxuICovXG5leHBvcnQgZnVuY3Rpb24gYXBwZW5kX2h5ZHJhdGlvbih0YXJnZXQsIG5vZGUpIHtcblx0aWYgKGlzX2h5ZHJhdGluZykge1xuXHRcdGluaXRfaHlkcmF0ZSh0YXJnZXQpO1xuXHRcdGlmIChcblx0XHRcdHRhcmdldC5hY3R1YWxfZW5kX2NoaWxkID09PSB1bmRlZmluZWQgfHxcblx0XHRcdCh0YXJnZXQuYWN0dWFsX2VuZF9jaGlsZCAhPT0gbnVsbCAmJiB0YXJnZXQuYWN0dWFsX2VuZF9jaGlsZC5wYXJlbnROb2RlICE9PSB0YXJnZXQpXG5cdFx0KSB7XG5cdFx0XHR0YXJnZXQuYWN0dWFsX2VuZF9jaGlsZCA9IHRhcmdldC5maXJzdENoaWxkO1xuXHRcdH1cblx0XHQvLyBTa2lwIG5vZGVzIG9mIHVuZGVmaW5lZCBvcmRlcmluZ1xuXHRcdHdoaWxlICh0YXJnZXQuYWN0dWFsX2VuZF9jaGlsZCAhPT0gbnVsbCAmJiB0YXJnZXQuYWN0dWFsX2VuZF9jaGlsZC5jbGFpbV9vcmRlciA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0XHR0YXJnZXQuYWN0dWFsX2VuZF9jaGlsZCA9IHRhcmdldC5hY3R1YWxfZW5kX2NoaWxkLm5leHRTaWJsaW5nO1xuXHRcdH1cblx0XHRpZiAobm9kZSAhPT0gdGFyZ2V0LmFjdHVhbF9lbmRfY2hpbGQpIHtcblx0XHRcdC8vIFdlIG9ubHkgaW5zZXJ0IGlmIHRoZSBvcmRlcmluZyBvZiB0aGlzIG5vZGUgc2hvdWxkIGJlIG1vZGlmaWVkIG9yIHRoZSBwYXJlbnQgbm9kZSBpcyBub3QgdGFyZ2V0XG5cdFx0XHRpZiAobm9kZS5jbGFpbV9vcmRlciAhPT0gdW5kZWZpbmVkIHx8IG5vZGUucGFyZW50Tm9kZSAhPT0gdGFyZ2V0KSB7XG5cdFx0XHRcdHRhcmdldC5pbnNlcnRCZWZvcmUobm9kZSwgdGFyZ2V0LmFjdHVhbF9lbmRfY2hpbGQpO1xuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cdFx0XHR0YXJnZXQuYWN0dWFsX2VuZF9jaGlsZCA9IG5vZGUubmV4dFNpYmxpbmc7XG5cdFx0fVxuXHR9IGVsc2UgaWYgKG5vZGUucGFyZW50Tm9kZSAhPT0gdGFyZ2V0IHx8IG5vZGUubmV4dFNpYmxpbmcgIT09IG51bGwpIHtcblx0XHR0YXJnZXQuYXBwZW5kQ2hpbGQobm9kZSk7XG5cdH1cbn1cblxuLyoqXG4gKiBAcGFyYW0ge05vZGV9IHRhcmdldFxuICogQHBhcmFtIHtOb2RlfSBub2RlXG4gKiBAcGFyYW0ge05vZGV9IFthbmNob3JdXG4gKiBAcmV0dXJucyB7dm9pZH1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGluc2VydCh0YXJnZXQsIG5vZGUsIGFuY2hvcikge1xuXHR0YXJnZXQuaW5zZXJ0QmVmb3JlKG5vZGUsIGFuY2hvciB8fCBudWxsKTtcbn1cblxuLyoqXG4gKiBAcGFyYW0ge05vZGVFeH0gdGFyZ2V0XG4gKiBAcGFyYW0ge05vZGVFeH0gbm9kZVxuICogQHBhcmFtIHtOb2RlRXh9IFthbmNob3JdXG4gKiBAcmV0dXJucyB7dm9pZH1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGluc2VydF9oeWRyYXRpb24odGFyZ2V0LCBub2RlLCBhbmNob3IpIHtcblx0aWYgKGlzX2h5ZHJhdGluZyAmJiAhYW5jaG9yKSB7XG5cdFx0YXBwZW5kX2h5ZHJhdGlvbih0YXJnZXQsIG5vZGUpO1xuXHR9IGVsc2UgaWYgKG5vZGUucGFyZW50Tm9kZSAhPT0gdGFyZ2V0IHx8IG5vZGUubmV4dFNpYmxpbmcgIT0gYW5jaG9yKSB7XG5cdFx0dGFyZ2V0Lmluc2VydEJlZm9yZShub2RlLCBhbmNob3IgfHwgbnVsbCk7XG5cdH1cbn1cblxuLyoqXG4gKiBAcGFyYW0ge05vZGV9IG5vZGVcbiAqIEByZXR1cm5zIHt2b2lkfVxuICovXG5leHBvcnQgZnVuY3Rpb24gZGV0YWNoKG5vZGUpIHtcblx0aWYgKG5vZGUucGFyZW50Tm9kZSkge1xuXHRcdG5vZGUucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChub2RlKTtcblx0fVxufVxuXG4vKipcbiAqIEByZXR1cm5zIHt2b2lkfSAqL1xuZXhwb3J0IGZ1bmN0aW9uIGRlc3Ryb3lfZWFjaChpdGVyYXRpb25zLCBkZXRhY2hpbmcpIHtcblx0Zm9yIChsZXQgaSA9IDA7IGkgPCBpdGVyYXRpb25zLmxlbmd0aDsgaSArPSAxKSB7XG5cdFx0aWYgKGl0ZXJhdGlvbnNbaV0pIGl0ZXJhdGlvbnNbaV0uZChkZXRhY2hpbmcpO1xuXHR9XG59XG5cbi8qKlxuICogQHRlbXBsYXRlIHtrZXlvZiBIVE1MRWxlbWVudFRhZ05hbWVNYXB9IEtcbiAqIEBwYXJhbSB7S30gbmFtZVxuICogQHJldHVybnMge0hUTUxFbGVtZW50VGFnTmFtZU1hcFtLXX1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGVsZW1lbnQobmFtZSkge1xuXHRyZXR1cm4gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChuYW1lKTtcbn1cblxuLyoqXG4gKiBAdGVtcGxhdGUge2tleW9mIEhUTUxFbGVtZW50VGFnTmFtZU1hcH0gS1xuICogQHBhcmFtIHtLfSBuYW1lXG4gKiBAcGFyYW0ge3N0cmluZ30gaXNcbiAqIEByZXR1cm5zIHtIVE1MRWxlbWVudFRhZ05hbWVNYXBbS119XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBlbGVtZW50X2lzKG5hbWUsIGlzKSB7XG5cdHJldHVybiBkb2N1bWVudC5jcmVhdGVFbGVtZW50KG5hbWUsIHsgaXMgfSk7XG59XG5cbi8qKlxuICogQHRlbXBsYXRlIFRcbiAqIEB0ZW1wbGF0ZSB7a2V5b2YgVH0gS1xuICogQHBhcmFtIHtUfSBvYmpcbiAqIEBwYXJhbSB7S1tdfSBleGNsdWRlXG4gKiBAcmV0dXJucyB7UGljazxULCBFeGNsdWRlPGtleW9mIFQsIEs+Pn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIG9iamVjdF93aXRob3V0X3Byb3BlcnRpZXMob2JqLCBleGNsdWRlKSB7XG5cdGNvbnN0IHRhcmdldCA9IC8qKiBAdHlwZSB7UGljazxULCBFeGNsdWRlPGtleW9mIFQsIEs+Pn0gKi8gKHt9KTtcblx0Zm9yIChjb25zdCBrIGluIG9iaikge1xuXHRcdGlmIChcblx0XHRcdGhhc19wcm9wKG9iaiwgaykgJiZcblx0XHRcdC8vIEB0cy1pZ25vcmVcblx0XHRcdGV4Y2x1ZGUuaW5kZXhPZihrKSA9PT0gLTFcblx0XHQpIHtcblx0XHRcdC8vIEB0cy1pZ25vcmVcblx0XHRcdHRhcmdldFtrXSA9IG9ialtrXTtcblx0XHR9XG5cdH1cblx0cmV0dXJuIHRhcmdldDtcbn1cblxuLyoqXG4gKiBAdGVtcGxhdGUge2tleW9mIFNWR0VsZW1lbnRUYWdOYW1lTWFwfSBLXG4gKiBAcGFyYW0ge0t9IG5hbWVcbiAqIEByZXR1cm5zIHtTVkdFbGVtZW50fVxuICovXG5leHBvcnQgZnVuY3Rpb24gc3ZnX2VsZW1lbnQobmFtZSkge1xuXHRyZXR1cm4gZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKCdodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZycsIG5hbWUpO1xufVxuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSBkYXRhXG4gKiBAcmV0dXJucyB7VGV4dH1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHRleHQoZGF0YSkge1xuXHRyZXR1cm4gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoZGF0YSk7XG59XG5cbi8qKlxuICogQHJldHVybnMge1RleHR9ICovXG5leHBvcnQgZnVuY3Rpb24gc3BhY2UoKSB7XG5cdHJldHVybiB0ZXh0KCcgJyk7XG59XG5cbi8qKlxuICogQHJldHVybnMge1RleHR9ICovXG5leHBvcnQgZnVuY3Rpb24gZW1wdHkoKSB7XG5cdHJldHVybiB0ZXh0KCcnKTtcbn1cblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gY29udGVudFxuICogQHJldHVybnMge0NvbW1lbnR9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjb21tZW50KGNvbnRlbnQpIHtcblx0cmV0dXJuIGRvY3VtZW50LmNyZWF0ZUNvbW1lbnQoY29udGVudCk7XG59XG5cbi8qKlxuICogQHBhcmFtIHtFdmVudFRhcmdldH0gbm9kZVxuICogQHBhcmFtIHtzdHJpbmd9IGV2ZW50XG4gKiBAcGFyYW0ge0V2ZW50TGlzdGVuZXJPckV2ZW50TGlzdGVuZXJPYmplY3R9IGhhbmRsZXJcbiAqIEBwYXJhbSB7Ym9vbGVhbiB8IEFkZEV2ZW50TGlzdGVuZXJPcHRpb25zIHwgRXZlbnRMaXN0ZW5lck9wdGlvbnN9IFtvcHRpb25zXVxuICogQHJldHVybnMgeygpID0+IHZvaWR9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBsaXN0ZW4obm9kZSwgZXZlbnQsIGhhbmRsZXIsIG9wdGlvbnMpIHtcblx0bm9kZS5hZGRFdmVudExpc3RlbmVyKGV2ZW50LCBoYW5kbGVyLCBvcHRpb25zKTtcblx0cmV0dXJuICgpID0+IG5vZGUucmVtb3ZlRXZlbnRMaXN0ZW5lcihldmVudCwgaGFuZGxlciwgb3B0aW9ucyk7XG59XG5cbi8qKlxuICogQHJldHVybnMgeyhldmVudDogYW55KSA9PiBhbnl9ICovXG5leHBvcnQgZnVuY3Rpb24gcHJldmVudF9kZWZhdWx0KGZuKSB7XG5cdHJldHVybiBmdW5jdGlvbiAoZXZlbnQpIHtcblx0XHRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdC8vIEB0cy1pZ25vcmVcblx0XHRyZXR1cm4gZm4uY2FsbCh0aGlzLCBldmVudCk7XG5cdH07XG59XG5cbi8qKlxuICogQHJldHVybnMgeyhldmVudDogYW55KSA9PiBhbnl9ICovXG5leHBvcnQgZnVuY3Rpb24gc3RvcF9wcm9wYWdhdGlvbihmbikge1xuXHRyZXR1cm4gZnVuY3Rpb24gKGV2ZW50KSB7XG5cdFx0ZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdFx0Ly8gQHRzLWlnbm9yZVxuXHRcdHJldHVybiBmbi5jYWxsKHRoaXMsIGV2ZW50KTtcblx0fTtcbn1cblxuLyoqXG4gKiBAcmV0dXJucyB7KGV2ZW50OiBhbnkpID0+IGFueX0gKi9cbmV4cG9ydCBmdW5jdGlvbiBzdG9wX2ltbWVkaWF0ZV9wcm9wYWdhdGlvbihmbikge1xuXHRyZXR1cm4gZnVuY3Rpb24gKGV2ZW50KSB7XG5cdFx0ZXZlbnQuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XG5cdFx0Ly8gQHRzLWlnbm9yZVxuXHRcdHJldHVybiBmbi5jYWxsKHRoaXMsIGV2ZW50KTtcblx0fTtcbn1cblxuLyoqXG4gKiBAcmV0dXJucyB7KGV2ZW50OiBhbnkpID0+IHZvaWR9ICovXG5leHBvcnQgZnVuY3Rpb24gc2VsZihmbikge1xuXHRyZXR1cm4gZnVuY3Rpb24gKGV2ZW50KSB7XG5cdFx0Ly8gQHRzLWlnbm9yZVxuXHRcdGlmIChldmVudC50YXJnZXQgPT09IHRoaXMpIGZuLmNhbGwodGhpcywgZXZlbnQpO1xuXHR9O1xufVxuXG4vKipcbiAqIEByZXR1cm5zIHsoZXZlbnQ6IGFueSkgPT4gdm9pZH0gKi9cbmV4cG9ydCBmdW5jdGlvbiB0cnVzdGVkKGZuKSB7XG5cdHJldHVybiBmdW5jdGlvbiAoZXZlbnQpIHtcblx0XHQvLyBAdHMtaWdub3JlXG5cdFx0aWYgKGV2ZW50LmlzVHJ1c3RlZCkgZm4uY2FsbCh0aGlzLCBldmVudCk7XG5cdH07XG59XG5cbi8qKlxuICogQHBhcmFtIHtFbGVtZW50fSBub2RlXG4gKiBAcGFyYW0ge3N0cmluZ30gYXR0cmlidXRlXG4gKiBAcGFyYW0ge3N0cmluZ30gW3ZhbHVlXVxuICogQHJldHVybnMge3ZvaWR9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBhdHRyKG5vZGUsIGF0dHJpYnV0ZSwgdmFsdWUpIHtcblx0aWYgKHZhbHVlID09IG51bGwpIG5vZGUucmVtb3ZlQXR0cmlidXRlKGF0dHJpYnV0ZSk7XG5cdGVsc2UgaWYgKG5vZGUuZ2V0QXR0cmlidXRlKGF0dHJpYnV0ZSkgIT09IHZhbHVlKSBub2RlLnNldEF0dHJpYnV0ZShhdHRyaWJ1dGUsIHZhbHVlKTtcbn1cbi8qKlxuICogTGlzdCBvZiBhdHRyaWJ1dGVzIHRoYXQgc2hvdWxkIGFsd2F5cyBiZSBzZXQgdGhyb3VnaCB0aGUgYXR0ciBtZXRob2QsXG4gKiBiZWNhdXNlIHVwZGF0aW5nIHRoZW0gdGhyb3VnaCB0aGUgcHJvcGVydHkgc2V0dGVyIGRvZXNuJ3Qgd29yayByZWxpYWJseS5cbiAqIEluIHRoZSBleGFtcGxlIG9mIGB3aWR0aGAvYGhlaWdodGAsIHRoZSBwcm9ibGVtIGlzIHRoYXQgdGhlIHNldHRlciBvbmx5XG4gKiBhY2NlcHRzIG51bWVyaWMgdmFsdWVzLCBidXQgdGhlIGF0dHJpYnV0ZSBjYW4gYWxzbyBiZSBzZXQgdG8gYSBzdHJpbmcgbGlrZSBgNTAlYC5cbiAqIElmIHRoaXMgbGlzdCBiZWNvbWVzIHRvbyBiaWcsIHJldGhpbmsgdGhpcyBhcHByb2FjaC5cbiAqL1xuY29uc3QgYWx3YXlzX3NldF90aHJvdWdoX3NldF9hdHRyaWJ1dGUgPSBbJ3dpZHRoJywgJ2hlaWdodCddO1xuXG4vKipcbiAqIEBwYXJhbSB7RWxlbWVudCAmIEVsZW1lbnRDU1NJbmxpbmVTdHlsZX0gbm9kZVxuICogQHBhcmFtIHt7IFt4OiBzdHJpbmddOiBzdHJpbmcgfX0gYXR0cmlidXRlc1xuICogQHJldHVybnMge3ZvaWR9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzZXRfYXR0cmlidXRlcyhub2RlLCBhdHRyaWJ1dGVzKSB7XG5cdC8vIEB0cy1pZ25vcmVcblx0Y29uc3QgZGVzY3JpcHRvcnMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyhub2RlLl9fcHJvdG9fXyk7XG5cdGZvciAoY29uc3Qga2V5IGluIGF0dHJpYnV0ZXMpIHtcblx0XHRpZiAoYXR0cmlidXRlc1trZXldID09IG51bGwpIHtcblx0XHRcdG5vZGUucmVtb3ZlQXR0cmlidXRlKGtleSk7XG5cdFx0fSBlbHNlIGlmIChrZXkgPT09ICdzdHlsZScpIHtcblx0XHRcdG5vZGUuc3R5bGUuY3NzVGV4dCA9IGF0dHJpYnV0ZXNba2V5XTtcblx0XHR9IGVsc2UgaWYgKGtleSA9PT0gJ19fdmFsdWUnKSB7XG5cdFx0XHQvKiogQHR5cGUge2FueX0gKi8gKG5vZGUpLnZhbHVlID0gbm9kZVtrZXldID0gYXR0cmlidXRlc1trZXldO1xuXHRcdH0gZWxzZSBpZiAoXG5cdFx0XHRkZXNjcmlwdG9yc1trZXldICYmXG5cdFx0XHRkZXNjcmlwdG9yc1trZXldLnNldCAmJlxuXHRcdFx0YWx3YXlzX3NldF90aHJvdWdoX3NldF9hdHRyaWJ1dGUuaW5kZXhPZihrZXkpID09PSAtMVxuXHRcdCkge1xuXHRcdFx0bm9kZVtrZXldID0gYXR0cmlidXRlc1trZXldO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRhdHRyKG5vZGUsIGtleSwgYXR0cmlidXRlc1trZXldKTtcblx0XHR9XG5cdH1cbn1cblxuLyoqXG4gKiBAcGFyYW0ge0VsZW1lbnQgJiBFbGVtZW50Q1NTSW5saW5lU3R5bGV9IG5vZGVcbiAqIEBwYXJhbSB7eyBbeDogc3RyaW5nXTogc3RyaW5nIH19IGF0dHJpYnV0ZXNcbiAqIEByZXR1cm5zIHt2b2lkfVxuICovXG5leHBvcnQgZnVuY3Rpb24gc2V0X3N2Z19hdHRyaWJ1dGVzKG5vZGUsIGF0dHJpYnV0ZXMpIHtcblx0Zm9yIChjb25zdCBrZXkgaW4gYXR0cmlidXRlcykge1xuXHRcdGF0dHIobm9kZSwga2V5LCBhdHRyaWJ1dGVzW2tleV0pO1xuXHR9XG59XG5cbi8qKlxuICogQHBhcmFtIHtSZWNvcmQ8c3RyaW5nLCB1bmtub3duPn0gZGF0YV9tYXBcbiAqIEByZXR1cm5zIHt2b2lkfVxuICovXG5leHBvcnQgZnVuY3Rpb24gc2V0X2N1c3RvbV9lbGVtZW50X2RhdGFfbWFwKG5vZGUsIGRhdGFfbWFwKSB7XG5cdE9iamVjdC5rZXlzKGRhdGFfbWFwKS5mb3JFYWNoKChrZXkpID0+IHtcblx0XHRzZXRfY3VzdG9tX2VsZW1lbnRfZGF0YShub2RlLCBrZXksIGRhdGFfbWFwW2tleV0pO1xuXHR9KTtcbn1cblxuLyoqXG4gKiBAcmV0dXJucyB7dm9pZH0gKi9cbmV4cG9ydCBmdW5jdGlvbiBzZXRfY3VzdG9tX2VsZW1lbnRfZGF0YShub2RlLCBwcm9wLCB2YWx1ZSkge1xuXHRjb25zdCBsb3dlciA9IHByb3AudG9Mb3dlckNhc2UoKTsgLy8gZm9yIGJhY2t3YXJkcyBjb21wYXRpYmlsaXR5IHdpdGggZXhpc3RpbmcgYmVoYXZpb3Igd2UgZG8gbG93ZXJjYXNlIGZpcnN0XG5cdGlmIChsb3dlciBpbiBub2RlKSB7XG5cdFx0bm9kZVtsb3dlcl0gPSB0eXBlb2Ygbm9kZVtsb3dlcl0gPT09ICdib29sZWFuJyAmJiB2YWx1ZSA9PT0gJycgPyB0cnVlIDogdmFsdWU7XG5cdH0gZWxzZSBpZiAocHJvcCBpbiBub2RlKSB7XG5cdFx0bm9kZVtwcm9wXSA9IHR5cGVvZiBub2RlW3Byb3BdID09PSAnYm9vbGVhbicgJiYgdmFsdWUgPT09ICcnID8gdHJ1ZSA6IHZhbHVlO1xuXHR9IGVsc2Uge1xuXHRcdGF0dHIobm9kZSwgcHJvcCwgdmFsdWUpO1xuXHR9XG59XG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IHRhZ1xuICovXG5leHBvcnQgZnVuY3Rpb24gc2V0X2R5bmFtaWNfZWxlbWVudF9kYXRhKHRhZykge1xuXHRyZXR1cm4gLy0vLnRlc3QodGFnKSA/IHNldF9jdXN0b21fZWxlbWVudF9kYXRhX21hcCA6IHNldF9hdHRyaWJ1dGVzO1xufVxuXG4vKipcbiAqIEByZXR1cm5zIHt2b2lkfVxuICovXG5leHBvcnQgZnVuY3Rpb24geGxpbmtfYXR0cihub2RlLCBhdHRyaWJ1dGUsIHZhbHVlKSB7XG5cdG5vZGUuc2V0QXR0cmlidXRlTlMoJ2h0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmsnLCBhdHRyaWJ1dGUsIHZhbHVlKTtcbn1cblxuLyoqXG4gKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBub2RlXG4gKiBAcmV0dXJucyB7c3RyaW5nfVxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0X3N2ZWx0ZV9kYXRhc2V0KG5vZGUpIHtcblx0cmV0dXJuIG5vZGUuZGF0YXNldC5zdmVsdGVIO1xufVxuXG4vKipcbiAqIEByZXR1cm5zIHt1bmtub3duW119ICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0X2JpbmRpbmdfZ3JvdXBfdmFsdWUoZ3JvdXAsIF9fdmFsdWUsIGNoZWNrZWQpIHtcblx0Y29uc3QgdmFsdWUgPSBuZXcgU2V0KCk7XG5cdGZvciAobGV0IGkgPSAwOyBpIDwgZ3JvdXAubGVuZ3RoOyBpICs9IDEpIHtcblx0XHRpZiAoZ3JvdXBbaV0uY2hlY2tlZCkgdmFsdWUuYWRkKGdyb3VwW2ldLl9fdmFsdWUpO1xuXHR9XG5cdGlmICghY2hlY2tlZCkge1xuXHRcdHZhbHVlLmRlbGV0ZShfX3ZhbHVlKTtcblx0fVxuXHRyZXR1cm4gQXJyYXkuZnJvbSh2YWx1ZSk7XG59XG5cbi8qKlxuICogQHBhcmFtIHtIVE1MSW5wdXRFbGVtZW50W119IGdyb3VwXG4gKiBAcmV0dXJucyB7eyBwKC4uLmlucHV0czogSFRNTElucHV0RWxlbWVudFtdKTogdm9pZDsgcigpOiB2b2lkOyB9fVxuICovXG5leHBvcnQgZnVuY3Rpb24gaW5pdF9iaW5kaW5nX2dyb3VwKGdyb3VwKSB7XG5cdC8qKlxuXHQgKiBAdHlwZSB7SFRNTElucHV0RWxlbWVudFtdfSAqL1xuXHRsZXQgX2lucHV0cztcblx0cmV0dXJuIHtcblx0XHQvKiBwdXNoICovIHAoLi4uaW5wdXRzKSB7XG5cdFx0XHRfaW5wdXRzID0gaW5wdXRzO1xuXHRcdFx0X2lucHV0cy5mb3JFYWNoKChpbnB1dCkgPT4gZ3JvdXAucHVzaChpbnB1dCkpO1xuXHRcdH0sXG5cdFx0LyogcmVtb3ZlICovIHIoKSB7XG5cdFx0XHRfaW5wdXRzLmZvckVhY2goKGlucHV0KSA9PiBncm91cC5zcGxpY2UoZ3JvdXAuaW5kZXhPZihpbnB1dCksIDEpKTtcblx0XHR9XG5cdH07XG59XG5cbi8qKlxuICogQHBhcmFtIHtudW1iZXJbXX0gaW5kZXhlc1xuICogQHJldHVybnMge3sgdShuZXdfaW5kZXhlczogbnVtYmVyW10pOiB2b2lkOyBwKC4uLmlucHV0czogSFRNTElucHV0RWxlbWVudFtdKTogdm9pZDsgcjogKCkgPT4gdm9pZDsgfX1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGluaXRfYmluZGluZ19ncm91cF9keW5hbWljKGdyb3VwLCBpbmRleGVzKSB7XG5cdC8qKlxuXHQgKiBAdHlwZSB7SFRNTElucHV0RWxlbWVudFtdfSAqL1xuXHRsZXQgX2dyb3VwID0gZ2V0X2JpbmRpbmdfZ3JvdXAoZ3JvdXApO1xuXG5cdC8qKlxuXHQgKiBAdHlwZSB7SFRNTElucHV0RWxlbWVudFtdfSAqL1xuXHRsZXQgX2lucHV0cztcblxuXHRmdW5jdGlvbiBnZXRfYmluZGluZ19ncm91cChncm91cCkge1xuXHRcdGZvciAobGV0IGkgPSAwOyBpIDwgaW5kZXhlcy5sZW5ndGg7IGkrKykge1xuXHRcdFx0Z3JvdXAgPSBncm91cFtpbmRleGVzW2ldXSA9IGdyb3VwW2luZGV4ZXNbaV1dIHx8IFtdO1xuXHRcdH1cblx0XHRyZXR1cm4gZ3JvdXA7XG5cdH1cblxuXHQvKipcblx0ICogQHJldHVybnMge3ZvaWR9ICovXG5cdGZ1bmN0aW9uIHB1c2goKSB7XG5cdFx0X2lucHV0cy5mb3JFYWNoKChpbnB1dCkgPT4gX2dyb3VwLnB1c2goaW5wdXQpKTtcblx0fVxuXG5cdC8qKlxuXHQgKiBAcmV0dXJucyB7dm9pZH0gKi9cblx0ZnVuY3Rpb24gcmVtb3ZlKCkge1xuXHRcdF9pbnB1dHMuZm9yRWFjaCgoaW5wdXQpID0+IF9ncm91cC5zcGxpY2UoX2dyb3VwLmluZGV4T2YoaW5wdXQpLCAxKSk7XG5cdH1cblx0cmV0dXJuIHtcblx0XHQvKiB1cGRhdGUgKi8gdShuZXdfaW5kZXhlcykge1xuXHRcdFx0aW5kZXhlcyA9IG5ld19pbmRleGVzO1xuXHRcdFx0Y29uc3QgbmV3X2dyb3VwID0gZ2V0X2JpbmRpbmdfZ3JvdXAoZ3JvdXApO1xuXHRcdFx0aWYgKG5ld19ncm91cCAhPT0gX2dyb3VwKSB7XG5cdFx0XHRcdHJlbW92ZSgpO1xuXHRcdFx0XHRfZ3JvdXAgPSBuZXdfZ3JvdXA7XG5cdFx0XHRcdHB1c2goKTtcblx0XHRcdH1cblx0XHR9LFxuXHRcdC8qIHB1c2ggKi8gcCguLi5pbnB1dHMpIHtcblx0XHRcdF9pbnB1dHMgPSBpbnB1dHM7XG5cdFx0XHRwdXNoKCk7XG5cdFx0fSxcblx0XHQvKiByZW1vdmUgKi8gcjogcmVtb3ZlXG5cdH07XG59XG5cbi8qKiBAcmV0dXJucyB7bnVtYmVyfSAqL1xuZXhwb3J0IGZ1bmN0aW9uIHRvX251bWJlcih2YWx1ZSkge1xuXHRyZXR1cm4gdmFsdWUgPT09ICcnID8gbnVsbCA6ICt2YWx1ZTtcbn1cblxuLyoqIEByZXR1cm5zIHthbnlbXX0gKi9cbmV4cG9ydCBmdW5jdGlvbiB0aW1lX3Jhbmdlc190b19hcnJheShyYW5nZXMpIHtcblx0Y29uc3QgYXJyYXkgPSBbXTtcblx0Zm9yIChsZXQgaSA9IDA7IGkgPCByYW5nZXMubGVuZ3RoOyBpICs9IDEpIHtcblx0XHRhcnJheS5wdXNoKHsgc3RhcnQ6IHJhbmdlcy5zdGFydChpKSwgZW5kOiByYW5nZXMuZW5kKGkpIH0pO1xuXHR9XG5cdHJldHVybiBhcnJheTtcbn1cblxuLyoqXG4gKiBAcGFyYW0ge0VsZW1lbnR9IGVsZW1lbnRcbiAqIEByZXR1cm5zIHtDaGlsZE5vZGVbXX1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNoaWxkcmVuKGVsZW1lbnQpIHtcblx0cmV0dXJuIEFycmF5LmZyb20oZWxlbWVudC5jaGlsZE5vZGVzKTtcbn1cblxuLyoqXG4gKiBAcGFyYW0ge0NoaWxkTm9kZUFycmF5fSBub2Rlc1xuICogQHJldHVybnMge3ZvaWR9XG4gKi9cbmZ1bmN0aW9uIGluaXRfY2xhaW1faW5mbyhub2Rlcykge1xuXHRpZiAobm9kZXMuY2xhaW1faW5mbyA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0bm9kZXMuY2xhaW1faW5mbyA9IHsgbGFzdF9pbmRleDogMCwgdG90YWxfY2xhaW1lZDogMCB9O1xuXHR9XG59XG5cbi8qKlxuICogQHRlbXBsYXRlIHtDaGlsZE5vZGVFeH0gUlxuICogQHBhcmFtIHtDaGlsZE5vZGVBcnJheX0gbm9kZXNcbiAqIEBwYXJhbSB7KG5vZGU6IENoaWxkTm9kZUV4KSA9PiBub2RlIGlzIFJ9IHByZWRpY2F0ZVxuICogQHBhcmFtIHsobm9kZTogQ2hpbGROb2RlRXgpID0+IENoaWxkTm9kZUV4IHwgdW5kZWZpbmVkfSBwcm9jZXNzX25vZGVcbiAqIEBwYXJhbSB7KCkgPT4gUn0gY3JlYXRlX25vZGVcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gZG9udF91cGRhdGVfbGFzdF9pbmRleFxuICogQHJldHVybnMge1J9XG4gKi9cbmZ1bmN0aW9uIGNsYWltX25vZGUobm9kZXMsIHByZWRpY2F0ZSwgcHJvY2Vzc19ub2RlLCBjcmVhdGVfbm9kZSwgZG9udF91cGRhdGVfbGFzdF9pbmRleCA9IGZhbHNlKSB7XG5cdC8vIFRyeSB0byBmaW5kIG5vZGVzIGluIGFuIG9yZGVyIHN1Y2ggdGhhdCB3ZSBsZW5ndGhlbiB0aGUgbG9uZ2VzdCBpbmNyZWFzaW5nIHN1YnNlcXVlbmNlXG5cdGluaXRfY2xhaW1faW5mbyhub2Rlcyk7XG5cdGNvbnN0IHJlc3VsdF9ub2RlID0gKCgpID0+IHtcblx0XHQvLyBXZSBmaXJzdCB0cnkgdG8gZmluZCBhbiBlbGVtZW50IGFmdGVyIHRoZSBwcmV2aW91cyBvbmVcblx0XHRmb3IgKGxldCBpID0gbm9kZXMuY2xhaW1faW5mby5sYXN0X2luZGV4OyBpIDwgbm9kZXMubGVuZ3RoOyBpKyspIHtcblx0XHRcdGNvbnN0IG5vZGUgPSBub2Rlc1tpXTtcblx0XHRcdGlmIChwcmVkaWNhdGUobm9kZSkpIHtcblx0XHRcdFx0Y29uc3QgcmVwbGFjZW1lbnQgPSBwcm9jZXNzX25vZGUobm9kZSk7XG5cdFx0XHRcdGlmIChyZXBsYWNlbWVudCA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRcdFx0bm9kZXMuc3BsaWNlKGksIDEpO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdG5vZGVzW2ldID0gcmVwbGFjZW1lbnQ7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKCFkb250X3VwZGF0ZV9sYXN0X2luZGV4KSB7XG5cdFx0XHRcdFx0bm9kZXMuY2xhaW1faW5mby5sYXN0X2luZGV4ID0gaTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gbm9kZTtcblx0XHRcdH1cblx0XHR9XG5cdFx0Ly8gT3RoZXJ3aXNlLCB3ZSB0cnkgdG8gZmluZCBvbmUgYmVmb3JlXG5cdFx0Ly8gV2UgaXRlcmF0ZSBpbiByZXZlcnNlIHNvIHRoYXQgd2UgZG9uJ3QgZ28gdG9vIGZhciBiYWNrXG5cdFx0Zm9yIChsZXQgaSA9IG5vZGVzLmNsYWltX2luZm8ubGFzdF9pbmRleCAtIDE7IGkgPj0gMDsgaS0tKSB7XG5cdFx0XHRjb25zdCBub2RlID0gbm9kZXNbaV07XG5cdFx0XHRpZiAocHJlZGljYXRlKG5vZGUpKSB7XG5cdFx0XHRcdGNvbnN0IHJlcGxhY2VtZW50ID0gcHJvY2Vzc19ub2RlKG5vZGUpO1xuXHRcdFx0XHRpZiAocmVwbGFjZW1lbnQgPT09IHVuZGVmaW5lZCkge1xuXHRcdFx0XHRcdG5vZGVzLnNwbGljZShpLCAxKTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRub2Rlc1tpXSA9IHJlcGxhY2VtZW50O1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmICghZG9udF91cGRhdGVfbGFzdF9pbmRleCkge1xuXHRcdFx0XHRcdG5vZGVzLmNsYWltX2luZm8ubGFzdF9pbmRleCA9IGk7XG5cdFx0XHRcdH0gZWxzZSBpZiAocmVwbGFjZW1lbnQgPT09IHVuZGVmaW5lZCkge1xuXHRcdFx0XHRcdC8vIFNpbmNlIHdlIHNwbGljZWQgYmVmb3JlIHRoZSBsYXN0X2luZGV4LCB3ZSBkZWNyZWFzZSBpdFxuXHRcdFx0XHRcdG5vZGVzLmNsYWltX2luZm8ubGFzdF9pbmRleC0tO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiBub2RlO1xuXHRcdFx0fVxuXHRcdH1cblx0XHQvLyBJZiB3ZSBjYW4ndCBmaW5kIGFueSBtYXRjaGluZyBub2RlLCB3ZSBjcmVhdGUgYSBuZXcgb25lXG5cdFx0cmV0dXJuIGNyZWF0ZV9ub2RlKCk7XG5cdH0pKCk7XG5cdHJlc3VsdF9ub2RlLmNsYWltX29yZGVyID0gbm9kZXMuY2xhaW1faW5mby50b3RhbF9jbGFpbWVkO1xuXHRub2Rlcy5jbGFpbV9pbmZvLnRvdGFsX2NsYWltZWQgKz0gMTtcblx0cmV0dXJuIHJlc3VsdF9ub2RlO1xufVxuXG4vKipcbiAqIEBwYXJhbSB7Q2hpbGROb2RlQXJyYXl9IG5vZGVzXG4gKiBAcGFyYW0ge3N0cmluZ30gbmFtZVxuICogQHBhcmFtIHt7IFtrZXk6IHN0cmluZ106IGJvb2xlYW4gfX0gYXR0cmlidXRlc1xuICogQHBhcmFtIHsobmFtZTogc3RyaW5nKSA9PiBFbGVtZW50IHwgU1ZHRWxlbWVudH0gY3JlYXRlX2VsZW1lbnRcbiAqIEByZXR1cm5zIHtFbGVtZW50IHwgU1ZHRWxlbWVudH1cbiAqL1xuZnVuY3Rpb24gY2xhaW1fZWxlbWVudF9iYXNlKG5vZGVzLCBuYW1lLCBhdHRyaWJ1dGVzLCBjcmVhdGVfZWxlbWVudCkge1xuXHRyZXR1cm4gY2xhaW1fbm9kZShcblx0XHRub2Rlcyxcblx0XHQvKiogQHJldHVybnMge25vZGUgaXMgRWxlbWVudCB8IFNWR0VsZW1lbnR9ICovXG5cdFx0KG5vZGUpID0+IG5vZGUubm9kZU5hbWUgPT09IG5hbWUsXG5cdFx0LyoqIEBwYXJhbSB7RWxlbWVudH0gbm9kZSAqL1xuXHRcdChub2RlKSA9PiB7XG5cdFx0XHRjb25zdCByZW1vdmUgPSBbXTtcblx0XHRcdGZvciAobGV0IGogPSAwOyBqIDwgbm9kZS5hdHRyaWJ1dGVzLmxlbmd0aDsgaisrKSB7XG5cdFx0XHRcdGNvbnN0IGF0dHJpYnV0ZSA9IG5vZGUuYXR0cmlidXRlc1tqXTtcblx0XHRcdFx0aWYgKCFhdHRyaWJ1dGVzW2F0dHJpYnV0ZS5uYW1lXSkge1xuXHRcdFx0XHRcdHJlbW92ZS5wdXNoKGF0dHJpYnV0ZS5uYW1lKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0cmVtb3ZlLmZvckVhY2goKHYpID0+IG5vZGUucmVtb3ZlQXR0cmlidXRlKHYpKTtcblx0XHRcdHJldHVybiB1bmRlZmluZWQ7XG5cdFx0fSxcblx0XHQoKSA9PiBjcmVhdGVfZWxlbWVudChuYW1lKVxuXHQpO1xufVxuXG4vKipcbiAqIEBwYXJhbSB7Q2hpbGROb2RlQXJyYXl9IG5vZGVzXG4gKiBAcGFyYW0ge3N0cmluZ30gbmFtZVxuICogQHBhcmFtIHt7IFtrZXk6IHN0cmluZ106IGJvb2xlYW4gfX0gYXR0cmlidXRlc1xuICogQHJldHVybnMge0VsZW1lbnQgfCBTVkdFbGVtZW50fVxuICovXG5leHBvcnQgZnVuY3Rpb24gY2xhaW1fZWxlbWVudChub2RlcywgbmFtZSwgYXR0cmlidXRlcykge1xuXHRyZXR1cm4gY2xhaW1fZWxlbWVudF9iYXNlKG5vZGVzLCBuYW1lLCBhdHRyaWJ1dGVzLCBlbGVtZW50KTtcbn1cblxuLyoqXG4gKiBAcGFyYW0ge0NoaWxkTm9kZUFycmF5fSBub2Rlc1xuICogQHBhcmFtIHtzdHJpbmd9IG5hbWVcbiAqIEBwYXJhbSB7eyBba2V5OiBzdHJpbmddOiBib29sZWFuIH19IGF0dHJpYnV0ZXNcbiAqIEByZXR1cm5zIHtFbGVtZW50IHwgU1ZHRWxlbWVudH1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNsYWltX3N2Z19lbGVtZW50KG5vZGVzLCBuYW1lLCBhdHRyaWJ1dGVzKSB7XG5cdHJldHVybiBjbGFpbV9lbGVtZW50X2Jhc2Uobm9kZXMsIG5hbWUsIGF0dHJpYnV0ZXMsIHN2Z19lbGVtZW50KTtcbn1cblxuLyoqXG4gKiBAcGFyYW0ge0NoaWxkTm9kZUFycmF5fSBub2Rlc1xuICogQHJldHVybnMge1RleHR9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjbGFpbV90ZXh0KG5vZGVzLCBkYXRhKSB7XG5cdHJldHVybiBjbGFpbV9ub2RlKFxuXHRcdG5vZGVzLFxuXHRcdC8qKiBAcmV0dXJucyB7bm9kZSBpcyBUZXh0fSAqL1xuXHRcdChub2RlKSA9PiBub2RlLm5vZGVUeXBlID09PSAzLFxuXHRcdC8qKiBAcGFyYW0ge1RleHR9IG5vZGUgKi9cblx0XHQobm9kZSkgPT4ge1xuXHRcdFx0Y29uc3QgZGF0YV9zdHIgPSAnJyArIGRhdGE7XG5cdFx0XHRpZiAobm9kZS5kYXRhLnN0YXJ0c1dpdGgoZGF0YV9zdHIpKSB7XG5cdFx0XHRcdGlmIChub2RlLmRhdGEubGVuZ3RoICE9PSBkYXRhX3N0ci5sZW5ndGgpIHtcblx0XHRcdFx0XHRyZXR1cm4gbm9kZS5zcGxpdFRleHQoZGF0YV9zdHIubGVuZ3RoKTtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0bm9kZS5kYXRhID0gZGF0YV9zdHI7XG5cdFx0XHR9XG5cdFx0fSxcblx0XHQoKSA9PiB0ZXh0KGRhdGEpLFxuXHRcdHRydWUgLy8gVGV4dCBub2RlcyBzaG91bGQgbm90IHVwZGF0ZSBsYXN0IGluZGV4IHNpbmNlIGl0IGlzIGxpa2VseSBub3Qgd29ydGggaXQgdG8gZWxpbWluYXRlIGFuIGluY3JlYXNpbmcgc3Vic2VxdWVuY2Ugb2YgYWN0dWFsIGVsZW1lbnRzXG5cdCk7XG59XG5cbi8qKlxuICogQHJldHVybnMge1RleHR9ICovXG5leHBvcnQgZnVuY3Rpb24gY2xhaW1fc3BhY2Uobm9kZXMpIHtcblx0cmV0dXJuIGNsYWltX3RleHQobm9kZXMsICcgJyk7XG59XG5cbi8qKlxuICogQHBhcmFtIHtDaGlsZE5vZGVBcnJheX0gbm9kZXNcbiAqIEByZXR1cm5zIHtDb21tZW50fVxuICovXG5leHBvcnQgZnVuY3Rpb24gY2xhaW1fY29tbWVudChub2RlcywgZGF0YSkge1xuXHRyZXR1cm4gY2xhaW1fbm9kZShcblx0XHRub2Rlcyxcblx0XHQvKiogQHJldHVybnMge25vZGUgaXMgQ29tbWVudH0gKi9cblx0XHQobm9kZSkgPT4gbm9kZS5ub2RlVHlwZSA9PT0gOCxcblx0XHQvKiogQHBhcmFtIHtDb21tZW50fSBub2RlICovXG5cdFx0KG5vZGUpID0+IHtcblx0XHRcdG5vZGUuZGF0YSA9ICcnICsgZGF0YTtcblx0XHRcdHJldHVybiB1bmRlZmluZWQ7XG5cdFx0fSxcblx0XHQoKSA9PiBjb21tZW50KGRhdGEpLFxuXHRcdHRydWVcblx0KTtcbn1cblxuZnVuY3Rpb24gZ2V0X2NvbW1lbnRfaWR4KG5vZGVzLCB0ZXh0LCBzdGFydCkge1xuXHRmb3IgKGxldCBpID0gc3RhcnQ7IGkgPCBub2Rlcy5sZW5ndGg7IGkgKz0gMSkge1xuXHRcdGNvbnN0IG5vZGUgPSBub2Rlc1tpXTtcblx0XHRpZiAobm9kZS5ub2RlVHlwZSA9PT0gOCAvKiBjb21tZW50IG5vZGUgKi8gJiYgbm9kZS50ZXh0Q29udGVudC50cmltKCkgPT09IHRleHQpIHtcblx0XHRcdHJldHVybiBpO1xuXHRcdH1cblx0fVxuXHRyZXR1cm4gLTE7XG59XG5cbi8qKlxuICogQHBhcmFtIHtib29sZWFufSBpc19zdmdcbiAqIEByZXR1cm5zIHtIdG1sVGFnSHlkcmF0aW9ufVxuICovXG5leHBvcnQgZnVuY3Rpb24gY2xhaW1faHRtbF90YWcobm9kZXMsIGlzX3N2Zykge1xuXHQvLyBmaW5kIGh0bWwgb3BlbmluZyB0YWdcblx0Y29uc3Qgc3RhcnRfaW5kZXggPSBnZXRfY29tbWVudF9pZHgobm9kZXMsICdIVE1MX1RBR19TVEFSVCcsIDApO1xuXHRjb25zdCBlbmRfaW5kZXggPSBnZXRfY29tbWVudF9pZHgobm9kZXMsICdIVE1MX1RBR19FTkQnLCBzdGFydF9pbmRleCArIDEpO1xuXHRpZiAoc3RhcnRfaW5kZXggPT09IC0xIHx8IGVuZF9pbmRleCA9PT0gLTEpIHtcblx0XHRyZXR1cm4gbmV3IEh0bWxUYWdIeWRyYXRpb24oaXNfc3ZnKTtcblx0fVxuXG5cdGluaXRfY2xhaW1faW5mbyhub2Rlcyk7XG5cdGNvbnN0IGh0bWxfdGFnX25vZGVzID0gbm9kZXMuc3BsaWNlKHN0YXJ0X2luZGV4LCBlbmRfaW5kZXggLSBzdGFydF9pbmRleCArIDEpO1xuXHRkZXRhY2goaHRtbF90YWdfbm9kZXNbMF0pO1xuXHRkZXRhY2goaHRtbF90YWdfbm9kZXNbaHRtbF90YWdfbm9kZXMubGVuZ3RoIC0gMV0pO1xuXHRjb25zdCBjbGFpbWVkX25vZGVzID0gaHRtbF90YWdfbm9kZXMuc2xpY2UoMSwgaHRtbF90YWdfbm9kZXMubGVuZ3RoIC0gMSk7XG5cdGlmIChjbGFpbWVkX25vZGVzLmxlbmd0aCA9PT0gMCkge1xuXHRcdHJldHVybiBuZXcgSHRtbFRhZ0h5ZHJhdGlvbihpc19zdmcpO1xuXHR9XG5cdGZvciAoY29uc3QgbiBvZiBjbGFpbWVkX25vZGVzKSB7XG5cdFx0bi5jbGFpbV9vcmRlciA9IG5vZGVzLmNsYWltX2luZm8udG90YWxfY2xhaW1lZDtcblx0XHRub2Rlcy5jbGFpbV9pbmZvLnRvdGFsX2NsYWltZWQgKz0gMTtcblx0fVxuXHRyZXR1cm4gbmV3IEh0bWxUYWdIeWRyYXRpb24oaXNfc3ZnLCBjbGFpbWVkX25vZGVzKTtcbn1cblxuLyoqXG4gKiBAcGFyYW0ge1RleHR9IHRleHRcbiAqIEBwYXJhbSB7dW5rbm93bn0gZGF0YVxuICogQHJldHVybnMge3ZvaWR9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzZXRfZGF0YSh0ZXh0LCBkYXRhKSB7XG5cdGRhdGEgPSAnJyArIGRhdGE7XG5cdGlmICh0ZXh0LmRhdGEgPT09IGRhdGEpIHJldHVybjtcblx0dGV4dC5kYXRhID0gLyoqIEB0eXBlIHtzdHJpbmd9ICovIChkYXRhKTtcbn1cblxuLyoqXG4gKiBAcGFyYW0ge1RleHR9IHRleHRcbiAqIEBwYXJhbSB7dW5rbm93bn0gZGF0YVxuICogQHJldHVybnMge3ZvaWR9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzZXRfZGF0YV9jb250ZW50ZWRpdGFibGUodGV4dCwgZGF0YSkge1xuXHRkYXRhID0gJycgKyBkYXRhO1xuXHRpZiAodGV4dC53aG9sZVRleHQgPT09IGRhdGEpIHJldHVybjtcblx0dGV4dC5kYXRhID0gLyoqIEB0eXBlIHtzdHJpbmd9ICovIChkYXRhKTtcbn1cblxuLyoqXG4gKiBAcGFyYW0ge1RleHR9IHRleHRcbiAqIEBwYXJhbSB7dW5rbm93bn0gZGF0YVxuICogQHBhcmFtIHtzdHJpbmd9IGF0dHJfdmFsdWVcbiAqIEByZXR1cm5zIHt2b2lkfVxuICovXG5leHBvcnQgZnVuY3Rpb24gc2V0X2RhdGFfbWF5YmVfY29udGVudGVkaXRhYmxlKHRleHQsIGRhdGEsIGF0dHJfdmFsdWUpIHtcblx0aWYgKH5jb250ZW50ZWRpdGFibGVfdHJ1dGh5X3ZhbHVlcy5pbmRleE9mKGF0dHJfdmFsdWUpKSB7XG5cdFx0c2V0X2RhdGFfY29udGVudGVkaXRhYmxlKHRleHQsIGRhdGEpO1xuXHR9IGVsc2Uge1xuXHRcdHNldF9kYXRhKHRleHQsIGRhdGEpO1xuXHR9XG59XG5cbi8qKlxuICogQHJldHVybnMge3ZvaWR9ICovXG5leHBvcnQgZnVuY3Rpb24gc2V0X2lucHV0X3ZhbHVlKGlucHV0LCB2YWx1ZSkge1xuXHRpbnB1dC52YWx1ZSA9IHZhbHVlID09IG51bGwgPyAnJyA6IHZhbHVlO1xufVxuXG4vKipcbiAqIEByZXR1cm5zIHt2b2lkfSAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNldF9pbnB1dF90eXBlKGlucHV0LCB0eXBlKSB7XG5cdHRyeSB7XG5cdFx0aW5wdXQudHlwZSA9IHR5cGU7XG5cdH0gY2F0Y2ggKGUpIHtcblx0XHQvLyBkbyBub3RoaW5nXG5cdH1cbn1cblxuLyoqXG4gKiBAcmV0dXJucyB7dm9pZH0gKi9cbmV4cG9ydCBmdW5jdGlvbiBzZXRfc3R5bGUobm9kZSwga2V5LCB2YWx1ZSwgaW1wb3J0YW50KSB7XG5cdGlmICh2YWx1ZSA9PSBudWxsKSB7XG5cdFx0bm9kZS5zdHlsZS5yZW1vdmVQcm9wZXJ0eShrZXkpO1xuXHR9IGVsc2Uge1xuXHRcdG5vZGUuc3R5bGUuc2V0UHJvcGVydHkoa2V5LCB2YWx1ZSwgaW1wb3J0YW50ID8gJ2ltcG9ydGFudCcgOiAnJyk7XG5cdH1cbn1cblxuLyoqXG4gKiBAcmV0dXJucyB7dm9pZH0gKi9cbmV4cG9ydCBmdW5jdGlvbiBzZWxlY3Rfb3B0aW9uKHNlbGVjdCwgdmFsdWUsIG1vdW50aW5nKSB7XG5cdGZvciAobGV0IGkgPSAwOyBpIDwgc2VsZWN0Lm9wdGlvbnMubGVuZ3RoOyBpICs9IDEpIHtcblx0XHRjb25zdCBvcHRpb24gPSBzZWxlY3Qub3B0aW9uc1tpXTtcblx0XHRpZiAob3B0aW9uLl9fdmFsdWUgPT09IHZhbHVlKSB7XG5cdFx0XHRvcHRpb24uc2VsZWN0ZWQgPSB0cnVlO1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblx0fVxuXHRpZiAoIW1vdW50aW5nIHx8IHZhbHVlICE9PSB1bmRlZmluZWQpIHtcblx0XHRzZWxlY3Quc2VsZWN0ZWRJbmRleCA9IC0xOyAvLyBubyBvcHRpb24gc2hvdWxkIGJlIHNlbGVjdGVkXG5cdH1cbn1cblxuLyoqXG4gKiBAcmV0dXJucyB7dm9pZH0gKi9cbmV4cG9ydCBmdW5jdGlvbiBzZWxlY3Rfb3B0aW9ucyhzZWxlY3QsIHZhbHVlKSB7XG5cdGZvciAobGV0IGkgPSAwOyBpIDwgc2VsZWN0Lm9wdGlvbnMubGVuZ3RoOyBpICs9IDEpIHtcblx0XHRjb25zdCBvcHRpb24gPSBzZWxlY3Qub3B0aW9uc1tpXTtcblx0XHRvcHRpb24uc2VsZWN0ZWQgPSB+dmFsdWUuaW5kZXhPZihvcHRpb24uX192YWx1ZSk7XG5cdH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNlbGVjdF92YWx1ZShzZWxlY3QpIHtcblx0Y29uc3Qgc2VsZWN0ZWRfb3B0aW9uID0gc2VsZWN0LnF1ZXJ5U2VsZWN0b3IoJzpjaGVja2VkJyk7XG5cdHJldHVybiBzZWxlY3RlZF9vcHRpb24gJiYgc2VsZWN0ZWRfb3B0aW9uLl9fdmFsdWU7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzZWxlY3RfbXVsdGlwbGVfdmFsdWUoc2VsZWN0KSB7XG5cdHJldHVybiBbXS5tYXAuY2FsbChzZWxlY3QucXVlcnlTZWxlY3RvckFsbCgnOmNoZWNrZWQnKSwgKG9wdGlvbikgPT4gb3B0aW9uLl9fdmFsdWUpO1xufVxuLy8gdW5mb3J0dW5hdGVseSB0aGlzIGNhbid0IGJlIGEgY29uc3RhbnQgYXMgdGhhdCB3b3VsZG4ndCBiZSB0cmVlLXNoYWtlYWJsZVxuLy8gc28gd2UgY2FjaGUgdGhlIHJlc3VsdCBpbnN0ZWFkXG5cbi8qKlxuICogQHR5cGUge2Jvb2xlYW59ICovXG5sZXQgY3Jvc3NvcmlnaW47XG5cbi8qKlxuICogQHJldHVybnMge2Jvb2xlYW59ICovXG5leHBvcnQgZnVuY3Rpb24gaXNfY3Jvc3NvcmlnaW4oKSB7XG5cdGlmIChjcm9zc29yaWdpbiA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0Y3Jvc3NvcmlnaW4gPSBmYWxzZTtcblx0XHR0cnkge1xuXHRcdFx0aWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHdpbmRvdy5wYXJlbnQpIHtcblx0XHRcdFx0dm9pZCB3aW5kb3cucGFyZW50LmRvY3VtZW50O1xuXHRcdFx0fVxuXHRcdH0gY2F0Y2ggKGVycm9yKSB7XG5cdFx0XHRjcm9zc29yaWdpbiA9IHRydWU7XG5cdFx0fVxuXHR9XG5cdHJldHVybiBjcm9zc29yaWdpbjtcbn1cblxuLyoqXG4gKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBub2RlXG4gKiBAcGFyYW0geygpID0+IHZvaWR9IGZuXG4gKiBAcmV0dXJucyB7KCkgPT4gdm9pZH1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGFkZF9pZnJhbWVfcmVzaXplX2xpc3RlbmVyKG5vZGUsIGZuKSB7XG5cdGNvbnN0IGNvbXB1dGVkX3N0eWxlID0gZ2V0Q29tcHV0ZWRTdHlsZShub2RlKTtcblx0aWYgKGNvbXB1dGVkX3N0eWxlLnBvc2l0aW9uID09PSAnc3RhdGljJykge1xuXHRcdG5vZGUuc3R5bGUucG9zaXRpb24gPSAncmVsYXRpdmUnO1xuXHR9XG5cdGNvbnN0IGlmcmFtZSA9IGVsZW1lbnQoJ2lmcmFtZScpO1xuXHRpZnJhbWUuc2V0QXR0cmlidXRlKFxuXHRcdCdzdHlsZScsXG5cdFx0J2Rpc3BsYXk6IGJsb2NrOyBwb3NpdGlvbjogYWJzb2x1dGU7IHRvcDogMDsgbGVmdDogMDsgd2lkdGg6IDEwMCU7IGhlaWdodDogMTAwJTsgJyArXG5cdFx0XHQnb3ZlcmZsb3c6IGhpZGRlbjsgYm9yZGVyOiAwOyBvcGFjaXR5OiAwOyBwb2ludGVyLWV2ZW50czogbm9uZTsgei1pbmRleDogLTE7J1xuXHQpO1xuXHRpZnJhbWUuc2V0QXR0cmlidXRlKCdhcmlhLWhpZGRlbicsICd0cnVlJyk7XG5cdGlmcmFtZS50YWJJbmRleCA9IC0xO1xuXHRjb25zdCBjcm9zc29yaWdpbiA9IGlzX2Nyb3Nzb3JpZ2luKCk7XG5cblx0LyoqXG5cdCAqIEB0eXBlIHsoKSA9PiB2b2lkfVxuXHQgKi9cblx0bGV0IHVuc3Vic2NyaWJlO1xuXHRpZiAoY3Jvc3NvcmlnaW4pIHtcblx0XHRpZnJhbWUuc3JjID0gXCJkYXRhOnRleHQvaHRtbCw8c2NyaXB0Pm9ucmVzaXplPWZ1bmN0aW9uKCl7cGFyZW50LnBvc3RNZXNzYWdlKDAsJyonKX08L3NjcmlwdD5cIjtcblx0XHR1bnN1YnNjcmliZSA9IGxpc3Rlbihcblx0XHRcdHdpbmRvdyxcblx0XHRcdCdtZXNzYWdlJyxcblx0XHRcdC8qKiBAcGFyYW0ge01lc3NhZ2VFdmVudH0gZXZlbnQgKi8gKGV2ZW50KSA9PiB7XG5cdFx0XHRcdGlmIChldmVudC5zb3VyY2UgPT09IGlmcmFtZS5jb250ZW50V2luZG93KSBmbigpO1xuXHRcdFx0fVxuXHRcdCk7XG5cdH0gZWxzZSB7XG5cdFx0aWZyYW1lLnNyYyA9ICdhYm91dDpibGFuayc7XG5cdFx0aWZyYW1lLm9ubG9hZCA9ICgpID0+IHtcblx0XHRcdHVuc3Vic2NyaWJlID0gbGlzdGVuKGlmcmFtZS5jb250ZW50V2luZG93LCAncmVzaXplJywgZm4pO1xuXHRcdFx0Ly8gbWFrZSBzdXJlIGFuIGluaXRpYWwgcmVzaXplIGV2ZW50IGlzIGZpcmVkIF9hZnRlcl8gdGhlIGlmcmFtZSBpcyBsb2FkZWQgKHdoaWNoIGlzIGFzeW5jaHJvbm91cylcblx0XHRcdC8vIHNlZSBodHRwczovL2dpdGh1Yi5jb20vc3ZlbHRlanMvc3ZlbHRlL2lzc3Vlcy80MjMzXG5cdFx0XHRmbigpO1xuXHRcdH07XG5cdH1cblx0YXBwZW5kKG5vZGUsIGlmcmFtZSk7XG5cdHJldHVybiAoKSA9PiB7XG5cdFx0aWYgKGNyb3Nzb3JpZ2luKSB7XG5cdFx0XHR1bnN1YnNjcmliZSgpO1xuXHRcdH0gZWxzZSBpZiAodW5zdWJzY3JpYmUgJiYgaWZyYW1lLmNvbnRlbnRXaW5kb3cpIHtcblx0XHRcdHVuc3Vic2NyaWJlKCk7XG5cdFx0fVxuXHRcdGRldGFjaChpZnJhbWUpO1xuXHR9O1xufVxuZXhwb3J0IGNvbnN0IHJlc2l6ZV9vYnNlcnZlcl9jb250ZW50X2JveCA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgUmVzaXplT2JzZXJ2ZXJTaW5nbGV0b24oe1xuXHRib3g6ICdjb250ZW50LWJveCdcbn0pO1xuZXhwb3J0IGNvbnN0IHJlc2l6ZV9vYnNlcnZlcl9ib3JkZXJfYm94ID0gLyogQF9fUFVSRV9fICovIG5ldyBSZXNpemVPYnNlcnZlclNpbmdsZXRvbih7XG5cdGJveDogJ2JvcmRlci1ib3gnXG59KTtcbmV4cG9ydCBjb25zdCByZXNpemVfb2JzZXJ2ZXJfZGV2aWNlX3BpeGVsX2NvbnRlbnRfYm94ID0gLyogQF9fUFVSRV9fICovIG5ldyBSZXNpemVPYnNlcnZlclNpbmdsZXRvbihcblx0eyBib3g6ICdkZXZpY2UtcGl4ZWwtY29udGVudC1ib3gnIH1cbik7XG5leHBvcnQgeyBSZXNpemVPYnNlcnZlclNpbmdsZXRvbiB9O1xuXG4vKipcbiAqIEByZXR1cm5zIHt2b2lkfSAqL1xuZXhwb3J0IGZ1bmN0aW9uIHRvZ2dsZV9jbGFzcyhlbGVtZW50LCBuYW1lLCB0b2dnbGUpIHtcblx0Ly8gVGhlIGAhIWAgaXMgcmVxdWlyZWQgYmVjYXVzZSBhbiBgdW5kZWZpbmVkYCBmbGFnIG1lYW5zIGZsaXBwaW5nIHRoZSBjdXJyZW50IHN0YXRlLlxuXHRlbGVtZW50LmNsYXNzTGlzdC50b2dnbGUobmFtZSwgISF0b2dnbGUpO1xufVxuXG4vKipcbiAqIEB0ZW1wbGF0ZSBUXG4gKiBAcGFyYW0ge3N0cmluZ30gdHlwZVxuICogQHBhcmFtIHtUfSBbZGV0YWlsXVxuICogQHBhcmFtIHt7IGJ1YmJsZXM/OiBib29sZWFuLCBjYW5jZWxhYmxlPzogYm9vbGVhbiB9fSBbb3B0aW9uc11cbiAqIEByZXR1cm5zIHtDdXN0b21FdmVudDxUPn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGN1c3RvbV9ldmVudCh0eXBlLCBkZXRhaWwsIHsgYnViYmxlcyA9IGZhbHNlLCBjYW5jZWxhYmxlID0gZmFsc2UgfSA9IHt9KSB7XG5cdHJldHVybiBuZXcgQ3VzdG9tRXZlbnQodHlwZSwgeyBkZXRhaWwsIGJ1YmJsZXMsIGNhbmNlbGFibGUgfSk7XG59XG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IHNlbGVjdG9yXG4gKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBwYXJlbnRcbiAqIEByZXR1cm5zIHtDaGlsZE5vZGVBcnJheX1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHF1ZXJ5X3NlbGVjdG9yX2FsbChzZWxlY3RvciwgcGFyZW50ID0gZG9jdW1lbnQuYm9keSkge1xuXHRyZXR1cm4gQXJyYXkuZnJvbShwYXJlbnQucXVlcnlTZWxlY3RvckFsbChzZWxlY3RvcikpO1xufVxuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSBub2RlSWRcbiAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IGhlYWRcbiAqIEByZXR1cm5zIHthbnlbXX1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGhlYWRfc2VsZWN0b3Iobm9kZUlkLCBoZWFkKSB7XG5cdGNvbnN0IHJlc3VsdCA9IFtdO1xuXHRsZXQgc3RhcnRlZCA9IDA7XG5cdGZvciAoY29uc3Qgbm9kZSBvZiBoZWFkLmNoaWxkTm9kZXMpIHtcblx0XHRpZiAobm9kZS5ub2RlVHlwZSA9PT0gOCAvKiBjb21tZW50IG5vZGUgKi8pIHtcblx0XHRcdGNvbnN0IGNvbW1lbnQgPSBub2RlLnRleHRDb250ZW50LnRyaW0oKTtcblx0XHRcdGlmIChjb21tZW50ID09PSBgSEVBRF8ke25vZGVJZH1fRU5EYCkge1xuXHRcdFx0XHRzdGFydGVkIC09IDE7XG5cdFx0XHRcdHJlc3VsdC5wdXNoKG5vZGUpO1xuXHRcdFx0fSBlbHNlIGlmIChjb21tZW50ID09PSBgSEVBRF8ke25vZGVJZH1fU1RBUlRgKSB7XG5cdFx0XHRcdHN0YXJ0ZWQgKz0gMTtcblx0XHRcdFx0cmVzdWx0LnB1c2gobm9kZSk7XG5cdFx0XHR9XG5cdFx0fSBlbHNlIGlmIChzdGFydGVkID4gMCkge1xuXHRcdFx0cmVzdWx0LnB1c2gobm9kZSk7XG5cdFx0fVxuXHR9XG5cdHJldHVybiByZXN1bHQ7XG59XG4vKiogKi9cbmV4cG9ydCBjbGFzcyBIdG1sVGFnIHtcblx0LyoqXG5cdCAqIEBwcml2YXRlXG5cdCAqIEBkZWZhdWx0IGZhbHNlXG5cdCAqL1xuXHRpc19zdmcgPSBmYWxzZTtcblx0LyoqIHBhcmVudCBmb3IgY3JlYXRpbmcgbm9kZSAqL1xuXHRlID0gdW5kZWZpbmVkO1xuXHQvKiogaHRtbCB0YWcgbm9kZXMgKi9cblx0biA9IHVuZGVmaW5lZDtcblx0LyoqIHRhcmdldCAqL1xuXHR0ID0gdW5kZWZpbmVkO1xuXHQvKiogYW5jaG9yICovXG5cdGEgPSB1bmRlZmluZWQ7XG5cdGNvbnN0cnVjdG9yKGlzX3N2ZyA9IGZhbHNlKSB7XG5cdFx0dGhpcy5pc19zdmcgPSBpc19zdmc7XG5cdFx0dGhpcy5lID0gdGhpcy5uID0gbnVsbDtcblx0fVxuXG5cdC8qKlxuXHQgKiBAcGFyYW0ge3N0cmluZ30gaHRtbFxuXHQgKiBAcmV0dXJucyB7dm9pZH1cblx0ICovXG5cdGMoaHRtbCkge1xuXHRcdHRoaXMuaChodG1sKTtcblx0fVxuXG5cdC8qKlxuXHQgKiBAcGFyYW0ge3N0cmluZ30gaHRtbFxuXHQgKiBAcGFyYW0ge0hUTUxFbGVtZW50IHwgU1ZHRWxlbWVudH0gdGFyZ2V0XG5cdCAqIEBwYXJhbSB7SFRNTEVsZW1lbnQgfCBTVkdFbGVtZW50fSBhbmNob3Jcblx0ICogQHJldHVybnMge3ZvaWR9XG5cdCAqL1xuXHRtKGh0bWwsIHRhcmdldCwgYW5jaG9yID0gbnVsbCkge1xuXHRcdGlmICghdGhpcy5lKSB7XG5cdFx0XHRpZiAodGhpcy5pc19zdmcpXG5cdFx0XHRcdHRoaXMuZSA9IHN2Z19lbGVtZW50KC8qKiBAdHlwZSB7a2V5b2YgU1ZHRWxlbWVudFRhZ05hbWVNYXB9ICovICh0YXJnZXQubm9kZU5hbWUpKTtcblx0XHRcdC8qKiAjNzM2NCAgdGFyZ2V0IGZvciA8dGVtcGxhdGU+IG1heSBiZSBwcm92aWRlZCBhcyAjZG9jdW1lbnQtZnJhZ21lbnQoMTEpICovIGVsc2Vcblx0XHRcdFx0dGhpcy5lID0gZWxlbWVudChcblx0XHRcdFx0XHQvKiogQHR5cGUge2tleW9mIEhUTUxFbGVtZW50VGFnTmFtZU1hcH0gKi8gKFxuXHRcdFx0XHRcdFx0dGFyZ2V0Lm5vZGVUeXBlID09PSAxMSA/ICdURU1QTEFURScgOiB0YXJnZXQubm9kZU5hbWVcblx0XHRcdFx0XHQpXG5cdFx0XHRcdCk7XG5cdFx0XHR0aGlzLnQgPVxuXHRcdFx0XHR0YXJnZXQudGFnTmFtZSAhPT0gJ1RFTVBMQVRFJ1xuXHRcdFx0XHRcdD8gdGFyZ2V0XG5cdFx0XHRcdFx0OiAvKiogQHR5cGUge0hUTUxUZW1wbGF0ZUVsZW1lbnR9ICovICh0YXJnZXQpLmNvbnRlbnQ7XG5cdFx0XHR0aGlzLmMoaHRtbCk7XG5cdFx0fVxuXHRcdHRoaXMuaShhbmNob3IpO1xuXHR9XG5cblx0LyoqXG5cdCAqIEBwYXJhbSB7c3RyaW5nfSBodG1sXG5cdCAqIEByZXR1cm5zIHt2b2lkfVxuXHQgKi9cblx0aChodG1sKSB7XG5cdFx0dGhpcy5lLmlubmVySFRNTCA9IGh0bWw7XG5cdFx0dGhpcy5uID0gQXJyYXkuZnJvbShcblx0XHRcdHRoaXMuZS5ub2RlTmFtZSA9PT0gJ1RFTVBMQVRFJyA/IHRoaXMuZS5jb250ZW50LmNoaWxkTm9kZXMgOiB0aGlzLmUuY2hpbGROb2Rlc1xuXHRcdCk7XG5cdH1cblxuXHQvKipcblx0ICogQHJldHVybnMge3ZvaWR9ICovXG5cdGkoYW5jaG9yKSB7XG5cdFx0Zm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLm4ubGVuZ3RoOyBpICs9IDEpIHtcblx0XHRcdGluc2VydCh0aGlzLnQsIHRoaXMubltpXSwgYW5jaG9yKTtcblx0XHR9XG5cdH1cblxuXHQvKipcblx0ICogQHBhcmFtIHtzdHJpbmd9IGh0bWxcblx0ICogQHJldHVybnMge3ZvaWR9XG5cdCAqL1xuXHRwKGh0bWwpIHtcblx0XHR0aGlzLmQoKTtcblx0XHR0aGlzLmgoaHRtbCk7XG5cdFx0dGhpcy5pKHRoaXMuYSk7XG5cdH1cblxuXHQvKipcblx0ICogQHJldHVybnMge3ZvaWR9ICovXG5cdGQoKSB7XG5cdFx0dGhpcy5uLmZvckVhY2goZGV0YWNoKTtcblx0fVxufVxuXG5leHBvcnQgY2xhc3MgSHRtbFRhZ0h5ZHJhdGlvbiBleHRlbmRzIEh0bWxUYWcge1xuXHQvKiogQHR5cGUge0VsZW1lbnRbXX0gaHlkcmF0aW9uIGNsYWltZWQgbm9kZXMgKi9cblx0bCA9IHVuZGVmaW5lZDtcblxuXHRjb25zdHJ1Y3Rvcihpc19zdmcgPSBmYWxzZSwgY2xhaW1lZF9ub2Rlcykge1xuXHRcdHN1cGVyKGlzX3N2Zyk7XG5cdFx0dGhpcy5lID0gdGhpcy5uID0gbnVsbDtcblx0XHR0aGlzLmwgPSBjbGFpbWVkX25vZGVzO1xuXHR9XG5cblx0LyoqXG5cdCAqIEBwYXJhbSB7c3RyaW5nfSBodG1sXG5cdCAqIEByZXR1cm5zIHt2b2lkfVxuXHQgKi9cblx0YyhodG1sKSB7XG5cdFx0aWYgKHRoaXMubCkge1xuXHRcdFx0dGhpcy5uID0gdGhpcy5sO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRzdXBlci5jKGh0bWwpO1xuXHRcdH1cblx0fVxuXG5cdC8qKlxuXHQgKiBAcmV0dXJucyB7dm9pZH0gKi9cblx0aShhbmNob3IpIHtcblx0XHRmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMubi5sZW5ndGg7IGkgKz0gMSkge1xuXHRcdFx0aW5zZXJ0X2h5ZHJhdGlvbih0aGlzLnQsIHRoaXMubltpXSwgYW5jaG9yKTtcblx0XHR9XG5cdH1cbn1cblxuLyoqXG4gKiBAcGFyYW0ge05hbWVkTm9kZU1hcH0gYXR0cmlidXRlc1xuICogQHJldHVybnMge3t9fVxuICovXG5leHBvcnQgZnVuY3Rpb24gYXR0cmlidXRlX3RvX29iamVjdChhdHRyaWJ1dGVzKSB7XG5cdGNvbnN0IHJlc3VsdCA9IHt9O1xuXHRmb3IgKGNvbnN0IGF0dHJpYnV0ZSBvZiBhdHRyaWJ1dGVzKSB7XG5cdFx0cmVzdWx0W2F0dHJpYnV0ZS5uYW1lXSA9IGF0dHJpYnV0ZS52YWx1ZTtcblx0fVxuXHRyZXR1cm4gcmVzdWx0O1xufVxuXG5jb25zdCBlc2NhcGVkID0ge1xuXHQnXCInOiAnJnF1b3Q7Jyxcblx0JyYnOiAnJmFtcDsnLFxuXHQnPCc6ICcmbHQ7J1xufTtcblxuY29uc3QgcmVnZXhfYXR0cmlidXRlX2NoYXJhY3RlcnNfdG9fZXNjYXBlID0gL1tcIiY8XS9nO1xuXG4vKipcbiAqIE5vdGUgdGhhdCB0aGUgYXR0cmlidXRlIGl0c2VsZiBzaG91bGQgYmUgc3Vycm91bmRlZCBpbiBkb3VibGUgcXVvdGVzXG4gKiBAcGFyYW0ge2FueX0gYXR0cmlidXRlXG4gKi9cbmZ1bmN0aW9uIGVzY2FwZV9hdHRyaWJ1dGUoYXR0cmlidXRlKSB7XG5cdHJldHVybiBTdHJpbmcoYXR0cmlidXRlKS5yZXBsYWNlKHJlZ2V4X2F0dHJpYnV0ZV9jaGFyYWN0ZXJzX3RvX2VzY2FwZSwgKG1hdGNoKSA9PiBlc2NhcGVkW21hdGNoXSk7XG59XG5cbi8qKlxuICogQHBhcmFtIHtSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+fSBhdHRyaWJ1dGVzXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzdHJpbmdpZnlfc3ByZWFkKGF0dHJpYnV0ZXMpIHtcblx0bGV0IHN0ciA9ICcgJztcblx0Zm9yIChjb25zdCBrZXkgaW4gYXR0cmlidXRlcykge1xuXHRcdGlmIChhdHRyaWJ1dGVzW2tleV0gIT0gbnVsbCkge1xuXHRcdFx0c3RyICs9IGAke2tleX09XCIke2VzY2FwZV9hdHRyaWJ1dGUoYXR0cmlidXRlc1trZXldKX1cIiBgO1xuXHRcdH1cblx0fVxuXG5cdHJldHVybiBzdHI7XG59XG5cbi8qKlxuICogQHBhcmFtIHtIVE1MRWxlbWVudH0gZWxlbWVudFxuICogQHJldHVybnMge3t9fVxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0X2N1c3RvbV9lbGVtZW50c19zbG90cyhlbGVtZW50KSB7XG5cdGNvbnN0IHJlc3VsdCA9IHt9O1xuXHRlbGVtZW50LmNoaWxkTm9kZXMuZm9yRWFjaChcblx0XHQvKiogQHBhcmFtIHtFbGVtZW50fSBub2RlICovIChub2RlKSA9PiB7XG5cdFx0XHRyZXN1bHRbbm9kZS5zbG90IHx8ICdkZWZhdWx0J10gPSB0cnVlO1xuXHRcdH1cblx0KTtcblx0cmV0dXJuIHJlc3VsdDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNvbnN0cnVjdF9zdmVsdGVfY29tcG9uZW50KGNvbXBvbmVudCwgcHJvcHMpIHtcblx0cmV0dXJuIG5ldyBjb21wb25lbnQocHJvcHMpO1xufVxuXG4vKipcbiAqIEB0eXBlZGVmIHtOb2RlICYge1xuICogXHRjbGFpbV9vcmRlcj86IG51bWJlcjtcbiAqIFx0aHlkcmF0ZV9pbml0PzogdHJ1ZTtcbiAqIFx0YWN0dWFsX2VuZF9jaGlsZD86IE5vZGVFeDtcbiAqIFx0Y2hpbGROb2RlczogTm9kZUxpc3RPZjxOb2RlRXg+O1xuICogfX0gTm9kZUV4XG4gKi9cblxuLyoqIEB0eXBlZGVmIHtDaGlsZE5vZGUgJiBOb2RlRXh9IENoaWxkTm9kZUV4ICovXG5cbi8qKiBAdHlwZWRlZiB7Tm9kZUV4ICYgeyBjbGFpbV9vcmRlcjogbnVtYmVyIH19IE5vZGVFeDIgKi9cblxuLyoqXG4gKiBAdHlwZWRlZiB7Q2hpbGROb2RlRXhbXSAmIHtcbiAqIFx0Y2xhaW1faW5mbz86IHtcbiAqIFx0XHRsYXN0X2luZGV4OiBudW1iZXI7XG4gKiBcdFx0dG90YWxfY2xhaW1lZDogbnVtYmVyO1xuICogXHR9O1xuICogfX0gQ2hpbGROb2RlQXJyYXlcbiAqL1xuIiwgImltcG9ydCB7IGN1c3RvbV9ldmVudCB9IGZyb20gJy4vZG9tLmpzJztcblxuZXhwb3J0IGxldCBjdXJyZW50X2NvbXBvbmVudDtcblxuLyoqIEByZXR1cm5zIHt2b2lkfSAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNldF9jdXJyZW50X2NvbXBvbmVudChjb21wb25lbnQpIHtcblx0Y3VycmVudF9jb21wb25lbnQgPSBjb21wb25lbnQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRfY3VycmVudF9jb21wb25lbnQoKSB7XG5cdGlmICghY3VycmVudF9jb21wb25lbnQpIHRocm93IG5ldyBFcnJvcignRnVuY3Rpb24gY2FsbGVkIG91dHNpZGUgY29tcG9uZW50IGluaXRpYWxpemF0aW9uJyk7XG5cdHJldHVybiBjdXJyZW50X2NvbXBvbmVudDtcbn1cblxuLyoqXG4gKiBTY2hlZHVsZXMgYSBjYWxsYmFjayB0byBydW4gaW1tZWRpYXRlbHkgYmVmb3JlIHRoZSBjb21wb25lbnQgaXMgdXBkYXRlZCBhZnRlciBhbnkgc3RhdGUgY2hhbmdlLlxuICpcbiAqIFRoZSBmaXJzdCB0aW1lIHRoZSBjYWxsYmFjayBydW5zIHdpbGwgYmUgYmVmb3JlIHRoZSBpbml0aWFsIGBvbk1vdW50YFxuICpcbiAqIGh0dHBzOi8vc3ZlbHRlLmRldi9kb2NzL3N2ZWx0ZSNiZWZvcmV1cGRhdGVcbiAqIEBwYXJhbSB7KCkgPT4gYW55fSBmblxuICogQHJldHVybnMge3ZvaWR9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBiZWZvcmVVcGRhdGUoZm4pIHtcblx0Z2V0X2N1cnJlbnRfY29tcG9uZW50KCkuJCQuYmVmb3JlX3VwZGF0ZS5wdXNoKGZuKTtcbn1cblxuLyoqXG4gKiBUaGUgYG9uTW91bnRgIGZ1bmN0aW9uIHNjaGVkdWxlcyBhIGNhbGxiYWNrIHRvIHJ1biBhcyBzb29uIGFzIHRoZSBjb21wb25lbnQgaGFzIGJlZW4gbW91bnRlZCB0byB0aGUgRE9NLlxuICogSXQgbXVzdCBiZSBjYWxsZWQgZHVyaW5nIHRoZSBjb21wb25lbnQncyBpbml0aWFsaXNhdGlvbiAoYnV0IGRvZXNuJ3QgbmVlZCB0byBsaXZlICppbnNpZGUqIHRoZSBjb21wb25lbnQ7XG4gKiBpdCBjYW4gYmUgY2FsbGVkIGZyb20gYW4gZXh0ZXJuYWwgbW9kdWxlKS5cbiAqXG4gKiBJZiBhIGZ1bmN0aW9uIGlzIHJldHVybmVkIF9zeW5jaHJvbm91c2x5XyBmcm9tIGBvbk1vdW50YCwgaXQgd2lsbCBiZSBjYWxsZWQgd2hlbiB0aGUgY29tcG9uZW50IGlzIHVubW91bnRlZC5cbiAqXG4gKiBgb25Nb3VudGAgZG9lcyBub3QgcnVuIGluc2lkZSBhIFtzZXJ2ZXItc2lkZSBjb21wb25lbnRdKGh0dHBzOi8vc3ZlbHRlLmRldi9kb2NzI3J1bi10aW1lLXNlcnZlci1zaWRlLWNvbXBvbmVudC1hcGkpLlxuICpcbiAqIGh0dHBzOi8vc3ZlbHRlLmRldi9kb2NzL3N2ZWx0ZSNvbm1vdW50XG4gKiBAdGVtcGxhdGUgVFxuICogQHBhcmFtIHsoKSA9PiBpbXBvcnQoJy4vcHJpdmF0ZS5qcycpLk5vdEZ1bmN0aW9uPFQ+IHwgUHJvbWlzZTxpbXBvcnQoJy4vcHJpdmF0ZS5qcycpLk5vdEZ1bmN0aW9uPFQ+PiB8ICgoKSA9PiBhbnkpfSBmblxuICogQHJldHVybnMge3ZvaWR9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBvbk1vdW50KGZuKSB7XG5cdGdldF9jdXJyZW50X2NvbXBvbmVudCgpLiQkLm9uX21vdW50LnB1c2goZm4pO1xufVxuXG4vKipcbiAqIFNjaGVkdWxlcyBhIGNhbGxiYWNrIHRvIHJ1biBpbW1lZGlhdGVseSBhZnRlciB0aGUgY29tcG9uZW50IGhhcyBiZWVuIHVwZGF0ZWQuXG4gKlxuICogVGhlIGZpcnN0IHRpbWUgdGhlIGNhbGxiYWNrIHJ1bnMgd2lsbCBiZSBhZnRlciB0aGUgaW5pdGlhbCBgb25Nb3VudGBcbiAqXG4gKiBodHRwczovL3N2ZWx0ZS5kZXYvZG9jcy9zdmVsdGUjYWZ0ZXJ1cGRhdGVcbiAqIEBwYXJhbSB7KCkgPT4gYW55fSBmblxuICogQHJldHVybnMge3ZvaWR9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBhZnRlclVwZGF0ZShmbikge1xuXHRnZXRfY3VycmVudF9jb21wb25lbnQoKS4kJC5hZnRlcl91cGRhdGUucHVzaChmbik7XG59XG5cbi8qKlxuICogU2NoZWR1bGVzIGEgY2FsbGJhY2sgdG8gcnVuIGltbWVkaWF0ZWx5IGJlZm9yZSB0aGUgY29tcG9uZW50IGlzIHVubW91bnRlZC5cbiAqXG4gKiBPdXQgb2YgYG9uTW91bnRgLCBgYmVmb3JlVXBkYXRlYCwgYGFmdGVyVXBkYXRlYCBhbmQgYG9uRGVzdHJveWAsIHRoaXMgaXMgdGhlXG4gKiBvbmx5IG9uZSB0aGF0IHJ1bnMgaW5zaWRlIGEgc2VydmVyLXNpZGUgY29tcG9uZW50LlxuICpcbiAqIGh0dHBzOi8vc3ZlbHRlLmRldi9kb2NzL3N2ZWx0ZSNvbmRlc3Ryb3lcbiAqIEBwYXJhbSB7KCkgPT4gYW55fSBmblxuICogQHJldHVybnMge3ZvaWR9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBvbkRlc3Ryb3koZm4pIHtcblx0Z2V0X2N1cnJlbnRfY29tcG9uZW50KCkuJCQub25fZGVzdHJveS5wdXNoKGZuKTtcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGFuIGV2ZW50IGRpc3BhdGNoZXIgdGhhdCBjYW4gYmUgdXNlZCB0byBkaXNwYXRjaCBbY29tcG9uZW50IGV2ZW50c10oaHR0cHM6Ly9zdmVsdGUuZGV2L2RvY3MjdGVtcGxhdGUtc3ludGF4LWNvbXBvbmVudC1kaXJlY3RpdmVzLW9uLWV2ZW50bmFtZSkuXG4gKiBFdmVudCBkaXNwYXRjaGVycyBhcmUgZnVuY3Rpb25zIHRoYXQgY2FuIHRha2UgdHdvIGFyZ3VtZW50czogYG5hbWVgIGFuZCBgZGV0YWlsYC5cbiAqXG4gKiBDb21wb25lbnQgZXZlbnRzIGNyZWF0ZWQgd2l0aCBgY3JlYXRlRXZlbnREaXNwYXRjaGVyYCBjcmVhdGUgYVxuICogW0N1c3RvbUV2ZW50XShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvQ3VzdG9tRXZlbnQpLlxuICogVGhlc2UgZXZlbnRzIGRvIG5vdCBbYnViYmxlXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL0xlYXJuL0phdmFTY3JpcHQvQnVpbGRpbmdfYmxvY2tzL0V2ZW50cyNFdmVudF9idWJibGluZ19hbmRfY2FwdHVyZSkuXG4gKiBUaGUgYGRldGFpbGAgYXJndW1lbnQgY29ycmVzcG9uZHMgdG8gdGhlIFtDdXN0b21FdmVudC5kZXRhaWxdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9DdXN0b21FdmVudC9kZXRhaWwpXG4gKiBwcm9wZXJ0eSBhbmQgY2FuIGNvbnRhaW4gYW55IHR5cGUgb2YgZGF0YS5cbiAqXG4gKiBUaGUgZXZlbnQgZGlzcGF0Y2hlciBjYW4gYmUgdHlwZWQgdG8gbmFycm93IHRoZSBhbGxvd2VkIGV2ZW50IG5hbWVzIGFuZCB0aGUgdHlwZSBvZiB0aGUgYGRldGFpbGAgYXJndW1lbnQ6XG4gKiBgYGB0c1xuICogY29uc3QgZGlzcGF0Y2ggPSBjcmVhdGVFdmVudERpc3BhdGNoZXI8e1xuICogIGxvYWRlZDogbmV2ZXI7IC8vIGRvZXMgbm90IHRha2UgYSBkZXRhaWwgYXJndW1lbnRcbiAqICBjaGFuZ2U6IHN0cmluZzsgLy8gdGFrZXMgYSBkZXRhaWwgYXJndW1lbnQgb2YgdHlwZSBzdHJpbmcsIHdoaWNoIGlzIHJlcXVpcmVkXG4gKiAgb3B0aW9uYWw6IG51bWJlciB8IG51bGw7IC8vIHRha2VzIGFuIG9wdGlvbmFsIGRldGFpbCBhcmd1bWVudCBvZiB0eXBlIG51bWJlclxuICogfT4oKTtcbiAqIGBgYFxuICpcbiAqIGh0dHBzOi8vc3ZlbHRlLmRldi9kb2NzL3N2ZWx0ZSNjcmVhdGVldmVudGRpc3BhdGNoZXJcbiAqIEB0ZW1wbGF0ZSB7UmVjb3JkPHN0cmluZywgYW55Pn0gW0V2ZW50TWFwPWFueV1cbiAqIEByZXR1cm5zIHtpbXBvcnQoJy4vcHVibGljLmpzJykuRXZlbnREaXNwYXRjaGVyPEV2ZW50TWFwPn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUV2ZW50RGlzcGF0Y2hlcigpIHtcblx0Y29uc3QgY29tcG9uZW50ID0gZ2V0X2N1cnJlbnRfY29tcG9uZW50KCk7XG5cdHJldHVybiAodHlwZSwgZGV0YWlsLCB7IGNhbmNlbGFibGUgPSBmYWxzZSB9ID0ge30pID0+IHtcblx0XHRjb25zdCBjYWxsYmFja3MgPSBjb21wb25lbnQuJCQuY2FsbGJhY2tzW3R5cGVdO1xuXHRcdGlmIChjYWxsYmFja3MpIHtcblx0XHRcdC8vIFRPRE8gYXJlIHRoZXJlIHNpdHVhdGlvbnMgd2hlcmUgZXZlbnRzIGNvdWxkIGJlIGRpc3BhdGNoZWRcblx0XHRcdC8vIGluIGEgc2VydmVyIChub24tRE9NKSBlbnZpcm9ubWVudD9cblx0XHRcdGNvbnN0IGV2ZW50ID0gY3VzdG9tX2V2ZW50KC8qKiBAdHlwZSB7c3RyaW5nfSAqLyAodHlwZSksIGRldGFpbCwgeyBjYW5jZWxhYmxlIH0pO1xuXHRcdFx0Y2FsbGJhY2tzLnNsaWNlKCkuZm9yRWFjaCgoZm4pID0+IHtcblx0XHRcdFx0Zm4uY2FsbChjb21wb25lbnQsIGV2ZW50KTtcblx0XHRcdH0pO1xuXHRcdFx0cmV0dXJuICFldmVudC5kZWZhdWx0UHJldmVudGVkO1xuXHRcdH1cblx0XHRyZXR1cm4gdHJ1ZTtcblx0fTtcbn1cblxuLyoqXG4gKiBBc3NvY2lhdGVzIGFuIGFyYml0cmFyeSBgY29udGV4dGAgb2JqZWN0IHdpdGggdGhlIGN1cnJlbnQgY29tcG9uZW50IGFuZCB0aGUgc3BlY2lmaWVkIGBrZXlgXG4gKiBhbmQgcmV0dXJucyB0aGF0IG9iamVjdC4gVGhlIGNvbnRleHQgaXMgdGhlbiBhdmFpbGFibGUgdG8gY2hpbGRyZW4gb2YgdGhlIGNvbXBvbmVudFxuICogKGluY2x1ZGluZyBzbG90dGVkIGNvbnRlbnQpIHdpdGggYGdldENvbnRleHRgLlxuICpcbiAqIExpa2UgbGlmZWN5Y2xlIGZ1bmN0aW9ucywgdGhpcyBtdXN0IGJlIGNhbGxlZCBkdXJpbmcgY29tcG9uZW50IGluaXRpYWxpc2F0aW9uLlxuICpcbiAqIGh0dHBzOi8vc3ZlbHRlLmRldi9kb2NzL3N2ZWx0ZSNzZXRjb250ZXh0XG4gKiBAdGVtcGxhdGUgVFxuICogQHBhcmFtIHthbnl9IGtleVxuICogQHBhcmFtIHtUfSBjb250ZXh0XG4gKiBAcmV0dXJucyB7VH1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNldENvbnRleHQoa2V5LCBjb250ZXh0KSB7XG5cdGdldF9jdXJyZW50X2NvbXBvbmVudCgpLiQkLmNvbnRleHQuc2V0KGtleSwgY29udGV4dCk7XG5cdHJldHVybiBjb250ZXh0O1xufVxuXG4vKipcbiAqIFJldHJpZXZlcyB0aGUgY29udGV4dCB0aGF0IGJlbG9uZ3MgdG8gdGhlIGNsb3Nlc3QgcGFyZW50IGNvbXBvbmVudCB3aXRoIHRoZSBzcGVjaWZpZWQgYGtleWAuXG4gKiBNdXN0IGJlIGNhbGxlZCBkdXJpbmcgY29tcG9uZW50IGluaXRpYWxpc2F0aW9uLlxuICpcbiAqIGh0dHBzOi8vc3ZlbHRlLmRldi9kb2NzL3N2ZWx0ZSNnZXRjb250ZXh0XG4gKiBAdGVtcGxhdGUgVFxuICogQHBhcmFtIHthbnl9IGtleVxuICogQHJldHVybnMge1R9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRDb250ZXh0KGtleSkge1xuXHRyZXR1cm4gZ2V0X2N1cnJlbnRfY29tcG9uZW50KCkuJCQuY29udGV4dC5nZXQoa2V5KTtcbn1cblxuLyoqXG4gKiBSZXRyaWV2ZXMgdGhlIHdob2xlIGNvbnRleHQgbWFwIHRoYXQgYmVsb25ncyB0byB0aGUgY2xvc2VzdCBwYXJlbnQgY29tcG9uZW50LlxuICogTXVzdCBiZSBjYWxsZWQgZHVyaW5nIGNvbXBvbmVudCBpbml0aWFsaXNhdGlvbi4gVXNlZnVsLCBmb3IgZXhhbXBsZSwgaWYgeW91XG4gKiBwcm9ncmFtbWF0aWNhbGx5IGNyZWF0ZSBhIGNvbXBvbmVudCBhbmQgd2FudCB0byBwYXNzIHRoZSBleGlzdGluZyBjb250ZXh0IHRvIGl0LlxuICpcbiAqIGh0dHBzOi8vc3ZlbHRlLmRldi9kb2NzL3N2ZWx0ZSNnZXRhbGxjb250ZXh0c1xuICogQHRlbXBsYXRlIHtNYXA8YW55LCBhbnk+fSBbVD1NYXA8YW55LCBhbnk+XVxuICogQHJldHVybnMge1R9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRBbGxDb250ZXh0cygpIHtcblx0cmV0dXJuIGdldF9jdXJyZW50X2NvbXBvbmVudCgpLiQkLmNvbnRleHQ7XG59XG5cbi8qKlxuICogQ2hlY2tzIHdoZXRoZXIgYSBnaXZlbiBga2V5YCBoYXMgYmVlbiBzZXQgaW4gdGhlIGNvbnRleHQgb2YgYSBwYXJlbnQgY29tcG9uZW50LlxuICogTXVzdCBiZSBjYWxsZWQgZHVyaW5nIGNvbXBvbmVudCBpbml0aWFsaXNhdGlvbi5cbiAqXG4gKiBodHRwczovL3N2ZWx0ZS5kZXYvZG9jcy9zdmVsdGUjaGFzY29udGV4dFxuICogQHBhcmFtIHthbnl9IGtleVxuICogQHJldHVybnMge2Jvb2xlYW59XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBoYXNDb250ZXh0KGtleSkge1xuXHRyZXR1cm4gZ2V0X2N1cnJlbnRfY29tcG9uZW50KCkuJCQuY29udGV4dC5oYXMoa2V5KTtcbn1cblxuLy8gVE9ETyBmaWd1cmUgb3V0IGlmIHdlIHN0aWxsIHdhbnQgdG8gc3VwcG9ydFxuLy8gc2hvcnRoYW5kIGV2ZW50cywgb3IgaWYgd2Ugd2FudCB0byBpbXBsZW1lbnRcbi8vIGEgcmVhbCBidWJibGluZyBtZWNoYW5pc21cbi8qKlxuICogQHBhcmFtIGNvbXBvbmVudFxuICogQHBhcmFtIGV2ZW50XG4gKiBAcmV0dXJucyB7dm9pZH1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGJ1YmJsZShjb21wb25lbnQsIGV2ZW50KSB7XG5cdGNvbnN0IGNhbGxiYWNrcyA9IGNvbXBvbmVudC4kJC5jYWxsYmFja3NbZXZlbnQudHlwZV07XG5cdGlmIChjYWxsYmFja3MpIHtcblx0XHQvLyBAdHMtaWdub3JlXG5cdFx0Y2FsbGJhY2tzLnNsaWNlKCkuZm9yRWFjaCgoZm4pID0+IGZuLmNhbGwodGhpcywgZXZlbnQpKTtcblx0fVxufVxuIiwgImltcG9ydCB7IHJ1bl9hbGwgfSBmcm9tICcuL3V0aWxzLmpzJztcbmltcG9ydCB7IGN1cnJlbnRfY29tcG9uZW50LCBzZXRfY3VycmVudF9jb21wb25lbnQgfSBmcm9tICcuL2xpZmVjeWNsZS5qcyc7XG5cbmV4cG9ydCBjb25zdCBkaXJ0eV9jb21wb25lbnRzID0gW107XG5leHBvcnQgY29uc3QgaW50cm9zID0geyBlbmFibGVkOiBmYWxzZSB9O1xuZXhwb3J0IGNvbnN0IGJpbmRpbmdfY2FsbGJhY2tzID0gW107XG5cbmxldCByZW5kZXJfY2FsbGJhY2tzID0gW107XG5cbmNvbnN0IGZsdXNoX2NhbGxiYWNrcyA9IFtdO1xuXG5jb25zdCByZXNvbHZlZF9wcm9taXNlID0gLyogQF9fUFVSRV9fICovIFByb21pc2UucmVzb2x2ZSgpO1xuXG5sZXQgdXBkYXRlX3NjaGVkdWxlZCA9IGZhbHNlO1xuXG4vKiogQHJldHVybnMge3ZvaWR9ICovXG5leHBvcnQgZnVuY3Rpb24gc2NoZWR1bGVfdXBkYXRlKCkge1xuXHRpZiAoIXVwZGF0ZV9zY2hlZHVsZWQpIHtcblx0XHR1cGRhdGVfc2NoZWR1bGVkID0gdHJ1ZTtcblx0XHRyZXNvbHZlZF9wcm9taXNlLnRoZW4oZmx1c2gpO1xuXHR9XG59XG5cbi8qKiBAcmV0dXJucyB7UHJvbWlzZTx2b2lkPn0gKi9cbmV4cG9ydCBmdW5jdGlvbiB0aWNrKCkge1xuXHRzY2hlZHVsZV91cGRhdGUoKTtcblx0cmV0dXJuIHJlc29sdmVkX3Byb21pc2U7XG59XG5cbi8qKiBAcmV0dXJucyB7dm9pZH0gKi9cbmV4cG9ydCBmdW5jdGlvbiBhZGRfcmVuZGVyX2NhbGxiYWNrKGZuKSB7XG5cdHJlbmRlcl9jYWxsYmFja3MucHVzaChmbik7XG59XG5cbi8qKiBAcmV0dXJucyB7dm9pZH0gKi9cbmV4cG9ydCBmdW5jdGlvbiBhZGRfZmx1c2hfY2FsbGJhY2soZm4pIHtcblx0Zmx1c2hfY2FsbGJhY2tzLnB1c2goZm4pO1xufVxuXG4vLyBmbHVzaCgpIGNhbGxzIGNhbGxiYWNrcyBpbiB0aGlzIG9yZGVyOlxuLy8gMS4gQWxsIGJlZm9yZVVwZGF0ZSBjYWxsYmFja3MsIGluIG9yZGVyOiBwYXJlbnRzIGJlZm9yZSBjaGlsZHJlblxuLy8gMi4gQWxsIGJpbmQ6dGhpcyBjYWxsYmFja3MsIGluIHJldmVyc2Ugb3JkZXI6IGNoaWxkcmVuIGJlZm9yZSBwYXJlbnRzLlxuLy8gMy4gQWxsIGFmdGVyVXBkYXRlIGNhbGxiYWNrcywgaW4gb3JkZXI6IHBhcmVudHMgYmVmb3JlIGNoaWxkcmVuLiBFWENFUFRcbi8vICAgIGZvciBhZnRlclVwZGF0ZXMgY2FsbGVkIGR1cmluZyB0aGUgaW5pdGlhbCBvbk1vdW50LCB3aGljaCBhcmUgY2FsbGVkIGluXG4vLyAgICByZXZlcnNlIG9yZGVyOiBjaGlsZHJlbiBiZWZvcmUgcGFyZW50cy5cbi8vIFNpbmNlIGNhbGxiYWNrcyBtaWdodCB1cGRhdGUgY29tcG9uZW50IHZhbHVlcywgd2hpY2ggY291bGQgdHJpZ2dlciBhbm90aGVyXG4vLyBjYWxsIHRvIGZsdXNoKCksIHRoZSBmb2xsb3dpbmcgc3RlcHMgZ3VhcmQgYWdhaW5zdCB0aGlzOlxuLy8gMS4gRHVyaW5nIGJlZm9yZVVwZGF0ZSwgYW55IHVwZGF0ZWQgY29tcG9uZW50cyB3aWxsIGJlIGFkZGVkIHRvIHRoZVxuLy8gICAgZGlydHlfY29tcG9uZW50cyBhcnJheSBhbmQgd2lsbCBjYXVzZSBhIHJlZW50cmFudCBjYWxsIHRvIGZsdXNoKCkuIEJlY2F1c2Vcbi8vICAgIHRoZSBmbHVzaCBpbmRleCBpcyBrZXB0IG91dHNpZGUgdGhlIGZ1bmN0aW9uLCB0aGUgcmVlbnRyYW50IGNhbGwgd2lsbCBwaWNrXG4vLyAgICB1cCB3aGVyZSB0aGUgZWFybGllciBjYWxsIGxlZnQgb2ZmIGFuZCBnbyB0aHJvdWdoIGFsbCBkaXJ0eSBjb21wb25lbnRzLiBUaGVcbi8vICAgIGN1cnJlbnRfY29tcG9uZW50IHZhbHVlIGlzIHNhdmVkIGFuZCByZXN0b3JlZCBzbyB0aGF0IHRoZSByZWVudHJhbnQgY2FsbCB3aWxsXG4vLyAgICBub3QgaW50ZXJmZXJlIHdpdGggdGhlIFwicGFyZW50XCIgZmx1c2goKSBjYWxsLlxuLy8gMi4gYmluZDp0aGlzIGNhbGxiYWNrcyBjYW5ub3QgdHJpZ2dlciBuZXcgZmx1c2goKSBjYWxscy5cbi8vIDMuIER1cmluZyBhZnRlclVwZGF0ZSwgYW55IHVwZGF0ZWQgY29tcG9uZW50cyB3aWxsIE5PVCBoYXZlIHRoZWlyIGFmdGVyVXBkYXRlXG4vLyAgICBjYWxsYmFjayBjYWxsZWQgYSBzZWNvbmQgdGltZTsgdGhlIHNlZW5fY2FsbGJhY2tzIHNldCwgb3V0c2lkZSB0aGUgZmx1c2goKVxuLy8gICAgZnVuY3Rpb24sIGd1YXJhbnRlZXMgdGhpcyBiZWhhdmlvci5cbmNvbnN0IHNlZW5fY2FsbGJhY2tzID0gbmV3IFNldCgpO1xuXG5sZXQgZmx1c2hpZHggPSAwOyAvLyBEbyAqbm90KiBtb3ZlIHRoaXMgaW5zaWRlIHRoZSBmbHVzaCgpIGZ1bmN0aW9uXG5cbi8qKiBAcmV0dXJucyB7dm9pZH0gKi9cbmV4cG9ydCBmdW5jdGlvbiBmbHVzaCgpIHtcblx0Ly8gRG8gbm90IHJlZW50ZXIgZmx1c2ggd2hpbGUgZGlydHkgY29tcG9uZW50cyBhcmUgdXBkYXRlZCwgYXMgdGhpcyBjYW5cblx0Ly8gcmVzdWx0IGluIGFuIGluZmluaXRlIGxvb3AuIEluc3RlYWQsIGxldCB0aGUgaW5uZXIgZmx1c2ggaGFuZGxlIGl0LlxuXHQvLyBSZWVudHJhbmN5IGlzIG9rIGFmdGVyd2FyZHMgZm9yIGJpbmRpbmdzIGV0Yy5cblx0aWYgKGZsdXNoaWR4ICE9PSAwKSB7XG5cdFx0cmV0dXJuO1xuXHR9XG5cdGNvbnN0IHNhdmVkX2NvbXBvbmVudCA9IGN1cnJlbnRfY29tcG9uZW50O1xuXHRkbyB7XG5cdFx0Ly8gZmlyc3QsIGNhbGwgYmVmb3JlVXBkYXRlIGZ1bmN0aW9uc1xuXHRcdC8vIGFuZCB1cGRhdGUgY29tcG9uZW50c1xuXHRcdHRyeSB7XG5cdFx0XHR3aGlsZSAoZmx1c2hpZHggPCBkaXJ0eV9jb21wb25lbnRzLmxlbmd0aCkge1xuXHRcdFx0XHRjb25zdCBjb21wb25lbnQgPSBkaXJ0eV9jb21wb25lbnRzW2ZsdXNoaWR4XTtcblx0XHRcdFx0Zmx1c2hpZHgrKztcblx0XHRcdFx0c2V0X2N1cnJlbnRfY29tcG9uZW50KGNvbXBvbmVudCk7XG5cdFx0XHRcdHVwZGF0ZShjb21wb25lbnQuJCQpO1xuXHRcdFx0fVxuXHRcdH0gY2F0Y2ggKGUpIHtcblx0XHRcdC8vIHJlc2V0IGRpcnR5IHN0YXRlIHRvIG5vdCBlbmQgdXAgaW4gYSBkZWFkbG9ja2VkIHN0YXRlIGFuZCB0aGVuIHJldGhyb3dcblx0XHRcdGRpcnR5X2NvbXBvbmVudHMubGVuZ3RoID0gMDtcblx0XHRcdGZsdXNoaWR4ID0gMDtcblx0XHRcdHRocm93IGU7XG5cdFx0fVxuXHRcdHNldF9jdXJyZW50X2NvbXBvbmVudChudWxsKTtcblx0XHRkaXJ0eV9jb21wb25lbnRzLmxlbmd0aCA9IDA7XG5cdFx0Zmx1c2hpZHggPSAwO1xuXHRcdHdoaWxlIChiaW5kaW5nX2NhbGxiYWNrcy5sZW5ndGgpIGJpbmRpbmdfY2FsbGJhY2tzLnBvcCgpKCk7XG5cdFx0Ly8gdGhlbiwgb25jZSBjb21wb25lbnRzIGFyZSB1cGRhdGVkLCBjYWxsXG5cdFx0Ly8gYWZ0ZXJVcGRhdGUgZnVuY3Rpb25zLiBUaGlzIG1heSBjYXVzZVxuXHRcdC8vIHN1YnNlcXVlbnQgdXBkYXRlcy4uLlxuXHRcdGZvciAobGV0IGkgPSAwOyBpIDwgcmVuZGVyX2NhbGxiYWNrcy5sZW5ndGg7IGkgKz0gMSkge1xuXHRcdFx0Y29uc3QgY2FsbGJhY2sgPSByZW5kZXJfY2FsbGJhY2tzW2ldO1xuXHRcdFx0aWYgKCFzZWVuX2NhbGxiYWNrcy5oYXMoY2FsbGJhY2spKSB7XG5cdFx0XHRcdC8vIC4uLnNvIGd1YXJkIGFnYWluc3QgaW5maW5pdGUgbG9vcHNcblx0XHRcdFx0c2Vlbl9jYWxsYmFja3MuYWRkKGNhbGxiYWNrKTtcblx0XHRcdFx0Y2FsbGJhY2soKTtcblx0XHRcdH1cblx0XHR9XG5cdFx0cmVuZGVyX2NhbGxiYWNrcy5sZW5ndGggPSAwO1xuXHR9IHdoaWxlIChkaXJ0eV9jb21wb25lbnRzLmxlbmd0aCk7XG5cdHdoaWxlIChmbHVzaF9jYWxsYmFja3MubGVuZ3RoKSB7XG5cdFx0Zmx1c2hfY2FsbGJhY2tzLnBvcCgpKCk7XG5cdH1cblx0dXBkYXRlX3NjaGVkdWxlZCA9IGZhbHNlO1xuXHRzZWVuX2NhbGxiYWNrcy5jbGVhcigpO1xuXHRzZXRfY3VycmVudF9jb21wb25lbnQoc2F2ZWRfY29tcG9uZW50KTtcbn1cblxuLyoqIEByZXR1cm5zIHt2b2lkfSAqL1xuZnVuY3Rpb24gdXBkYXRlKCQkKSB7XG5cdGlmICgkJC5mcmFnbWVudCAhPT0gbnVsbCkge1xuXHRcdCQkLnVwZGF0ZSgpO1xuXHRcdHJ1bl9hbGwoJCQuYmVmb3JlX3VwZGF0ZSk7XG5cdFx0Y29uc3QgZGlydHkgPSAkJC5kaXJ0eTtcblx0XHQkJC5kaXJ0eSA9IFstMV07XG5cdFx0JCQuZnJhZ21lbnQgJiYgJCQuZnJhZ21lbnQucCgkJC5jdHgsIGRpcnR5KTtcblx0XHQkJC5hZnRlcl91cGRhdGUuZm9yRWFjaChhZGRfcmVuZGVyX2NhbGxiYWNrKTtcblx0fVxufVxuXG4vKipcbiAqIFVzZWZ1bCBmb3IgZXhhbXBsZSB0byBleGVjdXRlIHJlbWFpbmluZyBgYWZ0ZXJVcGRhdGVgIGNhbGxiYWNrcyBiZWZvcmUgZXhlY3V0aW5nIGBkZXN0cm95YC5cbiAqIEBwYXJhbSB7RnVuY3Rpb25bXX0gZm5zXG4gKiBAcmV0dXJucyB7dm9pZH1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGZsdXNoX3JlbmRlcl9jYWxsYmFja3MoZm5zKSB7XG5cdGNvbnN0IGZpbHRlcmVkID0gW107XG5cdGNvbnN0IHRhcmdldHMgPSBbXTtcblx0cmVuZGVyX2NhbGxiYWNrcy5mb3JFYWNoKChjKSA9PiAoZm5zLmluZGV4T2YoYykgPT09IC0xID8gZmlsdGVyZWQucHVzaChjKSA6IHRhcmdldHMucHVzaChjKSkpO1xuXHR0YXJnZXRzLmZvckVhY2goKGMpID0+IGMoKSk7XG5cdHJlbmRlcl9jYWxsYmFja3MgPSBmaWx0ZXJlZDtcbn1cbiIsICJpbXBvcnQgeyBpZGVudGl0eSBhcyBsaW5lYXIsIGlzX2Z1bmN0aW9uLCBub29wLCBydW5fYWxsIH0gZnJvbSAnLi91dGlscy5qcyc7XG5pbXBvcnQgeyBub3cgfSBmcm9tICcuL2Vudmlyb25tZW50LmpzJztcbmltcG9ydCB7IGxvb3AgfSBmcm9tICcuL2xvb3AuanMnO1xuaW1wb3J0IHsgY3JlYXRlX3J1bGUsIGRlbGV0ZV9ydWxlIH0gZnJvbSAnLi9zdHlsZV9tYW5hZ2VyLmpzJztcbmltcG9ydCB7IGN1c3RvbV9ldmVudCB9IGZyb20gJy4vZG9tLmpzJztcbmltcG9ydCB7IGFkZF9yZW5kZXJfY2FsbGJhY2sgfSBmcm9tICcuL3NjaGVkdWxlci5qcyc7XG5cbi8qKlxuICogQHR5cGUge1Byb21pc2U8dm9pZD4gfCBudWxsfVxuICovXG5sZXQgcHJvbWlzZTtcblxuLyoqXG4gKiBAcmV0dXJucyB7UHJvbWlzZTx2b2lkPn1cbiAqL1xuZnVuY3Rpb24gd2FpdCgpIHtcblx0aWYgKCFwcm9taXNlKSB7XG5cdFx0cHJvbWlzZSA9IFByb21pc2UucmVzb2x2ZSgpO1xuXHRcdHByb21pc2UudGhlbigoKSA9PiB7XG5cdFx0XHRwcm9taXNlID0gbnVsbDtcblx0XHR9KTtcblx0fVxuXHRyZXR1cm4gcHJvbWlzZTtcbn1cblxuLyoqXG4gKiBAcGFyYW0ge0VsZW1lbnR9IG5vZGVcbiAqIEBwYXJhbSB7SU5UUk8gfCBPVVRSTyB8IGJvb2xlYW59IGRpcmVjdGlvblxuICogQHBhcmFtIHsnc3RhcnQnIHwgJ2VuZCd9IGtpbmRcbiAqIEByZXR1cm5zIHt2b2lkfVxuICovXG5mdW5jdGlvbiBkaXNwYXRjaChub2RlLCBkaXJlY3Rpb24sIGtpbmQpIHtcblx0bm9kZS5kaXNwYXRjaEV2ZW50KGN1c3RvbV9ldmVudChgJHtkaXJlY3Rpb24gPyAnaW50cm8nIDogJ291dHJvJ30ke2tpbmR9YCkpO1xufVxuXG5jb25zdCBvdXRyb2luZyA9IG5ldyBTZXQoKTtcblxuLyoqXG4gKiBAdHlwZSB7T3V0cm99XG4gKi9cbmxldCBvdXRyb3M7XG5cbi8qKlxuICogQHJldHVybnMge3ZvaWR9ICovXG5leHBvcnQgZnVuY3Rpb24gZ3JvdXBfb3V0cm9zKCkge1xuXHRvdXRyb3MgPSB7XG5cdFx0cjogMCxcblx0XHRjOiBbXSxcblx0XHRwOiBvdXRyb3MgLy8gcGFyZW50IGdyb3VwXG5cdH07XG59XG5cbi8qKlxuICogQHJldHVybnMge3ZvaWR9ICovXG5leHBvcnQgZnVuY3Rpb24gY2hlY2tfb3V0cm9zKCkge1xuXHRpZiAoIW91dHJvcy5yKSB7XG5cdFx0cnVuX2FsbChvdXRyb3MuYyk7XG5cdH1cblx0b3V0cm9zID0gb3V0cm9zLnA7XG59XG5cbi8qKlxuICogQHBhcmFtIHtpbXBvcnQoJy4vcHJpdmF0ZS5qcycpLkZyYWdtZW50fSBibG9ja1xuICogQHBhcmFtIHswIHwgMX0gW2xvY2FsXVxuICogQHJldHVybnMge3ZvaWR9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB0cmFuc2l0aW9uX2luKGJsb2NrLCBsb2NhbCkge1xuXHRpZiAoYmxvY2sgJiYgYmxvY2suaSkge1xuXHRcdG91dHJvaW5nLmRlbGV0ZShibG9jayk7XG5cdFx0YmxvY2suaShsb2NhbCk7XG5cdH1cbn1cblxuLyoqXG4gKiBAcGFyYW0ge2ltcG9ydCgnLi9wcml2YXRlLmpzJykuRnJhZ21lbnR9IGJsb2NrXG4gKiBAcGFyYW0gezAgfCAxfSBsb2NhbFxuICogQHBhcmFtIHswIHwgMX0gW2RldGFjaF1cbiAqIEBwYXJhbSB7KCkgPT4gdm9pZH0gW2NhbGxiYWNrXVxuICogQHJldHVybnMge3ZvaWR9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB0cmFuc2l0aW9uX291dChibG9jaywgbG9jYWwsIGRldGFjaCwgY2FsbGJhY2spIHtcblx0aWYgKGJsb2NrICYmIGJsb2NrLm8pIHtcblx0XHRpZiAob3V0cm9pbmcuaGFzKGJsb2NrKSkgcmV0dXJuO1xuXHRcdG91dHJvaW5nLmFkZChibG9jayk7XG5cdFx0b3V0cm9zLmMucHVzaCgoKSA9PiB7XG5cdFx0XHRvdXRyb2luZy5kZWxldGUoYmxvY2spO1xuXHRcdFx0aWYgKGNhbGxiYWNrKSB7XG5cdFx0XHRcdGlmIChkZXRhY2gpIGJsb2NrLmQoMSk7XG5cdFx0XHRcdGNhbGxiYWNrKCk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdFx0YmxvY2subyhsb2NhbCk7XG5cdH0gZWxzZSBpZiAoY2FsbGJhY2spIHtcblx0XHRjYWxsYmFjaygpO1xuXHR9XG59XG5cbi8qKlxuICogQHR5cGUge2ltcG9ydCgnLi4vdHJhbnNpdGlvbi9wdWJsaWMuanMnKS5UcmFuc2l0aW9uQ29uZmlnfVxuICovXG5jb25zdCBudWxsX3RyYW5zaXRpb24gPSB7IGR1cmF0aW9uOiAwIH07XG5cbi8qKlxuICogQHBhcmFtIHtFbGVtZW50ICYgRWxlbWVudENTU0lubGluZVN0eWxlfSBub2RlXG4gKiBAcGFyYW0ge1RyYW5zaXRpb25Gbn0gZm5cbiAqIEBwYXJhbSB7YW55fSBwYXJhbXNcbiAqIEByZXR1cm5zIHt7IHN0YXJ0KCk6IHZvaWQ7IGludmFsaWRhdGUoKTogdm9pZDsgZW5kKCk6IHZvaWQ7IH19XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVfaW5fdHJhbnNpdGlvbihub2RlLCBmbiwgcGFyYW1zKSB7XG5cdC8qKlxuXHQgKiBAdHlwZSB7VHJhbnNpdGlvbk9wdGlvbnN9ICovXG5cdGNvbnN0IG9wdGlvbnMgPSB7IGRpcmVjdGlvbjogJ2luJyB9O1xuXHRsZXQgY29uZmlnID0gZm4obm9kZSwgcGFyYW1zLCBvcHRpb25zKTtcblx0bGV0IHJ1bm5pbmcgPSBmYWxzZTtcblx0bGV0IGFuaW1hdGlvbl9uYW1lO1xuXHRsZXQgdGFzaztcblx0bGV0IHVpZCA9IDA7XG5cblx0LyoqXG5cdCAqIEByZXR1cm5zIHt2b2lkfSAqL1xuXHRmdW5jdGlvbiBjbGVhbnVwKCkge1xuXHRcdGlmIChhbmltYXRpb25fbmFtZSkgZGVsZXRlX3J1bGUobm9kZSwgYW5pbWF0aW9uX25hbWUpO1xuXHR9XG5cblx0LyoqXG5cdCAqIEByZXR1cm5zIHt2b2lkfSAqL1xuXHRmdW5jdGlvbiBnbygpIHtcblx0XHRjb25zdCB7XG5cdFx0XHRkZWxheSA9IDAsXG5cdFx0XHRkdXJhdGlvbiA9IDMwMCxcblx0XHRcdGVhc2luZyA9IGxpbmVhcixcblx0XHRcdHRpY2sgPSBub29wLFxuXHRcdFx0Y3NzXG5cdFx0fSA9IGNvbmZpZyB8fCBudWxsX3RyYW5zaXRpb247XG5cdFx0aWYgKGNzcykgYW5pbWF0aW9uX25hbWUgPSBjcmVhdGVfcnVsZShub2RlLCAwLCAxLCBkdXJhdGlvbiwgZGVsYXksIGVhc2luZywgY3NzLCB1aWQrKyk7XG5cdFx0dGljaygwLCAxKTtcblx0XHRjb25zdCBzdGFydF90aW1lID0gbm93KCkgKyBkZWxheTtcblx0XHRjb25zdCBlbmRfdGltZSA9IHN0YXJ0X3RpbWUgKyBkdXJhdGlvbjtcblx0XHRpZiAodGFzaykgdGFzay5hYm9ydCgpO1xuXHRcdHJ1bm5pbmcgPSB0cnVlO1xuXHRcdGFkZF9yZW5kZXJfY2FsbGJhY2soKCkgPT4gZGlzcGF0Y2gobm9kZSwgdHJ1ZSwgJ3N0YXJ0JykpO1xuXHRcdHRhc2sgPSBsb29wKChub3cpID0+IHtcblx0XHRcdGlmIChydW5uaW5nKSB7XG5cdFx0XHRcdGlmIChub3cgPj0gZW5kX3RpbWUpIHtcblx0XHRcdFx0XHR0aWNrKDEsIDApO1xuXHRcdFx0XHRcdGRpc3BhdGNoKG5vZGUsIHRydWUsICdlbmQnKTtcblx0XHRcdFx0XHRjbGVhbnVwKCk7XG5cdFx0XHRcdFx0cmV0dXJuIChydW5uaW5nID0gZmFsc2UpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmIChub3cgPj0gc3RhcnRfdGltZSkge1xuXHRcdFx0XHRcdGNvbnN0IHQgPSBlYXNpbmcoKG5vdyAtIHN0YXJ0X3RpbWUpIC8gZHVyYXRpb24pO1xuXHRcdFx0XHRcdHRpY2sodCwgMSAtIHQpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gcnVubmluZztcblx0XHR9KTtcblx0fVxuXHRsZXQgc3RhcnRlZCA9IGZhbHNlO1xuXHRyZXR1cm4ge1xuXHRcdHN0YXJ0KCkge1xuXHRcdFx0aWYgKHN0YXJ0ZWQpIHJldHVybjtcblx0XHRcdHN0YXJ0ZWQgPSB0cnVlO1xuXHRcdFx0ZGVsZXRlX3J1bGUobm9kZSk7XG5cdFx0XHRpZiAoaXNfZnVuY3Rpb24oY29uZmlnKSkge1xuXHRcdFx0XHRjb25maWcgPSBjb25maWcob3B0aW9ucyk7XG5cdFx0XHRcdHdhaXQoKS50aGVuKGdvKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGdvKCk7XG5cdFx0XHR9XG5cdFx0fSxcblx0XHRpbnZhbGlkYXRlKCkge1xuXHRcdFx0c3RhcnRlZCA9IGZhbHNlO1xuXHRcdH0sXG5cdFx0ZW5kKCkge1xuXHRcdFx0aWYgKHJ1bm5pbmcpIHtcblx0XHRcdFx0Y2xlYW51cCgpO1xuXHRcdFx0XHRydW5uaW5nID0gZmFsc2U7XG5cdFx0XHR9XG5cdFx0fVxuXHR9O1xufVxuXG4vKipcbiAqIEBwYXJhbSB7RWxlbWVudCAmIEVsZW1lbnRDU1NJbmxpbmVTdHlsZX0gbm9kZVxuICogQHBhcmFtIHtUcmFuc2l0aW9uRm59IGZuXG4gKiBAcGFyYW0ge2FueX0gcGFyYW1zXG4gKiBAcmV0dXJucyB7eyBlbmQocmVzZXQ6IGFueSk6IHZvaWQ7IH19XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVfb3V0X3RyYW5zaXRpb24obm9kZSwgZm4sIHBhcmFtcykge1xuXHQvKiogQHR5cGUge1RyYW5zaXRpb25PcHRpb25zfSAqL1xuXHRjb25zdCBvcHRpb25zID0geyBkaXJlY3Rpb246ICdvdXQnIH07XG5cdGxldCBjb25maWcgPSBmbihub2RlLCBwYXJhbXMsIG9wdGlvbnMpO1xuXHRsZXQgcnVubmluZyA9IHRydWU7XG5cdGxldCBhbmltYXRpb25fbmFtZTtcblx0Y29uc3QgZ3JvdXAgPSBvdXRyb3M7XG5cdGdyb3VwLnIgKz0gMTtcblx0LyoqIEB0eXBlIHtib29sZWFufSAqL1xuXHRsZXQgb3JpZ2luYWxfaW5lcnRfdmFsdWU7XG5cblx0LyoqXG5cdCAqIEByZXR1cm5zIHt2b2lkfSAqL1xuXHRmdW5jdGlvbiBnbygpIHtcblx0XHRjb25zdCB7XG5cdFx0XHRkZWxheSA9IDAsXG5cdFx0XHRkdXJhdGlvbiA9IDMwMCxcblx0XHRcdGVhc2luZyA9IGxpbmVhcixcblx0XHRcdHRpY2sgPSBub29wLFxuXHRcdFx0Y3NzXG5cdFx0fSA9IGNvbmZpZyB8fCBudWxsX3RyYW5zaXRpb247XG5cblx0XHRpZiAoY3NzKSBhbmltYXRpb25fbmFtZSA9IGNyZWF0ZV9ydWxlKG5vZGUsIDEsIDAsIGR1cmF0aW9uLCBkZWxheSwgZWFzaW5nLCBjc3MpO1xuXG5cdFx0Y29uc3Qgc3RhcnRfdGltZSA9IG5vdygpICsgZGVsYXk7XG5cdFx0Y29uc3QgZW5kX3RpbWUgPSBzdGFydF90aW1lICsgZHVyYXRpb247XG5cdFx0YWRkX3JlbmRlcl9jYWxsYmFjaygoKSA9PiBkaXNwYXRjaChub2RlLCBmYWxzZSwgJ3N0YXJ0JykpO1xuXG5cdFx0aWYgKCdpbmVydCcgaW4gbm9kZSkge1xuXHRcdFx0b3JpZ2luYWxfaW5lcnRfdmFsdWUgPSAvKiogQHR5cGUge0hUTUxFbGVtZW50fSAqLyAobm9kZSkuaW5lcnQ7XG5cdFx0XHRub2RlLmluZXJ0ID0gdHJ1ZTtcblx0XHR9XG5cblx0XHRsb29wKChub3cpID0+IHtcblx0XHRcdGlmIChydW5uaW5nKSB7XG5cdFx0XHRcdGlmIChub3cgPj0gZW5kX3RpbWUpIHtcblx0XHRcdFx0XHR0aWNrKDAsIDEpO1xuXHRcdFx0XHRcdGRpc3BhdGNoKG5vZGUsIGZhbHNlLCAnZW5kJyk7XG5cdFx0XHRcdFx0aWYgKCEtLWdyb3VwLnIpIHtcblx0XHRcdFx0XHRcdC8vIHRoaXMgd2lsbCByZXN1bHQgaW4gYGVuZCgpYCBiZWluZyBjYWxsZWQsXG5cdFx0XHRcdFx0XHQvLyBzbyB3ZSBkb24ndCBuZWVkIHRvIGNsZWFuIHVwIGhlcmVcblx0XHRcdFx0XHRcdHJ1bl9hbGwoZ3JvdXAuYyk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAobm93ID49IHN0YXJ0X3RpbWUpIHtcblx0XHRcdFx0XHRjb25zdCB0ID0gZWFzaW5nKChub3cgLSBzdGFydF90aW1lKSAvIGR1cmF0aW9uKTtcblx0XHRcdFx0XHR0aWNrKDEgLSB0LCB0KTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHJ1bm5pbmc7XG5cdFx0fSk7XG5cdH1cblxuXHRpZiAoaXNfZnVuY3Rpb24oY29uZmlnKSkge1xuXHRcdHdhaXQoKS50aGVuKCgpID0+IHtcblx0XHRcdC8vIEB0cy1pZ25vcmVcblx0XHRcdGNvbmZpZyA9IGNvbmZpZyhvcHRpb25zKTtcblx0XHRcdGdvKCk7XG5cdFx0fSk7XG5cdH0gZWxzZSB7XG5cdFx0Z28oKTtcblx0fVxuXG5cdHJldHVybiB7XG5cdFx0ZW5kKHJlc2V0KSB7XG5cdFx0XHRpZiAocmVzZXQgJiYgJ2luZXJ0JyBpbiBub2RlKSB7XG5cdFx0XHRcdG5vZGUuaW5lcnQgPSBvcmlnaW5hbF9pbmVydF92YWx1ZTtcblx0XHRcdH1cblx0XHRcdGlmIChyZXNldCAmJiBjb25maWcudGljaykge1xuXHRcdFx0XHRjb25maWcudGljaygxLCAwKTtcblx0XHRcdH1cblx0XHRcdGlmIChydW5uaW5nKSB7XG5cdFx0XHRcdGlmIChhbmltYXRpb25fbmFtZSkgZGVsZXRlX3J1bGUobm9kZSwgYW5pbWF0aW9uX25hbWUpO1xuXHRcdFx0XHRydW5uaW5nID0gZmFsc2U7XG5cdFx0XHR9XG5cdFx0fVxuXHR9O1xufVxuXG4vKipcbiAqIEBwYXJhbSB7RWxlbWVudCAmIEVsZW1lbnRDU1NJbmxpbmVTdHlsZX0gbm9kZVxuICogQHBhcmFtIHtUcmFuc2l0aW9uRm59IGZuXG4gKiBAcGFyYW0ge2FueX0gcGFyYW1zXG4gKiBAcGFyYW0ge2Jvb2xlYW59IGludHJvXG4gKiBAcmV0dXJucyB7eyBydW4oYjogMCB8IDEpOiB2b2lkOyBlbmQoKTogdm9pZDsgfX1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZV9iaWRpcmVjdGlvbmFsX3RyYW5zaXRpb24obm9kZSwgZm4sIHBhcmFtcywgaW50cm8pIHtcblx0LyoqXG5cdCAqIEB0eXBlIHtUcmFuc2l0aW9uT3B0aW9uc30gKi9cblx0Y29uc3Qgb3B0aW9ucyA9IHsgZGlyZWN0aW9uOiAnYm90aCcgfTtcblx0bGV0IGNvbmZpZyA9IGZuKG5vZGUsIHBhcmFtcywgb3B0aW9ucyk7XG5cdGxldCB0ID0gaW50cm8gPyAwIDogMTtcblxuXHQvKipcblx0ICogQHR5cGUge1Byb2dyYW0gfCBudWxsfSAqL1xuXHRsZXQgcnVubmluZ19wcm9ncmFtID0gbnVsbDtcblxuXHQvKipcblx0ICogQHR5cGUge1BlbmRpbmdQcm9ncmFtIHwgbnVsbH0gKi9cblx0bGV0IHBlbmRpbmdfcHJvZ3JhbSA9IG51bGw7XG5cdGxldCBhbmltYXRpb25fbmFtZSA9IG51bGw7XG5cblx0LyoqIEB0eXBlIHtib29sZWFufSAqL1xuXHRsZXQgb3JpZ2luYWxfaW5lcnRfdmFsdWU7XG5cblx0LyoqXG5cdCAqIEByZXR1cm5zIHt2b2lkfSAqL1xuXHRmdW5jdGlvbiBjbGVhcl9hbmltYXRpb24oKSB7XG5cdFx0aWYgKGFuaW1hdGlvbl9uYW1lKSBkZWxldGVfcnVsZShub2RlLCBhbmltYXRpb25fbmFtZSk7XG5cdH1cblxuXHQvKipcblx0ICogQHBhcmFtIHtQZW5kaW5nUHJvZ3JhbX0gcHJvZ3JhbVxuXHQgKiBAcGFyYW0ge251bWJlcn0gZHVyYXRpb25cblx0ICogQHJldHVybnMge1Byb2dyYW19XG5cdCAqL1xuXHRmdW5jdGlvbiBpbml0KHByb2dyYW0sIGR1cmF0aW9uKSB7XG5cdFx0Y29uc3QgZCA9IC8qKiBAdHlwZSB7UHJvZ3JhbVsnZCddfSAqLyAocHJvZ3JhbS5iIC0gdCk7XG5cdFx0ZHVyYXRpb24gKj0gTWF0aC5hYnMoZCk7XG5cdFx0cmV0dXJuIHtcblx0XHRcdGE6IHQsXG5cdFx0XHRiOiBwcm9ncmFtLmIsXG5cdFx0XHRkLFxuXHRcdFx0ZHVyYXRpb24sXG5cdFx0XHRzdGFydDogcHJvZ3JhbS5zdGFydCxcblx0XHRcdGVuZDogcHJvZ3JhbS5zdGFydCArIGR1cmF0aW9uLFxuXHRcdFx0Z3JvdXA6IHByb2dyYW0uZ3JvdXBcblx0XHR9O1xuXHR9XG5cblx0LyoqXG5cdCAqIEBwYXJhbSB7SU5UUk8gfCBPVVRST30gYlxuXHQgKiBAcmV0dXJucyB7dm9pZH1cblx0ICovXG5cdGZ1bmN0aW9uIGdvKGIpIHtcblx0XHRjb25zdCB7XG5cdFx0XHRkZWxheSA9IDAsXG5cdFx0XHRkdXJhdGlvbiA9IDMwMCxcblx0XHRcdGVhc2luZyA9IGxpbmVhcixcblx0XHRcdHRpY2sgPSBub29wLFxuXHRcdFx0Y3NzXG5cdFx0fSA9IGNvbmZpZyB8fCBudWxsX3RyYW5zaXRpb247XG5cblx0XHQvKipcblx0XHQgKiBAdHlwZSB7UGVuZGluZ1Byb2dyYW19ICovXG5cdFx0Y29uc3QgcHJvZ3JhbSA9IHtcblx0XHRcdHN0YXJ0OiBub3coKSArIGRlbGF5LFxuXHRcdFx0YlxuXHRcdH07XG5cblx0XHRpZiAoIWIpIHtcblx0XHRcdC8vIEB0cy1pZ25vcmUgdG9kbzogaW1wcm92ZSB0eXBpbmdzXG5cdFx0XHRwcm9ncmFtLmdyb3VwID0gb3V0cm9zO1xuXHRcdFx0b3V0cm9zLnIgKz0gMTtcblx0XHR9XG5cblx0XHRpZiAoJ2luZXJ0JyBpbiBub2RlKSB7XG5cdFx0XHRpZiAoYikge1xuXHRcdFx0XHRpZiAob3JpZ2luYWxfaW5lcnRfdmFsdWUgIT09IHVuZGVmaW5lZCkge1xuXHRcdFx0XHRcdC8vIGFib3J0ZWQvcmV2ZXJzZWQgb3V0cm8gXHUyMDE0IHJlc3RvcmUgcHJldmlvdXMgaW5lcnQgdmFsdWVcblx0XHRcdFx0XHRub2RlLmluZXJ0ID0gb3JpZ2luYWxfaW5lcnRfdmFsdWU7XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdG9yaWdpbmFsX2luZXJ0X3ZhbHVlID0gLyoqIEB0eXBlIHtIVE1MRWxlbWVudH0gKi8gKG5vZGUpLmluZXJ0O1xuXHRcdFx0XHRub2RlLmluZXJ0ID0gdHJ1ZTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZiAocnVubmluZ19wcm9ncmFtIHx8IHBlbmRpbmdfcHJvZ3JhbSkge1xuXHRcdFx0cGVuZGluZ19wcm9ncmFtID0gcHJvZ3JhbTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0Ly8gaWYgdGhpcyBpcyBhbiBpbnRybywgYW5kIHRoZXJlJ3MgYSBkZWxheSwgd2UgbmVlZCB0byBkb1xuXHRcdFx0Ly8gYW4gaW5pdGlhbCB0aWNrIGFuZC9vciBhcHBseSBDU1MgYW5pbWF0aW9uIGltbWVkaWF0ZWx5XG5cdFx0XHRpZiAoY3NzKSB7XG5cdFx0XHRcdGNsZWFyX2FuaW1hdGlvbigpO1xuXHRcdFx0XHRhbmltYXRpb25fbmFtZSA9IGNyZWF0ZV9ydWxlKG5vZGUsIHQsIGIsIGR1cmF0aW9uLCBkZWxheSwgZWFzaW5nLCBjc3MpO1xuXHRcdFx0fVxuXHRcdFx0aWYgKGIpIHRpY2soMCwgMSk7XG5cdFx0XHRydW5uaW5nX3Byb2dyYW0gPSBpbml0KHByb2dyYW0sIGR1cmF0aW9uKTtcblx0XHRcdGFkZF9yZW5kZXJfY2FsbGJhY2soKCkgPT4gZGlzcGF0Y2gobm9kZSwgYiwgJ3N0YXJ0JykpO1xuXHRcdFx0bG9vcCgobm93KSA9PiB7XG5cdFx0XHRcdGlmIChwZW5kaW5nX3Byb2dyYW0gJiYgbm93ID4gcGVuZGluZ19wcm9ncmFtLnN0YXJ0KSB7XG5cdFx0XHRcdFx0cnVubmluZ19wcm9ncmFtID0gaW5pdChwZW5kaW5nX3Byb2dyYW0sIGR1cmF0aW9uKTtcblx0XHRcdFx0XHRwZW5kaW5nX3Byb2dyYW0gPSBudWxsO1xuXHRcdFx0XHRcdGRpc3BhdGNoKG5vZGUsIHJ1bm5pbmdfcHJvZ3JhbS5iLCAnc3RhcnQnKTtcblx0XHRcdFx0XHRpZiAoY3NzKSB7XG5cdFx0XHRcdFx0XHRjbGVhcl9hbmltYXRpb24oKTtcblx0XHRcdFx0XHRcdGFuaW1hdGlvbl9uYW1lID0gY3JlYXRlX3J1bGUoXG5cdFx0XHRcdFx0XHRcdG5vZGUsXG5cdFx0XHRcdFx0XHRcdHQsXG5cdFx0XHRcdFx0XHRcdHJ1bm5pbmdfcHJvZ3JhbS5iLFxuXHRcdFx0XHRcdFx0XHRydW5uaW5nX3Byb2dyYW0uZHVyYXRpb24sXG5cdFx0XHRcdFx0XHRcdDAsXG5cdFx0XHRcdFx0XHRcdGVhc2luZyxcblx0XHRcdFx0XHRcdFx0Y29uZmlnLmNzc1xuXHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKHJ1bm5pbmdfcHJvZ3JhbSkge1xuXHRcdFx0XHRcdGlmIChub3cgPj0gcnVubmluZ19wcm9ncmFtLmVuZCkge1xuXHRcdFx0XHRcdFx0dGljaygodCA9IHJ1bm5pbmdfcHJvZ3JhbS5iKSwgMSAtIHQpO1xuXHRcdFx0XHRcdFx0ZGlzcGF0Y2gobm9kZSwgcnVubmluZ19wcm9ncmFtLmIsICdlbmQnKTtcblx0XHRcdFx0XHRcdGlmICghcGVuZGluZ19wcm9ncmFtKSB7XG5cdFx0XHRcdFx0XHRcdC8vIHdlJ3JlIGRvbmVcblx0XHRcdFx0XHRcdFx0aWYgKHJ1bm5pbmdfcHJvZ3JhbS5iKSB7XG5cdFx0XHRcdFx0XHRcdFx0Ly8gaW50cm8gXHUyMDE0IHdlIGNhbiB0aWR5IHVwIGltbWVkaWF0ZWx5XG5cdFx0XHRcdFx0XHRcdFx0Y2xlYXJfYW5pbWF0aW9uKCk7XG5cdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdFx0Ly8gb3V0cm8gXHUyMDE0IG5lZWRzIHRvIGJlIGNvb3JkaW5hdGVkXG5cdFx0XHRcdFx0XHRcdFx0aWYgKCEtLXJ1bm5pbmdfcHJvZ3JhbS5ncm91cC5yKSBydW5fYWxsKHJ1bm5pbmdfcHJvZ3JhbS5ncm91cC5jKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0cnVubmluZ19wcm9ncmFtID0gbnVsbDtcblx0XHRcdFx0XHR9IGVsc2UgaWYgKG5vdyA+PSBydW5uaW5nX3Byb2dyYW0uc3RhcnQpIHtcblx0XHRcdFx0XHRcdGNvbnN0IHAgPSBub3cgLSBydW5uaW5nX3Byb2dyYW0uc3RhcnQ7XG5cdFx0XHRcdFx0XHR0ID0gcnVubmluZ19wcm9ncmFtLmEgKyBydW5uaW5nX3Byb2dyYW0uZCAqIGVhc2luZyhwIC8gcnVubmluZ19wcm9ncmFtLmR1cmF0aW9uKTtcblx0XHRcdFx0XHRcdHRpY2sodCwgMSAtIHQpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gISEocnVubmluZ19wcm9ncmFtIHx8IHBlbmRpbmdfcHJvZ3JhbSk7XG5cdFx0XHR9KTtcblx0XHR9XG5cdH1cblx0cmV0dXJuIHtcblx0XHRydW4oYikge1xuXHRcdFx0aWYgKGlzX2Z1bmN0aW9uKGNvbmZpZykpIHtcblx0XHRcdFx0d2FpdCgpLnRoZW4oKCkgPT4ge1xuXHRcdFx0XHRcdGNvbnN0IG9wdHMgPSB7IGRpcmVjdGlvbjogYiA/ICdpbicgOiAnb3V0JyB9O1xuXHRcdFx0XHRcdC8vIEB0cy1pZ25vcmVcblx0XHRcdFx0XHRjb25maWcgPSBjb25maWcob3B0cyk7XG5cdFx0XHRcdFx0Z28oYik7XG5cdFx0XHRcdH0pO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Z28oYik7XG5cdFx0XHR9XG5cdFx0fSxcblx0XHRlbmQoKSB7XG5cdFx0XHRjbGVhcl9hbmltYXRpb24oKTtcblx0XHRcdHJ1bm5pbmdfcHJvZ3JhbSA9IHBlbmRpbmdfcHJvZ3JhbSA9IG51bGw7XG5cdFx0fVxuXHR9O1xufVxuXG4vKiogQHR5cGVkZWYgezF9IElOVFJPICovXG4vKiogQHR5cGVkZWYgezB9IE9VVFJPICovXG4vKiogQHR5cGVkZWYge3sgZGlyZWN0aW9uOiAnaW4nIHwgJ291dCcgfCAnYm90aCcgfX0gVHJhbnNpdGlvbk9wdGlvbnMgKi9cbi8qKiBAdHlwZWRlZiB7KG5vZGU6IEVsZW1lbnQsIHBhcmFtczogYW55LCBvcHRpb25zOiBUcmFuc2l0aW9uT3B0aW9ucykgPT4gaW1wb3J0KCcuLi90cmFuc2l0aW9uL3B1YmxpYy5qcycpLlRyYW5zaXRpb25Db25maWd9IFRyYW5zaXRpb25GbiAqL1xuXG4vKipcbiAqIEB0eXBlZGVmIHtPYmplY3R9IE91dHJvXG4gKiBAcHJvcGVydHkge251bWJlcn0gclxuICogQHByb3BlcnR5IHtGdW5jdGlvbltdfSBjXG4gKiBAcHJvcGVydHkge09iamVjdH0gcFxuICovXG5cbi8qKlxuICogQHR5cGVkZWYge09iamVjdH0gUGVuZGluZ1Byb2dyYW1cbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBzdGFydFxuICogQHByb3BlcnR5IHtJTlRST3xPVVRST30gYlxuICogQHByb3BlcnR5IHtPdXRyb30gW2dyb3VwXVxuICovXG5cbi8qKlxuICogQHR5cGVkZWYge09iamVjdH0gUHJvZ3JhbVxuICogQHByb3BlcnR5IHtudW1iZXJ9IGFcbiAqIEBwcm9wZXJ0eSB7SU5UUk98T1VUUk99IGJcbiAqIEBwcm9wZXJ0eSB7MXwtMX0gZFxuICogQHByb3BlcnR5IHtudW1iZXJ9IGR1cmF0aW9uXG4gKiBAcHJvcGVydHkge251bWJlcn0gc3RhcnRcbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBlbmRcbiAqIEBwcm9wZXJ0eSB7T3V0cm99IFtncm91cF1cbiAqL1xuIiwgImltcG9ydCB7IGlzX3Byb21pc2UgfSBmcm9tICcuL3V0aWxzLmpzJztcbmltcG9ydCB7IGNoZWNrX291dHJvcywgZ3JvdXBfb3V0cm9zLCB0cmFuc2l0aW9uX2luLCB0cmFuc2l0aW9uX291dCB9IGZyb20gJy4vdHJhbnNpdGlvbnMuanMnO1xuaW1wb3J0IHsgZmx1c2ggfSBmcm9tICcuL3NjaGVkdWxlci5qcyc7XG5pbXBvcnQgeyBnZXRfY3VycmVudF9jb21wb25lbnQsIHNldF9jdXJyZW50X2NvbXBvbmVudCB9IGZyb20gJy4vbGlmZWN5Y2xlLmpzJztcblxuLyoqXG4gKiBAdGVtcGxhdGUgVFxuICogQHBhcmFtIHtQcm9taXNlPFQ+fSBwcm9taXNlXG4gKiBAcGFyYW0ge2ltcG9ydCgnLi9wcml2YXRlLmpzJykuUHJvbWlzZUluZm88VD59IGluZm9cbiAqIEByZXR1cm5zIHtib29sZWFufVxuICovXG5leHBvcnQgZnVuY3Rpb24gaGFuZGxlX3Byb21pc2UocHJvbWlzZSwgaW5mbykge1xuXHRjb25zdCB0b2tlbiA9IChpbmZvLnRva2VuID0ge30pO1xuXHQvKipcblx0ICogQHBhcmFtIHtpbXBvcnQoJy4vcHJpdmF0ZS5qcycpLkZyYWdtZW50RmFjdG9yeX0gdHlwZVxuXHQgKiBAcGFyYW0gezAgfCAxIHwgMn0gaW5kZXhcblx0ICogQHBhcmFtIHtudW1iZXJ9IFtrZXldXG5cdCAqIEBwYXJhbSB7YW55fSBbdmFsdWVdXG5cdCAqIEByZXR1cm5zIHt2b2lkfVxuXHQgKi9cblx0ZnVuY3Rpb24gdXBkYXRlKHR5cGUsIGluZGV4LCBrZXksIHZhbHVlKSB7XG5cdFx0aWYgKGluZm8udG9rZW4gIT09IHRva2VuKSByZXR1cm47XG5cdFx0aW5mby5yZXNvbHZlZCA9IHZhbHVlO1xuXHRcdGxldCBjaGlsZF9jdHggPSBpbmZvLmN0eDtcblx0XHRpZiAoa2V5ICE9PSB1bmRlZmluZWQpIHtcblx0XHRcdGNoaWxkX2N0eCA9IGNoaWxkX2N0eC5zbGljZSgpO1xuXHRcdFx0Y2hpbGRfY3R4W2tleV0gPSB2YWx1ZTtcblx0XHR9XG5cdFx0Y29uc3QgYmxvY2sgPSB0eXBlICYmIChpbmZvLmN1cnJlbnQgPSB0eXBlKShjaGlsZF9jdHgpO1xuXHRcdGxldCBuZWVkc19mbHVzaCA9IGZhbHNlO1xuXHRcdGlmIChpbmZvLmJsb2NrKSB7XG5cdFx0XHRpZiAoaW5mby5ibG9ja3MpIHtcblx0XHRcdFx0aW5mby5ibG9ja3MuZm9yRWFjaCgoYmxvY2ssIGkpID0+IHtcblx0XHRcdFx0XHRpZiAoaSAhPT0gaW5kZXggJiYgYmxvY2spIHtcblx0XHRcdFx0XHRcdGdyb3VwX291dHJvcygpO1xuXHRcdFx0XHRcdFx0dHJhbnNpdGlvbl9vdXQoYmxvY2ssIDEsIDEsICgpID0+IHtcblx0XHRcdFx0XHRcdFx0aWYgKGluZm8uYmxvY2tzW2ldID09PSBibG9jaykge1xuXHRcdFx0XHRcdFx0XHRcdGluZm8uYmxvY2tzW2ldID0gbnVsbDtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fSk7XG5cdFx0XHRcdFx0XHRjaGVja19vdXRyb3MoKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0pO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0aW5mby5ibG9jay5kKDEpO1xuXHRcdFx0fVxuXHRcdFx0YmxvY2suYygpO1xuXHRcdFx0dHJhbnNpdGlvbl9pbihibG9jaywgMSk7XG5cdFx0XHRibG9jay5tKGluZm8ubW91bnQoKSwgaW5mby5hbmNob3IpO1xuXHRcdFx0bmVlZHNfZmx1c2ggPSB0cnVlO1xuXHRcdH1cblx0XHRpbmZvLmJsb2NrID0gYmxvY2s7XG5cdFx0aWYgKGluZm8uYmxvY2tzKSBpbmZvLmJsb2Nrc1tpbmRleF0gPSBibG9jaztcblx0XHRpZiAobmVlZHNfZmx1c2gpIHtcblx0XHRcdGZsdXNoKCk7XG5cdFx0fVxuXHR9XG5cdGlmIChpc19wcm9taXNlKHByb21pc2UpKSB7XG5cdFx0Y29uc3QgY3VycmVudF9jb21wb25lbnQgPSBnZXRfY3VycmVudF9jb21wb25lbnQoKTtcblx0XHRwcm9taXNlLnRoZW4oXG5cdFx0XHQodmFsdWUpID0+IHtcblx0XHRcdFx0c2V0X2N1cnJlbnRfY29tcG9uZW50KGN1cnJlbnRfY29tcG9uZW50KTtcblx0XHRcdFx0dXBkYXRlKGluZm8udGhlbiwgMSwgaW5mby52YWx1ZSwgdmFsdWUpO1xuXHRcdFx0XHRzZXRfY3VycmVudF9jb21wb25lbnQobnVsbCk7XG5cdFx0XHR9LFxuXHRcdFx0KGVycm9yKSA9PiB7XG5cdFx0XHRcdHNldF9jdXJyZW50X2NvbXBvbmVudChjdXJyZW50X2NvbXBvbmVudCk7XG5cdFx0XHRcdHVwZGF0ZShpbmZvLmNhdGNoLCAyLCBpbmZvLmVycm9yLCBlcnJvcik7XG5cdFx0XHRcdHNldF9jdXJyZW50X2NvbXBvbmVudChudWxsKTtcblx0XHRcdFx0aWYgKCFpbmZvLmhhc0NhdGNoKSB7XG5cdFx0XHRcdFx0dGhyb3cgZXJyb3I7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHQpO1xuXHRcdC8vIGlmIHdlIHByZXZpb3VzbHkgaGFkIGEgdGhlbi9jYXRjaCBibG9jaywgZGVzdHJveSBpdFxuXHRcdGlmIChpbmZvLmN1cnJlbnQgIT09IGluZm8ucGVuZGluZykge1xuXHRcdFx0dXBkYXRlKGluZm8ucGVuZGluZywgMCk7XG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9XG5cdH0gZWxzZSB7XG5cdFx0aWYgKGluZm8uY3VycmVudCAhPT0gaW5mby50aGVuKSB7XG5cdFx0XHR1cGRhdGUoaW5mby50aGVuLCAxLCBpbmZvLnZhbHVlLCBwcm9taXNlKTtcblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH1cblx0XHRpbmZvLnJlc29sdmVkID0gLyoqIEB0eXBlIHtUfSAqLyAocHJvbWlzZSk7XG5cdH1cbn1cblxuLyoqIEByZXR1cm5zIHt2b2lkfSAqL1xuZXhwb3J0IGZ1bmN0aW9uIHVwZGF0ZV9hd2FpdF9ibG9ja19icmFuY2goaW5mbywgY3R4LCBkaXJ0eSkge1xuXHRjb25zdCBjaGlsZF9jdHggPSBjdHguc2xpY2UoKTtcblx0Y29uc3QgeyByZXNvbHZlZCB9ID0gaW5mbztcblx0aWYgKGluZm8uY3VycmVudCA9PT0gaW5mby50aGVuKSB7XG5cdFx0Y2hpbGRfY3R4W2luZm8udmFsdWVdID0gcmVzb2x2ZWQ7XG5cdH1cblx0aWYgKGluZm8uY3VycmVudCA9PT0gaW5mby5jYXRjaCkge1xuXHRcdGNoaWxkX2N0eFtpbmZvLmVycm9yXSA9IHJlc29sdmVkO1xuXHR9XG5cdGluZm8uYmxvY2sucChjaGlsZF9jdHgsIGRpcnR5KTtcbn1cbiIsICJpbXBvcnQgeyB0cmFuc2l0aW9uX2luLCB0cmFuc2l0aW9uX291dCB9IGZyb20gJy4vdHJhbnNpdGlvbnMuanMnO1xuaW1wb3J0IHsgcnVuX2FsbCB9IGZyb20gJy4vdXRpbHMuanMnO1xuXG4vLyBnZW5lcmFsIGVhY2ggZnVuY3Rpb25zOlxuXG5leHBvcnQgZnVuY3Rpb24gZW5zdXJlX2FycmF5X2xpa2UoYXJyYXlfbGlrZV9vcl9pdGVyYXRvcikge1xuXHRyZXR1cm4gYXJyYXlfbGlrZV9vcl9pdGVyYXRvcj8ubGVuZ3RoICE9PSB1bmRlZmluZWRcblx0XHQ/IGFycmF5X2xpa2Vfb3JfaXRlcmF0b3Jcblx0XHQ6IEFycmF5LmZyb20oYXJyYXlfbGlrZV9vcl9pdGVyYXRvcik7XG59XG5cbi8vIGtleWVkIGVhY2ggZnVuY3Rpb25zOlxuXG4vKiogQHJldHVybnMge3ZvaWR9ICovXG5leHBvcnQgZnVuY3Rpb24gZGVzdHJveV9ibG9jayhibG9jaywgbG9va3VwKSB7XG5cdGJsb2NrLmQoMSk7XG5cdGxvb2t1cC5kZWxldGUoYmxvY2sua2V5KTtcbn1cblxuLyoqIEByZXR1cm5zIHt2b2lkfSAqL1xuZXhwb3J0IGZ1bmN0aW9uIG91dHJvX2FuZF9kZXN0cm95X2Jsb2NrKGJsb2NrLCBsb29rdXApIHtcblx0dHJhbnNpdGlvbl9vdXQoYmxvY2ssIDEsIDEsICgpID0+IHtcblx0XHRsb29rdXAuZGVsZXRlKGJsb2NrLmtleSk7XG5cdH0pO1xufVxuXG4vKiogQHJldHVybnMge3ZvaWR9ICovXG5leHBvcnQgZnVuY3Rpb24gZml4X2FuZF9kZXN0cm95X2Jsb2NrKGJsb2NrLCBsb29rdXApIHtcblx0YmxvY2suZigpO1xuXHRkZXN0cm95X2Jsb2NrKGJsb2NrLCBsb29rdXApO1xufVxuXG4vKiogQHJldHVybnMge3ZvaWR9ICovXG5leHBvcnQgZnVuY3Rpb24gZml4X2FuZF9vdXRyb19hbmRfZGVzdHJveV9ibG9jayhibG9jaywgbG9va3VwKSB7XG5cdGJsb2NrLmYoKTtcblx0b3V0cm9fYW5kX2Rlc3Ryb3lfYmxvY2soYmxvY2ssIGxvb2t1cCk7XG59XG5cbi8qKiBAcmV0dXJucyB7YW55W119ICovXG5leHBvcnQgZnVuY3Rpb24gdXBkYXRlX2tleWVkX2VhY2goXG5cdG9sZF9ibG9ja3MsXG5cdGRpcnR5LFxuXHRnZXRfa2V5LFxuXHRkeW5hbWljLFxuXHRjdHgsXG5cdGxpc3QsXG5cdGxvb2t1cCxcblx0bm9kZSxcblx0ZGVzdHJveSxcblx0Y3JlYXRlX2VhY2hfYmxvY2ssXG5cdG5leHQsXG5cdGdldF9jb250ZXh0XG4pIHtcblx0bGV0IG8gPSBvbGRfYmxvY2tzLmxlbmd0aDtcblx0bGV0IG4gPSBsaXN0Lmxlbmd0aDtcblx0bGV0IGkgPSBvO1xuXHRjb25zdCBvbGRfaW5kZXhlcyA9IHt9O1xuXHR3aGlsZSAoaS0tKSBvbGRfaW5kZXhlc1tvbGRfYmxvY2tzW2ldLmtleV0gPSBpO1xuXHRjb25zdCBuZXdfYmxvY2tzID0gW107XG5cdGNvbnN0IG5ld19sb29rdXAgPSBuZXcgTWFwKCk7XG5cdGNvbnN0IGRlbHRhcyA9IG5ldyBNYXAoKTtcblx0Y29uc3QgdXBkYXRlcyA9IFtdO1xuXHRpID0gbjtcblx0d2hpbGUgKGktLSkge1xuXHRcdGNvbnN0IGNoaWxkX2N0eCA9IGdldF9jb250ZXh0KGN0eCwgbGlzdCwgaSk7XG5cdFx0Y29uc3Qga2V5ID0gZ2V0X2tleShjaGlsZF9jdHgpO1xuXHRcdGxldCBibG9jayA9IGxvb2t1cC5nZXQoa2V5KTtcblx0XHRpZiAoIWJsb2NrKSB7XG5cdFx0XHRibG9jayA9IGNyZWF0ZV9lYWNoX2Jsb2NrKGtleSwgY2hpbGRfY3R4KTtcblx0XHRcdGJsb2NrLmMoKTtcblx0XHR9IGVsc2UgaWYgKGR5bmFtaWMpIHtcblx0XHRcdC8vIGRlZmVyIHVwZGF0ZXMgdW50aWwgYWxsIHRoZSBET00gc2h1ZmZsaW5nIGlzIGRvbmVcblx0XHRcdHVwZGF0ZXMucHVzaCgoKSA9PiBibG9jay5wKGNoaWxkX2N0eCwgZGlydHkpKTtcblx0XHR9XG5cdFx0bmV3X2xvb2t1cC5zZXQoa2V5LCAobmV3X2Jsb2Nrc1tpXSA9IGJsb2NrKSk7XG5cdFx0aWYgKGtleSBpbiBvbGRfaW5kZXhlcykgZGVsdGFzLnNldChrZXksIE1hdGguYWJzKGkgLSBvbGRfaW5kZXhlc1trZXldKSk7XG5cdH1cblx0Y29uc3Qgd2lsbF9tb3ZlID0gbmV3IFNldCgpO1xuXHRjb25zdCBkaWRfbW92ZSA9IG5ldyBTZXQoKTtcblx0LyoqIEByZXR1cm5zIHt2b2lkfSAqL1xuXHRmdW5jdGlvbiBpbnNlcnQoYmxvY2spIHtcblx0XHR0cmFuc2l0aW9uX2luKGJsb2NrLCAxKTtcblx0XHRibG9jay5tKG5vZGUsIG5leHQpO1xuXHRcdGxvb2t1cC5zZXQoYmxvY2sua2V5LCBibG9jayk7XG5cdFx0bmV4dCA9IGJsb2NrLmZpcnN0O1xuXHRcdG4tLTtcblx0fVxuXHR3aGlsZSAobyAmJiBuKSB7XG5cdFx0Y29uc3QgbmV3X2Jsb2NrID0gbmV3X2Jsb2Nrc1tuIC0gMV07XG5cdFx0Y29uc3Qgb2xkX2Jsb2NrID0gb2xkX2Jsb2Nrc1tvIC0gMV07XG5cdFx0Y29uc3QgbmV3X2tleSA9IG5ld19ibG9jay5rZXk7XG5cdFx0Y29uc3Qgb2xkX2tleSA9IG9sZF9ibG9jay5rZXk7XG5cdFx0aWYgKG5ld19ibG9jayA9PT0gb2xkX2Jsb2NrKSB7XG5cdFx0XHQvLyBkbyBub3RoaW5nXG5cdFx0XHRuZXh0ID0gbmV3X2Jsb2NrLmZpcnN0O1xuXHRcdFx0by0tO1xuXHRcdFx0bi0tO1xuXHRcdH0gZWxzZSBpZiAoIW5ld19sb29rdXAuaGFzKG9sZF9rZXkpKSB7XG5cdFx0XHQvLyByZW1vdmUgb2xkIGJsb2NrXG5cdFx0XHRkZXN0cm95KG9sZF9ibG9jaywgbG9va3VwKTtcblx0XHRcdG8tLTtcblx0XHR9IGVsc2UgaWYgKCFsb29rdXAuaGFzKG5ld19rZXkpIHx8IHdpbGxfbW92ZS5oYXMobmV3X2tleSkpIHtcblx0XHRcdGluc2VydChuZXdfYmxvY2spO1xuXHRcdH0gZWxzZSBpZiAoZGlkX21vdmUuaGFzKG9sZF9rZXkpKSB7XG5cdFx0XHRvLS07XG5cdFx0fSBlbHNlIGlmIChkZWx0YXMuZ2V0KG5ld19rZXkpID4gZGVsdGFzLmdldChvbGRfa2V5KSkge1xuXHRcdFx0ZGlkX21vdmUuYWRkKG5ld19rZXkpO1xuXHRcdFx0aW5zZXJ0KG5ld19ibG9jayk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHdpbGxfbW92ZS5hZGQob2xkX2tleSk7XG5cdFx0XHRvLS07XG5cdFx0fVxuXHR9XG5cdHdoaWxlIChvLS0pIHtcblx0XHRjb25zdCBvbGRfYmxvY2sgPSBvbGRfYmxvY2tzW29dO1xuXHRcdGlmICghbmV3X2xvb2t1cC5oYXMob2xkX2Jsb2NrLmtleSkpIGRlc3Ryb3kob2xkX2Jsb2NrLCBsb29rdXApO1xuXHR9XG5cdHdoaWxlIChuKSBpbnNlcnQobmV3X2Jsb2Nrc1tuIC0gMV0pO1xuXHRydW5fYWxsKHVwZGF0ZXMpO1xuXHRyZXR1cm4gbmV3X2Jsb2Nrcztcbn1cblxuLyoqIEByZXR1cm5zIHt2b2lkfSAqL1xuZXhwb3J0IGZ1bmN0aW9uIHZhbGlkYXRlX2VhY2hfa2V5cyhjdHgsIGxpc3QsIGdldF9jb250ZXh0LCBnZXRfa2V5KSB7XG5cdGNvbnN0IGtleXMgPSBuZXcgTWFwKCk7XG5cdGZvciAobGV0IGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7IGkrKykge1xuXHRcdGNvbnN0IGtleSA9IGdldF9rZXkoZ2V0X2NvbnRleHQoY3R4LCBsaXN0LCBpKSk7XG5cdFx0aWYgKGtleXMuaGFzKGtleSkpIHtcblx0XHRcdGxldCB2YWx1ZSA9ICcnO1xuXHRcdFx0dHJ5IHtcblx0XHRcdFx0dmFsdWUgPSBgd2l0aCB2YWx1ZSAnJHtTdHJpbmcoa2V5KX0nIGA7XG5cdFx0XHR9IGNhdGNoIChlKSB7XG5cdFx0XHRcdC8vIGNhbid0IHN0cmluZ2lmeVxuXHRcdFx0fVxuXHRcdFx0dGhyb3cgbmV3IEVycm9yKFxuXHRcdFx0XHRgQ2Fubm90IGhhdmUgZHVwbGljYXRlIGtleXMgaW4gYSBrZXllZCBlYWNoOiBLZXlzIGF0IGluZGV4ICR7a2V5cy5nZXQoXG5cdFx0XHRcdFx0a2V5XG5cdFx0XHRcdCl9IGFuZCAke2l9ICR7dmFsdWV9YXJlIGR1cGxpY2F0ZXNgXG5cdFx0XHQpO1xuXHRcdH1cblx0XHRrZXlzLnNldChrZXksIGkpO1xuXHR9XG59XG4iLCAiLyoqIEByZXR1cm5zIHt7fX0gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRfc3ByZWFkX3VwZGF0ZShsZXZlbHMsIHVwZGF0ZXMpIHtcblx0Y29uc3QgdXBkYXRlID0ge307XG5cdGNvbnN0IHRvX251bGxfb3V0ID0ge307XG5cdGNvbnN0IGFjY291bnRlZF9mb3IgPSB7ICQkc2NvcGU6IDEgfTtcblx0bGV0IGkgPSBsZXZlbHMubGVuZ3RoO1xuXHR3aGlsZSAoaS0tKSB7XG5cdFx0Y29uc3QgbyA9IGxldmVsc1tpXTtcblx0XHRjb25zdCBuID0gdXBkYXRlc1tpXTtcblx0XHRpZiAobikge1xuXHRcdFx0Zm9yIChjb25zdCBrZXkgaW4gbykge1xuXHRcdFx0XHRpZiAoIShrZXkgaW4gbikpIHRvX251bGxfb3V0W2tleV0gPSAxO1xuXHRcdFx0fVxuXHRcdFx0Zm9yIChjb25zdCBrZXkgaW4gbikge1xuXHRcdFx0XHRpZiAoIWFjY291bnRlZF9mb3Jba2V5XSkge1xuXHRcdFx0XHRcdHVwZGF0ZVtrZXldID0gbltrZXldO1xuXHRcdFx0XHRcdGFjY291bnRlZF9mb3Jba2V5XSA9IDE7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdGxldmVsc1tpXSA9IG47XG5cdFx0fSBlbHNlIHtcblx0XHRcdGZvciAoY29uc3Qga2V5IGluIG8pIHtcblx0XHRcdFx0YWNjb3VudGVkX2ZvcltrZXldID0gMTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblx0Zm9yIChjb25zdCBrZXkgaW4gdG9fbnVsbF9vdXQpIHtcblx0XHRpZiAoIShrZXkgaW4gdXBkYXRlKSkgdXBkYXRlW2tleV0gPSB1bmRlZmluZWQ7XG5cdH1cblx0cmV0dXJuIHVwZGF0ZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldF9zcHJlYWRfb2JqZWN0KHNwcmVhZF9wcm9wcykge1xuXHRyZXR1cm4gdHlwZW9mIHNwcmVhZF9wcm9wcyA9PT0gJ29iamVjdCcgJiYgc3ByZWFkX3Byb3BzICE9PSBudWxsID8gc3ByZWFkX3Byb3BzIDoge307XG59XG4iLCAiY29uc3QgX2Jvb2xlYW5fYXR0cmlidXRlcyA9IC8qKiBAdHlwZSB7Y29uc3R9ICovIChbXG5cdCdhbGxvd2Z1bGxzY3JlZW4nLFxuXHQnYWxsb3dwYXltZW50cmVxdWVzdCcsXG5cdCdhc3luYycsXG5cdCdhdXRvZm9jdXMnLFxuXHQnYXV0b3BsYXknLFxuXHQnY2hlY2tlZCcsXG5cdCdjb250cm9scycsXG5cdCdkZWZhdWx0Jyxcblx0J2RlZmVyJyxcblx0J2Rpc2FibGVkJyxcblx0J2Zvcm1ub3ZhbGlkYXRlJyxcblx0J2hpZGRlbicsXG5cdCdpbmVydCcsXG5cdCdpc21hcCcsXG5cdCdsb29wJyxcblx0J211bHRpcGxlJyxcblx0J211dGVkJyxcblx0J25vbW9kdWxlJyxcblx0J25vdmFsaWRhdGUnLFxuXHQnb3BlbicsXG5cdCdwbGF5c2lubGluZScsXG5cdCdyZWFkb25seScsXG5cdCdyZXF1aXJlZCcsXG5cdCdyZXZlcnNlZCcsXG5cdCdzZWxlY3RlZCdcbl0pO1xuXG4vKipcbiAqIExpc3Qgb2YgSFRNTCBib29sZWFuIGF0dHJpYnV0ZXMgKGUuZy4gYDxpbnB1dCBkaXNhYmxlZD5gKS5cbiAqIFNvdXJjZTogaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2UvaW5kaWNlcy5odG1sXG4gKlxuICogQHR5cGUge1NldDxzdHJpbmc+fVxuICovXG5leHBvcnQgY29uc3QgYm9vbGVhbl9hdHRyaWJ1dGVzID0gbmV3IFNldChbLi4uX2Jvb2xlYW5fYXR0cmlidXRlc10pO1xuXG4vKiogQHR5cGVkZWYge3R5cGVvZiBfYm9vbGVhbl9hdHRyaWJ1dGVzW251bWJlcl19IEJvb2xlYW5BdHRyaWJ1dGVzICovXG4iLCAiaW1wb3J0IHtcblx0YWRkX3JlbmRlcl9jYWxsYmFjayxcblx0Zmx1c2gsXG5cdGZsdXNoX3JlbmRlcl9jYWxsYmFja3MsXG5cdHNjaGVkdWxlX3VwZGF0ZSxcblx0ZGlydHlfY29tcG9uZW50c1xufSBmcm9tICcuL3NjaGVkdWxlci5qcyc7XG5pbXBvcnQgeyBjdXJyZW50X2NvbXBvbmVudCwgc2V0X2N1cnJlbnRfY29tcG9uZW50IH0gZnJvbSAnLi9saWZlY3ljbGUuanMnO1xuaW1wb3J0IHsgYmxhbmtfb2JqZWN0LCBpc19lbXB0eSwgaXNfZnVuY3Rpb24sIHJ1biwgcnVuX2FsbCwgbm9vcCB9IGZyb20gJy4vdXRpbHMuanMnO1xuaW1wb3J0IHtcblx0Y2hpbGRyZW4sXG5cdGRldGFjaCxcblx0c3RhcnRfaHlkcmF0aW5nLFxuXHRlbmRfaHlkcmF0aW5nLFxuXHRnZXRfY3VzdG9tX2VsZW1lbnRzX3Nsb3RzLFxuXHRpbnNlcnQsXG5cdGVsZW1lbnQsXG5cdGF0dHJcbn0gZnJvbSAnLi9kb20uanMnO1xuaW1wb3J0IHsgdHJhbnNpdGlvbl9pbiB9IGZyb20gJy4vdHJhbnNpdGlvbnMuanMnO1xuXG4vKiogQHJldHVybnMge3ZvaWR9ICovXG5leHBvcnQgZnVuY3Rpb24gYmluZChjb21wb25lbnQsIG5hbWUsIGNhbGxiYWNrKSB7XG5cdGNvbnN0IGluZGV4ID0gY29tcG9uZW50LiQkLnByb3BzW25hbWVdO1xuXHRpZiAoaW5kZXggIT09IHVuZGVmaW5lZCkge1xuXHRcdGNvbXBvbmVudC4kJC5ib3VuZFtpbmRleF0gPSBjYWxsYmFjaztcblx0XHRjYWxsYmFjayhjb21wb25lbnQuJCQuY3R4W2luZGV4XSk7XG5cdH1cbn1cblxuLyoqIEByZXR1cm5zIHt2b2lkfSAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZV9jb21wb25lbnQoYmxvY2spIHtcblx0YmxvY2sgJiYgYmxvY2suYygpO1xufVxuXG4vKiogQHJldHVybnMge3ZvaWR9ICovXG5leHBvcnQgZnVuY3Rpb24gY2xhaW1fY29tcG9uZW50KGJsb2NrLCBwYXJlbnRfbm9kZXMpIHtcblx0YmxvY2sgJiYgYmxvY2subChwYXJlbnRfbm9kZXMpO1xufVxuXG4vKiogQHJldHVybnMge3ZvaWR9ICovXG5leHBvcnQgZnVuY3Rpb24gbW91bnRfY29tcG9uZW50KGNvbXBvbmVudCwgdGFyZ2V0LCBhbmNob3IpIHtcblx0Y29uc3QgeyBmcmFnbWVudCwgYWZ0ZXJfdXBkYXRlIH0gPSBjb21wb25lbnQuJCQ7XG5cdGZyYWdtZW50ICYmIGZyYWdtZW50Lm0odGFyZ2V0LCBhbmNob3IpO1xuXHQvLyBvbk1vdW50IGhhcHBlbnMgYmVmb3JlIHRoZSBpbml0aWFsIGFmdGVyVXBkYXRlXG5cdGFkZF9yZW5kZXJfY2FsbGJhY2soKCkgPT4ge1xuXHRcdGNvbnN0IG5ld19vbl9kZXN0cm95ID0gY29tcG9uZW50LiQkLm9uX21vdW50Lm1hcChydW4pLmZpbHRlcihpc19mdW5jdGlvbik7XG5cdFx0Ly8gaWYgdGhlIGNvbXBvbmVudCB3YXMgZGVzdHJveWVkIGltbWVkaWF0ZWx5XG5cdFx0Ly8gaXQgd2lsbCB1cGRhdGUgdGhlIGAkJC5vbl9kZXN0cm95YCByZWZlcmVuY2UgdG8gYG51bGxgLlxuXHRcdC8vIHRoZSBkZXN0cnVjdHVyZWQgb25fZGVzdHJveSBtYXkgc3RpbGwgcmVmZXJlbmNlIHRvIHRoZSBvbGQgYXJyYXlcblx0XHRpZiAoY29tcG9uZW50LiQkLm9uX2Rlc3Ryb3kpIHtcblx0XHRcdGNvbXBvbmVudC4kJC5vbl9kZXN0cm95LnB1c2goLi4ubmV3X29uX2Rlc3Ryb3kpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHQvLyBFZGdlIGNhc2UgLSBjb21wb25lbnQgd2FzIGRlc3Ryb3llZCBpbW1lZGlhdGVseSxcblx0XHRcdC8vIG1vc3QgbGlrZWx5IGFzIGEgcmVzdWx0IG9mIGEgYmluZGluZyBpbml0aWFsaXNpbmdcblx0XHRcdHJ1bl9hbGwobmV3X29uX2Rlc3Ryb3kpO1xuXHRcdH1cblx0XHRjb21wb25lbnQuJCQub25fbW91bnQgPSBbXTtcblx0fSk7XG5cdGFmdGVyX3VwZGF0ZS5mb3JFYWNoKGFkZF9yZW5kZXJfY2FsbGJhY2spO1xufVxuXG4vKiogQHJldHVybnMge3ZvaWR9ICovXG5leHBvcnQgZnVuY3Rpb24gZGVzdHJveV9jb21wb25lbnQoY29tcG9uZW50LCBkZXRhY2hpbmcpIHtcblx0Y29uc3QgJCQgPSBjb21wb25lbnQuJCQ7XG5cdGlmICgkJC5mcmFnbWVudCAhPT0gbnVsbCkge1xuXHRcdGZsdXNoX3JlbmRlcl9jYWxsYmFja3MoJCQuYWZ0ZXJfdXBkYXRlKTtcblx0XHRydW5fYWxsKCQkLm9uX2Rlc3Ryb3kpO1xuXHRcdCQkLmZyYWdtZW50ICYmICQkLmZyYWdtZW50LmQoZGV0YWNoaW5nKTtcblx0XHQvLyBUT0RPIG51bGwgb3V0IG90aGVyIHJlZnMsIGluY2x1ZGluZyBjb21wb25lbnQuJCQgKGJ1dCBuZWVkIHRvXG5cdFx0Ly8gcHJlc2VydmUgZmluYWwgc3RhdGU/KVxuXHRcdCQkLm9uX2Rlc3Ryb3kgPSAkJC5mcmFnbWVudCA9IG51bGw7XG5cdFx0JCQuY3R4ID0gW107XG5cdH1cbn1cblxuLyoqIEByZXR1cm5zIHt2b2lkfSAqL1xuZnVuY3Rpb24gbWFrZV9kaXJ0eShjb21wb25lbnQsIGkpIHtcblx0aWYgKGNvbXBvbmVudC4kJC5kaXJ0eVswXSA9PT0gLTEpIHtcblx0XHRkaXJ0eV9jb21wb25lbnRzLnB1c2goY29tcG9uZW50KTtcblx0XHRzY2hlZHVsZV91cGRhdGUoKTtcblx0XHRjb21wb25lbnQuJCQuZGlydHkuZmlsbCgwKTtcblx0fVxuXHRjb21wb25lbnQuJCQuZGlydHlbKGkgLyAzMSkgfCAwXSB8PSAxIDw8IGkgJSAzMTtcbn1cblxuLy8gVE9ETzogRG9jdW1lbnQgdGhlIG90aGVyIHBhcmFtc1xuLyoqXG4gKiBAcGFyYW0ge1N2ZWx0ZUNvbXBvbmVudH0gY29tcG9uZW50XG4gKiBAcGFyYW0ge2ltcG9ydCgnLi9wdWJsaWMuanMnKS5Db21wb25lbnRDb25zdHJ1Y3Rvck9wdGlvbnN9IG9wdGlvbnNcbiAqXG4gKiBAcGFyYW0ge2ltcG9ydCgnLi91dGlscy5qcycpWydub3RfZXF1YWwnXX0gbm90X2VxdWFsIFVzZWQgdG8gY29tcGFyZSBwcm9wcyBhbmQgc3RhdGUgdmFsdWVzLlxuICogQHBhcmFtIHsodGFyZ2V0OiBFbGVtZW50IHwgU2hhZG93Um9vdCkgPT4gdm9pZH0gW2FwcGVuZF9zdHlsZXNdIEZ1bmN0aW9uIHRoYXQgYXBwZW5kcyBzdHlsZXMgdG8gdGhlIERPTSB3aGVuIHRoZSBjb21wb25lbnQgaXMgZmlyc3QgaW5pdGlhbGlzZWQuXG4gKiBUaGlzIHdpbGwgYmUgdGhlIGBhZGRfY3NzYCBmdW5jdGlvbiBmcm9tIHRoZSBjb21waWxlZCBjb21wb25lbnQuXG4gKlxuICogQHJldHVybnMge3ZvaWR9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpbml0KFxuXHRjb21wb25lbnQsXG5cdG9wdGlvbnMsXG5cdGluc3RhbmNlLFxuXHRjcmVhdGVfZnJhZ21lbnQsXG5cdG5vdF9lcXVhbCxcblx0cHJvcHMsXG5cdGFwcGVuZF9zdHlsZXMgPSBudWxsLFxuXHRkaXJ0eSA9IFstMV1cbikge1xuXHRjb25zdCBwYXJlbnRfY29tcG9uZW50ID0gY3VycmVudF9jb21wb25lbnQ7XG5cdHNldF9jdXJyZW50X2NvbXBvbmVudChjb21wb25lbnQpO1xuXHQvKiogQHR5cGUge2ltcG9ydCgnLi9wcml2YXRlLmpzJykuVCQkfSAqL1xuXHRjb25zdCAkJCA9IChjb21wb25lbnQuJCQgPSB7XG5cdFx0ZnJhZ21lbnQ6IG51bGwsXG5cdFx0Y3R4OiBbXSxcblx0XHQvLyBzdGF0ZVxuXHRcdHByb3BzLFxuXHRcdHVwZGF0ZTogbm9vcCxcblx0XHRub3RfZXF1YWwsXG5cdFx0Ym91bmQ6IGJsYW5rX29iamVjdCgpLFxuXHRcdC8vIGxpZmVjeWNsZVxuXHRcdG9uX21vdW50OiBbXSxcblx0XHRvbl9kZXN0cm95OiBbXSxcblx0XHRvbl9kaXNjb25uZWN0OiBbXSxcblx0XHRiZWZvcmVfdXBkYXRlOiBbXSxcblx0XHRhZnRlcl91cGRhdGU6IFtdLFxuXHRcdGNvbnRleHQ6IG5ldyBNYXAob3B0aW9ucy5jb250ZXh0IHx8IChwYXJlbnRfY29tcG9uZW50ID8gcGFyZW50X2NvbXBvbmVudC4kJC5jb250ZXh0IDogW10pKSxcblx0XHQvLyBldmVyeXRoaW5nIGVsc2Vcblx0XHRjYWxsYmFja3M6IGJsYW5rX29iamVjdCgpLFxuXHRcdGRpcnR5LFxuXHRcdHNraXBfYm91bmQ6IGZhbHNlLFxuXHRcdHJvb3Q6IG9wdGlvbnMudGFyZ2V0IHx8IHBhcmVudF9jb21wb25lbnQuJCQucm9vdFxuXHR9KTtcblx0YXBwZW5kX3N0eWxlcyAmJiBhcHBlbmRfc3R5bGVzKCQkLnJvb3QpO1xuXHRsZXQgcmVhZHkgPSBmYWxzZTtcblx0JCQuY3R4ID0gaW5zdGFuY2Vcblx0XHQ/IGluc3RhbmNlKGNvbXBvbmVudCwgb3B0aW9ucy5wcm9wcyB8fCB7fSwgKGksIHJldCwgLi4ucmVzdCkgPT4ge1xuXHRcdFx0XHRjb25zdCB2YWx1ZSA9IHJlc3QubGVuZ3RoID8gcmVzdFswXSA6IHJldDtcblx0XHRcdFx0aWYgKCQkLmN0eCAmJiBub3RfZXF1YWwoJCQuY3R4W2ldLCAoJCQuY3R4W2ldID0gdmFsdWUpKSkge1xuXHRcdFx0XHRcdGlmICghJCQuc2tpcF9ib3VuZCAmJiAkJC5ib3VuZFtpXSkgJCQuYm91bmRbaV0odmFsdWUpO1xuXHRcdFx0XHRcdGlmIChyZWFkeSkgbWFrZV9kaXJ0eShjb21wb25lbnQsIGkpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiByZXQ7XG5cdFx0ICB9KVxuXHRcdDogW107XG5cdCQkLnVwZGF0ZSgpO1xuXHRyZWFkeSA9IHRydWU7XG5cdHJ1bl9hbGwoJCQuYmVmb3JlX3VwZGF0ZSk7XG5cdC8vIGBmYWxzZWAgYXMgYSBzcGVjaWFsIGNhc2Ugb2Ygbm8gRE9NIGNvbXBvbmVudFxuXHQkJC5mcmFnbWVudCA9IGNyZWF0ZV9mcmFnbWVudCA/IGNyZWF0ZV9mcmFnbWVudCgkJC5jdHgpIDogZmFsc2U7XG5cdGlmIChvcHRpb25zLnRhcmdldCkge1xuXHRcdGlmIChvcHRpb25zLmh5ZHJhdGUpIHtcblx0XHRcdHN0YXJ0X2h5ZHJhdGluZygpO1xuXHRcdFx0Ly8gVE9ETzogd2hhdCBpcyB0aGUgY29ycmVjdCB0eXBlIGhlcmU/XG5cdFx0XHQvLyBAdHMtZXhwZWN0LWVycm9yXG5cdFx0XHRjb25zdCBub2RlcyA9IGNoaWxkcmVuKG9wdGlvbnMudGFyZ2V0KTtcblx0XHRcdCQkLmZyYWdtZW50ICYmICQkLmZyYWdtZW50Lmwobm9kZXMpO1xuXHRcdFx0bm9kZXMuZm9yRWFjaChkZXRhY2gpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLW5vbi1udWxsLWFzc2VydGlvblxuXHRcdFx0JCQuZnJhZ21lbnQgJiYgJCQuZnJhZ21lbnQuYygpO1xuXHRcdH1cblx0XHRpZiAob3B0aW9ucy5pbnRybykgdHJhbnNpdGlvbl9pbihjb21wb25lbnQuJCQuZnJhZ21lbnQpO1xuXHRcdG1vdW50X2NvbXBvbmVudChjb21wb25lbnQsIG9wdGlvbnMudGFyZ2V0LCBvcHRpb25zLmFuY2hvcik7XG5cdFx0ZW5kX2h5ZHJhdGluZygpO1xuXHRcdGZsdXNoKCk7XG5cdH1cblx0c2V0X2N1cnJlbnRfY29tcG9uZW50KHBhcmVudF9jb21wb25lbnQpO1xufVxuXG5leHBvcnQgbGV0IFN2ZWx0ZUVsZW1lbnQ7XG5cbmlmICh0eXBlb2YgSFRNTEVsZW1lbnQgPT09ICdmdW5jdGlvbicpIHtcblx0U3ZlbHRlRWxlbWVudCA9IGNsYXNzIGV4dGVuZHMgSFRNTEVsZW1lbnQge1xuXHRcdC8qKiBUaGUgU3ZlbHRlIGNvbXBvbmVudCBjb25zdHJ1Y3RvciAqL1xuXHRcdCQkY3Rvcjtcblx0XHQvKiogU2xvdHMgKi9cblx0XHQkJHM7XG5cdFx0LyoqIFRoZSBTdmVsdGUgY29tcG9uZW50IGluc3RhbmNlICovXG5cdFx0JCRjO1xuXHRcdC8qKiBXaGV0aGVyIG9yIG5vdCB0aGUgY3VzdG9tIGVsZW1lbnQgaXMgY29ubmVjdGVkICovXG5cdFx0JCRjbiA9IGZhbHNlO1xuXHRcdC8qKiBDb21wb25lbnQgcHJvcHMgZGF0YSAqL1xuXHRcdCQkZCA9IHt9O1xuXHRcdC8qKiBgdHJ1ZWAgaWYgY3VycmVudGx5IGluIHRoZSBwcm9jZXNzIG9mIHJlZmxlY3RpbmcgY29tcG9uZW50IHByb3BzIGJhY2sgdG8gYXR0cmlidXRlcyAqL1xuXHRcdCQkciA9IGZhbHNlO1xuXHRcdC8qKiBAdHlwZSB7UmVjb3JkPHN0cmluZywgQ3VzdG9tRWxlbWVudFByb3BEZWZpbml0aW9uPn0gUHJvcHMgZGVmaW5pdGlvbiAobmFtZSwgcmVmbGVjdGVkLCB0eXBlIGV0YykgKi9cblx0XHQkJHBfZCA9IHt9O1xuXHRcdC8qKiBAdHlwZSB7UmVjb3JkPHN0cmluZywgRnVuY3Rpb25bXT59IEV2ZW50IGxpc3RlbmVycyAqL1xuXHRcdCQkbCA9IHt9O1xuXHRcdC8qKiBAdHlwZSB7TWFwPEZ1bmN0aW9uLCBGdW5jdGlvbj59IEV2ZW50IGxpc3RlbmVyIHVuc3Vic2NyaWJlIGZ1bmN0aW9ucyAqL1xuXHRcdCQkbF91ID0gbmV3IE1hcCgpO1xuXG5cdFx0Y29uc3RydWN0b3IoJCRjb21wb25lbnRDdG9yLCAkJHNsb3RzLCB1c2Vfc2hhZG93X2RvbSkge1xuXHRcdFx0c3VwZXIoKTtcblx0XHRcdHRoaXMuJCRjdG9yID0gJCRjb21wb25lbnRDdG9yO1xuXHRcdFx0dGhpcy4kJHMgPSAkJHNsb3RzO1xuXHRcdFx0aWYgKHVzZV9zaGFkb3dfZG9tKSB7XG5cdFx0XHRcdHRoaXMuYXR0YWNoU2hhZG93KHsgbW9kZTogJ29wZW4nIH0pO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGFkZEV2ZW50TGlzdGVuZXIodHlwZSwgbGlzdGVuZXIsIG9wdGlvbnMpIHtcblx0XHRcdC8vIFdlIGNhbid0IGRldGVybWluZSB1cGZyb250IGlmIHRoZSBldmVudCBpcyBhIGN1c3RvbSBldmVudCBvciBub3QsIHNvIHdlIGhhdmUgdG9cblx0XHRcdC8vIGxpc3RlbiB0byBib3RoLiBJZiBzb21lb25lIHVzZXMgYSBjdXN0b20gZXZlbnQgd2l0aCB0aGUgc2FtZSBuYW1lIGFzIGEgcmVndWxhclxuXHRcdFx0Ly8gYnJvd3NlciBldmVudCwgdGhpcyBmaXJlcyB0d2ljZSAtIHdlIGNhbid0IGF2b2lkIHRoYXQuXG5cdFx0XHR0aGlzLiQkbFt0eXBlXSA9IHRoaXMuJCRsW3R5cGVdIHx8IFtdO1xuXHRcdFx0dGhpcy4kJGxbdHlwZV0ucHVzaChsaXN0ZW5lcik7XG5cdFx0XHRpZiAodGhpcy4kJGMpIHtcblx0XHRcdFx0Y29uc3QgdW5zdWIgPSB0aGlzLiQkYy4kb24odHlwZSwgbGlzdGVuZXIpO1xuXHRcdFx0XHR0aGlzLiQkbF91LnNldChsaXN0ZW5lciwgdW5zdWIpO1xuXHRcdFx0fVxuXHRcdFx0c3VwZXIuYWRkRXZlbnRMaXN0ZW5lcih0eXBlLCBsaXN0ZW5lciwgb3B0aW9ucyk7XG5cdFx0fVxuXG5cdFx0cmVtb3ZlRXZlbnRMaXN0ZW5lcih0eXBlLCBsaXN0ZW5lciwgb3B0aW9ucykge1xuXHRcdFx0c3VwZXIucmVtb3ZlRXZlbnRMaXN0ZW5lcih0eXBlLCBsaXN0ZW5lciwgb3B0aW9ucyk7XG5cdFx0XHRpZiAodGhpcy4kJGMpIHtcblx0XHRcdFx0Y29uc3QgdW5zdWIgPSB0aGlzLiQkbF91LmdldChsaXN0ZW5lcik7XG5cdFx0XHRcdGlmICh1bnN1Yikge1xuXHRcdFx0XHRcdHVuc3ViKCk7XG5cdFx0XHRcdFx0dGhpcy4kJGxfdS5kZWxldGUobGlzdGVuZXIpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRpZiAodGhpcy4kJGxbdHlwZV0pIHtcblx0XHRcdFx0Y29uc3QgaWR4ID0gdGhpcy4kJGxbdHlwZV0uaW5kZXhPZihsaXN0ZW5lcik7XG5cdFx0XHRcdGlmIChpZHggPj0gMCkge1xuXHRcdFx0XHRcdHRoaXMuJCRsW3R5cGVdLnNwbGljZShpZHgsIDEpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0YXN5bmMgY29ubmVjdGVkQ2FsbGJhY2soKSB7XG5cdFx0XHR0aGlzLiQkY24gPSB0cnVlO1xuXHRcdFx0aWYgKCF0aGlzLiQkYykge1xuXHRcdFx0XHQvLyBXZSB3YWl0IG9uZSB0aWNrIHRvIGxldCBwb3NzaWJsZSBjaGlsZCBzbG90IGVsZW1lbnRzIGJlIGNyZWF0ZWQvbW91bnRlZFxuXHRcdFx0XHRhd2FpdCBQcm9taXNlLnJlc29sdmUoKTtcblx0XHRcdFx0aWYgKCF0aGlzLiQkY24gfHwgdGhpcy4kJGMpIHtcblx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdH1cblx0XHRcdFx0ZnVuY3Rpb24gY3JlYXRlX3Nsb3QobmFtZSkge1xuXHRcdFx0XHRcdHJldHVybiAoKSA9PiB7XG5cdFx0XHRcdFx0XHRsZXQgbm9kZTtcblx0XHRcdFx0XHRcdGNvbnN0IG9iaiA9IHtcblx0XHRcdFx0XHRcdFx0YzogZnVuY3Rpb24gY3JlYXRlKCkge1xuXHRcdFx0XHRcdFx0XHRcdG5vZGUgPSBlbGVtZW50KCdzbG90Jyk7XG5cdFx0XHRcdFx0XHRcdFx0aWYgKG5hbWUgIT09ICdkZWZhdWx0Jykge1xuXHRcdFx0XHRcdFx0XHRcdFx0YXR0cihub2RlLCAnbmFtZScsIG5hbWUpO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fSxcblx0XHRcdFx0XHRcdFx0LyoqXG5cdFx0XHRcdFx0XHRcdCAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IHRhcmdldFxuXHRcdFx0XHRcdFx0XHQgKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBbYW5jaG9yXVxuXHRcdFx0XHRcdFx0XHQgKi9cblx0XHRcdFx0XHRcdFx0bTogZnVuY3Rpb24gbW91bnQodGFyZ2V0LCBhbmNob3IpIHtcblx0XHRcdFx0XHRcdFx0XHRpbnNlcnQodGFyZ2V0LCBub2RlLCBhbmNob3IpO1xuXHRcdFx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdFx0XHRkOiBmdW5jdGlvbiBkZXN0cm95KGRldGFjaGluZykge1xuXHRcdFx0XHRcdFx0XHRcdGlmIChkZXRhY2hpbmcpIHtcblx0XHRcdFx0XHRcdFx0XHRcdGRldGFjaChub2RlKTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH07XG5cdFx0XHRcdFx0XHRyZXR1cm4gb2JqO1xuXHRcdFx0XHRcdH07XG5cdFx0XHRcdH1cblx0XHRcdFx0Y29uc3QgJCRzbG90cyA9IHt9O1xuXHRcdFx0XHRjb25zdCBleGlzdGluZ19zbG90cyA9IGdldF9jdXN0b21fZWxlbWVudHNfc2xvdHModGhpcyk7XG5cdFx0XHRcdGZvciAoY29uc3QgbmFtZSBvZiB0aGlzLiQkcykge1xuXHRcdFx0XHRcdGlmIChuYW1lIGluIGV4aXN0aW5nX3Nsb3RzKSB7XG5cdFx0XHRcdFx0XHQkJHNsb3RzW25hbWVdID0gW2NyZWF0ZV9zbG90KG5hbWUpXTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0Zm9yIChjb25zdCBhdHRyaWJ1dGUgb2YgdGhpcy5hdHRyaWJ1dGVzKSB7XG5cdFx0XHRcdFx0Ly8gdGhpcy4kJGRhdGEgdGFrZXMgcHJlY2VkZW5jZSBvdmVyIHRoaXMuYXR0cmlidXRlc1xuXHRcdFx0XHRcdGNvbnN0IG5hbWUgPSB0aGlzLiQkZ19wKGF0dHJpYnV0ZS5uYW1lKTtcblx0XHRcdFx0XHRpZiAoIShuYW1lIGluIHRoaXMuJCRkKSkge1xuXHRcdFx0XHRcdFx0dGhpcy4kJGRbbmFtZV0gPSBnZXRfY3VzdG9tX2VsZW1lbnRfdmFsdWUobmFtZSwgYXR0cmlidXRlLnZhbHVlLCB0aGlzLiQkcF9kLCAndG9Qcm9wJyk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdC8vIFBvcnQgb3ZlciBwcm9wcyB0aGF0IHdlcmUgc2V0IHByb2dyYW1tYXRpY2FsbHkgYmVmb3JlIGNlIHdhcyBpbml0aWFsaXplZFxuXHRcdFx0XHRmb3IgKGNvbnN0IGtleSBpbiB0aGlzLiQkcF9kKSB7XG5cdFx0XHRcdFx0aWYgKCEoa2V5IGluIHRoaXMuJCRkKSAmJiB0aGlzW2tleV0gIT09IHVuZGVmaW5lZCkge1xuXHRcdFx0XHRcdFx0dGhpcy4kJGRba2V5XSA9IHRoaXNba2V5XTsgLy8gZG9uJ3QgdHJhbnNmb3JtLCB0aGVzZSB3ZXJlIHNldCB0aHJvdWdoIEphdmFTY3JpcHRcblx0XHRcdFx0XHRcdGRlbGV0ZSB0aGlzW2tleV07IC8vIHJlbW92ZSB0aGUgcHJvcGVydHkgdGhhdCBzaGFkb3dzIHRoZSBnZXR0ZXIvc2V0dGVyXG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdHRoaXMuJCRjID0gbmV3IHRoaXMuJCRjdG9yKHtcblx0XHRcdFx0XHR0YXJnZXQ6IHRoaXMuc2hhZG93Um9vdCB8fCB0aGlzLFxuXHRcdFx0XHRcdHByb3BzOiB7XG5cdFx0XHRcdFx0XHQuLi50aGlzLiQkZCxcblx0XHRcdFx0XHRcdCQkc2xvdHMsXG5cdFx0XHRcdFx0XHQkJHNjb3BlOiB7XG5cdFx0XHRcdFx0XHRcdGN0eDogW11cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0pO1xuXG5cdFx0XHRcdC8vIFJlZmxlY3QgY29tcG9uZW50IHByb3BzIGFzIGF0dHJpYnV0ZXNcblx0XHRcdFx0Y29uc3QgcmVmbGVjdF9hdHRyaWJ1dGVzID0gKCkgPT4ge1xuXHRcdFx0XHRcdHRoaXMuJCRyID0gdHJ1ZTtcblx0XHRcdFx0XHRmb3IgKGNvbnN0IGtleSBpbiB0aGlzLiQkcF9kKSB7XG5cdFx0XHRcdFx0XHR0aGlzLiQkZFtrZXldID0gdGhpcy4kJGMuJCQuY3R4W3RoaXMuJCRjLiQkLnByb3BzW2tleV1dO1xuXHRcdFx0XHRcdFx0aWYgKHRoaXMuJCRwX2Rba2V5XS5yZWZsZWN0KSB7XG5cdFx0XHRcdFx0XHRcdGNvbnN0IGF0dHJpYnV0ZV92YWx1ZSA9IGdldF9jdXN0b21fZWxlbWVudF92YWx1ZShcblx0XHRcdFx0XHRcdFx0XHRrZXksXG5cdFx0XHRcdFx0XHRcdFx0dGhpcy4kJGRba2V5XSxcblx0XHRcdFx0XHRcdFx0XHR0aGlzLiQkcF9kLFxuXHRcdFx0XHRcdFx0XHRcdCd0b0F0dHJpYnV0ZSdcblx0XHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRcdFx0aWYgKGF0dHJpYnV0ZV92YWx1ZSA9PSBudWxsKSB7XG5cdFx0XHRcdFx0XHRcdFx0dGhpcy5yZW1vdmVBdHRyaWJ1dGUodGhpcy4kJHBfZFtrZXldLmF0dHJpYnV0ZSB8fCBrZXkpO1xuXHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRcdHRoaXMuc2V0QXR0cmlidXRlKHRoaXMuJCRwX2Rba2V5XS5hdHRyaWJ1dGUgfHwga2V5LCBhdHRyaWJ1dGVfdmFsdWUpO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHRoaXMuJCRyID0gZmFsc2U7XG5cdFx0XHRcdH07XG5cdFx0XHRcdHRoaXMuJCRjLiQkLmFmdGVyX3VwZGF0ZS5wdXNoKHJlZmxlY3RfYXR0cmlidXRlcyk7XG5cdFx0XHRcdHJlZmxlY3RfYXR0cmlidXRlcygpOyAvLyBvbmNlIGluaXRpYWxseSBiZWNhdXNlIGFmdGVyX3VwZGF0ZSBpcyBhZGRlZCB0b28gbGF0ZSBmb3IgZmlyc3QgcmVuZGVyXG5cblx0XHRcdFx0Zm9yIChjb25zdCB0eXBlIGluIHRoaXMuJCRsKSB7XG5cdFx0XHRcdFx0Zm9yIChjb25zdCBsaXN0ZW5lciBvZiB0aGlzLiQkbFt0eXBlXSkge1xuXHRcdFx0XHRcdFx0Y29uc3QgdW5zdWIgPSB0aGlzLiQkYy4kb24odHlwZSwgbGlzdGVuZXIpO1xuXHRcdFx0XHRcdFx0dGhpcy4kJGxfdS5zZXQobGlzdGVuZXIsIHVuc3ViKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0dGhpcy4kJGwgPSB7fTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBXZSBkb24ndCBuZWVkIHRoaXMgd2hlbiB3b3JraW5nIHdpdGhpbiBTdmVsdGUgY29kZSwgYnV0IGZvciBjb21wYXRpYmlsaXR5IG9mIHBlb3BsZSB1c2luZyB0aGlzIG91dHNpZGUgb2YgU3ZlbHRlXG5cdFx0Ly8gYW5kIHNldHRpbmcgYXR0cmlidXRlcyB0aHJvdWdoIHNldEF0dHJpYnV0ZSBldGMsIHRoaXMgaXMgaGVscGZ1bFxuXHRcdGF0dHJpYnV0ZUNoYW5nZWRDYWxsYmFjayhhdHRyLCBfb2xkVmFsdWUsIG5ld1ZhbHVlKSB7XG5cdFx0XHRpZiAodGhpcy4kJHIpIHJldHVybjtcblx0XHRcdGF0dHIgPSB0aGlzLiQkZ19wKGF0dHIpO1xuXHRcdFx0dGhpcy4kJGRbYXR0cl0gPSBnZXRfY3VzdG9tX2VsZW1lbnRfdmFsdWUoYXR0ciwgbmV3VmFsdWUsIHRoaXMuJCRwX2QsICd0b1Byb3AnKTtcblx0XHRcdHRoaXMuJCRjPy4kc2V0KHsgW2F0dHJdOiB0aGlzLiQkZFthdHRyXSB9KTtcblx0XHR9XG5cblx0XHRkaXNjb25uZWN0ZWRDYWxsYmFjaygpIHtcblx0XHRcdHRoaXMuJCRjbiA9IGZhbHNlO1xuXHRcdFx0Ly8gSW4gYSBtaWNyb3Rhc2ssIGJlY2F1c2UgdGhpcyBjb3VsZCBiZSBhIG1vdmUgd2l0aGluIHRoZSBET01cblx0XHRcdFByb21pc2UucmVzb2x2ZSgpLnRoZW4oKCkgPT4ge1xuXHRcdFx0XHRpZiAoIXRoaXMuJCRjbiAmJiB0aGlzLiQkYykge1xuXHRcdFx0XHRcdHRoaXMuJCRjLiRkZXN0cm95KCk7XG5cdFx0XHRcdFx0dGhpcy4kJGMgPSB1bmRlZmluZWQ7XG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXHRcdH1cblxuXHRcdCQkZ19wKGF0dHJpYnV0ZV9uYW1lKSB7XG5cdFx0XHRyZXR1cm4gKFxuXHRcdFx0XHRPYmplY3Qua2V5cyh0aGlzLiQkcF9kKS5maW5kKFxuXHRcdFx0XHRcdChrZXkpID0+XG5cdFx0XHRcdFx0XHR0aGlzLiQkcF9kW2tleV0uYXR0cmlidXRlID09PSBhdHRyaWJ1dGVfbmFtZSB8fFxuXHRcdFx0XHRcdFx0KCF0aGlzLiQkcF9kW2tleV0uYXR0cmlidXRlICYmIGtleS50b0xvd2VyQ2FzZSgpID09PSBhdHRyaWJ1dGVfbmFtZSlcblx0XHRcdFx0KSB8fCBhdHRyaWJ1dGVfbmFtZVxuXHRcdFx0KTtcblx0XHR9XG5cdH07XG59XG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IHByb3BcbiAqIEBwYXJhbSB7YW55fSB2YWx1ZVxuICogQHBhcmFtIHtSZWNvcmQ8c3RyaW5nLCBDdXN0b21FbGVtZW50UHJvcERlZmluaXRpb24+fSBwcm9wc19kZWZpbml0aW9uXG4gKiBAcGFyYW0geyd0b0F0dHJpYnV0ZScgfCAndG9Qcm9wJ30gW3RyYW5zZm9ybV1cbiAqL1xuZnVuY3Rpb24gZ2V0X2N1c3RvbV9lbGVtZW50X3ZhbHVlKHByb3AsIHZhbHVlLCBwcm9wc19kZWZpbml0aW9uLCB0cmFuc2Zvcm0pIHtcblx0Y29uc3QgdHlwZSA9IHByb3BzX2RlZmluaXRpb25bcHJvcF0/LnR5cGU7XG5cdHZhbHVlID0gdHlwZSA9PT0gJ0Jvb2xlYW4nICYmIHR5cGVvZiB2YWx1ZSAhPT0gJ2Jvb2xlYW4nID8gdmFsdWUgIT0gbnVsbCA6IHZhbHVlO1xuXHRpZiAoIXRyYW5zZm9ybSB8fCAhcHJvcHNfZGVmaW5pdGlvbltwcm9wXSkge1xuXHRcdHJldHVybiB2YWx1ZTtcblx0fSBlbHNlIGlmICh0cmFuc2Zvcm0gPT09ICd0b0F0dHJpYnV0ZScpIHtcblx0XHRzd2l0Y2ggKHR5cGUpIHtcblx0XHRcdGNhc2UgJ09iamVjdCc6XG5cdFx0XHRjYXNlICdBcnJheSc6XG5cdFx0XHRcdHJldHVybiB2YWx1ZSA9PSBudWxsID8gbnVsbCA6IEpTT04uc3RyaW5naWZ5KHZhbHVlKTtcblx0XHRcdGNhc2UgJ0Jvb2xlYW4nOlxuXHRcdFx0XHRyZXR1cm4gdmFsdWUgPyAnJyA6IG51bGw7XG5cdFx0XHRjYXNlICdOdW1iZXInOlxuXHRcdFx0XHRyZXR1cm4gdmFsdWUgPT0gbnVsbCA/IG51bGwgOiB2YWx1ZTtcblx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdHJldHVybiB2YWx1ZTtcblx0XHR9XG5cdH0gZWxzZSB7XG5cdFx0c3dpdGNoICh0eXBlKSB7XG5cdFx0XHRjYXNlICdPYmplY3QnOlxuXHRcdFx0Y2FzZSAnQXJyYXknOlxuXHRcdFx0XHRyZXR1cm4gdmFsdWUgJiYgSlNPTi5wYXJzZSh2YWx1ZSk7XG5cdFx0XHRjYXNlICdCb29sZWFuJzpcblx0XHRcdFx0cmV0dXJuIHZhbHVlOyAvLyBjb252ZXJzaW9uIGFscmVhZHkgaGFuZGxlZCBhYm92ZVxuXHRcdFx0Y2FzZSAnTnVtYmVyJzpcblx0XHRcdFx0cmV0dXJuIHZhbHVlICE9IG51bGwgPyArdmFsdWUgOiB2YWx1ZTtcblx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdHJldHVybiB2YWx1ZTtcblx0XHR9XG5cdH1cbn1cblxuLyoqXG4gKiBAaW50ZXJuYWxcbiAqXG4gKiBUdXJuIGEgU3ZlbHRlIGNvbXBvbmVudCBpbnRvIGEgY3VzdG9tIGVsZW1lbnQuXG4gKiBAcGFyYW0ge2ltcG9ydCgnLi9wdWJsaWMuanMnKS5Db21wb25lbnRUeXBlfSBDb21wb25lbnQgIEEgU3ZlbHRlIGNvbXBvbmVudCBjb25zdHJ1Y3RvclxuICogQHBhcmFtIHtSZWNvcmQ8c3RyaW5nLCBDdXN0b21FbGVtZW50UHJvcERlZmluaXRpb24+fSBwcm9wc19kZWZpbml0aW9uICBUaGUgcHJvcHMgdG8gb2JzZXJ2ZVxuICogQHBhcmFtIHtzdHJpbmdbXX0gc2xvdHMgIFRoZSBzbG90cyB0byBjcmVhdGVcbiAqIEBwYXJhbSB7c3RyaW5nW119IGFjY2Vzc29ycyAgT3RoZXIgYWNjZXNzb3JzIGJlc2lkZXMgdGhlIG9uZXMgZm9yIHByb3BzIHRoZSBjb21wb25lbnQgaGFzXG4gKiBAcGFyYW0ge2Jvb2xlYW59IHVzZV9zaGFkb3dfZG9tICBXaGV0aGVyIHRvIHVzZSBzaGFkb3cgRE9NXG4gKiBAcGFyYW0geyhjZTogbmV3ICgpID0+IEhUTUxFbGVtZW50KSA9PiBuZXcgKCkgPT4gSFRNTEVsZW1lbnR9IFtleHRlbmRdXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVfY3VzdG9tX2VsZW1lbnQoXG5cdENvbXBvbmVudCxcblx0cHJvcHNfZGVmaW5pdGlvbixcblx0c2xvdHMsXG5cdGFjY2Vzc29ycyxcblx0dXNlX3NoYWRvd19kb20sXG5cdGV4dGVuZFxuKSB7XG5cdGxldCBDbGFzcyA9IGNsYXNzIGV4dGVuZHMgU3ZlbHRlRWxlbWVudCB7XG5cdFx0Y29uc3RydWN0b3IoKSB7XG5cdFx0XHRzdXBlcihDb21wb25lbnQsIHNsb3RzLCB1c2Vfc2hhZG93X2RvbSk7XG5cdFx0XHR0aGlzLiQkcF9kID0gcHJvcHNfZGVmaW5pdGlvbjtcblx0XHR9XG5cdFx0c3RhdGljIGdldCBvYnNlcnZlZEF0dHJpYnV0ZXMoKSB7XG5cdFx0XHRyZXR1cm4gT2JqZWN0LmtleXMocHJvcHNfZGVmaW5pdGlvbikubWFwKChrZXkpID0+XG5cdFx0XHRcdChwcm9wc19kZWZpbml0aW9uW2tleV0uYXR0cmlidXRlIHx8IGtleSkudG9Mb3dlckNhc2UoKVxuXHRcdFx0KTtcblx0XHR9XG5cdH07XG5cdE9iamVjdC5rZXlzKHByb3BzX2RlZmluaXRpb24pLmZvckVhY2goKHByb3ApID0+IHtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoQ2xhc3MucHJvdG90eXBlLCBwcm9wLCB7XG5cdFx0XHRnZXQoKSB7XG5cdFx0XHRcdHJldHVybiB0aGlzLiQkYyAmJiBwcm9wIGluIHRoaXMuJCRjID8gdGhpcy4kJGNbcHJvcF0gOiB0aGlzLiQkZFtwcm9wXTtcblx0XHRcdH0sXG5cdFx0XHRzZXQodmFsdWUpIHtcblx0XHRcdFx0dmFsdWUgPSBnZXRfY3VzdG9tX2VsZW1lbnRfdmFsdWUocHJvcCwgdmFsdWUsIHByb3BzX2RlZmluaXRpb24pO1xuXHRcdFx0XHR0aGlzLiQkZFtwcm9wXSA9IHZhbHVlO1xuXHRcdFx0XHR0aGlzLiQkYz8uJHNldCh7IFtwcm9wXTogdmFsdWUgfSk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdH0pO1xuXHRhY2Nlc3NvcnMuZm9yRWFjaCgoYWNjZXNzb3IpID0+IHtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoQ2xhc3MucHJvdG90eXBlLCBhY2Nlc3Nvciwge1xuXHRcdFx0Z2V0KCkge1xuXHRcdFx0XHRyZXR1cm4gdGhpcy4kJGM/LlthY2Nlc3Nvcl07XG5cdFx0XHR9XG5cdFx0fSk7XG5cdH0pO1xuXHRpZiAoZXh0ZW5kKSB7XG5cdFx0Ly8gQHRzLWV4cGVjdC1lcnJvciAtIGFzc2lnbmluZyBoZXJlIGlzIGZpbmVcblx0XHRDbGFzcyA9IGV4dGVuZChDbGFzcyk7XG5cdH1cblx0Q29tcG9uZW50LmVsZW1lbnQgPSAvKiogQHR5cGUge2FueX0gKi8gKENsYXNzKTtcblx0cmV0dXJuIENsYXNzO1xufVxuXG4vKipcbiAqIEJhc2UgY2xhc3MgZm9yIFN2ZWx0ZSBjb21wb25lbnRzLiBVc2VkIHdoZW4gZGV2PWZhbHNlLlxuICpcbiAqIEB0ZW1wbGF0ZSB7UmVjb3JkPHN0cmluZywgYW55Pn0gW1Byb3BzPWFueV1cbiAqIEB0ZW1wbGF0ZSB7UmVjb3JkPHN0cmluZywgYW55Pn0gW0V2ZW50cz1hbnldXG4gKi9cbmV4cG9ydCBjbGFzcyBTdmVsdGVDb21wb25lbnQge1xuXHQvKipcblx0ICogIyMjIFBSSVZBVEUgQVBJXG5cdCAqXG5cdCAqIERvIG5vdCB1c2UsIG1heSBjaGFuZ2UgYXQgYW55IHRpbWVcblx0ICpcblx0ICogQHR5cGUge2FueX1cblx0ICovXG5cdCQkID0gdW5kZWZpbmVkO1xuXHQvKipcblx0ICogIyMjIFBSSVZBVEUgQVBJXG5cdCAqXG5cdCAqIERvIG5vdCB1c2UsIG1heSBjaGFuZ2UgYXQgYW55IHRpbWVcblx0ICpcblx0ICogQHR5cGUge2FueX1cblx0ICovXG5cdCQkc2V0ID0gdW5kZWZpbmVkO1xuXG5cdC8qKiBAcmV0dXJucyB7dm9pZH0gKi9cblx0JGRlc3Ryb3koKSB7XG5cdFx0ZGVzdHJveV9jb21wb25lbnQodGhpcywgMSk7XG5cdFx0dGhpcy4kZGVzdHJveSA9IG5vb3A7XG5cdH1cblxuXHQvKipcblx0ICogQHRlbXBsYXRlIHtFeHRyYWN0PGtleW9mIEV2ZW50cywgc3RyaW5nPn0gS1xuXHQgKiBAcGFyYW0ge0t9IHR5cGVcblx0ICogQHBhcmFtIHsoKGU6IEV2ZW50c1tLXSkgPT4gdm9pZCkgfCBudWxsIHwgdW5kZWZpbmVkfSBjYWxsYmFja1xuXHQgKiBAcmV0dXJucyB7KCkgPT4gdm9pZH1cblx0ICovXG5cdCRvbih0eXBlLCBjYWxsYmFjaykge1xuXHRcdGlmICghaXNfZnVuY3Rpb24oY2FsbGJhY2spKSB7XG5cdFx0XHRyZXR1cm4gbm9vcDtcblx0XHR9XG5cdFx0Y29uc3QgY2FsbGJhY2tzID0gdGhpcy4kJC5jYWxsYmFja3NbdHlwZV0gfHwgKHRoaXMuJCQuY2FsbGJhY2tzW3R5cGVdID0gW10pO1xuXHRcdGNhbGxiYWNrcy5wdXNoKGNhbGxiYWNrKTtcblx0XHRyZXR1cm4gKCkgPT4ge1xuXHRcdFx0Y29uc3QgaW5kZXggPSBjYWxsYmFja3MuaW5kZXhPZihjYWxsYmFjayk7XG5cdFx0XHRpZiAoaW5kZXggIT09IC0xKSBjYWxsYmFja3Muc3BsaWNlKGluZGV4LCAxKTtcblx0XHR9O1xuXHR9XG5cblx0LyoqXG5cdCAqIEBwYXJhbSB7UGFydGlhbDxQcm9wcz59IHByb3BzXG5cdCAqIEByZXR1cm5zIHt2b2lkfVxuXHQgKi9cblx0JHNldChwcm9wcykge1xuXHRcdGlmICh0aGlzLiQkc2V0ICYmICFpc19lbXB0eShwcm9wcykpIHtcblx0XHRcdHRoaXMuJCQuc2tpcF9ib3VuZCA9IHRydWU7XG5cdFx0XHR0aGlzLiQkc2V0KHByb3BzKTtcblx0XHRcdHRoaXMuJCQuc2tpcF9ib3VuZCA9IGZhbHNlO1xuXHRcdH1cblx0fVxufVxuXG4vKipcbiAqIEB0eXBlZGVmIHtPYmplY3R9IEN1c3RvbUVsZW1lbnRQcm9wRGVmaW5pdGlvblxuICogQHByb3BlcnR5IHtzdHJpbmd9IFthdHRyaWJ1dGVdXG4gKiBAcHJvcGVydHkge2Jvb2xlYW59IFtyZWZsZWN0XVxuICogQHByb3BlcnR5IHsnU3RyaW5nJ3wnQm9vbGVhbid8J051bWJlcid8J0FycmF5J3wnT2JqZWN0J30gW3R5cGVdXG4gKi9cbiIsICIvLyBnZW5lcmF0ZWQgZHVyaW5nIHJlbGVhc2UsIGRvIG5vdCBtb2RpZnlcblxuLyoqXG4gKiBUaGUgY3VycmVudCB2ZXJzaW9uLCBhcyBzZXQgaW4gcGFja2FnZS5qc29uLlxuICpcbiAqIGh0dHBzOi8vc3ZlbHRlLmRldi9kb2NzL3N2ZWx0ZS1jb21waWxlciNzdmVsdGUtdmVyc2lvblxuICogQHR5cGUge3N0cmluZ31cbiAqL1xuZXhwb3J0IGNvbnN0IFZFUlNJT04gPSAnNC4yLjIwJztcbmV4cG9ydCBjb25zdCBQVUJMSUNfVkVSU0lPTiA9ICc0JztcbiIsICJpbXBvcnQgeyBQVUJMSUNfVkVSU0lPTiB9IGZyb20gJy4uLy4uLy4uL3NoYXJlZC92ZXJzaW9uLmpzJztcblxuaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnKVxuXHQvLyBAdHMtaWdub3JlXG5cdCh3aW5kb3cuX19zdmVsdGUgfHwgKHdpbmRvdy5fX3N2ZWx0ZSA9IHsgdjogbmV3IFNldCgpIH0pKS52LmFkZChQVUJMSUNfVkVSU0lPTik7XG4iLCAiaW1wb3J0IHtcclxuICBBcHAsIENhY2hlSXRlbSxcclxuICBFZGl0b3JSYW5nZSwgTGlua0NhY2hlLFxyXG4gIE1hcmtkb3duVmlldyxcclxuICBNZW51LFxyXG4gIE5vdGljZSwgUmVmZXJlbmNlQ2FjaGUsXHJcbiAgVEZpbGUsXHJcbiAgV29ya3NwYWNlTGVhZixcclxufSBmcm9tICdvYnNpZGlhbidcclxuaW1wb3J0IHtcclxuICBjb3B5LFxyXG4gIGNyZWF0ZU5ld01ETm90ZSxcclxuICBpc0luVmF1bHQsXHJcbiAgaXNMaW5rZWQsXHJcbiAgUmVzb2x2ZWRMaW5rcyxcclxufSBmcm9tICdvYnNpZGlhbi1jb21tdW5pdHktbGliJ1xyXG5pbXBvcnQgdHlwZSBBbmFseXNpc1ZpZXcgZnJvbSAnc3JjL0FuYWx5c2lzVmlldydcclxuaW1wb3J0IHsgREVDSU1BTFMsIElNR19FWFRFTlNJT05TLCBMSU5LRUQsIE5PVF9MSU5LRUQgfSBmcm9tICdzcmMvQ29uc3RhbnRzJ1xyXG5pbXBvcnQgdHlwZSB7XHJcbiAgQ29tcG9uZW50UmVzdWx0cyxcclxuICBHcmFwaEFuYWx5c2lzU2V0dGluZ3MsIExpbmVTZW50ZW5jZXMsXHJcbiAgUmVzdWx0TWFwLFxyXG4gIFN1YnR5cGUsXHJcbn0gZnJvbSAnc3JjL0ludGVyZmFjZXMnXHJcbmltcG9ydCB0eXBlIEdyYXBoQW5hbHlzaXNQbHVnaW4gZnJvbSAnc3JjL21haW4nXHJcbmltcG9ydCB7IENvQ2l0YXRpb24gfSBmcm9tICdzcmMvSW50ZXJmYWNlcydcclxuXHJcbmV4cG9ydCBjb25zdCBzdW0gPSAoYXJyOiBudW1iZXJbXSkgPT4ge1xyXG4gIGlmIChhcnIubGVuZ3RoID09PSAwKSB7XHJcbiAgICByZXR1cm4gMFxyXG4gIH1cclxuICByZXR1cm4gYXJyLnJlZHVjZSgoYSwgYikgPT4gYSArIGIpXHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBkZWJ1ZzxUPihzZXR0aW5nczogR3JhcGhBbmFseXNpc1NldHRpbmdzLCBsb2c6IFQpOiB2b2lkIHtcclxuICBpZiAoc2V0dGluZ3MuZGVidWdNb2RlKSB7XHJcbiAgICBjb25zb2xlLmxvZyhsb2cpXHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gc3VwZXJEZWJ1ZzxUPihzZXR0aW5nczogR3JhcGhBbmFseXNpc1NldHRpbmdzLCBsb2c6IFQpOiB2b2lkIHtcclxuICBpZiAoc2V0dGluZ3Muc3VwZXJEZWJ1Z01vZGUpIHtcclxuICAgIGNvbnNvbGUubG9nKGxvZylcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiByb3VuZE51bWJlcihudW06IG51bWJlciwgZGVjOiBudW1iZXIgPSBERUNJTUFMUyk6IG51bWJlciB7XHJcbiAgcmV0dXJuIE1hdGgucm91bmQobnVtICogTWF0aC5wb3coMTAsIGRlYykpIC8gTWF0aC5wb3coMTAsIGRlYylcclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IGRyb3BQYXRoID0gKHBhdGg6IHN0cmluZykgPT4ge1xyXG4gIHJldHVybiBwYXRoLnNwbGl0KCcvJykubGFzdCgpXHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBkcm9wRXh0ID0gKHBhdGg6IHN0cmluZykgPT5cclxuICBwYXRoLnNwbGl0KCcuJykubGVuZ3RoID09PSAxID8gcGF0aCA6IHBhdGguc3BsaXQoJy4nKS5zbGljZSgwLCAtMSkuam9pbignLicpXHJcbmV4cG9ydCBjb25zdCBnZXRFeHQgPSAocGF0aDogc3RyaW5nKSA9PiBwYXRoLnNwbGl0KCcuJykubGFzdCgpXHJcblxyXG5leHBvcnQgY29uc3QgY2xhc3NFeHQgPSAocGF0aDogc3RyaW5nKSA9PiBgR0EtJHtnZXRFeHQocGF0aCl9YFxyXG5leHBvcnQgY29uc3QgY2xhc3NSZXNvbHZlZCA9IChhcHA6IEFwcCwgbm9kZTogc3RyaW5nKSA9PlxyXG4gIG5vZGUuZW5kc1dpdGgoJy5tZCcpICYmICFpc0luVmF1bHQoYXBwLCBkcm9wRXh0KG5vZGUpKSA/ICdpcy11bnJlc29sdmVkJyA6ICcnXHJcbmV4cG9ydCBjb25zdCBjbGFzc0xpbmtlZCA9IChcclxuICByZXNvbHZlZExpbmtzOiBSZXNvbHZlZExpbmtzLFxyXG4gIGZyb206IHN0cmluZyxcclxuICB0bzogc3RyaW5nLFxyXG4gIGRpcmVjdGVkID0gZmFsc2VcclxuKSA9PiAoaXNMaW5rZWQocmVzb2x2ZWRMaW5rcywgZnJvbSwgdG8sIGRpcmVjdGVkKSA/IExJTktFRCA6IE5PVF9MSU5LRUQpXHJcblxyXG5leHBvcnQgY29uc3QgcHJlc2VudFBhdGggPSAocGF0aDogc3RyaW5nKSA9PiBkcm9wRXh0KGRyb3BQYXRoKHBhdGgpKVxyXG5cclxuZXhwb3J0IGNvbnN0IG54bkFycmF5ID0gKG46IG51bWJlcik6IHVuZGVmaW5lZFtdW10gPT5cclxuICBbLi4uQXJyYXkobildLm1hcCgoZSkgPT4gQXJyYXkobikpXHJcblxyXG5leHBvcnQgZnVuY3Rpb24gaG92ZXJQcmV2aWV3KFxyXG4gIGV2ZW50OiBNb3VzZUV2ZW50LFxyXG4gIHZpZXc6IEFuYWx5c2lzVmlldyxcclxuICB0bzogc3RyaW5nXHJcbik6IHZvaWQge1xyXG4gIGNvbnN0IHRhcmdldEVsID0gZXZlbnQudGFyZ2V0IGFzIEhUTUxFbGVtZW50XHJcblxyXG4gIHZpZXcuYXBwLndvcmtzcGFjZS50cmlnZ2VyKCdob3Zlci1saW5rJywge1xyXG4gICAgZXZlbnQsXHJcbiAgICBzb3VyY2U6IHZpZXcuZ2V0Vmlld1R5cGUoKSxcclxuICAgIGhvdmVyUGFyZW50OiB2aWV3LFxyXG4gICAgdGFyZ2V0RWwsXHJcbiAgICBsaW5rdGV4dDogdG8sXHJcbiAgfSlcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGxvb3NlcklzTGlua2VkKFxyXG4gIGFwcDogQXBwLFxyXG4gIGZyb206IHN0cmluZyxcclxuICB0bzogc3RyaW5nLFxyXG4gIGRpcmVjdGVkOiBib29sZWFuID0gdHJ1ZVxyXG4pIHtcclxuICBjb25zdCB7IHJlc29sdmVkTGlua3MsIHVucmVzb2x2ZWRMaW5rcyB9ID0gYXBwLm1ldGFkYXRhQ2FjaGVcclxuICBjb25zdCBmcm9tVG8gPVxyXG4gICAgcmVzb2x2ZWRMaW5rc1tmcm9tXT8uaGFzT3duUHJvcGVydHkodG8pIHx8XHJcbiAgICB1bnJlc29sdmVkTGlua3NbZnJvbV0/Lmhhc093blByb3BlcnR5KGRyb3BFeHQodG8pKVxyXG4gIGlmICghZnJvbVRvICYmICFkaXJlY3RlZCkge1xyXG4gICAgcmV0dXJuIChcclxuICAgICAgcmVzb2x2ZWRMaW5rc1t0b10/Lmhhc093blByb3BlcnR5KGZyb20pIHx8XHJcbiAgICAgIHVucmVzb2x2ZWRMaW5rc1t0b10/Lmhhc093blByb3BlcnR5KGRyb3BFeHQoZnJvbSkpXHJcbiAgICApXHJcbiAgfSBlbHNlIHJldHVybiBmcm9tVG9cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGlzVW5yZXNvbHZlZChhcHA6IEFwcCwgZnJvbTogc3RyaW5nLCB0bzogc3RyaW5nKSB7XHJcbiAgcmV0dXJuIGFwcC5tZXRhZGF0YUNhY2hlLnVucmVzb2x2ZWRMaW5rc1tmcm9tXT8uaGFzT3duUHJvcGVydHkodG8pXHJcbn1cclxuXHJcbi8qKlxyXG4gKiBBZGRzIG9yIHVwZGF0ZXMgdGhlIGdpdmVuIHlhbWwgYGtleWAgdG8gYHZhbHVlYCBpbiB0aGUgZ2l2ZW4gVEZpbGVcclxuICogQHBhcmFtICB7c3RyaW5nfSBrZXlcclxuICogQHBhcmFtICB7c3RyaW5nfSB2YWx1ZVxyXG4gKiBAcGFyYW0gIHtURmlsZX0gZmlsZVxyXG4gKiBAcGFyYW0gIHtBcHB9IGFwcFxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IGNyZWF0ZU9yVXBkYXRlWWFtbCA9IGFzeW5jIChcclxuICBrZXk6IHN0cmluZyxcclxuICB2YWx1ZTogc3RyaW5nLFxyXG4gIGZpbGU6IFRGaWxlLFxyXG4gIGFwcDogQXBwXHJcbikgPT4ge1xyXG4gIC8vIEB0cy1pZ25vcmVcclxuICBjb25zdCBhcGkgPSBhcHAucGx1Z2lucy5wbHVnaW5zLm1ldGFlZGl0Py5hcGlcclxuXHJcbiAgaWYgKCFhcGkpIHtcclxuICAgIG5ldyBOb3RpY2UoJ01ldGFlZGl0IG11c3QgYmUgZW5hYmxlZCBmb3IgdGhpcyBmdW5jdGlvbiB0byB3b3JrJylcclxuICAgIHJldHVyblxyXG4gIH1cclxuICBsZXQgdmFsdWVTdHIgPSB2YWx1ZS50b1N0cmluZygpXHJcbiAgY29uc3QgZnJvbnRtYXR0ZXIgPSBhcHAubWV0YWRhdGFDYWNoZS5nZXRGaWxlQ2FjaGUoZmlsZSk/LmZyb250bWF0dGVyXHJcbiAgaWYgKCFmcm9udG1hdHRlciB8fCBmcm9udG1hdHRlcltrZXldID09PSB1bmRlZmluZWQpIHtcclxuICAgIGF3YWl0IGFwaS5jcmVhdGVZYW1sUHJvcGVydHkoa2V5LCBgWycke3ZhbHVlU3RyfSddYCwgZmlsZSlcclxuICB9IGVsc2UgaWYgKFsuLi5bZnJvbnRtYXR0ZXJba2V5XV1dLmZsYXQoMykuc29tZSgodmFsKSA9PiB2YWwgPT0gdmFsdWVTdHIpKSB7XHJcbiAgICByZXR1cm5cclxuICB9IGVsc2Uge1xyXG4gICAgY29uc3Qgb2xkVmFsdWVGbGF0OiBzdHJpbmdbXSA9IFsuLi5bZnJvbnRtYXR0ZXJba2V5XV1dLmZsYXQoNClcclxuICAgIGNvbnN0IG5ld1ZhbHVlID0gWy4uLm9sZFZhbHVlRmxhdCwgdmFsdWVTdHJdLm1hcCgodmFsKSA9PiBgJyR7dmFsfSdgKVxyXG4gICAgYXdhaXQgYXBpLnVwZGF0ZShrZXksIGBbJHtuZXdWYWx1ZS5qb2luKCcsICcpfV1gLCBmaWxlKVxyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIG9wZW5NZW51KFxyXG4gIGV2ZW50OiBNb3VzZUV2ZW50LFxyXG4gIGFwcDogQXBwLFxyXG4gIGNvcHlPYmo6IHsgdG9Db3B5OiBzdHJpbmcgfSA9IHVuZGVmaW5lZFxyXG4pIHtcclxuICBjb25zdCB0ZEVsID0gZXZlbnQudGFyZ2V0XHJcbiAgY29uc3QgbWVudSA9IG5ldyBNZW51KGFwcClcclxuXHJcbiAgaWYgKGNvcHlPYmopIHtcclxuICAgIG1lbnUuYWRkSXRlbSgoaXRlbSkgPT5cclxuICAgICAgaXRlbVxyXG4gICAgICAgIC5zZXRUaXRsZSgnQ29weSBjb21tdW5pdHknKVxyXG4gICAgICAgIC5zZXRJY29uKCdncmFwaCcpXHJcbiAgICAgICAgLm9uQ2xpY2soYXN5bmMgKCkgPT4ge1xyXG4gICAgICAgICAgYXdhaXQgY29weShjb3B5T2JqLnRvQ29weSlcclxuICAgICAgICB9KVxyXG4gICAgKVxyXG4gIH0gZWxzZSB7XHJcbiAgICBtZW51LmFkZEl0ZW0oKGl0ZW0pID0+XHJcbiAgICAgIGl0ZW1cclxuICAgICAgICAuc2V0VGl0bGUoJ0NyZWF0ZSBMaW5rOiBDdXJyZW50JylcclxuICAgICAgICAuc2V0SWNvbignZG9jdW1lbnRzJylcclxuICAgICAgICAub25DbGljaygoZSkgPT4ge1xyXG4gICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgY29uc3QgY3VyckZpbGUgPSBhcHAud29ya3NwYWNlLmdldEFjdGl2ZUZpbGUoKVxyXG4gICAgICAgICAgICAvLyBAdHMtaWdub3JlXHJcbiAgICAgICAgICAgIGNvbnN0IHRhcmdldFN0ciA9IHRkRWwuaW5uZXJUZXh0XHJcbiAgICAgICAgICAgIGNyZWF0ZU9yVXBkYXRlWWFtbCgna2V5JywgdGFyZ2V0U3RyLCBjdXJyRmlsZSwgYXBwKVxyXG5cclxuICAgICAgICAgICAgbmV3IE5vdGljZSgnV3JpdGUgU3VjY2Vzc2Z1bCcpXHJcbiAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICAgICAgICBuZXcgTm90aWNlKCdXcml0ZSBmYWlsZWQnKVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0pXHJcbiAgICApXHJcblxyXG4gICAgbWVudS5hZGRJdGVtKChpdGVtKSA9PlxyXG4gICAgICBpdGVtXHJcbiAgICAgICAgLnNldFRpdGxlKCdDcmVhdGUgTGluazogVGFyZ2V0JylcclxuICAgICAgICAuc2V0SWNvbignZG9jdW1lbnRzJylcclxuICAgICAgICAub25DbGljaygoZSkgPT4ge1xyXG4gICAgICAgICAgY29uc3QgY3VyclN0ciA9IGFwcC53b3Jrc3BhY2UuZ2V0QWN0aXZlRmlsZSgpLmJhc2VuYW1lXHJcblxyXG4gICAgICAgICAgY29uc3QgeyB0YXJnZXQgfSA9IGV2ZW50XHJcbiAgICAgICAgICAvLyBAdHMtaWdub3JlXHJcbiAgICAgICAgICBjb25zdCB0YXJnZXRTdHIgPSB0YXJnZXQuaW5uZXJUZXh0XHJcbiAgICAgICAgICBjb25zdCB0YXJnZXRGaWxlID0gYXBwLm1ldGFkYXRhQ2FjaGUuZ2V0Rmlyc3RMaW5rcGF0aERlc3QoXHJcbiAgICAgICAgICAgIHRhcmdldFN0cixcclxuICAgICAgICAgICAgJydcclxuICAgICAgICAgIClcclxuICAgICAgICAgIGlmICghdGFyZ2V0RmlsZSkge1xyXG4gICAgICAgICAgICBuZXcgTm90aWNlKGAke3RhcmdldFN0cn0gZG9lcyBub3QgZXhpc3QgaW4geW91ciB2YXVsdCB5ZXRgKVxyXG4gICAgICAgICAgICByZXR1cm5cclxuICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGNyZWF0ZU9yVXBkYXRlWWFtbCgna2V5JywgY3VyclN0ciwgdGFyZ2V0RmlsZSwgYXBwKVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0pXHJcbiAgICApXHJcbiAgfVxyXG4gIG1lbnUuc2hvd0F0TW91c2VFdmVudChldmVudClcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGp1bXBUb1NlbGVjdGlvbihhcHA6IEFwcCwgbGluZTogbnVtYmVyLCBzZW50ZW5jZTogc3RyaW5nKSB7XHJcbiAgY29uc3QgdmlldyA9IGFwcC53b3Jrc3BhY2UuZ2V0QWN0aXZlVmlld09mVHlwZShNYXJrZG93blZpZXcpXHJcbiAgLy8gTWFrZSBzdXJlIHRoZSB1c2VyIGlzIGVkaXRpbmcgYSBNYXJrZG93biBmaWxlLlxyXG4gIGlmICh2aWV3ICYmIHZpZXcuZ2V0TW9kZSgpID09PSAnc291cmNlJykge1xyXG4gICAgY29uc3QgeyBlZGl0b3IgfSA9IHZpZXdcclxuXHJcbiAgICAvLyBDcmVhdCBzZWxcclxuICAgIGNvbnN0IGxpbmVTdGFydFBvcyA9IHsgY2g6IDAsIGxpbmUgfVxyXG4gICAgY29uc3QgbWFya1N0YXJ0ID0gZWRpdG9yLnBvc1RvT2Zmc2V0KGxpbmVTdGFydFBvcylcclxuXHJcbiAgICAvLyBjb25zdCBsaW5lU3RyID0gZWRpdG9yLmdldExpbmUobGluZSlcclxuICAgIC8vIGxldCBzdGFydE9mU2VudGVuY2VJbkxpbmUgPSAwXHJcbiAgICAvLyBpZiAobGluZVN0ciAhPT0gc2VudGVuY2UpIHtcclxuICAgIC8vICAgc3RhcnRPZlNlbnRlbmNlSW5MaW5lID0gbGluZVN0ci5pbmRleE9mKHNlbnRlbmNlKVxyXG4gICAgLy8gfVxyXG5cclxuICAgIC8vIGlmIChzdGFydE9mU2VudGVuY2VJbkxpbmUgPT09IC0xKSB7XHJcbiAgICAvLyAgIGNvbnNvbGUubG9nKCdzZW50ZW5jZSBub3QgaW4gbGluZVN0cicpXHJcbiAgICAvLyAgIHJldHVyblxyXG4gICAgLy8gfVxyXG5cclxuICAgIGNvbnN0IG1hcmtFbmQgPSBtYXJrU3RhcnQgKyBzZW50ZW5jZS5sZW5ndGhcclxuXHJcbiAgICBjb25zdCBtYXJrU2VsOiBFZGl0b3JSYW5nZSA9IHtcclxuICAgICAgZnJvbTogZWRpdG9yLm9mZnNldFRvUG9zKG1hcmtTdGFydCksXHJcbiAgICAgIHRvOiBlZGl0b3Iub2Zmc2V0VG9Qb3MobWFya0VuZCksXHJcbiAgICB9XHJcblxyXG4gICAgZWRpdG9yLnNldFNlbGVjdGlvbihtYXJrU2VsLmZyb20sIG1hcmtTZWwudG8pXHJcbiAgICBlZGl0b3Iuc2Nyb2xsSW50b1ZpZXcobWFya1NlbClcclxuXHJcbiAgICBjb25zdCBkb2MgPSBlZGl0b3IuY20uZ2V0RG9jKClcclxuICAgIGNvbnN0IG1hcmtlciA9IGRvYy5tYXJrVGV4dChtYXJrU2VsLmZyb20sIG1hcmtTZWwudG8sIHtcclxuICAgICAgY2xhc3NOYW1lOiAnR0EtaGlnaGxpZ2h0LXNlbnRlbmNlJyxcclxuICAgIH0pXHJcblxyXG4gICAgc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgIG1hcmtlci5jbGVhcigpXHJcbiAgICB9LCAxMDAwKVxyXG4gIH0gZWxzZSBpZiAodmlldyAmJiB2aWV3LmdldE1vZGUoKSA9PT0gJ3ByZXZpZXcnKSB7XHJcbiAgICAvLyBIYW5kbGUgcHJldmlldyBtb2RlXHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZ2V0SW1nQnVmZmVyUHJvbWlzZShhcHA6IEFwcCwgZmlsZU5hbWU6IHN0cmluZykge1xyXG4gIGNvbnN0IGZpbGUgPSBhcHAubWV0YWRhdGFDYWNoZS5nZXRGaXJzdExpbmtwYXRoRGVzdChmaWxlTmFtZSwgJycpXHJcbiAgcmV0dXJuIGZpbGUgPyBhcHAudmF1bHQucmVhZEJpbmFyeShmaWxlKSA6IG51bGxcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGdldFByb21pc2VSZXN1bHRzKFxyXG4gIGFwcDogQXBwLFxyXG4gIHBsdWdpbjogR3JhcGhBbmFseXNpc1BsdWdpbixcclxuICBjdXJyTm9kZTogc3RyaW5nLFxyXG4gIHN1YnR5cGU6IFN1YnR5cGUsXHJcbiAgcmVzb2x2ZWRMaW5rczogUmVzb2x2ZWRMaW5rcyxcclxuICBhc2NPcmRlciA9IGZhbHNlXHJcbik6IFByb21pc2U8Q29tcG9uZW50UmVzdWx0c1tdPiB7XHJcbiAgaWYgKCFwbHVnaW4uZyB8fCAhY3Vyck5vZGUpIHJldHVybiBudWxsXHJcblxyXG4gIGNvbnN0IGdyZWF0ZXIgPSBhc2NPcmRlciA/IDEgOiAtMVxyXG4gIGNvbnN0IGxlc3NlciA9IGFzY09yZGVyID8gLTEgOiAxXHJcbiAgY29uc3QgcmVzdWx0c1Byb21pc2UgPSBwbHVnaW4uZy5hbGdzW3N1YnR5cGVdKGN1cnJOb2RlKS50aGVuKFxyXG4gICAgKHJlc3VsdHM6IFJlc3VsdE1hcCkgPT5cclxuICAgICAgcGx1Z2luLmdcclxuICAgICAgICAubm9kZXMoKVxyXG4gICAgICAgIC5tYXAoKHRvKSA9PiB7XHJcbiAgICAgICAgICBjb25zdCB7IG1lYXN1cmUsIGV4dHJhIH0gPSByZXN1bHRzW3RvXSBhcyB7XHJcbiAgICAgICAgICAgIG1lYXN1cmU6IG51bWJlclxyXG4gICAgICAgICAgICBleHRyYTogYW55XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBjb25zdCByZXNvbHZlZCA9ICF0by5lbmRzV2l0aCgnLm1kJykgfHwgaXNJblZhdWx0KGFwcCwgdG8pXHJcbiAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBtZWFzdXJlLFxyXG4gICAgICAgICAgICBsaW5rZWQ6IGlzTGlua2VkKHJlc29sdmVkTGlua3MsIGN1cnJOb2RlLCB0bywgZmFsc2UpLFxyXG4gICAgICAgICAgICB0byxcclxuICAgICAgICAgICAgcmVzb2x2ZWQsXHJcbiAgICAgICAgICAgIGV4dHJhLFxyXG4gICAgICAgICAgICBpbWc6XHJcbiAgICAgICAgICAgICAgcGx1Z2luLnNldHRpbmdzLnNob3dJbWdUaHVtYm5haWxzICYmIGlzSW1nKHRvKVxyXG4gICAgICAgICAgICAgICAgPyBnZXRJbWdCdWZmZXJQcm9taXNlKGFwcCwgdG8pXHJcbiAgICAgICAgICAgICAgICA6IG51bGwsXHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSlcclxuICAgICAgICAuc29ydCgoYSwgYikgPT4ge1xyXG4gICAgICAgICAgcmV0dXJuIGEubWVhc3VyZSA9PT0gYi5tZWFzdXJlXHJcbiAgICAgICAgICAgID8gYS5leHRyYT8ubGVuZ3RoID4gYi5leHRyYT8ubGVuZ3RoXHJcbiAgICAgICAgICAgICAgPyBncmVhdGVyXHJcbiAgICAgICAgICAgICAgOiBsZXNzZXJcclxuICAgICAgICAgICAgOiBhLm1lYXN1cmUgPiBiLm1lYXN1cmVcclxuICAgICAgICAgICAgPyBncmVhdGVyXHJcbiAgICAgICAgICAgIDogbGVzc2VyXHJcbiAgICAgICAgfSlcclxuICApXHJcbiAgcmV0dXJuIHJlc3VsdHNQcm9taXNlXHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRDb3VudHMoYXJyOiBhbnlbXSkge1xyXG4gIGNvbnN0IGNvdW50czogeyBbaXRlbTogc3RyaW5nXTogbnVtYmVyIH0gPSB7fVxyXG4gIGZvciAoY29uc3QgbnVtIG9mIGFycikge1xyXG4gICAgY291bnRzW251bV0gPSBjb3VudHNbbnVtXSA/IGNvdW50c1tudW1dICsgMSA6IDFcclxuICB9XHJcbiAgcmV0dXJuIGNvdW50c1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZ2V0TWF4S2V5KG9iajogUmVjb3JkPHN0cmluZywgbnVtYmVyPikge1xyXG4gIC8vIFVzaW5nIHJhbmRvbSByZXNvbHZpbmcgb2YgZXF1YWxpdHlcclxuICByZXR1cm4gT2JqZWN0LmtleXMob2JqKS5yZWR1Y2UoKGEsIGIpID0+XHJcbiAgICBvYmpbYV0gPT09IG9ialtiXSA/IChNYXRoLnJhbmRvbSgpIDwgMC41ID8gYSA6IGIpIDogb2JqW2FdID4gb2JqW2JdID8gYSA6IGJcclxuICApXHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBpc0ltZyA9IChwYXRoOiBzdHJpbmcpID0+XHJcbiAgSU1HX0VYVEVOU0lPTlMuaW5jbHVkZXMocGF0aC5zcGxpdCgnLicpLmxhc3QoKSlcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBvcGVuT3JTd2l0Y2goXHJcbiAgYXBwOiBBcHAsXHJcbiAgZGVzdDogc3RyaW5nLFxyXG4gIGV2ZW50OiBNb3VzZUV2ZW50LFxyXG4gIG9wdGlvbnM6IHtcclxuICAgIGNyZWF0ZU5ld0ZpbGU6IGJvb2xlYW5cclxuICB9ID0geyBjcmVhdGVOZXdGaWxlOiB0cnVlIH1cclxuKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgY29uc3QgeyB3b3Jrc3BhY2UgfSA9IGFwcFxyXG4gIGxldCBkZXN0RmlsZSA9IGFwcC5tZXRhZGF0YUNhY2hlLmdldEZpcnN0TGlua3BhdGhEZXN0KGRlc3QsICcnKVxyXG5cclxuICAvLyBJZiBkZXN0IGRvZXNuJ3QgZXhpc3QsIG1ha2UgaXRcclxuICBpZiAoIWRlc3RGaWxlICYmIG9wdGlvbnMuY3JlYXRlTmV3RmlsZSkge1xyXG4gICAgZGVzdEZpbGUgPSBhd2FpdCBjcmVhdGVOZXdNRE5vdGUoYXBwLCBkZXN0KVxyXG4gIH0gZWxzZSBpZiAoIWRlc3RGaWxlICYmICFvcHRpb25zLmNyZWF0ZU5ld0ZpbGUpIHJldHVyblxyXG5cclxuICAvLyBDaGVjayBpZiBpdCdzIGFscmVhZHkgb3BlblxyXG4gIGNvbnN0IGxlYXZlc1dpdGhEZXN0QWxyZWFkeU9wZW46IFdvcmtzcGFjZUxlYWZbXSA9IFtdXHJcbiAgd29ya3NwYWNlLml0ZXJhdGVBbGxMZWF2ZXMoKGxlYWYpID0+IHtcclxuICAgIGlmIChsZWFmLnZpZXcgaW5zdGFuY2VvZiBNYXJrZG93blZpZXcpIHtcclxuICAgICAgaWYgKGxlYWYudmlldz8uZmlsZT8uYmFzZW5hbWUgPT09IGRyb3BFeHQoZGVzdCkpIHtcclxuICAgICAgICBsZWF2ZXNXaXRoRGVzdEFscmVhZHlPcGVuLnB1c2gobGVhZilcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH0pXHJcblxyXG4gIC8vIFJhdGhlciBzd2l0Y2ggdG8gaXQgaWYgaXQgaXMgb3BlblxyXG4gIGlmIChsZWF2ZXNXaXRoRGVzdEFscmVhZHlPcGVuLmxlbmd0aCA+IDApIHtcclxuICAgIHdvcmtzcGFjZS5zZXRBY3RpdmVMZWFmKGxlYXZlc1dpdGhEZXN0QWxyZWFkeU9wZW5bMF0pXHJcbiAgfSBlbHNlIHtcclxuICAgIC8vIEB0cy1pZ25vcmVcclxuICAgIGNvbnN0IG1vZGUgPSBhcHAudmF1bHQuZ2V0Q29uZmlnKCdkZWZhdWx0Vmlld01vZGUnKSBhcyBzdHJpbmdcclxuICAgIGNvbnN0IGxlYWYgPVxyXG4gICAgICBldmVudC5jdHJsS2V5IHx8IGV2ZW50LmdldE1vZGlmaWVyU3RhdGUoJ01ldGEnKVxyXG4gICAgICAgID8gd29ya3NwYWNlLnNwbGl0QWN0aXZlTGVhZigpXHJcbiAgICAgICAgOiB3b3Jrc3BhY2UuZ2V0VW5waW5uZWRMZWFmKClcclxuXHJcbiAgICBhd2FpdCBsZWFmLm9wZW5GaWxlKGRlc3RGaWxlLCB7IGFjdGl2ZTogdHJ1ZSwgbW9kZSB9KVxyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGZpbmRTZW50ZW5jZShzZW50ZW5jZXM6IFtzdHJpbmddLCBsaW5rOiBDYWNoZUl0ZW0pOiBbbnVtYmVyLCBudW1iZXIsIG51bWJlcl0ge1xyXG4gIGxldCBhZ2dyU2VudGVuY2VMZW5ndGggPSAwXHJcbiAgbGV0IGNvdW50ID0gMFxyXG4gIGZvciAoY29uc3Qgc2VudGVuY2Ugb2Ygc2VudGVuY2VzKSB7XHJcbiAgICBjb25zdCBuZXh0TGVuZ3RoID0gYWdnclNlbnRlbmNlTGVuZ3RoICsgc2VudGVuY2UubGVuZ3RoXHJcbiAgICAvLyBFZGdlIGNhc2UgdGhhdCBkb2VzIG5vdCB3b3JrOiBJZiBhbGlhcyBoYXMgZW5kIG9mIHNlbnRlbmNlcy5cclxuICAgIGlmIChsaW5rLnBvc2l0aW9uLmVuZC5jb2wgPD0gbmV4dExlbmd0aCkge1xyXG4gICAgICByZXR1cm4gW2NvdW50LCBhZ2dyU2VudGVuY2VMZW5ndGgsIG5leHRMZW5ndGhdXHJcbiAgICB9XHJcbiAgICBhZ2dyU2VudGVuY2VMZW5ndGggPSBuZXh0TGVuZ3RoXHJcbiAgICBjb3VudCArPSAxXHJcbiAgfVxyXG4gIHJldHVybiBbLTEsIDAsIGFnZ3JTZW50ZW5jZUxlbmd0aF1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGFkZFByZUNvY2l0YXRpb24ocHJlQ29jaXRhdGlvbnM6IHsgW25hbWU6IHN0cmluZ106IFtudW1iZXIsIENvQ2l0YXRpb25bXV0gfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGlua1BhdGg6IHN0cmluZyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVhc3VyZTogbnVtYmVyLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZW50ZW5jZTogc3RyaW5nW10sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNvdXJjZTogc3RyaW5nLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaW5lOiBudW1iZXIpIHtcclxuICBwcmVDb2NpdGF0aW9uc1tsaW5rUGF0aF1bMF0gPSBNYXRoLm1heChcclxuICAgIHByZUNvY2l0YXRpb25zW2xpbmtQYXRoXVswXSxcclxuICAgIG1lYXN1cmVcclxuICApXHJcbiAgcHJlQ29jaXRhdGlvbnNbbGlua1BhdGhdWzFdLnB1c2goe1xyXG4gICAgc2VudGVuY2UsXHJcbiAgICBtZWFzdXJlLFxyXG4gICAgc291cmNlLFxyXG4gICAgbGluZSxcclxuICB9KVxyXG59IiwgImltcG9ydCB0eXBlIHsgVEZpbGUgfSBmcm9tICdvYnNpZGlhbidcclxuaW1wb3J0IHR5cGUgeyBCb3csIERvY3VtZW50LCBXaW5rTWV0aG9kcyB9IGZyb20gJ3dpbmstbmxwJ1xyXG5pbXBvcnQgeyBSZWZlcmVuY2VDYWNoZSB9IGZyb20gJ29ic2lkaWFuJ1xyXG5cclxuZXhwb3J0IGludGVyZmFjZSBSZXNvbHZlZExpbmtzIHtcclxuICBbZnJvbTogc3RyaW5nXToge1xyXG4gICAgW3RvOiBzdHJpbmddOiBudW1iZXJcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCB0eXBlIFN1YnR5cGVJbmZvID0ge1xyXG4gIHN1YnR5cGU6IFN1YnR5cGVcclxuICBnbG9iYWw6IGJvb2xlYW5cclxuICBkZXNjOiBzdHJpbmdcclxuICBhbmw6IEFuYWx5c2VzXHJcbiAgbmxwOiBib29sZWFuXHJcbn1cclxuXHJcbmV4cG9ydCB0eXBlIEFuYWx5c2VzID1cclxuICB8ICdDZW50cmFsaXR5J1xyXG4gIHwgJ0xpbmsgUHJlZGljdGlvbidcclxuICB8ICdTaW1pbGFyaXR5J1xyXG4gIHwgJ0NvLUNpdGF0aW9ucydcclxuICB8ICdDb21tdW5pdHkgRGV0ZWN0aW9uJ1xyXG4gIHwgJ05MUCdcclxuXHJcbmV4cG9ydCB0eXBlIFN1YnR5cGUgPVxyXG4gIHwgJ0hJVFMnXHJcbiAgfCAnQWRhbWljIEFkYXInXHJcbiAgLy8gfCAnQ29tbW9uIE5laWdoYm91cnMnXHJcbiAgfCAnSmFjY2FyZCdcclxuICB8ICdDby1DaXRhdGlvbnMnXHJcbiAgfCAnTGFiZWwgUHJvcGFnYXRpb24nXHJcbiAgfCAnTG91dmFpbidcclxuICB8ICdPdmVybGFwJ1xyXG4gIHwgJ0NsdXN0ZXJpbmcgQ29lZmZpY2llbnQnXHJcbiAgfCAnQm9XJ1xyXG4gIC8vIHwgJ1R2ZXJza3knXHJcbiAgfCAnT3RzdWthLUNoaWFpJ1xyXG4gIHwgJ1NlbnRpbWVudCdcclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgQ29tbXVuaXRpZXMge1xyXG4gIFtncm91cDogc3RyaW5nXTogc3RyaW5nW11cclxufVxyXG5leHBvcnQgaW50ZXJmYWNlIFJlc3VsdE1hcCB7XHJcbiAgW3RvOiBzdHJpbmddOiB7IG1lYXN1cmU6IG51bWJlcjsgZXh0cmE6IHN0cmluZ1tdIH1cclxufVxyXG5cclxuZXhwb3J0IHR5cGUgSElUU1Jlc3VsdCA9IHtcclxuICBjb252ZXJnZWQ6IGJvb2xlYW5cclxuICBhdXRob3JpdGllczogeyBbbm9kZTogc3RyaW5nXTogbnVtYmVyIH1cclxuICBodWJzOiB7IFtub2RlOiBzdHJpbmddOiBudW1iZXIgfVxyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIENvbXBvbmVudFJlc3VsdHMge1xyXG4gIG1lYXN1cmU6IG51bWJlclxyXG4gIGxpbmtlZDogYm9vbGVhblxyXG4gIHRvOiBzdHJpbmdcclxuICByZXNvbHZlZDogYm9vbGVhblxyXG4gIGV4dHJhOiBhbnlcclxuICBpbWc6IFByb21pc2U8QXJyYXlCdWZmZXI+XHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgQ29DaXRhdGlvbiB7XHJcbiAgc2VudGVuY2U6IHN0cmluZ1tdXHJcbiAgbWVhc3VyZTogbnVtYmVyXHJcbiAgc291cmNlOiBzdHJpbmdcclxuICBsaW5lOiBudW1iZXJcclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBDb0NpdGF0aW9uUmVzIHtcclxuICBtZWFzdXJlOiBudW1iZXJcclxuICByZXNvbHZlZDogYm9vbGVhblxyXG4gIGNvQ2l0YXRpb25zOiBDb0NpdGF0aW9uW11cclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBDb0NpdGF0aW9uTWFwIHtcclxuICBbbGlua05hbWU6IHN0cmluZ106IENvQ2l0YXRpb25SZXNcclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBMaW5lU2VudGVuY2VzIHtcclxuICBsaW5lOiBudW1iZXJcclxuICBsaW5rU2VudGVuY2U6IG51bWJlclxyXG4gIGxpbmtTZW50ZW5jZVN0YXJ0OiBudW1iZXJcclxuICBsaW5rU2VudGVuY2VFbmQ6IG51bWJlclxyXG4gIHNlbnRlbmNlczogW3N0cmluZ11cclxuICBsaW5rOiBSZWZlcmVuY2VDYWNoZVxyXG59XHJcblxyXG5leHBvcnQgdHlwZSBBbmFseXNpc0FsZzxUPiA9IChhOiBzdHJpbmcsIG9wdGlvbnM/OiB7fSkgPT4gUHJvbWlzZTxUPlxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBHcmFwaEFuYWx5c2lzU2V0dGluZ3Mge1xyXG4gIG5vSW5maW5pdHk6IGJvb2xlYW5cclxuICBub1plcm86IGJvb2xlYW5cclxuICBhbGxGaWxlRXh0ZW5zaW9uczogYm9vbGVhblxyXG4gIHNob3dJbWdUaHVtYm5haWxzOiBib29sZWFuXHJcbiAgYWRkVW5yZXNvbHZlZDogYm9vbGVhblxyXG4gIGNvVGFnczogYm9vbGVhblxyXG4gIGRlZmF1bHRTdWJ0eXBlVHlwZTogU3VidHlwZVxyXG4gIGRlYnVnTW9kZTogYm9vbGVhblxyXG4gIHN1cGVyRGVidWdNb2RlOiBib29sZWFuXHJcbiAgZXhjbHVzaW9uUmVnZXg6IHN0cmluZ1xyXG4gIGV4Y2x1c2lvblRhZ3M6IHN0cmluZ1tdXHJcbiAgYWxnc1RvU2hvdzogU3VidHlwZVtdXHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgTkxQUGx1Z2luIHtcclxuICBEb2NzOiB7IFtwYXRoOiBzdHJpbmddOiBEb2N1bWVudCB9XHJcbiAgbW9kZWw6IFdpbmtNZXRob2RzXHJcbiAgZ2V0RG9jRnJvbUZpbGU6IChmaWxlOiBURmlsZSkgPT4gUHJvbWlzZTxEb2N1bWVudD5cclxuICBnZXROb1N0b3BCb1c6IChkb2M6IERvY3VtZW50LCB0eXBlPzogJ3Rva2VucycgfCAnZW50aXRpZXMnKSA9PiBCb3dcclxuICBnZXROb1N0b3BTZXQ6IChkb2M6IERvY3VtZW50LCB0eXBlPzogJ3Rva2VucycgfCAnZW50aXRpZXMnKSA9PiBTZXQ8c3RyaW5nPlxyXG4gIGdldEF2Z1NlbnRpbWVudEZyb21Eb2M6IChcclxuICAgIGRvYzogRG9jdW1lbnQsXHJcbiAgICBvcHRzPzogeyBwZXJTZW50ZW5jZT86IGJvb2xlYW47IG5vcm1hbGlzZWQ/OiBib29sZWFuIH1cclxuICApID0+IG51bWJlclxyXG4gIHNldHRpbmdzOiB7IHJlZnJlc2hEb2NzT25Mb2FkOiBib29sZWFuIH1cclxuICB3b3JrZXI6IFdvcmtlclxyXG59XHJcblxyXG5kZWNsYXJlIG1vZHVsZSAnb2JzaWRpYW4nIHtcclxuICBpbnRlcmZhY2UgQXBwIHtcclxuICAgIHBsdWdpbnM6IHtcclxuICAgICAgcGx1Z2luczoge1xyXG4gICAgICAgIG1ldGFlZGl0OiB7XHJcbiAgICAgICAgICBhcGk6IHtcclxuICAgICAgICAgICAgY3JlYXRlWWFtbFByb3BlcnR5KFxyXG4gICAgICAgICAgICAgIGtleTogc3RyaW5nLFxyXG4gICAgICAgICAgICAgIHZhbHVlOiBzdHJpbmcsXHJcbiAgICAgICAgICAgICAgZmlsZTogVEZpbGVcclxuICAgICAgICAgICAgKTogUHJvbWlzZTx2b2lkPlxyXG4gICAgICAgICAgICB1cGRhdGUoa2V5OiBzdHJpbmcsIHZhbHVlOiBzdHJpbmcsIGZpbGU6IFRGaWxlKTogUHJvbWlzZTx2b2lkPlxyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBubHA6IE5MUFBsdWdpblxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG4gIGludGVyZmFjZSBFZGl0b3Ige1xyXG4gICAgY206IHtcclxuICAgICAgZmluZFdvcmRBdDogKHBvczogRWRpdG9yUG9zaXRpb24pID0+IEVkaXRvclNlbGVjdGlvbiB8IG51bGxcclxuICAgICAgc3RhdGU6IHtcclxuICAgICAgICB3b3JkQXQ6IChvZmZzZXQ6IG51bWJlcikgPT4geyBmcm9tT2Zmc2V0OiBudW1iZXI7IHRvT2Zmc2V0OiBudW1iZXIgfVxyXG4gICAgICB9XHJcbiAgICAgIGdldERvYzogKCkgPT4gRG9jXHJcbiAgICAgIGdldFNjcm9sbEluZm86ICgpID0+IHsgdG9wOiBudW1iZXI7IGxlZnQ6IG51bWJlcjsgY2xpZW50SGVpZ2h0OiBudW1iZXIgfVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgaW50ZXJmYWNlIERvYyB7XHJcbiAgICBtYXJrVGV4dDogKFxyXG4gICAgICBmcm9tOiBFZGl0b3JQb3NpdGlvbixcclxuICAgICAgdG86IEVkaXRvclBvc2l0aW9uLFxyXG4gICAgICBvcHRpb25zPzogeyBjbGFzc05hbWU/OiBzdHJpbmcgfVxyXG4gICAgKSA9PiBUZXh0TWFya2VyXHJcbiAgICBjaGlsZHJlbjogTGVhZkNodW5rW11cclxuICB9XHJcblxyXG4gIGludGVyZmFjZSBMZWFmQ2h1bmsge1xyXG4gICAgbGluZXM6IExpbmVbXVxyXG4gIH1cclxuXHJcbiAgaW50ZXJmYWNlIFRleHRNYXJrZXIge1xyXG4gICAgY2xhc3NOYW1lOiBzdHJpbmdcclxuICAgIGRvYzogRG9jXHJcbiAgICBpZDogbnVtYmVyXHJcbiAgICBsaW5lczogTGluZVtdXHJcbiAgICB0eXBlOiBzdHJpbmdcclxuICAgIGNsZWFyOiAoKSA9PiB2b2lkXHJcbiAgfVxyXG5cclxuICBpbnRlcmZhY2UgTGluZSB7XHJcbiAgICBtYXJrZWRTcGFuczogTWFya2VkU3BhbltdXHJcbiAgICB0ZXh0OiBzdHJpbmdcclxuICAgIHBhcmVudDogTGVhZkNodW5rXHJcbiAgfVxyXG5cclxuICBpbnRlcmZhY2UgTWFya2VkU3BhbiB7XHJcbiAgICBmcm9tOiBudW1iZXJcclxuICAgIHRvOiBudW1iZXJcclxuICAgIG1hcmtlcjogVGV4dE1hcmtlclxyXG4gIH1cclxuXHJcbiAgaW50ZXJmYWNlIFdvcmtzcGFjZUl0ZW0ge1xyXG4gICAgc2lkZTogJ2xlZnQnIHwgJ3JpZ2h0J1xyXG4gIH1cclxufVxyXG4iLCAiPHNjcmlwdD5cbiAgZXhwb3J0IGxldCB0aXRsZSA9IG51bGw7XG4gIGV4cG9ydCBsZXQgdmlld0JveDtcbjwvc2NyaXB0PlxuXG48c3R5bGU+XG4gIHN2ZyB7XG4gICAgc3Ryb2tlOiBjdXJyZW50Q29sb3I7XG4gICAgZmlsbDogY3VycmVudENvbG9yO1xuICAgIHN0cm9rZS13aWR0aDogMDtcbiAgICB3aWR0aDogMTAwJTtcbiAgICBoZWlnaHQ6IGF1dG87XG4gICAgbWF4LWhlaWdodDogMTAwJTtcbiAgfSAgXG48L3N0eWxlPlxuXG48c3ZnIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiB7dmlld0JveH0+XG4gIHsjaWYgdGl0bGV9XG4gICAgPHRpdGxlPnt0aXRsZX08L3RpdGxlPlxuICB7L2lmfVxuICA8c2xvdCAvPlxuPC9zdmc+XG4iLCAiPHNjcmlwdD5cbiAgICAgICAgaW1wb3J0IEljb25CYXNlIGZyb20gJy4uL2NvbXBvbmVudHMvSWNvbkJhc2Uuc3ZlbHRlJztcbiAgICAgICAgPC9zY3JpcHQ+XG4gICAgICAgIDxJY29uQmFzZSB2aWV3Qm94PVwiMCAwIDUxMiA1MTJcIiB7Li4uJCRwcm9wc30+XG4gICAgICAgICAgPHBhdGggZD1cIk0zMjYuNjEyIDE4NS4zOTFjNTkuNzQ3IDU5LjgwOSA1OC45MjcgMTU1LjY5OC4zNiAyMTQuNTktLjExLjEyLS4yNC4yNS0uMzYuMzdsLTY3LjIgNjcuMmMtNTkuMjcgNTkuMjctMTU1LjY5OSA1OS4yNjItMjE0Ljk2IDAtNTkuMjctNTkuMjYtNTkuMjctMTU1LjcgMC0yMTQuOTZsMzcuMTA2LTM3LjEwNmM5Ljg0LTkuODQgMjYuNzg2LTMuMyAyNy4yOTQgMTAuNjA2LjY0OCAxNy43MjIgMy44MjYgMzUuNTI3IDkuNjkgNTIuNzIxIDEuOTg2IDUuODIyLjU2NyAxMi4yNjItMy43ODMgMTYuNjEybC0xMy4wODcgMTMuMDg3Yy0yOC4wMjYgMjguMDI2LTI4LjkwNSA3My42Ni0xLjE1NSAxMDEuOTYgMjguMDI0IDI4LjU3OSA3NC4wODYgMjguNzQ5IDEwMi4zMjUuNTFsNjcuMi02Ny4xOWMyOC4xOTEtMjguMTkxIDI4LjA3My03My43NTcgMC0xMDEuODMtMy43MDEtMy42OTQtNy40MjktNi41NjQtMTAuMzQxLTguNTY5YTE2LjAzNyAxNi4wMzcgMCAwIDEtNi45NDctMTIuNjA2Yy0uMzk2LTEwLjU2NyAzLjM0OC0yMS40NTYgMTEuNjk4LTI5LjgwNmwyMS4wNTQtMjEuMDU1YzUuNTIxLTUuNTIxIDE0LjE4Mi02LjE5OSAyMC41ODQtMS43MzFhMTUyLjQ4MiAxNTIuNDgyIDAgMCAxIDIwLjUyMiAxNy4xOTd6TTQ2Ny41NDcgNDQuNDQ5Yy01OS4yNjEtNTkuMjYyLTE1NS42OS01OS4yNy0yMTQuOTYgMGwtNjcuMiA2Ny4yYy0uMTIuMTItLjI1LjI1LS4zNi4zNy01OC41NjYgNTguODkyLTU5LjM4NyAxNTQuNzgxLjM2IDIxNC41OWExNTIuNDU0IDE1Mi40NTQgMCAwIDAgMjAuNTIxIDE3LjE5NmM2LjQwMiA0LjQ2OCAxNS4wNjQgMy43ODkgMjAuNTg0LTEuNzMxbDIxLjA1NC0yMS4wNTVjOC4zNS04LjM1IDEyLjA5NC0xOS4yMzkgMTEuNjk4LTI5LjgwNmExNi4wMzcgMTYuMDM3IDAgMCAwLTYuOTQ3LTEyLjYwNmMtMi45MTItMi4wMDUtNi42NC00Ljg3NS0xMC4zNDEtOC41NjktMjguMDczLTI4LjA3My0yOC4xOTEtNzMuNjM5IDAtMTAxLjgzbDY3LjItNjcuMTljMjguMjM5LTI4LjIzOSA3NC4zLTI4LjA2OSAxMDIuMzI1LjUxIDI3Ljc1IDI4LjMgMjYuODcyIDczLjkzNC0xLjE1NSAxMDEuOTZsLTEzLjA4NyAxMy4wODdjLTQuMzUgNC4zNS01Ljc2OSAxMC43OS0zLjc4MyAxNi42MTIgNS44NjQgMTcuMTk0IDkuMDQyIDM0Ljk5OSA5LjY5IDUyLjcyMS41MDkgMTMuOTA2IDE3LjQ1NCAyMC40NDYgMjcuMjk0IDEwLjYwNmwzNy4xMDYtMzcuMTA2YzU5LjI3MS01OS4yNTkgNTkuMjcxLTE1NS42OTkuMDAxLTIxNC45NTl6XCIgLz5cbiAgICAgICAgPC9JY29uQmFzZT5cbiAgICAgICIsICJpbXBvcnQgeyBTdmVsdGVDb21wb25lbnQsIGluaXQsIHNhZmVfbm90X2VxdWFsLCBlbGVtZW50LCBhdHRyLCBzZXRfc3R5bGUsIGluc2VydCwgbm9vcCwgZGV0YWNoLCBlbXB0eSwgYmluZGluZ19jYWxsYmFja3MgfSBmcm9tICdzdmVsdGUvaW50ZXJuYWwnO1xuaW1wb3J0IHsgY3JlYXRlRXZlbnREaXNwYXRjaGVyLCBvbk1vdW50LCBvbkRlc3Ryb3kgfSBmcm9tICdzdmVsdGUnO1xuXG4vKiBzcmMvbGliL0luZmluaXRlU2Nyb2xsLnN2ZWx0ZSBnZW5lcmF0ZWQgYnkgU3ZlbHRlIHYzLjQyLjEgKi9cblxuZnVuY3Rpb24gY3JlYXRlX2lmX2Jsb2NrKGN0eCkge1xuXHRsZXQgZGl2O1xuXG5cdHJldHVybiB7XG5cdFx0YygpIHtcblx0XHRcdGRpdiA9IGVsZW1lbnQoXCJkaXZcIik7XG5cdFx0XHRhdHRyKGRpdiwgXCJpZFwiLCBcInN2ZWx0ZS1pbmZpbml0ZS1zY3JvbGxcIik7XG5cdFx0XHRzZXRfc3R5bGUoZGl2LCBcIndpZHRoXCIsIFwiMFwiKTtcblx0XHR9LFxuXHRcdG0odGFyZ2V0LCBhbmNob3IpIHtcblx0XHRcdGluc2VydCh0YXJnZXQsIGRpdiwgYW5jaG9yKTtcblx0XHRcdC8qZGl2X2JpbmRpbmcqLyBjdHhbMTFdKGRpdik7XG5cdFx0fSxcblx0XHRwOiBub29wLFxuXHRcdGQoZGV0YWNoaW5nKSB7XG5cdFx0XHRpZiAoZGV0YWNoaW5nKSBkZXRhY2goZGl2KTtcblx0XHRcdC8qZGl2X2JpbmRpbmcqLyBjdHhbMTFdKG51bGwpO1xuXHRcdH1cblx0fTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlX2ZyYWdtZW50KGN0eCkge1xuXHRsZXQgaWZfYmxvY2tfYW5jaG9yO1xuXHRsZXQgaWZfYmxvY2sgPSAhLyp3aW5kb3cqLyBjdHhbMV0gJiYgIS8qZWxlbWVudFNjcm9sbCovIGN0eFswXSAmJiBjcmVhdGVfaWZfYmxvY2soY3R4KTtcblxuXHRyZXR1cm4ge1xuXHRcdGMoKSB7XG5cdFx0XHRpZiAoaWZfYmxvY2spIGlmX2Jsb2NrLmMoKTtcblx0XHRcdGlmX2Jsb2NrX2FuY2hvciA9IGVtcHR5KCk7XG5cdFx0fSxcblx0XHRtKHRhcmdldCwgYW5jaG9yKSB7XG5cdFx0XHRpZiAoaWZfYmxvY2spIGlmX2Jsb2NrLm0odGFyZ2V0LCBhbmNob3IpO1xuXHRcdFx0aW5zZXJ0KHRhcmdldCwgaWZfYmxvY2tfYW5jaG9yLCBhbmNob3IpO1xuXHRcdH0sXG5cdFx0cChjdHgsIFtkaXJ0eV0pIHtcblx0XHRcdGlmICghLyp3aW5kb3cqLyBjdHhbMV0gJiYgIS8qZWxlbWVudFNjcm9sbCovIGN0eFswXSkge1xuXHRcdFx0XHRpZiAoaWZfYmxvY2spIHtcblx0XHRcdFx0XHRpZl9ibG9jay5wKGN0eCwgZGlydHkpO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGlmX2Jsb2NrID0gY3JlYXRlX2lmX2Jsb2NrKGN0eCk7XG5cdFx0XHRcdFx0aWZfYmxvY2suYygpO1xuXHRcdFx0XHRcdGlmX2Jsb2NrLm0oaWZfYmxvY2tfYW5jaG9yLnBhcmVudE5vZGUsIGlmX2Jsb2NrX2FuY2hvcik7XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSBpZiAoaWZfYmxvY2spIHtcblx0XHRcdFx0aWZfYmxvY2suZCgxKTtcblx0XHRcdFx0aWZfYmxvY2sgPSBudWxsO1xuXHRcdFx0fVxuXHRcdH0sXG5cdFx0aTogbm9vcCxcblx0XHRvOiBub29wLFxuXHRcdGQoZGV0YWNoaW5nKSB7XG5cdFx0XHRpZiAoaWZfYmxvY2spIGlmX2Jsb2NrLmQoZGV0YWNoaW5nKTtcblx0XHRcdGlmIChkZXRhY2hpbmcpIGRldGFjaChpZl9ibG9ja19hbmNob3IpO1xuXHRcdH1cblx0fTtcbn1cblxuZnVuY3Rpb24gaW5zdGFuY2UoJCRzZWxmLCAkJHByb3BzLCAkJGludmFsaWRhdGUpIHtcblx0bGV0IHsgdGhyZXNob2xkID0gMCB9ID0gJCRwcm9wcztcblx0bGV0IHsgaG9yaXpvbnRhbCA9IGZhbHNlIH0gPSAkJHByb3BzO1xuXHRsZXQgeyBlbGVtZW50U2Nyb2xsID0gbnVsbCB9ID0gJCRwcm9wcztcblx0bGV0IHsgaGFzTW9yZSA9IHRydWUgfSA9ICQkcHJvcHM7XG5cdGxldCB7IHJldmVyc2UgPSBmYWxzZSB9ID0gJCRwcm9wcztcblx0bGV0IHsgd2luZG93ID0gZmFsc2UgfSA9ICQkcHJvcHM7XG5cdGNvbnN0IGRpc3BhdGNoID0gY3JlYXRlRXZlbnREaXNwYXRjaGVyKCk7XG5cdGxldCBpc0xvYWRNb3JlID0gZmFsc2U7XG5cdGxldCBjb21wb25lbnQ7XG5cdGxldCBiZWZvcmVTY3JvbGxIZWlnaHQ7XG5cdGxldCBiZWZvcmVTY3JvbGxUb3A7XG5cdGxldCBlbGVtZW50O1xuXG5cdGNvbnN0IG9uU2Nyb2xsID0gZSA9PiB7XG5cdFx0aWYgKCFoYXNNb3JlKSByZXR1cm47XG5cdFx0Y29uc3QgdGFyZ2V0ID0gZS50YXJnZXQ7XG5cdFx0Y29uc3Qgb2Zmc2V0ID0gY2FsY09mZnNldCh0YXJnZXQsIHJldmVyc2UsIGhvcml6b250YWwpO1xuXG5cdFx0aWYgKG9mZnNldCA8PSB0aHJlc2hvbGQpIHtcblx0XHRcdGlmICghaXNMb2FkTW9yZSAmJiBoYXNNb3JlKSB7XG5cdFx0XHRcdGRpc3BhdGNoKFwibG9hZE1vcmVcIik7XG5cdFx0XHRcdCQkaW52YWxpZGF0ZSg4LCBiZWZvcmVTY3JvbGxIZWlnaHQgPSB0YXJnZXQuc2Nyb2xsSGVpZ2h0KTtcblx0XHRcdFx0JCRpbnZhbGlkYXRlKDksIGJlZm9yZVNjcm9sbFRvcCA9IHRhcmdldC5zY3JvbGxUb3ApO1xuXHRcdFx0fVxuXG5cdFx0XHQkJGludmFsaWRhdGUoNywgaXNMb2FkTW9yZSA9IHRydWUpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHQkJGludmFsaWRhdGUoNywgaXNMb2FkTW9yZSA9IGZhbHNlKTtcblx0XHR9XG5cdH07XG5cblx0Y29uc3QgY2FsY09mZnNldCA9ICh0YXJnZXQsIHJldmVyc2UsIGhvcml6b250YWwpID0+IHtcblx0XHRjb25zdCBlbGVtZW50ID0gdGFyZ2V0LmRvY3VtZW50RWxlbWVudCA/IHRhcmdldC5kb2N1bWVudEVsZW1lbnQgOiB0YXJnZXQ7XG5cblx0XHRpZiAocmV2ZXJzZSkge1xuXHRcdFx0cmV0dXJuIGhvcml6b250YWwgPyBlbGVtZW50LnNjcm9sbExlZnQgOiBlbGVtZW50LnNjcm9sbFRvcDtcblx0XHR9XG5cblx0XHRyZXR1cm4gaG9yaXpvbnRhbFxuXHRcdD8gZWxlbWVudC5zY3JvbGxXaWR0aCAtIGVsZW1lbnQuY2xpZW50V2lkdGggLSBlbGVtZW50LnNjcm9sbExlZnRcblx0XHQ6IGVsZW1lbnQuc2Nyb2xsSGVpZ2h0IC0gZWxlbWVudC5jbGllbnRIZWlnaHQgLSBlbGVtZW50LnNjcm9sbFRvcDtcblx0fTtcblxuXHRvbk1vdW50KCgpID0+IHtcblx0XHRpZiAod2luZG93KSB7XG5cdFx0XHQkJGludmFsaWRhdGUoMTAsIGVsZW1lbnQgPSBkb2N1bWVudCk7XG5cdFx0fSBlbHNlIGlmIChlbGVtZW50U2Nyb2xsKSB7XG5cdFx0XHQkJGludmFsaWRhdGUoMTAsIGVsZW1lbnQgPSBlbGVtZW50U2Nyb2xsKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0JCRpbnZhbGlkYXRlKDEwLCBlbGVtZW50ID0gY29tcG9uZW50LnBhcmVudE5vZGUpO1xuXHRcdH1cblx0fSk7XG5cblx0b25EZXN0cm95KCgpID0+IHtcblx0XHRpZiAoZWxlbWVudCkge1xuXHRcdFx0ZWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKFwic2Nyb2xsXCIsIG9uU2Nyb2xsKTtcblx0XHRcdGVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInJlc2l6ZVwiLCBvblNjcm9sbCk7XG5cdFx0fVxuXHR9KTtcblxuXHRmdW5jdGlvbiBkaXZfYmluZGluZygkJHZhbHVlKSB7XG5cdFx0YmluZGluZ19jYWxsYmFja3NbJCR2YWx1ZSA/ICd1bnNoaWZ0JyA6ICdwdXNoJ10oKCkgPT4ge1xuXHRcdFx0Y29tcG9uZW50ID0gJCR2YWx1ZTtcblx0XHRcdCQkaW52YWxpZGF0ZSgyLCBjb21wb25lbnQpO1xuXHRcdH0pO1xuXHR9XG5cblx0JCRzZWxmLiQkc2V0ID0gJCRwcm9wcyA9PiB7XG5cdFx0aWYgKCd0aHJlc2hvbGQnIGluICQkcHJvcHMpICQkaW52YWxpZGF0ZSgzLCB0aHJlc2hvbGQgPSAkJHByb3BzLnRocmVzaG9sZCk7XG5cdFx0aWYgKCdob3Jpem9udGFsJyBpbiAkJHByb3BzKSAkJGludmFsaWRhdGUoNCwgaG9yaXpvbnRhbCA9ICQkcHJvcHMuaG9yaXpvbnRhbCk7XG5cdFx0aWYgKCdlbGVtZW50U2Nyb2xsJyBpbiAkJHByb3BzKSAkJGludmFsaWRhdGUoMCwgZWxlbWVudFNjcm9sbCA9ICQkcHJvcHMuZWxlbWVudFNjcm9sbCk7XG5cdFx0aWYgKCdoYXNNb3JlJyBpbiAkJHByb3BzKSAkJGludmFsaWRhdGUoNSwgaGFzTW9yZSA9ICQkcHJvcHMuaGFzTW9yZSk7XG5cdFx0aWYgKCdyZXZlcnNlJyBpbiAkJHByb3BzKSAkJGludmFsaWRhdGUoNiwgcmV2ZXJzZSA9ICQkcHJvcHMucmV2ZXJzZSk7XG5cdFx0aWYgKCd3aW5kb3cnIGluICQkcHJvcHMpICQkaW52YWxpZGF0ZSgxLCB3aW5kb3cgPSAkJHByb3BzLndpbmRvdyk7XG5cdH07XG5cblx0JCRzZWxmLiQkLnVwZGF0ZSA9ICgpID0+IHtcblx0XHRpZiAoJCRzZWxmLiQkLmRpcnR5ICYgLyplbGVtZW50LCByZXZlcnNlKi8gMTA4OCkge1xuXHRcdFx0aWYgKGVsZW1lbnQpIHtcblx0XHRcdFx0aWYgKHJldmVyc2UpIHtcblx0XHRcdFx0XHQkJGludmFsaWRhdGUoMTAsIGVsZW1lbnQuc2Nyb2xsVG9wID0gZWxlbWVudC5zY3JvbGxIZWlnaHQsIGVsZW1lbnQpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0ZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwic2Nyb2xsXCIsIG9uU2Nyb2xsKTtcblx0XHRcdFx0ZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwicmVzaXplXCIsIG9uU2Nyb2xsKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZiAoJCRzZWxmLiQkLmRpcnR5ICYgLyppc0xvYWRNb3JlLCByZXZlcnNlLCBlbGVtZW50LCBiZWZvcmVTY3JvbGxIZWlnaHQsIGJlZm9yZVNjcm9sbFRvcCovIDE5ODQpIHtcblx0XHRcdGlmIChpc0xvYWRNb3JlICYmIHJldmVyc2UpIHtcblx0XHRcdFx0JCRpbnZhbGlkYXRlKDEwLCBlbGVtZW50LnNjcm9sbFRvcCA9IGVsZW1lbnQuc2Nyb2xsSGVpZ2h0IC0gYmVmb3JlU2Nyb2xsSGVpZ2h0ICsgYmVmb3JlU2Nyb2xsVG9wLCBlbGVtZW50KTtcblx0XHRcdH1cblx0XHR9XG5cdH07XG5cblx0cmV0dXJuIFtcblx0XHRlbGVtZW50U2Nyb2xsLFxuXHRcdHdpbmRvdyxcblx0XHRjb21wb25lbnQsXG5cdFx0dGhyZXNob2xkLFxuXHRcdGhvcml6b250YWwsXG5cdFx0aGFzTW9yZSxcblx0XHRyZXZlcnNlLFxuXHRcdGlzTG9hZE1vcmUsXG5cdFx0YmVmb3JlU2Nyb2xsSGVpZ2h0LFxuXHRcdGJlZm9yZVNjcm9sbFRvcCxcblx0XHRlbGVtZW50LFxuXHRcdGRpdl9iaW5kaW5nXG5cdF07XG59XG5cbmNsYXNzIEluZmluaXRlU2Nyb2xsIGV4dGVuZHMgU3ZlbHRlQ29tcG9uZW50IHtcblx0Y29uc3RydWN0b3Iob3B0aW9ucykge1xuXHRcdHN1cGVyKCk7XG5cblx0XHRpbml0KHRoaXMsIG9wdGlvbnMsIGluc3RhbmNlLCBjcmVhdGVfZnJhZ21lbnQsIHNhZmVfbm90X2VxdWFsLCB7XG5cdFx0XHR0aHJlc2hvbGQ6IDMsXG5cdFx0XHRob3Jpem9udGFsOiA0LFxuXHRcdFx0ZWxlbWVudFNjcm9sbDogMCxcblx0XHRcdGhhc01vcmU6IDUsXG5cdFx0XHRyZXZlcnNlOiA2LFxuXHRcdFx0d2luZG93OiAxXG5cdFx0fSk7XG5cdH1cbn1cblxuZXhwb3J0IHsgSW5maW5pdGVTY3JvbGwgYXMgZGVmYXVsdCB9O1xuIiwgIjxzY3JpcHQ+XG4gICAgICAgIGltcG9ydCBJY29uQmFzZSBmcm9tICcuLi9jb21wb25lbnRzL0ljb25CYXNlLnN2ZWx0ZSc7XG4gICAgICAgIDwvc2NyaXB0PlxuICAgICAgICA8SWNvbkJhc2Ugdmlld0JveD1cIjAgMCAzMiAzMlwiIHsuLi4kJHByb3BzfT5cbiAgICAgICAgICA8cGF0aCBkPVwiTTQuNjY1IDMuNDExbDIuMDYzIDIzLjE3NiA5LjI1OCAyLjU3NCA5LjI4NC0yLjU3OCAyLjA2NS0yMy4xNzJoLTIyLjY3MXpNOC45NTEgOC45MTFsLTAuMDY4LTAuNzYzaDcuMTA3djIuODQyaC00LjAwNWwwLjI1OSAyLjkxMWgzLjc0NnYyLjg0MmgtNi4zNDFsLTAuNjk4LTcuODMzek0yMi41MTggMTQuNjY1bC0wLjY2NyA3LjQ4My0wLjA0MyAwLjQ4LTUuODIyIDEuNjE2LTUuODE0LTEuNjE2LTAuMzk4LTQuNDYzaDIuODQ5bDAuMjAyIDIuMjY3IDMuMTYzIDAuODU0IDMuMTY1LTAuODU2IDAuMzI5LTMuNjg2aC0zLjQ4NXYtMi44NDJoNi41ODdsLTAuMDY5IDAuNzYzek0yMy4wMzIgOC45MTFsLTAuMTI5IDEuNDQxLTAuMDU3IDAuNjM5aC02Ljg0NnYtMi44NDJoNy4xbC0wLjA2OCAwLjc2MnpcIiAvPlxuICAgICAgICA8L0ljb25CYXNlPlxuICAgICAgIiwgIjxzY3JpcHQ+XG4gICAgICAgIGltcG9ydCBJY29uQmFzZSBmcm9tICcuLi9jb21wb25lbnRzL0ljb25CYXNlLnN2ZWx0ZSc7XG4gICAgICAgIDwvc2NyaXB0PlxuICAgICAgICA8SWNvbkJhc2Ugdmlld0JveD1cIjAgMCAzODQgNTEyXCIgey4uLiQkcHJvcHN9PlxuICAgICAgICAgIDxwYXRoIGQ9XCJNMjI0IDEzNlYwSDI0QzEwLjcgMCAwIDEwLjcgMCAyNHY0NjRjMCAxMy4zIDEwLjcgMjQgMjQgMjRoMzM2YzEzLjMgMCAyNC0xMC43IDI0LTI0VjE2MEgyNDhjLTEzLjIgMC0yNC0xMC44LTI0LTI0em0xNjAtMTQuMXY2LjFIMjU2VjBoNi4xYzYuNCAwIDEyLjUgMi41IDE3IDdsOTcuOSA5OGM0LjUgNC41IDcgMTAuNiA3IDE2Ljl6XCIgLz5cbiAgICAgICAgPC9JY29uQmFzZT5cbiAgICAgICIsICI8c2NyaXB0PlxuICAgICAgICBpbXBvcnQgSWNvbkJhc2UgZnJvbSAnLi4vY29tcG9uZW50cy9JY29uQmFzZS5zdmVsdGUnO1xuICAgICAgICA8L3NjcmlwdD5cbiAgICAgICAgPEljb25CYXNlIHZpZXdCb3g9XCIwIDAgMzg0IDUxMlwiIHsuLi4kJHByb3BzfT5cbiAgICAgICAgICA8cGF0aCBkPVwiTTIyNCAxMzZWMEgyNEMxMC43IDAgMCAxMC43IDAgMjR2NDY0YzAgMTMuMyAxMC43IDI0IDI0IDI0aDMzNmMxMy4zIDAgMjQtMTAuNyAyNC0yNFYxNjBIMjQ4Yy0xMy4yIDAtMjQtMTAuOC0yNC0yNHptLTY0IDI2OGMwIDEwLjctMTIuOSAxNi0yMC41IDguNUwxMDQgMzc2SDc2Yy02LjYgMC0xMi01LjQtMTItMTJ2LTU2YzAtNi42IDUuNC0xMiAxMi0xMmgyOGwzNS41LTM2LjVjNy42LTcuNiAyMC41LTIuMiAyMC41IDguNXYxMzZ6bTMzLjItNDcuNmM5LjEtOS4zIDkuMS0yNC4xIDAtMzMuNC0yMi4xLTIyLjggMTIuMi01Ni4yIDM0LjQtMzMuNSAyNy4yIDI3LjkgMjcuMiA3Mi40IDAgMTAwLjQtMjEuOCAyMi4zLTU2LjktMTAuNC0zNC40LTMzLjV6bTg2LTExNy4xYzU0LjQgNTUuOSA1NC40IDE0NC44IDAgMjAwLjgtMjEuOCAyMi40LTU3LTEwLjMtMzQuNC0zMy41IDM2LjItMzcuMiAzNi4zLTk2LjUgMC0xMzMuOC0yMi4xLTIyLjggMTIuMy01Ni4zIDM0LjQtMzMuNXpNMzg0IDEyMS45djYuMUgyNTZWMGg2LjFjNi40IDAgMTIuNSAyLjUgMTcgN2w5Ny45IDk4YzQuNSA0LjUgNyAxMC42IDcgMTYuOXpcIiAvPlxuICAgICAgICA8L0ljb25CYXNlPlxuICAgICAgIiwgIjxzY3JpcHQ+XG4gICAgICAgIGltcG9ydCBJY29uQmFzZSBmcm9tICcuLi9jb21wb25lbnRzL0ljb25CYXNlLnN2ZWx0ZSc7XG4gICAgICAgIDwvc2NyaXB0PlxuICAgICAgICA8SWNvbkJhc2Ugdmlld0JveD1cIjAgMCAzODQgNTEyXCIgey4uLiQkcHJvcHN9PlxuICAgICAgICAgIDxwYXRoIGQ9XCJNMzg0IDEyMS45NDFWMTI4SDI1NlYwaDYuMDU5YzYuMzY1IDAgMTIuNDcgMi41MjkgMTYuOTcxIDcuMDI5bDk3Ljk0MSA5Ny45NDFBMjQuMDA1IDI0LjAwNSAwIDAgMSAzODQgMTIxLjk0MXpNMjQ4IDE2MGMtMTMuMiAwLTI0LTEwLjgtMjQtMjRWMEgyNEMxMC43NDUgMCAwIDEwLjc0NSAwIDI0djQ2NGMwIDEzLjI1NSAxMC43NDUgMjQgMjQgMjRoMzM2YzEzLjI1NSAwIDI0LTEwLjc0NSAyNC0yNFYxNjBIMjQ4ek0xMjMuMjA2IDQwMC41MDVhNS40IDUuNCAwIDAgMS03LjYzMy4yNDZsLTY0Ljg2Ni02MC44MTJhNS40IDUuNCAwIDAgMSAwLTcuODc5bDY0Ljg2Ni02MC44MTJhNS40IDUuNCAwIDAgMSA3LjYzMy4yNDZsMTkuNTc5IDIwLjg4NWE1LjQgNS40IDAgMCAxLS4zNzIgNy43NDdMMTAxLjY1IDMzNmw0MC43NjMgMzUuODc0YTUuNCA1LjQgMCAwIDEgLjM3MiA3Ljc0N2wtMTkuNTc5IDIwLjg4NHptNTEuMjk1IDUwLjQ3OWwtMjcuNDUzLTcuOTdhNS40MDIgNS40MDIgMCAwIDEtMy42ODEtNi42OTJsNjEuNDQtMjExLjYyNmE1LjQwMiA1LjQwMiAwIDAgMSA2LjY5Mi0zLjY4MWwyNy40NTIgNy45N2E1LjQgNS40IDAgMCAxIDMuNjggNi42OTJsLTYxLjQ0IDIxMS42MjZhNS4zOTcgNS4zOTcgMCAwIDEtNi42OSAzLjY4MXptMTYwLjc5Mi0xMTEuMDQ1bC02NC44NjYgNjAuODEyYTUuNCA1LjQgMCAwIDEtNy42MzMtLjI0NmwtMTkuNTgtMjAuODg1YTUuNCA1LjQgMCAwIDEgLjM3Mi03Ljc0N0wyODQuMzUgMzM2bC00MC43NjMtMzUuODc0YTUuNCA1LjQgMCAwIDEtLjM3Mi03Ljc0N2wxOS41OC0yMC44ODVhNS40IDUuNCAwIDAgMSA3LjYzMy0uMjQ2bDY0Ljg2NiA2MC44MTJhNS40IDUuNCAwIDAgMS0uMDAxIDcuODc5elwiIC8+XG4gICAgICAgIDwvSWNvbkJhc2U+XG4gICAgICAiLCAiPHNjcmlwdD5cbiAgICAgICAgaW1wb3J0IEljb25CYXNlIGZyb20gJy4uL2NvbXBvbmVudHMvSWNvbkJhc2Uuc3ZlbHRlJztcbiAgICAgICAgPC9zY3JpcHQ+XG4gICAgICAgIDxJY29uQmFzZSB2aWV3Qm94PVwiMCAwIDM4NCA1MTJcIiB7Li4uJCRwcm9wc30+XG4gICAgICAgICAgPHBhdGggZD1cIk0yMjQgMTM2VjBIMjRDMTAuNyAwIDAgMTAuNyAwIDI0djQ2NGMwIDEzLjMgMTAuNyAyNCAyNCAyNGgzMzZjMTMuMyAwIDI0LTEwLjcgMjQtMjRWMTYwSDI0OGMtMTMuMiAwLTI0LTEwLjgtMjQtMjR6bS05NiAxNDRjMCA0LjQyLTMuNTggOC04IDhoLThjLTguODQgMC0xNiA3LjE2LTE2IDE2djMyYzAgOC44NCA3LjE2IDE2IDE2IDE2aDhjNC40MiAwIDggMy41OCA4IDh2MTZjMCA0LjQyLTMuNTggOC04IDhoLThjLTI2LjUxIDAtNDgtMjEuNDktNDgtNDh2LTMyYzAtMjYuNTEgMjEuNDktNDggNDgtNDhoOGM0LjQyIDAgOCAzLjU4IDggOHYxNnptNDQuMjcgMTA0SDE2MGMtNC40MiAwLTgtMy41OC04LTh2LTE2YzAtNC40MiAzLjU4LTggOC04aDEyLjI3YzUuOTUgMCAxMC40MS0zLjUgMTAuNDEtNi42MiAwLTEuMy0uNzUtMi42Ni0yLjEyLTMuODRsLTIxLjg5LTE4Ljc3Yy04LjQ3LTcuMjItMTMuMzMtMTcuNDgtMTMuMzMtMjguMTQgMC0yMS4zIDE5LjAyLTM4LjYyIDQyLjQxLTM4LjYySDIwMGM0LjQyIDAgOCAzLjU4IDggOHYxNmMwIDQuNDItMy41OCA4LTggOGgtMTIuMjdjLTUuOTUgMC0xMC40MSAzLjUtMTAuNDEgNi42MiAwIDEuMy43NSAyLjY2IDIuMTIgMy44NGwyMS44OSAxOC43N2M4LjQ3IDcuMjIgMTMuMzMgMTcuNDggMTMuMzMgMjguMTQuMDEgMjEuMjktMTkgMzguNjItNDIuMzkgMzguNjJ6TTI1NiAyNjR2MjAuOGMwIDIwLjI3IDUuNyA0MC4xNyAxNiA1Ni44OCAxMC4zLTE2LjcgMTYtMzYuNjEgMTYtNTYuODhWMjY0YzAtNC40MiAzLjU4LTggOC04aDE2YzQuNDIgMCA4IDMuNTggOCA4djIwLjhjMCAzNS40OC0xMi44OCA2OC44OS0zNi4yOCA5NC4wOS0zLjAyIDMuMjUtNy4yNyA1LjExLTExLjcyIDUuMTFzLTguNy0xLjg2LTExLjcyLTUuMTFjLTIzLjQtMjUuMi0zNi4yOC01OC42MS0zNi4yOC05NC4wOVYyNjRjMC00LjQyIDMuNTgtOCA4LThoMTZjNC40MiAwIDggMy41OCA4IDh6bTEyMS0xNTlMMjc5LjEgN2MtNC41LTQuNS0xMC42LTctMTctN0gyNTZ2MTI4aDEyOHYtNi4xYzAtNi4zLTIuNS0xMi40LTctMTYuOXpcIiAvPlxuICAgICAgICA8L0ljb25CYXNlPlxuICAgICAgIiwgIjxzY3JpcHQ+XG4gICAgICAgIGltcG9ydCBJY29uQmFzZSBmcm9tICcuLi9jb21wb25lbnRzL0ljb25CYXNlLnN2ZWx0ZSc7XG4gICAgICAgIDwvc2NyaXB0PlxuICAgICAgICA8SWNvbkJhc2Ugdmlld0JveD1cIjAgMCAzODQgNTEyXCIgey4uLiQkcHJvcHN9PlxuICAgICAgICAgIDxwYXRoIGQ9XCJNMjI0IDEzNlYwSDI0QzEwLjcgMCAwIDEwLjcgMCAyNHY0NjRjMCAxMy4zIDEwLjcgMjQgMjQgMjRoMzM2YzEzLjMgMCAyNC0xMC43IDI0LTI0VjE2MEgyNDhjLTEzLjIgMC0yNC0xMC44LTI0LTI0em02MC4xIDEwNi41TDIyNCAzMzZsNjAuMSA5My41YzUuMSA4LS42IDE4LjUtMTAuMSAxOC41aC0zNC45Yy00LjQgMC04LjUtMi40LTEwLjYtNi4zQzIwOC45IDQwNS41IDE5MiAzNzMgMTkyIDM3M2MtNi40IDE0LjgtMTAgMjAtMzYuNiA2OC44LTIuMSAzLjktNi4xIDYuMy0xMC41IDYuM0gxMTBjLTkuNSAwLTE1LjItMTAuNS0xMC4xLTE4LjVsNjAuMy05My41LTYwLjMtOTMuNWMtNS4yLTggLjYtMTguNSAxMC4xLTE4LjVoMzQuOGM0LjQgMCA4LjUgMi40IDEwLjYgNi4zIDI2LjEgNDguOCAyMCAzMy42IDM2LjYgNjguNSAwIDAgNi4xLTExLjcgMzYuNi02OC41IDIuMS0zLjkgNi4yLTYuMyAxMC42LTYuM0gyNzRjOS41LS4xIDE1LjIgMTAuNCAxMC4xIDE4LjR6TTM4NCAxMjEuOXY2LjFIMjU2VjBoNi4xYzYuNCAwIDEyLjUgMi41IDE3IDdsOTcuOSA5OGM0LjUgNC41IDcgMTAuNiA3IDE2Ljl6XCIgLz5cbiAgICAgICAgPC9JY29uQmFzZT5cbiAgICAgICIsICI8c2NyaXB0PlxuICAgICAgICBpbXBvcnQgSWNvbkJhc2UgZnJvbSAnLi4vY29tcG9uZW50cy9JY29uQmFzZS5zdmVsdGUnO1xuICAgICAgICA8L3NjcmlwdD5cbiAgICAgICAgPEljb25CYXNlIHZpZXdCb3g9XCIwIDAgMzg0IDUxMlwiIHsuLi4kJHByb3BzfT5cbiAgICAgICAgICA8cGF0aCBkPVwiTTM4NCAxMjEuOTQxVjEyOEgyNTZWMGg2LjA1OWEyNCAyNCAwIDAgMSAxNi45NyA3LjAyOWw5Ny45NDEgOTcuOTQxYTI0LjAwMiAyNC4wMDIgMCAwIDEgNy4wMyAxNi45NzF6TTI0OCAxNjBjLTEzLjIgMC0yNC0xMC44LTI0LTI0VjBIMjRDMTAuNzQ1IDAgMCAxMC43NDUgMCAyNHY0NjRjMCAxMy4yNTUgMTAuNzQ1IDI0IDI0IDI0aDMzNmMxMy4yNTUgMCAyNC0xMC43NDUgMjQtMjRWMTYwSDI0OHptLTEzNS40NTUgMTZjMjYuNTEgMCA0OCAyMS40OSA0OCA0OHMtMjEuNDkgNDgtNDggNDgtNDgtMjEuNDktNDgtNDggMjEuNDkxLTQ4IDQ4LTQ4em0yMDggMjQwaC0yNTZsLjQ4NS00OC40ODVMMTA0LjU0NSAzMjhjNC42ODYtNC42ODYgMTEuNzk5LTQuMjAxIDE2LjQ4NS40ODVMMTYwLjU0NSAzNjggMjY0LjA2IDI2NC40ODVjNC42ODYtNC42ODYgMTIuMjg0LTQuNjg2IDE2Ljk3MSAwTDMyMC41NDUgMzA0djExMnpcIiAvPlxuICAgICAgICA8L0ljb25CYXNlPlxuICAgICAgIiwgIjxzY3JpcHQ+XG4gICAgICAgIGltcG9ydCBJY29uQmFzZSBmcm9tICcuLi9jb21wb25lbnRzL0ljb25CYXNlLnN2ZWx0ZSc7XG4gICAgICAgIDwvc2NyaXB0PlxuICAgICAgICA8SWNvbkJhc2Ugdmlld0JveD1cIjAgMCAzODQgNTEyXCIgey4uLiQkcHJvcHN9PlxuICAgICAgICAgIDxwYXRoIGQ9XCJNMTgxLjkgMjU2LjFjLTUtMTYtNC45LTQ2LjktMi00Ni45IDguNCAwIDcuNiAzNi45IDIgNDYuOXptLTEuNyA0Ny4yYy03LjcgMjAuMi0xNy4zIDQzLjMtMjguNCA2Mi43IDE4LjMtNyAzOS0xNy4yIDYyLjktMjEuOS0xMi43LTkuNi0yNC45LTIzLjQtMzQuNS00MC44ek04Ni4xIDQyOC4xYzAgLjggMTMuMi01LjQgMzQuOS00MC4yLTYuNyA2LjMtMjkuMSAyNC41LTM0LjkgNDAuMnpNMjQ4IDE2MGgxMzZ2MzI4YzAgMTMuMy0xMC43IDI0LTI0IDI0SDI0Yy0xMy4zIDAtMjQtMTAuNy0yNC0yNFYyNEMwIDEwLjcgMTAuNyAwIDI0IDBoMjAwdjEzNmMwIDEzLjIgMTAuOCAyNCAyNCAyNHptLTggMTcxLjhjLTIwLTEyLjItMzMuMy0yOS00Mi43LTUzLjggNC41LTE4LjUgMTEuNi00Ni42IDYuMi02NC4yLTQuNy0yOS40LTQyLjQtMjYuNS00Ny44LTYuOC01IDE4LjMtLjQgNDQuMSA4LjEgNzctMTEuNiAyNy42LTI4LjcgNjQuNi00MC44IDg1LjgtLjEgMC0uMS4xLS4yLjEtMjcuMSAxMy45LTczLjYgNDQuNS01NC41IDY4IDUuNiA2LjkgMTYgMTAgMjEuNSAxMCAxNy45IDAgMzUuNy0xOCA2MS4xLTYxLjggMjUuOC04LjUgNTQuMS0xOS4xIDc5LTIzLjIgMjEuNyAxMS44IDQ3LjEgMTkuNSA2NCAxOS41IDI5LjIgMCAzMS4yLTMyIDE5LjctNDMuNC0xMy45LTEzLjYtNTQuMy05LjctNzMuNi03LjJ6TTM3NyAxMDVMMjc5IDdjLTQuNS00LjUtMTAuNi03LTE3LTdoLTZ2MTI4aDEyOHYtNi4xYzAtNi4zLTIuNS0xMi40LTctMTYuOXptLTc0LjEgMjU1LjNjNC4xLTIuNy0yLjUtMTEuOS00Mi44LTkgMzcuMSAxNS44IDQyLjggOSA0Mi44IDl6XCIgLz5cbiAgICAgICAgPC9JY29uQmFzZT5cbiAgICAgICIsICI8c2NyaXB0PlxuICAgICAgICBpbXBvcnQgSWNvbkJhc2UgZnJvbSAnLi4vY29tcG9uZW50cy9JY29uQmFzZS5zdmVsdGUnO1xuICAgICAgICA8L3NjcmlwdD5cbiAgICAgICAgPEljb25CYXNlIHZpZXdCb3g9XCIwIDAgMzg0IDUxMlwiIHsuLi4kJHByb3BzfT5cbiAgICAgICAgICA8cGF0aCBkPVwiTTE5My43IDI3MS4yYzguOCAwIDE1LjUgMi43IDIwLjMgOC4xIDkuNiAxMC45IDkuOCAzMi43LS4yIDQ0LjEtNC45IDUuNi0xMS45IDguNS0yMS4xIDguNWgtMjYuOXYtNjAuN2gyNy45ek0zNzcgMTA1TDI3OSA3Yy00LjUtNC41LTEwLjYtNy0xNy03aC02djEyOGgxMjh2LTYuMWMwLTYuMy0yLjUtMTIuNC03LTE2Ljl6bS0xNTMgMzFWMEgyNEMxMC43IDAgMCAxMC43IDAgMjR2NDY0YzAgMTMuMyAxMC43IDI0IDI0IDI0aDMzNmMxMy4zIDAgMjQtMTAuNyAyNC0yNFYxNjBIMjQ4Yy0xMy4yIDAtMjQtMTAuOC0yNC0yNHptNTMgMTY1LjJjMCA5MC4zLTg4LjggNzcuNi0xMTEuMSA3Ny42VjQzNmMwIDYuNi01LjQgMTItMTIgMTJoLTMwLjhjLTYuNiAwLTEyLTUuNC0xMi0xMlYyMzYuMmMwLTYuNiA1LjQtMTIgMTItMTJoODFjNDQuNSAwIDcyLjkgMzIuOCA3Mi45IDc3elwiIC8+XG4gICAgICAgIDwvSWNvbkJhc2U+XG4gICAgICAiLCAiPHNjcmlwdD5cbiAgICAgICAgaW1wb3J0IEljb25CYXNlIGZyb20gJy4uL2NvbXBvbmVudHMvSWNvbkJhc2Uuc3ZlbHRlJztcbiAgICAgICAgPC9zY3JpcHQ+XG4gICAgICAgIDxJY29uQmFzZSB2aWV3Qm94PVwiMCAwIDM4NCA1MTJcIiB7Li4uJCRwcm9wc30+XG4gICAgICAgICAgPHBhdGggZD1cIk0zODQgMTIxLjk0MVYxMjhIMjU2VjBoNi4wNTljNi4zNjUgMCAxMi40NyAyLjUyOSAxNi45NzEgNy4wMjlsOTcuOTQxIDk3Ljk0MUEyNC4wMDUgMjQuMDA1IDAgMCAxIDM4NCAxMjEuOTQxek0yMjQgMTM2VjBIMjRDMTAuNzQ1IDAgMCAxMC43NDUgMCAyNHY0NjRjMCAxMy4yNTUgMTAuNzQ1IDI0IDI0IDI0aDMzNmMxMy4yNTUgMCAyNC0xMC43NDUgMjQtMjRWMTYwSDI0OGMtMTMuMiAwLTI0LTEwLjgtMjQtMjR6bTk2IDE0NC4wMTZ2MTExLjk2M2MwIDIxLjQ0NS0yNS45NDMgMzEuOTk4LTQwLjk3MSAxNi45NzFMMjI0IDM1My45NDFWMzkyYzAgMTMuMjU1LTEwLjc0NSAyNC0yNCAyNEg4OGMtMTMuMjU1IDAtMjQtMTAuNzQ1LTI0LTI0VjI4MGMwLTEzLjI1NSAxMC43NDUtMjQgMjQtMjRoMTEyYzEzLjI1NSAwIDI0IDEwLjc0NSAyNCAyNHYzOC4wNTlsNTUuMDI5LTU1LjAxM2MxNS4wMTEtMTUuMDEgNDAuOTcxLTQuNDkxIDQwLjk3MSAxNi45N3pcIiAvPlxuICAgICAgICA8L0ljb25CYXNlPlxuICAgICAgIiwgIjxzY3JpcHQ+XG4gICAgICAgIGltcG9ydCBJY29uQmFzZSBmcm9tICcuLi9jb21wb25lbnRzL0ljb25CYXNlLnN2ZWx0ZSc7XG4gICAgICAgIDwvc2NyaXB0PlxuICAgICAgICA8SWNvbkJhc2Ugdmlld0JveD1cIjAgMCAzODQgNTEyXCIgey4uLiQkcHJvcHN9PlxuICAgICAgICAgIDxwYXRoIGQ9XCJNMjI0IDEzNlYwSDI0QzEwLjcgMCAwIDEwLjcgMCAyNHY0NjRjMCAxMy4zIDEwLjcgMjQgMjQgMjRoMzM2YzEzLjMgMCAyNC0xMC43IDI0LTI0VjE2MEgyNDhjLTEzLjIgMC0yNC0xMC44LTI0LTI0em01Ny4xIDEyMEgzMDVjNy43IDAgMTMuNCA3LjEgMTEuNyAxNC43bC0zOCAxNjhjLTEuMiA1LjUtNi4xIDkuMy0xMS43IDkuM2gtMzhjLTUuNSAwLTEwLjMtMy44LTExLjYtOS4xLTI1LjgtMTAzLjUtMjAuOC04MS4yLTI1LjYtMTEwLjVoLS41Yy0xLjEgMTQuMy0yLjQgMTcuNC0yNS42IDExMC41LTEuMyA1LjMtNi4xIDkuMS0xMS42IDkuMUgxMTdjLTUuNiAwLTEwLjUtMy45LTExLjctOS40bC0zNy44LTE2OGMtMS43LTcuNSA0LTE0LjYgMTEuNy0xNC42aDI0LjVjNS43IDAgMTAuNyA0IDExLjggOS43IDE1LjYgNzggMjAuMSAxMDkuNSAyMSAxMjIuMiAxLjYtMTAuMiA3LjMtMzIuNyAyOS40LTEyMi43IDEuMy01LjQgNi4xLTkuMSAxMS43LTkuMWgyOS4xYzUuNiAwIDEwLjQgMy44IDExLjcgOS4yIDI0IDEwMC40IDI4LjggMTI0IDI5LjYgMTI5LjQtLjItMTEuMi0yLjYtMTcuOCAyMS42LTEyOS4yIDEtNS42IDUuOS05LjUgMTEuNS05LjV6TTM4NCAxMjEuOXY2LjFIMjU2VjBoNi4xYzYuNCAwIDEyLjUgMi41IDE3IDdsOTcuOSA5OGM0LjUgNC41IDcgMTAuNiA3IDE2Ljl6XCIgLz5cbiAgICAgICAgPC9JY29uQmFzZT5cbiAgICAgICIsICI8c2NyaXB0PlxuICAgICAgICBpbXBvcnQgSWNvbkJhc2UgZnJvbSAnLi4vY29tcG9uZW50cy9JY29uQmFzZS5zdmVsdGUnO1xuICAgICAgICA8L3NjcmlwdD5cbiAgICAgICAgPEljb25CYXNlIHZpZXdCb3g9XCIwIDAgNDQ4IDUxMlwiIHsuLi4kJHByb3BzfT5cbiAgICAgICAgICA8cGF0aCBkPVwiTTMxMiAzMjBoMTM2VjU2YzAtMTMuMy0xMC43LTI0LTI0LTI0SDI0QzEwLjcgMzIgMCA0Mi43IDAgNTZ2NDAwYzAgMTMuMyAxMC43IDI0IDI0IDI0aDI2NFYzNDRjMC0xMy4yIDEwLjgtMjQgMjQtMjR6bTEyOSA1NWwtOTggOThjLTQuNSA0LjUtMTAuNiA3LTE3IDdoLTZWMzUyaDEyOHY2LjFjMCA2LjMtMi41IDEyLjQtNyAxNi45elwiIC8+XG4gICAgICAgIDwvSWNvbkJhc2U+XG4gICAgICAiLCAiPHNjcmlwdCBsYW5nPVwidHNcIj5cclxuICBpbXBvcnQgeyBpc0ltZyB9IGZyb20gJ3NyYy9VdGlsaXR5J1xyXG4gIGltcG9ydCBEaUh0bWw1IGZyb20gJ3N2ZWx0ZS1pY29ucy9kaS9EaUh0bWw1LnN2ZWx0ZSdcclxuICBpbXBvcnQgRmFGaWxlIGZyb20gJ3N2ZWx0ZS1pY29ucy9mYS9GYUZpbGUuc3ZlbHRlJ1xyXG4gIGltcG9ydCBGYUZpbGVBdWRpbyBmcm9tICdzdmVsdGUtaWNvbnMvZmEvRmFGaWxlQXVkaW8uc3ZlbHRlJ1xyXG4gIGltcG9ydCBGYUZpbGVDb2RlIGZyb20gJ3N2ZWx0ZS1pY29ucy9mYS9GYUZpbGVDb2RlLnN2ZWx0ZSdcclxuICBpbXBvcnQgRmFGaWxlQ3N2IGZyb20gJ3N2ZWx0ZS1pY29ucy9mYS9GYUZpbGVDc3Yuc3ZlbHRlJ1xyXG4gIGltcG9ydCBGYUZpbGVFeGNlbCBmcm9tICdzdmVsdGUtaWNvbnMvZmEvRmFGaWxlRXhjZWwuc3ZlbHRlJ1xyXG4gIGltcG9ydCBGYUZpbGVJbWFnZSBmcm9tICdzdmVsdGUtaWNvbnMvZmEvRmFGaWxlSW1hZ2Uuc3ZlbHRlJ1xyXG4gIGltcG9ydCBGYUZpbGVQZGYgZnJvbSAnc3ZlbHRlLWljb25zL2ZhL0ZhRmlsZVBkZi5zdmVsdGUnXHJcbiAgaW1wb3J0IEZhRmlsZVBvd2VycG9pbnQgZnJvbSAnc3ZlbHRlLWljb25zL2ZhL0ZhRmlsZVBvd2VycG9pbnQuc3ZlbHRlJ1xyXG4gIGltcG9ydCBGYUZpbGVWaWRlbyBmcm9tICdzdmVsdGUtaWNvbnMvZmEvRmFGaWxlVmlkZW8uc3ZlbHRlJ1xyXG4gIGltcG9ydCBGYUZpbGVXb3JkIGZyb20gJ3N2ZWx0ZS1pY29ucy9mYS9GYUZpbGVXb3JkLnN2ZWx0ZSdcclxuICBpbXBvcnQgRmFTdGlja3lOb3RlIGZyb20gJ3N2ZWx0ZS1pY29ucy9mYS9GYVN0aWNreU5vdGUuc3ZlbHRlJ1xyXG4gIGltcG9ydCB7IElDT04gfSBmcm9tICdzcmMvQ29uc3RhbnRzJ1xyXG5cclxuICBleHBvcnQgbGV0IHBhdGg6IHN0cmluZ1xyXG48L3NjcmlwdD5cclxuXHJcbnsjaWYgIXBhdGguZW5kc1dpdGgoJy5tZCcpfVxyXG4gIDxzcGFuIGNsYXNzPXtJQ09OfT5cclxuICAgIHsjaWYgaXNJbWcocGF0aCl9XHJcbiAgICAgIDxGYUZpbGVJbWFnZSAvPlxyXG4gICAgezplbHNlIGlmIHBhdGguZW5kc1dpdGgoJy5odG1sJyl9XHJcbiAgICAgIDxEaUh0bWw1IC8+XHJcbiAgICB7OmVsc2UgaWYgcGF0aC5lbmRzV2l0aCgnLnhscycpIHx8IHBhdGguZW5kc1dpdGgoJy54bHN4Jyl9XHJcbiAgICAgIDxGYUZpbGVFeGNlbCAvPlxyXG4gICAgezplbHNlIGlmIHBhdGguZW5kc1dpdGgoJy5jc3YnKX1cclxuICAgICAgPEZhRmlsZUNzdiAvPlxyXG4gICAgezplbHNlIGlmIHBhdGguZW5kc1dpdGgoJy5wZGYnKX1cclxuICAgICAgPEZhRmlsZVBkZiAvPlxyXG4gICAgezplbHNlIGlmIHBhdGguZW5kc1dpdGgoJy50eHQnKX1cclxuICAgICAgPEZhU3RpY2t5Tm90ZSAvPlxyXG4gICAgezplbHNlIGlmIHBhdGguZW5kc1dpdGgoJy5tcDMnKSB8fCBwYXRoLmVuZHNXaXRoKCdvcHVzJyl9XHJcbiAgICAgIDxGYUZpbGVBdWRpbyAvPlxyXG4gICAgezplbHNlIGlmIHBhdGguZW5kc1dpdGgoJy5tcDQnKSB8fCBwYXRoLmVuZHNXaXRoKCcud2VibScpfVxyXG4gICAgICA8RmFGaWxlVmlkZW8gLz5cclxuICAgIHs6ZWxzZSBpZiBwYXRoLmVuZHNXaXRoKCcuZG9jeCcpIHx8IHBhdGguZW5kc1dpdGgoJy5kb2MnKX1cclxuICAgICAgPEZhRmlsZVdvcmQgLz5cclxuICAgIHs6ZWxzZSBpZiBwYXRoLmVuZHNXaXRoKCcucHB0JykgfHwgcGF0aC5lbmRzV2l0aCgnLnBwdHgnKX1cclxuICAgICAgPEZhRmlsZVBvd2VycG9pbnQgLz5cclxuICAgIHs6ZWxzZSBpZiBwYXRoLmVuZHNXaXRoKCcuanMnKSB8fCBwYXRoLmVuZHNXaXRoKCcudHMnKSB8fCBwYXRoLmVuZHNXaXRoKCcuYycpIHx8IHBhdGguZW5kc1dpdGgoJy5weScpfVxyXG4gICAgICA8RmFGaWxlQ29kZSAvPlxyXG4gICAgezplbHNlfVxyXG4gICAgICA8RmFGaWxlIC8+XHJcbiAgICB7L2lmfVxyXG4gIDwvc3Bhbj5cclxuey9pZn1cclxuIiwgIjxzY3JpcHQgbGFuZz1cInRzXCI+XHJcbiAgZnVuY3Rpb24gX2FycmF5QnVmZmVyVG9CYXNlNjQoYnVmZmVyOiBBcnJheUJ1ZmZlcikge1xyXG4gICAgdmFyIGJpbmFyeSA9ICcnXHJcbiAgICB2YXIgYnl0ZXMgPSBuZXcgVWludDhBcnJheShidWZmZXIpXHJcbiAgICB2YXIgbGVuID0gYnl0ZXMuYnl0ZUxlbmd0aFxyXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkrKykge1xyXG4gICAgICBiaW5hcnkgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShieXRlc1tpXSlcclxuICAgIH1cclxuICAgIHJldHVybiB3aW5kb3cuYnRvYShiaW5hcnkpXHJcbiAgfVxyXG5cclxuICBleHBvcnQgbGV0IGltZzogUHJvbWlzZTxBcnJheUJ1ZmZlcj5cclxuPC9zY3JpcHQ+XHJcblxyXG57I2F3YWl0IGltZyB0aGVuIHNyY31cclxuICA8ZGl2IGNsYXNzPVwiR0EtaW1nXCI+XHJcbiAgICA8IS0tIHN2ZWx0ZS1pZ25vcmUgYTExeS1taXNzaW5nLWF0dHJpYnV0ZSAtLT5cclxuICAgIDxpbWcgc3JjPXsnZGF0YTppbWFnZS9qcGc7YmFzZTY0LCAnICsgX2FycmF5QnVmZmVyVG9CYXNlNjQoc3JjKX0gLz5cclxuICA8L2Rpdj5cclxuey9hd2FpdH1cclxuXHJcbjxzdHlsZT5cclxuICAuR0EtaW1nIGltZyB7XHJcbiAgICBtYXgtd2lkdGg6IDI1JTtcclxuICAgIG1heC1oZWlnaHQ6IDI1JTtcclxuICB9XHJcbiAgLkdBLWltZyBpbWc6aG92ZXIge1xyXG4gICAgbWF4LXdpZHRoOiAxMDAlO1xyXG4gICAgbWF4LWhlaWdodDogMTAwJTtcclxuICB9XHJcbjwvc3R5bGU+XHJcbiIsICI8c2NyaXB0PlxuICAgICAgICBpbXBvcnQgSWNvbkJhc2UgZnJvbSAnLi4vY29tcG9uZW50cy9JY29uQmFzZS5zdmVsdGUnO1xuICAgICAgICA8L3NjcmlwdD5cbiAgICAgICAgPEljb25CYXNlIHZpZXdCb3g9XCIwIDAgNDk2IDUxMlwiIHsuLi4kJHByb3BzfT5cbiAgICAgICAgICA8cGF0aCBkPVwiTTI0Ny42IDhDMzg5LjQgOCA0OTYgMTE4LjEgNDk2IDI1NmMwIDE0Ny4xLTExOC41IDI0OC0yNDguNCAyNDhDMTEzLjYgNTA0IDAgMzk0LjUgMCAyNTYgMCAxMjMuMSAxMDQuNyA4IDI0Ny42IDh6bS44IDQ0LjdDMTMwLjIgNTIuNyA0NC43IDE1MC42IDQ0LjcgMjU2YzAgMTA5LjggOTEuMiAyMDIuOCAyMDMuNyAyMDIuOCAxMDMuMiAwIDIwMi44LTgxLjEgMjAyLjgtMjAyLjguMS0xMTMuOC05MC4yLTIwMy4zLTIwMi44LTIwMy4zem0tLjQgNjAuNWMtODEuOSAwLTEwMi41IDc3LjMtMTAyLjUgMTQyLjggMCA2NS41IDIwLjYgMTQyLjggMTAyLjUgMTQyLjhTMzUwLjUgMzIxLjUgMzUwLjUgMjU2YzAtNjUuNS0yMC42LTE0Mi44LTEwMi41LTE0Mi44em0wIDUzLjljMy4zIDAgNi40LjUgOS4yIDEuMiA1LjkgNS4xIDguOCAxMi4xIDMuMSAyMS45bC01NC41IDEwMC4yYy0xLjctMTIuNy0xLjktMjUuMS0xLjktMzQuNCAwLTI4LjggMi04OC45IDQ0LjEtODguOXptNDAuOCA0Ni4yYzIuOSAxNS40IDMuMyAzMS40IDMuMyA0Mi43IDAgMjguOS0yIDg4LjktNDQuMSA4OC45LTEzLjUgMC0zMi42LTcuNy0yMC4xLTI2LjRsNjAuOS0xMDUuMnpcIiAvPlxuICAgICAgICA8L0ljb25CYXNlPlxuICAgICAgIiwgIjxzY3JpcHQ+XG4gICAgICAgIGltcG9ydCBJY29uQmFzZSBmcm9tICcuLi9jb21wb25lbnRzL0ljb25CYXNlLnN2ZWx0ZSc7XG4gICAgICAgIDwvc2NyaXB0PlxuICAgICAgICA8SWNvbkJhc2Ugdmlld0JveD1cIjAgMCAzODQgNTEyXCIgey4uLiQkcHJvcHN9PlxuICAgICAgICAgIDxwYXRoIGQ9XCJNMjE2IDIzLjg2YzAtMjMuOC0zMC42NS0zMi43Ny00NC4xNS0xMy4wNEM0OCAxOTEuODUgMjI0IDIwMCAyMjQgMjg4YzAgMzUuNjMtMjkuMTEgNjQuNDYtNjQuODUgNjMuOTktMzUuMTctLjQ1LTYzLjE1LTI5Ljc3LTYzLjE1LTY0Ljk0di04NS41MWMwLTIxLjctMjYuNDctMzIuMjMtNDEuNDMtMTYuNUMyNy44IDIxMy4xNiAwIDI2MS4zMyAwIDMyMGMwIDEwNS44NyA4Ni4xMyAxOTIgMTkyIDE5MnMxOTItODYuMTMgMTkyLTE5MmMwLTE3MC4yOS0xNjgtMTkzLTE2OC0yOTYuMTR6XCIgLz5cbiAgICAgICAgPC9JY29uQmFzZT5cbiAgICAgICIsICI8c2NyaXB0PlxuICAgICAgICBpbXBvcnQgSWNvbkJhc2UgZnJvbSAnLi4vY29tcG9uZW50cy9JY29uQmFzZS5zdmVsdGUnO1xuICAgICAgICA8L3NjcmlwdD5cbiAgICAgICAgPEljb25CYXNlIHZpZXdCb3g9XCIwIDAgNDQ4IDUxMlwiIHsuLi4kJHByb3BzfT5cbiAgICAgICAgICA8cGF0aCBkPVwiTTQ0MC4xIDM1NS4ybC0zOS4yLTIzIDM0LjEtOS4zYzguNC0yLjMgMTMuNC0xMS4xIDExLjEtMTkuNmwtNC4xLTE1LjVjLTIuMi04LjUtMTAuOS0xMy42LTE5LjMtMTEuM0wzNDMgMjk4LjIgMjcxLjIgMjU2bDcxLjktNDIuMiA3OS43IDIxLjdjOC40IDIuMyAxNy0yLjggMTkuMy0xMS4zbDQuMS0xNS41YzIuMi04LjUtMi43LTE3LjMtMTEuMS0xOS42bC0zNC4xLTkuMyAzOS4yLTIzYzcuNS00LjQgMTAuMS0xNC4yIDUuOC0yMS45bC03LjktMTMuOWMtNC4zLTcuNy0xNC0xMC4zLTIxLjUtNS45bC0zOS4yIDIzIDkuMS0zNC43YzIuMi04LjUtMi43LTE3LjMtMTEuMS0xOS42bC0xNS4yLTQuMWMtOC40LTIuMy0xNyAyLjgtMTkuMyAxMS4zbC0yMS4zIDgxLTcxLjkgNDIuMnYtODQuNUwzMDYgNzAuNGM2LjEtNi4yIDYuMS0xNi40IDAtMjIuNmwtMTEuMS0xMS4zYy02LjEtNi4yLTE2LjEtNi4yLTIyLjIgMGwtMjQuOSAyNS40VjE2YzAtOC44LTctMTYtMTUuNy0xNmgtMTUuN2MtOC43IDAtMTUuNyA3LjItMTUuNyAxNnY0Ni4xbC0yNC45LTI1LjRjLTYuMS02LjItMTYuMS02LjItMjIuMiAwTDE0Mi4xIDQ4Yy02LjEgNi4yLTYuMSAxNi40IDAgMjIuNmw1OC4zIDU5LjN2ODQuNWwtNzEuOS00Mi4yLTIxLjMtODFjLTIuMi04LjUtMTAuOS0xMy42LTE5LjMtMTEuM0w3Mi43IDg0Yy04LjQgMi4zLTEzLjQgMTEuMS0xMS4xIDE5LjZsOS4xIDM0LjctMzkuMi0yM2MtNy41LTQuNC0xNy4xLTEuOC0yMS41IDUuOWwtNy45IDEzLjljLTQuMyA3LjctMS44IDE3LjQgNS44IDIxLjlsMzkuMiAyMy0zNC4xIDkuMWMtOC40IDIuMy0xMy40IDExLjEtMTEuMSAxOS42TDYgMjI0LjJjMi4yIDguNSAxMC45IDEzLjYgMTkuMyAxMS4zbDc5LjctMjEuNyA3MS45IDQyLjItNzEuOSA0Mi4yLTc5LjctMjEuN2MtOC40LTIuMy0xNyAyLjgtMTkuMyAxMS4zbC00LjEgMTUuNWMtMi4yIDguNSAyLjcgMTcuMyAxMS4xIDE5LjZsMzQuMSA5LjMtMzkuMiAyM2MtNy41IDQuNC0xMC4xIDE0LjItNS44IDIxLjlMMTAgMzkxYzQuMyA3LjcgMTQgMTAuMyAyMS41IDUuOWwzOS4yLTIzLTkuMSAzNC43Yy0yLjIgOC41IDIuNyAxNy4zIDExLjEgMTkuNmwxNS4yIDQuMWM4LjQgMi4zIDE3LTIuOCAxOS4zLTExLjNsMjEuMy04MSA3MS45LTQyLjJ2ODQuNWwtNTguMyA1OS4zYy02LjEgNi4yLTYuMSAxNi40IDAgMjIuNmwxMS4xIDExLjNjNi4xIDYuMiAxNi4xIDYuMiAyMi4yIDBsMjQuOS0yNS40VjQ5NmMwIDguOCA3IDE2IDE1LjcgMTZoMTUuN2M4LjcgMCAxNS43LTcuMiAxNS43LTE2di00Ni4xbDI0LjkgMjUuNGM2LjEgNi4yIDE2LjEgNi4yIDIyLjIgMGwxMS4xLTExLjNjNi4xLTYuMiA2LjEtMTYuNCAwLTIyLjZsLTU4LjMtNTkuM3YtODQuNWw3MS45IDQyLjIgMjEuMyA4MWMyLjIgOC41IDEwLjkgMTMuNiAxOS4zIDExLjNMMzc1IDQyOGM4LjQtMi4zIDEzLjQtMTEuMSAxMS4xLTE5LjZsLTkuMS0zNC43IDM5LjIgMjNjNy41IDQuNCAxNy4xIDEuOCAyMS41LTUuOWw3LjktMTMuOWM0LjYtNy41IDIuMS0xNy4zLTUuNS0yMS43elwiIC8+XG4gICAgICAgIDwvSWNvbkJhc2U+XG4gICAgICAiLCAiPHNjcmlwdD5cbiAgICAgICAgaW1wb3J0IEljb25CYXNlIGZyb20gJy4uL2NvbXBvbmVudHMvSWNvbkJhc2Uuc3ZlbHRlJztcbiAgICAgICAgPC9zY3JpcHQ+XG4gICAgICAgIDxJY29uQmFzZSB2aWV3Qm94PVwiMCAwIDUxMiA1MTJcIiB7Li4uJCRwcm9wc30+XG4gICAgICAgICAgPHBhdGggZD1cIk00ODAgMzY5LjJWMjUxLjFjMC04LjEtNi44LTE0LjgtMTUuMS0xNC44cy0xNS4xIDYuNi0xNS4xIDE0Ljh2ODEuN0wzMDAuNSAxODFjLTIuOC0yLjgtNi42LTQuMy0xMC43LTQuMy00IDAtNy44IDEuNS0xMC43IDQuM2wtODUuOSA4NC4xTDU3LjUgMTMyLjNjLTIuOS0yLjgtNi42LTQuMy0xMC43LTQuMy00IDAtNy44IDEuNS0xMC43IDQuMy0yLjggMi43LTQuMiA2LjItNC4yIDEwLjIgMCA1LjQgMi4zIDguOCA0LjIgMTAuN2wxNDYuMyAxNDMuMmMyLjkgMi44IDYuNiA0LjMgMTAuNyA0LjMgNCAwIDcuOC0xLjUgMTAuNy00LjNsODUuOS04NC4xIDEzOCAxNDIuMkgzNDRjLTguMyAwLTE1LjEgNi42LTE1LjEgMTQuOCAwIDguMSA2LjggMTQuOCAxNS4xIDE0LjhoMTIwLjhjOC40LS4xIDE1LjItNi43IDE1LjItMTQuOXpcIiAvPlxuICAgICAgICA8L0ljb25CYXNlPlxuICAgICAgIiwgIjxzY3JpcHQ+XG4gICAgICAgIGltcG9ydCBJY29uQmFzZSBmcm9tICcuLi9jb21wb25lbnRzL0ljb25CYXNlLnN2ZWx0ZSc7XG4gICAgICAgIDwvc2NyaXB0PlxuICAgICAgICA8SWNvbkJhc2Ugdmlld0JveD1cIjAgMCA1MTIgNTEyXCIgey4uLiQkcHJvcHN9PlxuICAgICAgICAgIDxwYXRoIGQ9XCJNNDY0LjkgMTI4SDM0NC4xYy04LjMgMC0xNS4xIDYuNi0xNS4xIDE0LjhzNi44IDE0LjggMTUuMSAxNC44aDgzLjdsLTEzOCAxNDIuMi04NS45LTg0LjFjLTIuOS0yLjgtNi42LTQuMy0xMC43LTQuMy00IDAtNy44IDEuNS0xMC43IDQuM0wzNi4yIDM1OC44Yy0xLjkgMS45LTQuMiA1LjItNC4yIDEwLjcgMCA0LjEgMS40IDcuNSA0LjIgMTAuMiAyLjkgMi44IDYuNiA0LjMgMTAuNyA0LjMgNCAwIDcuOC0xLjUgMTAuNy00LjNMMTkzLjIgMjQ3bDg1LjkgODQuMWMyLjkgMi44IDYuNiA0LjMgMTAuNyA0LjMgNCAwIDcuOC0xLjUgMTAuNy00LjNsMTQ5LjQtMTUxLjl2ODEuN2MwIDguMSA2LjggMTQuOCAxNS4xIDE0LjhzMTUuMS02LjYgMTUuMS0xNC44VjE0Mi44Yy0uMS04LjItNi45LTE0LjgtMTUuMi0xNC44elwiIC8+XG4gICAgICAgIDwvSWNvbkJhc2U+XG4gICAgICAiLCAiPHNjcmlwdD5cbiAgICAgICAgaW1wb3J0IEljb25CYXNlIGZyb20gJy4uL2NvbXBvbmVudHMvSWNvbkJhc2Uuc3ZlbHRlJztcbiAgICAgICAgPC9zY3JpcHQ+XG4gICAgICAgIDxJY29uQmFzZSB2aWV3Qm94PVwiMCAwIDUxMiA1MTJcIiB7Li4uJCRwcm9wc30+XG4gICAgICAgICAgPHBhdGggZD1cIk0yNTYgMzg4Yy03Mi41OTcgMC0xMzItNTkuNDA1LTEzMi0xMzIgMC03Mi42MDEgNTkuNDAzLTEzMiAxMzItMTMyIDM2LjMgMCA2OS4yOTkgMTUuNCA5Mi40MDYgMzkuNjAxTDI3OCAyMzRoMTU0VjgwbC01MS42OTggNTEuNzAyQzM0OC40MDYgOTkuNzk4IDMwNC40MDYgODAgMjU2IDgwYy05Ni43OTcgMC0xNzYgNzkuMjAzLTE3NiAxNzZzNzguMDk0IDE3NiAxNzYgMTc2YzgxLjA0NSAwIDE0OC4yODctNTQuMTM0IDE2OS40MDEtMTI4SDM3OC44NWMtMTguNzQ1IDQ5LjU2MS02Ny4xMzggODQtMTIyLjg1IDg0elwiIC8+XG4gICAgICAgIDwvSWNvbkJhc2U+XG4gICAgICAiLCAiPHNjcmlwdD5cbiAgICAgICAgaW1wb3J0IEljb25CYXNlIGZyb20gJy4uL2NvbXBvbmVudHMvSWNvbkJhc2Uuc3ZlbHRlJztcbiAgICAgICAgPC9zY3JpcHQ+XG4gICAgICAgIDxJY29uQmFzZSB2aWV3Qm94PVwiMCAwIDI0IDI0XCIgey4uLiQkcHJvcHN9PlxuICAgICAgICAgIDxwYXRoIGQ9XCJNMTYuMTQgMTIuNWMwIDEtLjEgMS44NS0uMyAyLjU1LS4yLjctLjQ4IDEuMjctLjgzIDEuNy0uMzYuNDQtLjc5Ljc1LTEuMy45NS0uNTEuMi0xLjA3LjMtMS43LjMtLjYyIDAtMS4xOC0uMS0xLjY5LS4zLS41MS0uMi0uOTUtLjUxLTEuMzEtLjk1LS4zNi0uNDQtLjY1LTEuMDEtLjg1LTEuNy0uMi0uNy0uMy0xLjU1LS4zLTIuNTV2LTIuMDRjMC0xIC4xLTEuODUuMy0yLjU1LjItLjcuNDgtMS4yNi44NC0xLjY5LjM2LS40My44LS43NCAxLjMxLS45M0MxMC44MSA1LjEgMTEuMzggNSAxMiA1Yy42MyAwIDEuMTkuMSAxLjcuMjkuNTEuMTkuOTUuNSAxLjMxLjkzLjM2LjQzLjY0Ljk5Ljg0IDEuNjkuMi43LjMgMS41NC4zIDIuNTV2Mi4wNHptLTIuMTEtMi4zNmMwLS42NC0uMDUtMS4xOC0uMTMtMS42Mi0uMDktLjQ0LS4yMi0uNzktLjQtMS4wNi0uMTctLjI3LS4zOS0uNDYtLjY0LS41OC0uMjUtLjEzLS41NC0uMTktLjg2LS4xOS0uMzIgMC0uNjEuMDYtLjg2LjE4cy0uNDcuMzEtLjY0LjU4Yy0uMTcuMjctLjMxLjYyLS40IDEuMDZzLS4xMy45OC0uMTMgMS42MnYyLjY3YzAgLjY0LjA1IDEuMTguMTQgMS42Mi4wOS40NS4yMy44MS40IDEuMDlzLjM5LjQ4LjY0LjYxLjU0LjE5Ljg3LjE5Yy4zMyAwIC42Mi0uMDYuODctLjE5cy40Ni0uMzMuNjMtLjYxYy4xNy0uMjguMy0uNjQuMzktMS4wOS4wOS0uNDUuMTMtLjk5LjEzLTEuNjJ2LTIuNjZ6XCIgLz5cbiAgICAgICAgPC9JY29uQmFzZT5cbiAgICAgICIsICI8c2NyaXB0PlxuICAgICAgICBpbXBvcnQgSWNvbkJhc2UgZnJvbSAnLi4vY29tcG9uZW50cy9JY29uQmFzZS5zdmVsdGUnO1xuICAgICAgICA8L3NjcmlwdD5cbiAgICAgICAgPEljb25CYXNlIHZpZXdCb3g9XCIwIDAgNTEyIDUxMlwiIHsuLi4kJHByb3BzfT5cbiAgICAgICAgICA8cGF0aCBkPVwiTTI1NiA4QzExOS4wNDMgOCA4IDExOS4wODMgOCAyNTZjMCAxMzYuOTk3IDExMS4wNDMgMjQ4IDI0OCAyNDhzMjQ4LTExMS4wMDMgMjQ4LTI0OEM1MDQgMTE5LjA4MyAzOTIuOTU3IDggMjU2IDh6bTAgNDQ4Yy0xMTAuNTMyIDAtMjAwLTg5LjQzMS0yMDAtMjAwIDAtMTEwLjQ5NSA4OS40NzItMjAwIDIwMC0yMDAgMTEwLjQ5MSAwIDIwMCA4OS40NzEgMjAwIDIwMCAwIDExMC41My04OS40MzEgMjAwLTIwMCAyMDB6bTEwNy4yNDQtMjU1LjJjMCA2Ny4wNTItNzIuNDIxIDY4LjA4NC03Mi40MjEgOTIuODYzVjMwMGMwIDYuNjI3LTUuMzczIDEyLTEyIDEyaC00NS42NDdjLTYuNjI3IDAtMTItNS4zNzMtMTItMTJ2LTguNjU5YzAtMzUuNzQ1IDI3LjEtNTAuMDM0IDQ3LjU3OS02MS41MTYgMTcuNTYxLTkuODQ1IDI4LjMyNC0xNi41NDEgMjguMzI0LTI5LjU3OSAwLTE3LjI0Ni0yMS45OTktMjguNjkzLTM5Ljc4NC0yOC42OTMtMjMuMTg5IDAtMzMuODk0IDEwLjk3Ny00OC45NDIgMjkuOTY5LTQuMDU3IDUuMTItMTEuNDYgNi4wNzEtMTYuNjY2IDIuMTI0bC0yNy44MjQtMjEuMDk4Yy01LjEwNy0zLjg3Mi02LjI1MS0xMS4wNjYtMi42NDQtMTYuMzYzQzE4NC44NDYgMTMxLjQ5MSAyMTQuOTQgMTEyIDI2MS43OTQgMTEyYzQ5LjA3MSAwIDEwMS40NSAzOC4zMDQgMTAxLjQ1IDg4Ljh6TTI5OCAzNjhjMCAyMy4xNTktMTguODQxIDQyLTQyIDQycy00Mi0xOC44NDEtNDItNDIgMTguODQxLTQyIDQyLTQyIDQyIDE4Ljg0MSA0MiA0MnpcIiAvPlxuICAgICAgICA8L0ljb25CYXNlPlxuICAgICAgIiwgIjxzY3JpcHQgbGFuZz1cInRzXCI+XHJcbiAgaW1wb3J0IHR5cGUgeyBTdWJ0eXBlSW5mbyB9IGZyb20gJ3NyYy9JbnRlcmZhY2VzJ1xyXG4gIGltcG9ydCBGYVJlZ1F1ZXN0aW9uQ2lyY2xlIGZyb20gJ3N2ZWx0ZS1pY29ucy9mYS9GYVJlZ1F1ZXN0aW9uQ2lyY2xlLnN2ZWx0ZSdcclxuXHJcbiAgZXhwb3J0IGxldCBjdXJyU3VidHlwZUluZm86IFN1YnR5cGVJbmZvXHJcblxyXG4gIGNvbnN0IHsgYW5sLCBkZXNjIH0gPSBjdXJyU3VidHlwZUluZm9cclxuPC9zY3JpcHQ+XHJcblxyXG48ZGl2IGNsYXNzPVwiaWNvblwiIGFyaWEtbGFiZWw9e2BUeXBlOiAke2FubH1cXG5cXG4ke2Rlc2N9YH0+XHJcbiAgPEZhUmVnUXVlc3Rpb25DaXJjbGUgLz5cclxuPC9kaXY+XHJcblxyXG48c3R5bGU+XHJcbiAgLmljb24ge1xyXG4gICAgY29sb3I6IHZhcigtLXRleHQtbm9ybWFsKTtcclxuICAgIHdpZHRoOiAyMHB4O1xyXG4gICAgaGVpZ2h0OiAyMHB4O1xyXG4gICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xyXG4gICAgcGFkZGluZy10b3A6IDNweCAhaW1wb3J0YW50O1xyXG4gIH1cclxuPC9zdHlsZT5cclxuIiwgIjxzY3JpcHQ+XG4gICAgICAgIGltcG9ydCBJY29uQmFzZSBmcm9tICcuLi9jb21wb25lbnRzL0ljb25CYXNlLnN2ZWx0ZSc7XG4gICAgICAgIDwvc2NyaXB0PlxuICAgICAgICA8SWNvbkJhc2Ugdmlld0JveD1cIjAgMCAxNiAxN1wiIHsuLi4kJHByb3BzfT5cbiAgICAgICAgICA8cGF0aCBkPVwiTTEyIDlWN0g4VjVoNFYzbDQgMy00IDN6bS0yIDNINlYzTDIgMWg4djNoMVYxYzAtLjU1LS40NS0xLTEtMUgxQy40NSAwIDAgLjQ1IDAgMXYxMS4zOGMwIC4zOS4yMi43My41NS45MUw2IDE2LjAxVjEzaDRjLjU1IDAgMS0uNDUgMS0xVjhoLTF2NHpcIiAvPlxuICAgICAgICA8L0ljb25CYXNlPlxuICAgICAgIiwgIjxzY3JpcHQ+XG4gICAgICAgIGltcG9ydCBJY29uQmFzZSBmcm9tICcuLi9jb21wb25lbnRzL0ljb25CYXNlLnN2ZWx0ZSc7XG4gICAgICAgIDwvc2NyaXB0PlxuICAgICAgICA8SWNvbkJhc2Ugdmlld0JveD1cIjAgMCAxNCAxNlwiIHsuLi4kJHByb3BzfT5cbiAgICAgICAgICA8cGF0aCBkPVwiTTcgNi43NVYxMmg0VjhoMXY0YzAgLjU1LS40NSAxLTEgMUg3djNsLTUuNDUtMi43MmMtLjMzLS4xNy0uNTUtLjUyLS41NS0uOTFWMWMwLS41NS40NS0xIDEtMWg5Yy41NSAwIDEgLjQ1IDEgMXYzaC0xVjFIM2w0IDJ2Mi4yNUwxMCAzdjJoNHYyaC00djJMNyA2Ljc1elwiIC8+XG4gICAgICAgIDwvSWNvbkJhc2U+XG4gICAgICAiLCAiPHNjcmlwdCBsYW5nPVwidHNcIj5cclxuICBpbXBvcnQgdHlwZSB7IEFwcCwgVEZpbGUgfSBmcm9tICdvYnNpZGlhbidcclxuICBpbXBvcnQgdHlwZSBBbmFseXNpc1ZpZXcgZnJvbSAnc3JjL0FuYWx5c2lzVmlldydcclxuICBpbXBvcnQgdHlwZSB7IFN1YnR5cGVJbmZvIH0gZnJvbSAnc3JjL0ludGVyZmFjZXMnXHJcbiAgaW1wb3J0IHR5cGUgR3JhcGhBbmFseXNpc1BsdWdpbiBmcm9tICdzcmMvbWFpbidcclxuICBpbXBvcnQgRmFDcmVhdGl2ZUNvbW1vbnNaZXJvIGZyb20gJ3N2ZWx0ZS1pY29ucy9mYS9GYUNyZWF0aXZlQ29tbW9uc1plcm8uc3ZlbHRlJ1xyXG4gIGltcG9ydCBGYUZpcmUgZnJvbSAnc3ZlbHRlLWljb25zL2ZhL0ZhRmlyZS5zdmVsdGUnXHJcbiAgaW1wb3J0IEZhUmVnU25vd2ZsYWtlIGZyb20gJ3N2ZWx0ZS1pY29ucy9mYS9GYVJlZ1Nub3dmbGFrZS5zdmVsdGUnXHJcbiAgaW1wb3J0IElvSW9zVHJlbmRpbmdEb3duIGZyb20gJ3N2ZWx0ZS1pY29ucy9pby9Jb0lvc1RyZW5kaW5nRG93bi5zdmVsdGUnXHJcbiAgaW1wb3J0IElvSW9zVHJlbmRpbmdVcCBmcm9tICdzdmVsdGUtaWNvbnMvaW8vSW9Jb3NUcmVuZGluZ1VwLnN2ZWx0ZSdcclxuICBpbXBvcnQgSW9NZFJlZnJlc2ggZnJvbSAnc3ZlbHRlLWljb25zL2lvL0lvTWRSZWZyZXNoLnN2ZWx0ZSdcclxuICBpbXBvcnQgTWRFeHBvc3VyZVplcm8gZnJvbSAnc3ZlbHRlLWljb25zL21kL01kRXhwb3N1cmVaZXJvLnN2ZWx0ZSdcclxuICBpbXBvcnQgSW5mb0ljb24gZnJvbSAnLi9JbmZvSWNvbi5zdmVsdGUnXHJcbiAgaW1wb3J0IEdvU2lnbk91dCBmcm9tICdzdmVsdGUtaWNvbnMvZ28vR29TaWduT3V0LnN2ZWx0ZSdcclxuICBpbXBvcnQgR29TaWduSW4gZnJvbSAnc3ZlbHRlLWljb25zL2dvL0dvU2lnbkluLnN2ZWx0ZSdcclxuXHJcbiAgZXhwb3J0IGxldCBjdXJyU3VidHlwZUluZm86IFN1YnR5cGVJbmZvXHJcbiAgZXhwb3J0IGxldCBub1plcm86IGJvb2xlYW4gPSB1bmRlZmluZWRcclxuICBleHBvcnQgbGV0IHNvcnRCeTogYm9vbGVhbiA9IHVuZGVmaW5lZFxyXG4gIGV4cG9ydCBsZXQgYXNjT3JkZXI6IGJvb2xlYW4gPSB1bmRlZmluZWRcclxuICBleHBvcnQgbGV0IGN1cnJGaWxlOiBURmlsZSA9IHVuZGVmaW5lZFxyXG4gIGV4cG9ydCBsZXQgZnJvemVuOiBib29sZWFuID0gdW5kZWZpbmVkXHJcbiAgZXhwb3J0IGxldCBwbHVnaW46IEdyYXBoQW5hbHlzaXNQbHVnaW5cclxuICBleHBvcnQgbGV0IGFwcDogQXBwXHJcbiAgZXhwb3J0IGxldCB2aWV3OiBBbmFseXNpc1ZpZXdcclxuICBleHBvcnQgbGV0IGJsb2NrU3dpdGNoOiBib29sZWFuXHJcbiAgZXhwb3J0IGxldCBuZXdCYXRjaDogYW55W11cclxuICBleHBvcnQgbGV0IHZpc2libGVEYXRhOiBhbnlbXVxyXG4gIGV4cG9ydCBsZXQgcHJvbWlzZVNvcnRlZFJlc3VsdHM6IFByb21pc2U8YW55W10+XHJcbiAgZXhwb3J0IGxldCBwYWdlOiBudW1iZXJcclxuPC9zY3JpcHQ+XHJcblxyXG48c3BhbiBjbGFzcz1cIkdBLVN1YnR5cGUtT3B0aW9uc1wiPlxyXG4gIDxJbmZvSWNvbiB7Y3VyclN1YnR5cGVJbmZvfSAvPlxyXG5cclxuICB7I2lmIG5vWmVybyAhPT0gdW5kZWZpbmVkfVxyXG4gICAgPHNwYW5cclxuICAgICAgY2xhc3M9XCJHQS1PcHRpb24tc3BhblwiXHJcbiAgICAgIGFyaWEtbGFiZWw9e25vWmVybyA/ICdTaG93IFplcm9zJyA6ICdIaWRlIFplcm9zJ31cclxuICAgICAgb246Y2xpY2s9eygpID0+IHtcclxuICAgICAgICBub1plcm8gPSAhbm9aZXJvXHJcbiAgICAgICAgaWYgKCFmcm96ZW4pIHtcclxuICAgICAgICAgIGJsb2NrU3dpdGNoID0gdHJ1ZVxyXG4gICAgICAgICAgbmV3QmF0Y2ggPSBbXVxyXG4gICAgICAgICAgdmlzaWJsZURhdGEgPSBbXVxyXG4gICAgICAgICAgcHJvbWlzZVNvcnRlZFJlc3VsdHMgPSBudWxsXHJcbiAgICAgICAgICBwYWdlID0gMFxyXG4gICAgICAgIH1cclxuICAgICAgfX1cclxuICAgID5cclxuICAgICAgPHNwYW4gY2xhc3M9XCJpY29uXCI+XHJcbiAgICAgICAgeyNpZiBub1plcm99XHJcbiAgICAgICAgICA8TWRFeHBvc3VyZVplcm8gLz5cclxuICAgICAgICB7OmVsc2V9XHJcbiAgICAgICAgICA8RmFDcmVhdGl2ZUNvbW1vbnNaZXJvIC8+XHJcbiAgICAgICAgey9pZn1cclxuICAgICAgPC9zcGFuPlxyXG4gICAgPC9zcGFuPlxyXG4gIHsvaWZ9XHJcbiAgeyNpZiBhc2NPcmRlciAhPT0gdW5kZWZpbmVkfVxyXG4gICAgPHNwYW5cclxuICAgICAgY2xhc3M9XCJHQS1PcHRpb24tc3BhblwiXHJcbiAgICAgIGFyaWEtbGFiZWw9e2FzY09yZGVyID8gJ0FzY2VuZGluZycgOiAnRGVzY2VuZGluZyd9XHJcbiAgICAgIG9uOmNsaWNrPXsoKSA9PiB7XHJcbiAgICAgICAgYXNjT3JkZXIgPSAhYXNjT3JkZXJcclxuICAgICAgICBpZiAoIWZyb3plbikge1xyXG4gICAgICAgICAgYmxvY2tTd2l0Y2ggPSB0cnVlXHJcbiAgICAgICAgICBuZXdCYXRjaCA9IFtdXHJcbiAgICAgICAgICB2aXNpYmxlRGF0YSA9IFtdXHJcbiAgICAgICAgICBwcm9taXNlU29ydGVkUmVzdWx0cyA9IG51bGxcclxuICAgICAgICAgIHBhZ2UgPSAwXHJcbiAgICAgICAgfVxyXG4gICAgICB9fVxyXG4gICAgPlxyXG4gICAgICA8c3BhbiBjbGFzcz1cImljb25cIj5cclxuICAgICAgICB7I2lmIGFzY09yZGVyfVxyXG4gICAgICAgICAgPElvSW9zVHJlbmRpbmdVcCAvPlxyXG4gICAgICAgIHs6ZWxzZX1cclxuICAgICAgICAgIDxJb0lvc1RyZW5kaW5nRG93biAvPlxyXG4gICAgICAgIHsvaWZ9XHJcbiAgICAgIDwvc3Bhbj5cclxuICAgIDwvc3Bhbj5cclxuICB7L2lmfVxyXG4gIHsjaWYgZnJvemVuICE9PSB1bmRlZmluZWR9XHJcbiAgICA8c3BhblxyXG4gICAgICBjbGFzcz1cIkdBLU9wdGlvbi1zcGFuXCJcclxuICAgICAgYXJpYS1sYWJlbD17ZnJvemVuID8gYEZyb3plbiBvbjogJHtjdXJyRmlsZS5iYXNlbmFtZX1gIDogJ1VuZnJvemVuJ31cclxuICAgICAgb246Y2xpY2s9eygpID0+IHtcclxuICAgICAgICBmcm96ZW4gPSAhZnJvemVuXHJcbiAgICAgICAgaWYgKCFmcm96ZW4gJiYgIWN1cnJTdWJ0eXBlSW5mby5nbG9iYWwpIHtcclxuICAgICAgICAgIGJsb2NrU3dpdGNoID0gdHJ1ZVxyXG4gICAgICAgICAgbmV3QmF0Y2ggPSBbXVxyXG4gICAgICAgICAgdmlzaWJsZURhdGEgPSBbXVxyXG4gICAgICAgICAgcHJvbWlzZVNvcnRlZFJlc3VsdHMgPSBudWxsXHJcbiAgICAgICAgICBwYWdlID0gMFxyXG5cclxuICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4gKGN1cnJGaWxlID0gYXBwLndvcmtzcGFjZS5nZXRBY3RpdmVGaWxlKCkpLCAxMDApXHJcbiAgICAgICAgfSBlbHNlIGlmICghZnJvemVuICYmIGN1cnJTdWJ0eXBlSW5mby5nbG9iYWwpIHtcclxuICAgICAgICAgIGJsb2NrU3dpdGNoID0gdHJ1ZVxyXG4gICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgICAgICAgIGJsb2NrU3dpdGNoID0gZmFsc2VcclxuICAgICAgICAgICAgY3VyckZpbGUgPSBhcHAud29ya3NwYWNlLmdldEFjdGl2ZUZpbGUoKVxyXG4gICAgICAgICAgfSwgMTAwKVxyXG4gICAgICAgICAgbmV3QmF0Y2ggPSBbXVxyXG4gICAgICAgIH1cclxuICAgICAgfX1cclxuICAgID5cclxuICAgICAgPHNwYW4gY2xhc3M9XCJpY29uXCI+XHJcbiAgICAgICAgeyNpZiBmcm96ZW59XHJcbiAgICAgICAgICA8RmFSZWdTbm93Zmxha2UgLz5cclxuICAgICAgICB7OmVsc2V9XHJcbiAgICAgICAgICA8RmFGaXJlIC8+XHJcbiAgICAgICAgey9pZn1cclxuICAgICAgPC9zcGFuPlxyXG4gICAgPC9zcGFuPlxyXG4gIHsvaWZ9XHJcbiAgeyNpZiBzb3J0QnkgIT09IHVuZGVmaW5lZH1cclxuICAgIDxzcGFuXHJcbiAgICAgIGNsYXNzPVwiR0EtT3B0aW9uLXNwYW5cIlxyXG4gICAgICBhcmlhLWxhYmVsPVwiU29ydCBCeToge3NvcnRCeSA/ICdBdXRob3JpdHknIDogJ0h1Yid9XCJcclxuICAgICAgb246Y2xpY2s9eygpID0+IHtcclxuICAgICAgICBzb3J0QnkgPSAhc29ydEJ5XHJcbiAgICAgICAgaWYgKCFmcm96ZW4pIHtcclxuICAgICAgICAgIGJsb2NrU3dpdGNoID0gdHJ1ZVxyXG4gICAgICAgICAgbmV3QmF0Y2ggPSBbXVxyXG4gICAgICAgICAgdmlzaWJsZURhdGEgPSBbXVxyXG4gICAgICAgICAgcHJvbWlzZVNvcnRlZFJlc3VsdHMgPSBudWxsXHJcbiAgICAgICAgICBwYWdlID0gMFxyXG4gICAgICAgIH1cclxuICAgICAgfX1cclxuICAgID5cclxuICAgICAgPHNwYW4gY2xhc3M9XCJpY29uXCI+XHJcbiAgICAgICAgeyNpZiBzb3J0Qnl9XHJcbiAgICAgICAgICA8R29TaWduSW4gLz5cclxuICAgICAgICB7OmVsc2V9XHJcbiAgICAgICAgICA8R29TaWduT3V0IC8+XHJcbiAgICAgICAgey9pZn1cclxuICAgICAgPC9zcGFuPlxyXG4gICAgPC9zcGFuPlxyXG4gIHsvaWZ9XHJcbiAgPHNwYW5cclxuICAgIGNsYXNzPVwiR0EtT3B0aW9uLXNwYW5cIlxyXG4gICAgYXJpYS1sYWJlbD1cIlJlZnJlc2ggSW5kZXhcIlxyXG4gICAgb246Y2xpY2s9e2FzeW5jICgpID0+IHtcclxuICAgICAgYXdhaXQgcGx1Z2luLnJlZnJlc2hHcmFwaCgpXHJcbiAgICAgIGF3YWl0IHZpZXcuZHJhdyhjdXJyU3VidHlwZUluZm8uc3VidHlwZSlcclxuICAgIH19XHJcbiAgPlxyXG4gICAgPHNwYW4gY2xhc3M9XCJpY29uXCI+XHJcbiAgICAgIDxJb01kUmVmcmVzaCAvPlxyXG4gICAgPC9zcGFuPlxyXG4gIDwvc3Bhbj5cclxuPC9zcGFuPlxyXG5cclxuPHN0eWxlPlxyXG4gIC5HQS1TdWJ0eXBlLU9wdGlvbnMge1xyXG4gICAgbWFyZ2luLWxlZnQ6IDEwcHg7XHJcbiAgfVxyXG4gIC5pY29uIHtcclxuICAgIGNvbG9yOiB2YXIoLS10ZXh0LW5vcm1hbCk7XHJcbiAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XHJcbiAgICBwYWRkaW5nLXRvcDogNXB4ICFpbXBvcnRhbnQ7XHJcbiAgICB3aWR0aDogMjBweDtcclxuICAgIGhlaWdodDogMjBweDtcclxuICB9XHJcblxyXG4gIC5HQS1PcHRpb24tc3BhbiB7XHJcbiAgICBwYWRkaW5nOiAycHg7XHJcbiAgfVxyXG48L3N0eWxlPlxyXG4iLCAiPHNjcmlwdCBsYW5nPVwidHNcIj5cclxuICBpbXBvcnQgdHlwZSB7IEFwcCB9IGZyb20gJ29ic2lkaWFuJ1xyXG4gIGltcG9ydCB7IGhvdmVyUHJldmlldywgaXNJblZhdWx0LCBpc0xpbmtlZCB9IGZyb20gJ29ic2lkaWFuLWNvbW11bml0eS1saWInXHJcbiAgaW1wb3J0IHR5cGUgQW5hbHlzaXNWaWV3IGZyb20gJ3NyYy9BbmFseXNpc1ZpZXcnXHJcbiAgaW1wb3J0IHsgQU5BTFlTSVNfVFlQRVMsIElDT04sIExJTktFRCwgTk9UX0xJTktFRCB9IGZyb20gJ3NyYy9Db25zdGFudHMnXHJcbiAgaW1wb3J0IHR5cGUgeyBHcmFwaEFuYWx5c2lzU2V0dGluZ3MsIFN1YnR5cGUgfSBmcm9tICdzcmMvSW50ZXJmYWNlcydcclxuICBpbXBvcnQgdHlwZSBHcmFwaEFuYWx5c2lzUGx1Z2luIGZyb20gJ3NyYy9tYWluJ1xyXG4gIGltcG9ydCB7XHJcbiAgICBjbGFzc0V4dCxcclxuICAgIGRyb3BQYXRoLFxyXG4gICAgZ2V0SW1nQnVmZmVyUHJvbWlzZSxcclxuICAgIGlzSW1nLFxyXG4gICAgb3Blbk1lbnUsXHJcbiAgICBvcGVuT3JTd2l0Y2gsXHJcbiAgICBwcmVzZW50UGF0aCxcclxuICB9IGZyb20gJ3NyYy9VdGlsaXR5J1xyXG4gIGltcG9ydCB7IG9uTW91bnQgfSBmcm9tICdzdmVsdGUnXHJcbiAgaW1wb3J0IEZhTGluayBmcm9tICdzdmVsdGUtaWNvbnMvZmEvRmFMaW5rLnN2ZWx0ZSdcclxuICBpbXBvcnQgSW5maW5pdGVTY3JvbGwgZnJvbSAnc3ZlbHRlLWluZmluaXRlLXNjcm9sbCdcclxuICBpbXBvcnQgRXh0ZW5zaW9uSWNvbiBmcm9tICcuL0V4dGVuc2lvbkljb24uc3ZlbHRlJ1xyXG4gIGltcG9ydCBJbWdUaHVtYm5haWwgZnJvbSAnLi9JbWdUaHVtYm5haWwuc3ZlbHRlJ1xyXG4gIGltcG9ydCBTdWJ0eXBlT3B0aW9ucyBmcm9tICcuL1N1YnR5cGVPcHRpb25zLnN2ZWx0ZSdcclxuXHJcbiAgZXhwb3J0IGxldCBhcHA6IEFwcFxyXG4gIGV4cG9ydCBsZXQgcGx1Z2luOiBHcmFwaEFuYWx5c2lzUGx1Z2luXHJcbiAgZXhwb3J0IGxldCBzZXR0aW5nczogR3JhcGhBbmFseXNpc1NldHRpbmdzXHJcbiAgZXhwb3J0IGxldCB2aWV3OiBBbmFseXNpc1ZpZXdcclxuICBleHBvcnQgbGV0IGN1cnJTdWJ0eXBlOiBTdWJ0eXBlXHJcblxyXG4gICQ6IGN1cnJTdWJ0eXBlSW5mbyA9IEFOQUxZU0lTX1RZUEVTLmZpbmQoKHN1YikgPT4gc3ViLnN1YnR5cGUgPT09IGN1cnJTdWJ0eXBlKVxyXG4gIGxldCBmcm96ZW4gPSBmYWxzZVxyXG4gIGxldCBjdXJyRmlsZSA9IGFwcC53b3Jrc3BhY2UuZ2V0QWN0aXZlRmlsZSgpXHJcblxyXG4gIGxldCByZXNvbHV0aW9uID0gMTBcclxuICBpbnRlcmZhY2UgQ29tcG9uZW50UmVzdWx0cyB7XHJcbiAgICBsaW5rZWQ6IGJvb2xlYW5cclxuICAgIHRvOiBzdHJpbmdcclxuICAgIHJlc29sdmVkOiBib29sZWFuXHJcbiAgICBpbWc6IFByb21pc2U8QXJyYXlCdWZmZXI+IHwgbnVsbFxyXG4gIH1cclxuXHJcbiAgJDogY3Vyck5vZGUgPSBjdXJyRmlsZT8ucGF0aFxyXG4gIGxldCBzaXplID0gNTBcclxuICBsZXQgY3VycmVudF9jb21wb25lbnQ6IEhUTUxFbGVtZW50XHJcbiAgbGV0IG5ld0JhdGNoOiBDb21wb25lbnRSZXN1bHRzW10gPSBbXVxyXG4gIGxldCB2aXNpYmxlRGF0YTogQ29tcG9uZW50UmVzdWx0c1tdID0gW11cclxuICBsZXQgcGFnZSA9IDBcclxuICBsZXQgYmxvY2tTd2l0Y2ggPSBmYWxzZVxyXG5cclxuICBsZXQgeyByZXNvbHZlZExpbmtzIH0gPSBhcHAubWV0YWRhdGFDYWNoZVxyXG5cclxuICBhcHAud29ya3NwYWNlLm9uKCdhY3RpdmUtbGVhZi1jaGFuZ2UnLCAoKSA9PiB7XHJcbiAgICBpZiAoIWZyb3plbikge1xyXG4gICAgICBibG9ja1N3aXRjaCA9IHRydWVcclxuICAgICAgbmV3QmF0Y2ggPSBbXVxyXG4gICAgICB2aXNpYmxlRGF0YSA9IFtdXHJcbiAgICAgIHByb21pc2VTb3J0ZWRSZXN1bHRzID0gbnVsbFxyXG4gICAgICBwYWdlID0gMFxyXG5cclxuICAgICAgc2V0VGltZW91dCgoKSA9PiAoY3VyckZpbGUgPSBhcHAud29ya3NwYWNlLmdldEFjdGl2ZUZpbGUoKSksIDEwMClcclxuICAgIH1cclxuICB9KVxyXG5cclxuICBvbk1vdW50KCgpID0+IHtcclxuICAgIGN1cnJOb2RlID0gY3VyckZpbGU/LnBhdGhcclxuICB9KVxyXG5cclxuICAkOiBwcm9taXNlU29ydGVkUmVzdWx0cyA9XHJcbiAgICAhcGx1Z2luLmcgfHwgIWN1cnJOb2RlXHJcbiAgICAgID8gbnVsbFxyXG4gICAgICA6IHBsdWdpbi5nLmFsZ3NbJ0xvdXZhaW4nXShjdXJyTm9kZSwgeyByZXNvbHV0aW9uIH0pXHJcbiAgICAgICAgICAudGhlbigocmVzdWx0czogc3RyaW5nW10pID0+IHtcclxuICAgICAgICAgICAgY29uc3QgY29tcG9uZW50UmVzdWx0czogQ29tcG9uZW50UmVzdWx0c1tdID0gW11cclxuICAgICAgICAgICAgcmVzdWx0cy5mb3JFYWNoKCh0bykgPT4ge1xyXG4gICAgICAgICAgICAgIGNvbnN0IHJlc29sdmVkID0gIXRvLmVuZHNXaXRoKCcubWQnKSB8fCBpc0luVmF1bHQoYXBwLCB0bylcclxuICAgICAgICAgICAgICBjb25zdCBsaW5rZWQgPSBpc0xpbmtlZChyZXNvbHZlZExpbmtzLCBjdXJyTm9kZSwgdG8sIGZhbHNlKVxyXG4gICAgICAgICAgICAgIGNvbnN0IGltZyA9XHJcbiAgICAgICAgICAgICAgICBwbHVnaW4uc2V0dGluZ3Muc2hvd0ltZ1RodW1ibmFpbHMgJiYgaXNJbWcodG8pXHJcbiAgICAgICAgICAgICAgICAgID8gZ2V0SW1nQnVmZmVyUHJvbWlzZShhcHAsIHRvKVxyXG4gICAgICAgICAgICAgICAgICA6IG51bGxcclxuICAgICAgICAgICAgICBjb21wb25lbnRSZXN1bHRzLnB1c2goe1xyXG4gICAgICAgICAgICAgICAgbGlua2VkLFxyXG4gICAgICAgICAgICAgICAgdG8sXHJcbiAgICAgICAgICAgICAgICByZXNvbHZlZCxcclxuICAgICAgICAgICAgICAgIGltZyxcclxuICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICByZXR1cm4gY29tcG9uZW50UmVzdWx0c1xyXG4gICAgICAgICAgfSlcclxuICAgICAgICAgIC50aGVuKChyZXMpID0+IHtcclxuICAgICAgICAgICAgbmV3QmF0Y2ggPSByZXMuc2xpY2UoMCwgc2l6ZSlcclxuICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgICAgICAgICAgYmxvY2tTd2l0Y2ggPSBmYWxzZVxyXG4gICAgICAgICAgICB9LCAxMDApXHJcbiAgICAgICAgICAgIHJldHVybiByZXNcclxuICAgICAgICAgIH0pXHJcblxyXG4gICQ6IHZpc2libGVEYXRhID0gWy4uLnZpc2libGVEYXRhLCAuLi5uZXdCYXRjaF1cclxuXHJcbiAgb25Nb3VudCgoKSA9PiB7XHJcbiAgICBjdXJyRmlsZSA9IGFwcC53b3Jrc3BhY2UuZ2V0QWN0aXZlRmlsZSgpXHJcbiAgfSlcclxuPC9zY3JpcHQ+XHJcblxyXG48U3VidHlwZU9wdGlvbnNcclxuICBiaW5kOmN1cnJTdWJ0eXBlSW5mb1xyXG4gIGJpbmQ6Y3VyckZpbGVcclxuICBiaW5kOmZyb3plblxyXG4gIHthcHB9XHJcbiAge3BsdWdpbn1cclxuICB7dmlld31cclxuICBiaW5kOmJsb2NrU3dpdGNoXHJcbiAgYmluZDpuZXdCYXRjaFxyXG4gIGJpbmQ6dmlzaWJsZURhdGFcclxuICBiaW5kOnByb21pc2VTb3J0ZWRSZXN1bHRzXHJcbiAgYmluZDpwYWdlXHJcbi8+XHJcblxyXG48bGFiZWwgZm9yPVwicmVzb2x1dGlvblwiPlJlc29sdXRpb246IDwvbGFiZWw+XHJcbjxpbnB1dFxyXG4gIG5hbWU9XCJyZXNvbHV0aW9uXCJcclxuICB0eXBlPVwicmFuZ2VcIlxyXG4gIG1pbj1cIjFcIlxyXG4gIG1heD1cIjIwXCJcclxuICB2YWx1ZT17cmVzb2x1dGlvbn1cclxuICBvbjpjaGFuZ2U9eyhlKSA9PiB7XHJcbiAgICBjb25zdCB2YWx1ZSA9IE51bWJlci5wYXJzZUludChlLnRhcmdldC52YWx1ZSlcclxuXHJcbiAgICBpZiAoIWZyb3plbikge1xyXG4gICAgICBibG9ja1N3aXRjaCA9IHRydWVcclxuICAgICAgbmV3QmF0Y2ggPSBbXVxyXG4gICAgICB2aXNpYmxlRGF0YSA9IFtdXHJcbiAgICAgIHByb21pc2VTb3J0ZWRSZXN1bHRzID0gbnVsbFxyXG4gICAgICBwYWdlID0gMFxyXG4gICAgfVxyXG4gICAgY29uc29sZS5sb2coeyB2YWx1ZSB9KVxyXG4gICAgcmVzb2x1dGlvbiA9IHZhbHVlXHJcbiAgfX1cclxuLz5cclxuXHJcbjxkaXYgY2xhc3M9XCJHQS1SZXN1bHRzXCIgYmluZDp0aGlzPXtjdXJyZW50X2NvbXBvbmVudH0+XHJcbiAgeyNpZiBwcm9taXNlU29ydGVkUmVzdWx0c31cclxuICAgIHsjYXdhaXQgcHJvbWlzZVNvcnRlZFJlc3VsdHMgdGhlbiBzb3J0ZWRSZXN1bHRzfVxyXG4gICAgICB7I2tleSBzb3J0ZWRSZXN1bHRzfVxyXG4gICAgICAgIHsjZWFjaCB2aXNpYmxlRGF0YSBhcyBub2RlfVxyXG4gICAgICAgICAgeyNpZiBub2RlLnRvICE9PSBjdXJyTm9kZSAmJiBub2RlICE9PSB1bmRlZmluZWR9XHJcbiAgICAgICAgICAgIDxkaXZcclxuICAgICAgICAgICAgICBjbGFzcz1cIlxyXG4gICAgICAgICAgICAgICAge25vZGUubGlua2VkID8gTElOS0VEIDogTk9UX0xJTktFRH0gXHJcbiAgICAgICAgICAgICAge2NsYXNzRXh0KG5vZGUudG8pfVwiXHJcbiAgICAgICAgICAgICAgb246Y2xpY2s9e2FzeW5jIChlKSA9PiBhd2FpdCBvcGVuT3JTd2l0Y2goYXBwLCBub2RlLnRvLCBlKX1cclxuICAgICAgICAgICAgPlxyXG4gICAgICAgICAgICAgIDxzcGFuXHJcbiAgICAgICAgICAgICAgICBvbjpjb250ZXh0bWVudT17KGUpID0+IG9wZW5NZW51KGUsIGFwcCl9XHJcbiAgICAgICAgICAgICAgICBvbjptb3VzZW92ZXI9eyhlKSA9PiBob3ZlclByZXZpZXcoZSwgdmlldywgZHJvcFBhdGgobm9kZS50bykpfVxyXG4gICAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICAgIHsjaWYgbm9kZS5saW5rZWR9XHJcbiAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPXtJQ09OfT5cclxuICAgICAgICAgICAgICAgICAgICA8RmFMaW5rIC8+XHJcbiAgICAgICAgICAgICAgICAgIDwvc3Bhbj5cclxuICAgICAgICAgICAgICAgIHsvaWZ9XHJcblxyXG4gICAgICAgICAgICAgICAgPEV4dGVuc2lvbkljb24gcGF0aD17bm9kZS50b30gLz5cclxuXHJcbiAgICAgICAgICAgICAgICA8c3BhblxyXG4gICAgICAgICAgICAgICAgICBjbGFzcz1cImludGVybmFsLWxpbmsge25vZGUucmVzb2x2ZWQgPyAnJyA6ICdpcy11bnJlc29sdmVkJ31cIlxyXG4gICAgICAgICAgICAgICAgPlxyXG4gICAgICAgICAgICAgICAgICB7cHJlc2VudFBhdGgobm9kZS50byl9XHJcbiAgICAgICAgICAgICAgICA8L3NwYW4+XHJcbiAgICAgICAgICAgICAgICB7I2lmIGlzSW1nKG5vZGUudG8pfVxyXG4gICAgICAgICAgICAgICAgICA8SW1nVGh1bWJuYWlsIGltZz17bm9kZS5pbWd9IC8+XHJcbiAgICAgICAgICAgICAgICB7L2lmfVxyXG4gICAgICAgICAgICAgIDwvc3Bhbj5cclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICB7L2lmfVxyXG4gICAgICAgIHsvZWFjaH1cclxuXHJcbiAgICAgICAgPEluZmluaXRlU2Nyb2xsXHJcbiAgICAgICAgICBoYXNNb3JlPXtzb3J0ZWRSZXN1bHRzLmxlbmd0aCA+IHZpc2libGVEYXRhLmxlbmd0aH1cclxuICAgICAgICAgIHRocmVzaG9sZD17MTAwfVxyXG4gICAgICAgICAgZWxlbWVudFNjcm9sbD17Y3VycmVudF9jb21wb25lbnQucGFyZW50Tm9kZX1cclxuICAgICAgICAgIG9uOmxvYWRNb3JlPXsoKSA9PiB7XHJcbiAgICAgICAgICAgIGlmICghYmxvY2tTd2l0Y2gpIHtcclxuICAgICAgICAgICAgICBwYWdlKytcclxuICAgICAgICAgICAgICBuZXdCYXRjaCA9IHNvcnRlZFJlc3VsdHMuc2xpY2Uoc2l6ZSAqIHBhZ2UsIHNpemUgKiAocGFnZSArIDEpIC0gMSlcclxuICAgICAgICAgICAgICBjb25zb2xlLmxvZyh7IG5ld0JhdGNoIH0pXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH19XHJcbiAgICAgICAgLz5cclxuICAgICAgICB7dmlzaWJsZURhdGEubGVuZ3RofSAvIHtzb3J0ZWRSZXN1bHRzLmxlbmd0aH1cclxuICAgICAgey9rZXl9XHJcbiAgICB7L2F3YWl0fVxyXG4gIHsvaWZ9XHJcbjwvZGl2PlxyXG5cclxuPHN0eWxlPlxyXG4gIC5HQS1SZXN1bHRzID4gZGl2IHtcclxuICAgIHBhZGRpbmc6IDBweCA1cHg7XHJcbiAgfVxyXG4gIC5pcy11bnJlc29sdmVkIHtcclxuICAgIGNvbG9yOiB2YXIoLS10ZXh0LW11dGVkKTtcclxuICB9XHJcblxyXG4gIC5HQS1ub2RlIHtcclxuICAgIG92ZXJmbG93OiBoaWRkZW47XHJcbiAgfVxyXG48L3N0eWxlPlxyXG4iLCAiLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uXG5cblBlcm1pc3Npb24gdG8gdXNlLCBjb3B5LCBtb2RpZnksIGFuZC9vciBkaXN0cmlidXRlIHRoaXMgc29mdHdhcmUgZm9yIGFueVxucHVycG9zZSB3aXRoIG9yIHdpdGhvdXQgZmVlIGlzIGhlcmVieSBncmFudGVkLlxuXG5USEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiIEFORCBUSEUgQVVUSE9SIERJU0NMQUlNUyBBTEwgV0FSUkFOVElFUyBXSVRIXG5SRUdBUkQgVE8gVEhJUyBTT0ZUV0FSRSBJTkNMVURJTkcgQUxMIElNUExJRUQgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFlcbkFORCBGSVRORVNTLiBJTiBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SIEJFIExJQUJMRSBGT1IgQU5ZIFNQRUNJQUwsIERJUkVDVCxcbklORElSRUNULCBPUiBDT05TRVFVRU5USUFMIERBTUFHRVMgT1IgQU5ZIERBTUFHRVMgV0hBVFNPRVZFUiBSRVNVTFRJTkcgRlJPTVxuTE9TUyBPRiBVU0UsIERBVEEgT1IgUFJPRklUUywgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIE5FR0xJR0VOQ0UgT1Jcbk9USEVSIFRPUlRJT1VTIEFDVElPTiwgQVJJU0lORyBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBVU0UgT1JcblBFUkZPUk1BTkNFIE9GIFRISVMgU09GVFdBUkUuXG4qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqL1xuLyogZ2xvYmFsIFJlZmxlY3QsIFByb21pc2UsIFN1cHByZXNzZWRFcnJvciwgU3ltYm9sLCBJdGVyYXRvciAqL1xuXG52YXIgZXh0ZW5kU3RhdGljcyA9IGZ1bmN0aW9uKGQsIGIpIHtcbiAgZXh0ZW5kU3RhdGljcyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fFxuICAgICAgKHsgX19wcm90b19fOiBbXSB9IGluc3RhbmNlb2YgQXJyYXkgJiYgZnVuY3Rpb24gKGQsIGIpIHsgZC5fX3Byb3RvX18gPSBiOyB9KSB8fFxuICAgICAgZnVuY3Rpb24gKGQsIGIpIHsgZm9yICh2YXIgcCBpbiBiKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGIsIHApKSBkW3BdID0gYltwXTsgfTtcbiAgcmV0dXJuIGV4dGVuZFN0YXRpY3MoZCwgYik7XG59O1xuXG5leHBvcnQgZnVuY3Rpb24gX19leHRlbmRzKGQsIGIpIHtcbiAgaWYgKHR5cGVvZiBiICE9PSBcImZ1bmN0aW9uXCIgJiYgYiAhPT0gbnVsbClcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDbGFzcyBleHRlbmRzIHZhbHVlIFwiICsgU3RyaW5nKGIpICsgXCIgaXMgbm90IGEgY29uc3RydWN0b3Igb3IgbnVsbFwiKTtcbiAgZXh0ZW5kU3RhdGljcyhkLCBiKTtcbiAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XG4gIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcbn1cblxuZXhwb3J0IHZhciBfX2Fzc2lnbiA9IGZ1bmN0aW9uKCkge1xuICBfX2Fzc2lnbiA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gX19hc3NpZ24odCkge1xuICAgICAgZm9yICh2YXIgcywgaSA9IDEsIG4gPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgbjsgaSsrKSB7XG4gICAgICAgICAgcyA9IGFyZ3VtZW50c1tpXTtcbiAgICAgICAgICBmb3IgKHZhciBwIGluIHMpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocywgcCkpIHRbcF0gPSBzW3BdO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHQ7XG4gIH1cbiAgcmV0dXJuIF9fYXNzaWduLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBfX3Jlc3QocywgZSkge1xuICB2YXIgdCA9IHt9O1xuICBmb3IgKHZhciBwIGluIHMpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocywgcCkgJiYgZS5pbmRleE9mKHApIDwgMClcbiAgICAgIHRbcF0gPSBzW3BdO1xuICBpZiAocyAhPSBudWxsICYmIHR5cGVvZiBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzID09PSBcImZ1bmN0aW9uXCIpXG4gICAgICBmb3IgKHZhciBpID0gMCwgcCA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMocyk7IGkgPCBwLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgaWYgKGUuaW5kZXhPZihwW2ldKSA8IDAgJiYgT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKHMsIHBbaV0pKVxuICAgICAgICAgICAgICB0W3BbaV1dID0gc1twW2ldXTtcbiAgICAgIH1cbiAgcmV0dXJuIHQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBfX2RlY29yYXRlKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKSB7XG4gIHZhciBjID0gYXJndW1lbnRzLmxlbmd0aCwgciA9IGMgPCAzID8gdGFyZ2V0IDogZGVzYyA9PT0gbnVsbCA/IGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwga2V5KSA6IGRlc2MsIGQ7XG4gIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgUmVmbGVjdC5kZWNvcmF0ZSA9PT0gXCJmdW5jdGlvblwiKSByID0gUmVmbGVjdC5kZWNvcmF0ZShkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYyk7XG4gIGVsc2UgZm9yICh2YXIgaSA9IGRlY29yYXRvcnMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIGlmIChkID0gZGVjb3JhdG9yc1tpXSkgciA9IChjIDwgMyA/IGQocikgOiBjID4gMyA/IGQodGFyZ2V0LCBrZXksIHIpIDogZCh0YXJnZXQsIGtleSkpIHx8IHI7XG4gIHJldHVybiBjID4gMyAmJiByICYmIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgciksIHI7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBfX3BhcmFtKHBhcmFtSW5kZXgsIGRlY29yYXRvcikge1xuICByZXR1cm4gZnVuY3Rpb24gKHRhcmdldCwga2V5KSB7IGRlY29yYXRvcih0YXJnZXQsIGtleSwgcGFyYW1JbmRleCk7IH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIF9fZXNEZWNvcmF0ZShjdG9yLCBkZXNjcmlwdG9ySW4sIGRlY29yYXRvcnMsIGNvbnRleHRJbiwgaW5pdGlhbGl6ZXJzLCBleHRyYUluaXRpYWxpemVycykge1xuICBmdW5jdGlvbiBhY2NlcHQoZikgeyBpZiAoZiAhPT0gdm9pZCAwICYmIHR5cGVvZiBmICE9PSBcImZ1bmN0aW9uXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJGdW5jdGlvbiBleHBlY3RlZFwiKTsgcmV0dXJuIGY7IH1cbiAgdmFyIGtpbmQgPSBjb250ZXh0SW4ua2luZCwga2V5ID0ga2luZCA9PT0gXCJnZXR0ZXJcIiA/IFwiZ2V0XCIgOiBraW5kID09PSBcInNldHRlclwiID8gXCJzZXRcIiA6IFwidmFsdWVcIjtcbiAgdmFyIHRhcmdldCA9ICFkZXNjcmlwdG9ySW4gJiYgY3RvciA/IGNvbnRleHRJbltcInN0YXRpY1wiXSA/IGN0b3IgOiBjdG9yLnByb3RvdHlwZSA6IG51bGw7XG4gIHZhciBkZXNjcmlwdG9yID0gZGVzY3JpcHRvckluIHx8ICh0YXJnZXQgPyBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwgY29udGV4dEluLm5hbWUpIDoge30pO1xuICB2YXIgXywgZG9uZSA9IGZhbHNlO1xuICBmb3IgKHZhciBpID0gZGVjb3JhdG9ycy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgdmFyIGNvbnRleHQgPSB7fTtcbiAgICAgIGZvciAodmFyIHAgaW4gY29udGV4dEluKSBjb250ZXh0W3BdID0gcCA9PT0gXCJhY2Nlc3NcIiA/IHt9IDogY29udGV4dEluW3BdO1xuICAgICAgZm9yICh2YXIgcCBpbiBjb250ZXh0SW4uYWNjZXNzKSBjb250ZXh0LmFjY2Vzc1twXSA9IGNvbnRleHRJbi5hY2Nlc3NbcF07XG4gICAgICBjb250ZXh0LmFkZEluaXRpYWxpemVyID0gZnVuY3Rpb24gKGYpIHsgaWYgKGRvbmUpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgYWRkIGluaXRpYWxpemVycyBhZnRlciBkZWNvcmF0aW9uIGhhcyBjb21wbGV0ZWRcIik7IGV4dHJhSW5pdGlhbGl6ZXJzLnB1c2goYWNjZXB0KGYgfHwgbnVsbCkpOyB9O1xuICAgICAgdmFyIHJlc3VsdCA9ICgwLCBkZWNvcmF0b3JzW2ldKShraW5kID09PSBcImFjY2Vzc29yXCIgPyB7IGdldDogZGVzY3JpcHRvci5nZXQsIHNldDogZGVzY3JpcHRvci5zZXQgfSA6IGRlc2NyaXB0b3Jba2V5XSwgY29udGV4dCk7XG4gICAgICBpZiAoa2luZCA9PT0gXCJhY2Nlc3NvclwiKSB7XG4gICAgICAgICAgaWYgKHJlc3VsdCA9PT0gdm9pZCAwKSBjb250aW51ZTtcbiAgICAgICAgICBpZiAocmVzdWx0ID09PSBudWxsIHx8IHR5cGVvZiByZXN1bHQgIT09IFwib2JqZWN0XCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJPYmplY3QgZXhwZWN0ZWRcIik7XG4gICAgICAgICAgaWYgKF8gPSBhY2NlcHQocmVzdWx0LmdldCkpIGRlc2NyaXB0b3IuZ2V0ID0gXztcbiAgICAgICAgICBpZiAoXyA9IGFjY2VwdChyZXN1bHQuc2V0KSkgZGVzY3JpcHRvci5zZXQgPSBfO1xuICAgICAgICAgIGlmIChfID0gYWNjZXB0KHJlc3VsdC5pbml0KSkgaW5pdGlhbGl6ZXJzLnVuc2hpZnQoXyk7XG4gICAgICB9XG4gICAgICBlbHNlIGlmIChfID0gYWNjZXB0KHJlc3VsdCkpIHtcbiAgICAgICAgICBpZiAoa2luZCA9PT0gXCJmaWVsZFwiKSBpbml0aWFsaXplcnMudW5zaGlmdChfKTtcbiAgICAgICAgICBlbHNlIGRlc2NyaXB0b3Jba2V5XSA9IF87XG4gICAgICB9XG4gIH1cbiAgaWYgKHRhcmdldCkgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgY29udGV4dEluLm5hbWUsIGRlc2NyaXB0b3IpO1xuICBkb25lID0gdHJ1ZTtcbn07XG5cbmV4cG9ydCBmdW5jdGlvbiBfX3J1bkluaXRpYWxpemVycyh0aGlzQXJnLCBpbml0aWFsaXplcnMsIHZhbHVlKSB7XG4gIHZhciB1c2VWYWx1ZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAyO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGluaXRpYWxpemVycy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFsdWUgPSB1c2VWYWx1ZSA/IGluaXRpYWxpemVyc1tpXS5jYWxsKHRoaXNBcmcsIHZhbHVlKSA6IGluaXRpYWxpemVyc1tpXS5jYWxsKHRoaXNBcmcpO1xuICB9XG4gIHJldHVybiB1c2VWYWx1ZSA/IHZhbHVlIDogdm9pZCAwO1xufTtcblxuZXhwb3J0IGZ1bmN0aW9uIF9fcHJvcEtleSh4KSB7XG4gIHJldHVybiB0eXBlb2YgeCA9PT0gXCJzeW1ib2xcIiA/IHggOiBcIlwiLmNvbmNhdCh4KTtcbn07XG5cbmV4cG9ydCBmdW5jdGlvbiBfX3NldEZ1bmN0aW9uTmFtZShmLCBuYW1lLCBwcmVmaXgpIHtcbiAgaWYgKHR5cGVvZiBuYW1lID09PSBcInN5bWJvbFwiKSBuYW1lID0gbmFtZS5kZXNjcmlwdGlvbiA/IFwiW1wiLmNvbmNhdChuYW1lLmRlc2NyaXB0aW9uLCBcIl1cIikgOiBcIlwiO1xuICByZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KGYsIFwibmFtZVwiLCB7IGNvbmZpZ3VyYWJsZTogdHJ1ZSwgdmFsdWU6IHByZWZpeCA/IFwiXCIuY29uY2F0KHByZWZpeCwgXCIgXCIsIG5hbWUpIDogbmFtZSB9KTtcbn07XG5cbmV4cG9ydCBmdW5jdGlvbiBfX21ldGFkYXRhKG1ldGFkYXRhS2V5LCBtZXRhZGF0YVZhbHVlKSB7XG4gIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgUmVmbGVjdC5tZXRhZGF0YSA9PT0gXCJmdW5jdGlvblwiKSByZXR1cm4gUmVmbGVjdC5tZXRhZGF0YShtZXRhZGF0YUtleSwgbWV0YWRhdGFWYWx1ZSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBfX2F3YWl0ZXIodGhpc0FyZywgX2FyZ3VtZW50cywgUCwgZ2VuZXJhdG9yKSB7XG4gIGZ1bmN0aW9uIGFkb3B0KHZhbHVlKSB7IHJldHVybiB2YWx1ZSBpbnN0YW5jZW9mIFAgPyB2YWx1ZSA6IG5ldyBQKGZ1bmN0aW9uIChyZXNvbHZlKSB7IHJlc29sdmUodmFsdWUpOyB9KTsgfVxuICByZXR1cm4gbmV3IChQIHx8IChQID0gUHJvbWlzZSkpKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgIGZ1bmN0aW9uIGZ1bGZpbGxlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvci5uZXh0KHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cbiAgICAgIGZ1bmN0aW9uIHJlamVjdGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yW1widGhyb3dcIl0odmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxuICAgICAgZnVuY3Rpb24gc3RlcChyZXN1bHQpIHsgcmVzdWx0LmRvbmUgPyByZXNvbHZlKHJlc3VsdC52YWx1ZSkgOiBhZG9wdChyZXN1bHQudmFsdWUpLnRoZW4oZnVsZmlsbGVkLCByZWplY3RlZCk7IH1cbiAgICAgIHN0ZXAoKGdlbmVyYXRvciA9IGdlbmVyYXRvci5hcHBseSh0aGlzQXJnLCBfYXJndW1lbnRzIHx8IFtdKSkubmV4dCgpKTtcbiAgfSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBfX2dlbmVyYXRvcih0aGlzQXJnLCBib2R5KSB7XG4gIHZhciBfID0geyBsYWJlbDogMCwgc2VudDogZnVuY3Rpb24oKSB7IGlmICh0WzBdICYgMSkgdGhyb3cgdFsxXTsgcmV0dXJuIHRbMV07IH0sIHRyeXM6IFtdLCBvcHM6IFtdIH0sIGYsIHksIHQsIGcgPSBPYmplY3QuY3JlYXRlKCh0eXBlb2YgSXRlcmF0b3IgPT09IFwiZnVuY3Rpb25cIiA/IEl0ZXJhdG9yIDogT2JqZWN0KS5wcm90b3R5cGUpO1xuICByZXR1cm4gZy5uZXh0ID0gdmVyYigwKSwgZ1tcInRocm93XCJdID0gdmVyYigxKSwgZ1tcInJldHVyblwiXSA9IHZlcmIoMiksIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiAoZ1tTeW1ib2wuaXRlcmF0b3JdID0gZnVuY3Rpb24oKSB7IHJldHVybiB0aGlzOyB9KSwgZztcbiAgZnVuY3Rpb24gdmVyYihuKSB7IHJldHVybiBmdW5jdGlvbiAodikgeyByZXR1cm4gc3RlcChbbiwgdl0pOyB9OyB9XG4gIGZ1bmN0aW9uIHN0ZXAob3ApIHtcbiAgICAgIGlmIChmKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiR2VuZXJhdG9yIGlzIGFscmVhZHkgZXhlY3V0aW5nLlwiKTtcbiAgICAgIHdoaWxlIChnICYmIChnID0gMCwgb3BbMF0gJiYgKF8gPSAwKSksIF8pIHRyeSB7XG4gICAgICAgICAgaWYgKGYgPSAxLCB5ICYmICh0ID0gb3BbMF0gJiAyID8geVtcInJldHVyblwiXSA6IG9wWzBdID8geVtcInRocm93XCJdIHx8ICgodCA9IHlbXCJyZXR1cm5cIl0pICYmIHQuY2FsbCh5KSwgMCkgOiB5Lm5leHQpICYmICEodCA9IHQuY2FsbCh5LCBvcFsxXSkpLmRvbmUpIHJldHVybiB0O1xuICAgICAgICAgIGlmICh5ID0gMCwgdCkgb3AgPSBbb3BbMF0gJiAyLCB0LnZhbHVlXTtcbiAgICAgICAgICBzd2l0Y2ggKG9wWzBdKSB7XG4gICAgICAgICAgICAgIGNhc2UgMDogY2FzZSAxOiB0ID0gb3A7IGJyZWFrO1xuICAgICAgICAgICAgICBjYXNlIDQ6IF8ubGFiZWwrKzsgcmV0dXJuIHsgdmFsdWU6IG9wWzFdLCBkb25lOiBmYWxzZSB9O1xuICAgICAgICAgICAgICBjYXNlIDU6IF8ubGFiZWwrKzsgeSA9IG9wWzFdOyBvcCA9IFswXTsgY29udGludWU7XG4gICAgICAgICAgICAgIGNhc2UgNzogb3AgPSBfLm9wcy5wb3AoKTsgXy50cnlzLnBvcCgpOyBjb250aW51ZTtcbiAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgIGlmICghKHQgPSBfLnRyeXMsIHQgPSB0Lmxlbmd0aCA+IDAgJiYgdFt0Lmxlbmd0aCAtIDFdKSAmJiAob3BbMF0gPT09IDYgfHwgb3BbMF0gPT09IDIpKSB7IF8gPSAwOyBjb250aW51ZTsgfVxuICAgICAgICAgICAgICAgICAgaWYgKG9wWzBdID09PSAzICYmICghdCB8fCAob3BbMV0gPiB0WzBdICYmIG9wWzFdIDwgdFszXSkpKSB7IF8ubGFiZWwgPSBvcFsxXTsgYnJlYWs7IH1cbiAgICAgICAgICAgICAgICAgIGlmIChvcFswXSA9PT0gNiAmJiBfLmxhYmVsIDwgdFsxXSkgeyBfLmxhYmVsID0gdFsxXTsgdCA9IG9wOyBicmVhazsgfVxuICAgICAgICAgICAgICAgICAgaWYgKHQgJiYgXy5sYWJlbCA8IHRbMl0pIHsgXy5sYWJlbCA9IHRbMl07IF8ub3BzLnB1c2gob3ApOyBicmVhazsgfVxuICAgICAgICAgICAgICAgICAgaWYgKHRbMl0pIF8ub3BzLnBvcCgpO1xuICAgICAgICAgICAgICAgICAgXy50cnlzLnBvcCgpOyBjb250aW51ZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgb3AgPSBib2R5LmNhbGwodGhpc0FyZywgXyk7XG4gICAgICB9IGNhdGNoIChlKSB7IG9wID0gWzYsIGVdOyB5ID0gMDsgfSBmaW5hbGx5IHsgZiA9IHQgPSAwOyB9XG4gICAgICBpZiAob3BbMF0gJiA1KSB0aHJvdyBvcFsxXTsgcmV0dXJuIHsgdmFsdWU6IG9wWzBdID8gb3BbMV0gOiB2b2lkIDAsIGRvbmU6IHRydWUgfTtcbiAgfVxufVxuXG5leHBvcnQgdmFyIF9fY3JlYXRlQmluZGluZyA9IE9iamVjdC5jcmVhdGUgPyAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgdmFyIGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG0sIGspO1xuICBpZiAoIWRlc2MgfHwgKFwiZ2V0XCIgaW4gZGVzYyA/ICFtLl9fZXNNb2R1bGUgOiBkZXNjLndyaXRhYmxlIHx8IGRlc2MuY29uZmlndXJhYmxlKSkge1xuICAgICAgZGVzYyA9IHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbigpIHsgcmV0dXJuIG1ba107IH0gfTtcbiAgfVxuICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgazIsIGRlc2MpO1xufSkgOiAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgb1trMl0gPSBtW2tdO1xufSk7XG5cbmV4cG9ydCBmdW5jdGlvbiBfX2V4cG9ydFN0YXIobSwgbykge1xuICBmb3IgKHZhciBwIGluIG0pIGlmIChwICE9PSBcImRlZmF1bHRcIiAmJiAhT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG8sIHApKSBfX2NyZWF0ZUJpbmRpbmcobywgbSwgcCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBfX3ZhbHVlcyhvKSB7XG4gIHZhciBzID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIFN5bWJvbC5pdGVyYXRvciwgbSA9IHMgJiYgb1tzXSwgaSA9IDA7XG4gIGlmIChtKSByZXR1cm4gbS5jYWxsKG8pO1xuICBpZiAobyAmJiB0eXBlb2Ygby5sZW5ndGggPT09IFwibnVtYmVyXCIpIHJldHVybiB7XG4gICAgICBuZXh0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgaWYgKG8gJiYgaSA+PSBvLmxlbmd0aCkgbyA9IHZvaWQgMDtcbiAgICAgICAgICByZXR1cm4geyB2YWx1ZTogbyAmJiBvW2krK10sIGRvbmU6ICFvIH07XG4gICAgICB9XG4gIH07XG4gIHRocm93IG5ldyBUeXBlRXJyb3IocyA/IFwiT2JqZWN0IGlzIG5vdCBpdGVyYWJsZS5cIiA6IFwiU3ltYm9sLml0ZXJhdG9yIGlzIG5vdCBkZWZpbmVkLlwiKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIF9fcmVhZChvLCBuKSB7XG4gIHZhciBtID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9bU3ltYm9sLml0ZXJhdG9yXTtcbiAgaWYgKCFtKSByZXR1cm4gbztcbiAgdmFyIGkgPSBtLmNhbGwobyksIHIsIGFyID0gW10sIGU7XG4gIHRyeSB7XG4gICAgICB3aGlsZSAoKG4gPT09IHZvaWQgMCB8fCBuLS0gPiAwKSAmJiAhKHIgPSBpLm5leHQoKSkuZG9uZSkgYXIucHVzaChyLnZhbHVlKTtcbiAgfVxuICBjYXRjaCAoZXJyb3IpIHsgZSA9IHsgZXJyb3I6IGVycm9yIH07IH1cbiAgZmluYWxseSB7XG4gICAgICB0cnkge1xuICAgICAgICAgIGlmIChyICYmICFyLmRvbmUgJiYgKG0gPSBpW1wicmV0dXJuXCJdKSkgbS5jYWxsKGkpO1xuICAgICAgfVxuICAgICAgZmluYWxseSB7IGlmIChlKSB0aHJvdyBlLmVycm9yOyB9XG4gIH1cbiAgcmV0dXJuIGFyO1xufVxuXG4vKiogQGRlcHJlY2F0ZWQgKi9cbmV4cG9ydCBmdW5jdGlvbiBfX3NwcmVhZCgpIHtcbiAgZm9yICh2YXIgYXIgPSBbXSwgaSA9IDA7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspXG4gICAgICBhciA9IGFyLmNvbmNhdChfX3JlYWQoYXJndW1lbnRzW2ldKSk7XG4gIHJldHVybiBhcjtcbn1cblxuLyoqIEBkZXByZWNhdGVkICovXG5leHBvcnQgZnVuY3Rpb24gX19zcHJlYWRBcnJheXMoKSB7XG4gIGZvciAodmFyIHMgPSAwLCBpID0gMCwgaWwgPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgaWw7IGkrKykgcyArPSBhcmd1bWVudHNbaV0ubGVuZ3RoO1xuICBmb3IgKHZhciByID0gQXJyYXkocyksIGsgPSAwLCBpID0gMDsgaSA8IGlsOyBpKyspXG4gICAgICBmb3IgKHZhciBhID0gYXJndW1lbnRzW2ldLCBqID0gMCwgamwgPSBhLmxlbmd0aDsgaiA8IGpsOyBqKyssIGsrKylcbiAgICAgICAgICByW2tdID0gYVtqXTtcbiAgcmV0dXJuIHI7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBfX3NwcmVhZEFycmF5KHRvLCBmcm9tLCBwYWNrKSB7XG4gIGlmIChwYWNrIHx8IGFyZ3VtZW50cy5sZW5ndGggPT09IDIpIGZvciAodmFyIGkgPSAwLCBsID0gZnJvbS5sZW5ndGgsIGFyOyBpIDwgbDsgaSsrKSB7XG4gICAgICBpZiAoYXIgfHwgIShpIGluIGZyb20pKSB7XG4gICAgICAgICAgaWYgKCFhcikgYXIgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChmcm9tLCAwLCBpKTtcbiAgICAgICAgICBhcltpXSA9IGZyb21baV07XG4gICAgICB9XG4gIH1cbiAgcmV0dXJuIHRvLmNvbmNhdChhciB8fCBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChmcm9tKSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBfX2F3YWl0KHYpIHtcbiAgcmV0dXJuIHRoaXMgaW5zdGFuY2VvZiBfX2F3YWl0ID8gKHRoaXMudiA9IHYsIHRoaXMpIDogbmV3IF9fYXdhaXQodik7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBfX2FzeW5jR2VuZXJhdG9yKHRoaXNBcmcsIF9hcmd1bWVudHMsIGdlbmVyYXRvcikge1xuICBpZiAoIVN5bWJvbC5hc3luY0l0ZXJhdG9yKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3ltYm9sLmFzeW5jSXRlcmF0b3IgaXMgbm90IGRlZmluZWQuXCIpO1xuICB2YXIgZyA9IGdlbmVyYXRvci5hcHBseSh0aGlzQXJnLCBfYXJndW1lbnRzIHx8IFtdKSwgaSwgcSA9IFtdO1xuICByZXR1cm4gaSA9IE9iamVjdC5jcmVhdGUoKHR5cGVvZiBBc3luY0l0ZXJhdG9yID09PSBcImZ1bmN0aW9uXCIgPyBBc3luY0l0ZXJhdG9yIDogT2JqZWN0KS5wcm90b3R5cGUpLCB2ZXJiKFwibmV4dFwiKSwgdmVyYihcInRocm93XCIpLCB2ZXJiKFwicmV0dXJuXCIsIGF3YWl0UmV0dXJuKSwgaVtTeW1ib2wuYXN5bmNJdGVyYXRvcl0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9LCBpO1xuICBmdW5jdGlvbiBhd2FpdFJldHVybihmKSB7IHJldHVybiBmdW5jdGlvbiAodikgeyByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHYpLnRoZW4oZiwgcmVqZWN0KTsgfTsgfVxuICBmdW5jdGlvbiB2ZXJiKG4sIGYpIHsgaWYgKGdbbl0pIHsgaVtuXSA9IGZ1bmN0aW9uICh2KSB7IHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAoYSwgYikgeyBxLnB1c2goW24sIHYsIGEsIGJdKSA+IDEgfHwgcmVzdW1lKG4sIHYpOyB9KTsgfTsgaWYgKGYpIGlbbl0gPSBmKGlbbl0pOyB9IH1cbiAgZnVuY3Rpb24gcmVzdW1lKG4sIHYpIHsgdHJ5IHsgc3RlcChnW25dKHYpKTsgfSBjYXRjaCAoZSkgeyBzZXR0bGUocVswXVszXSwgZSk7IH0gfVxuICBmdW5jdGlvbiBzdGVwKHIpIHsgci52YWx1ZSBpbnN0YW5jZW9mIF9fYXdhaXQgPyBQcm9taXNlLnJlc29sdmUoci52YWx1ZS52KS50aGVuKGZ1bGZpbGwsIHJlamVjdCkgOiBzZXR0bGUocVswXVsyXSwgcik7IH1cbiAgZnVuY3Rpb24gZnVsZmlsbCh2YWx1ZSkgeyByZXN1bWUoXCJuZXh0XCIsIHZhbHVlKTsgfVxuICBmdW5jdGlvbiByZWplY3QodmFsdWUpIHsgcmVzdW1lKFwidGhyb3dcIiwgdmFsdWUpOyB9XG4gIGZ1bmN0aW9uIHNldHRsZShmLCB2KSB7IGlmIChmKHYpLCBxLnNoaWZ0KCksIHEubGVuZ3RoKSByZXN1bWUocVswXVswXSwgcVswXVsxXSk7IH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIF9fYXN5bmNEZWxlZ2F0b3Iobykge1xuICB2YXIgaSwgcDtcbiAgcmV0dXJuIGkgPSB7fSwgdmVyYihcIm5leHRcIiksIHZlcmIoXCJ0aHJvd1wiLCBmdW5jdGlvbiAoZSkgeyB0aHJvdyBlOyB9KSwgdmVyYihcInJldHVyblwiKSwgaVtTeW1ib2wuaXRlcmF0b3JdID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfSwgaTtcbiAgZnVuY3Rpb24gdmVyYihuLCBmKSB7IGlbbl0gPSBvW25dID8gZnVuY3Rpb24gKHYpIHsgcmV0dXJuIChwID0gIXApID8geyB2YWx1ZTogX19hd2FpdChvW25dKHYpKSwgZG9uZTogZmFsc2UgfSA6IGYgPyBmKHYpIDogdjsgfSA6IGY7IH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIF9fYXN5bmNWYWx1ZXMobykge1xuICBpZiAoIVN5bWJvbC5hc3luY0l0ZXJhdG9yKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3ltYm9sLmFzeW5jSXRlcmF0b3IgaXMgbm90IGRlZmluZWQuXCIpO1xuICB2YXIgbSA9IG9bU3ltYm9sLmFzeW5jSXRlcmF0b3JdLCBpO1xuICByZXR1cm4gbSA/IG0uY2FsbChvKSA6IChvID0gdHlwZW9mIF9fdmFsdWVzID09PSBcImZ1bmN0aW9uXCIgPyBfX3ZhbHVlcyhvKSA6IG9bU3ltYm9sLml0ZXJhdG9yXSgpLCBpID0ge30sIHZlcmIoXCJuZXh0XCIpLCB2ZXJiKFwidGhyb3dcIiksIHZlcmIoXCJyZXR1cm5cIiksIGlbU3ltYm9sLmFzeW5jSXRlcmF0b3JdID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfSwgaSk7XG4gIGZ1bmN0aW9uIHZlcmIobikgeyBpW25dID0gb1tuXSAmJiBmdW5jdGlvbiAodikgeyByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkgeyB2ID0gb1tuXSh2KSwgc2V0dGxlKHJlc29sdmUsIHJlamVjdCwgdi5kb25lLCB2LnZhbHVlKTsgfSk7IH07IH1cbiAgZnVuY3Rpb24gc2V0dGxlKHJlc29sdmUsIHJlamVjdCwgZCwgdikgeyBQcm9taXNlLnJlc29sdmUodikudGhlbihmdW5jdGlvbih2KSB7IHJlc29sdmUoeyB2YWx1ZTogdiwgZG9uZTogZCB9KTsgfSwgcmVqZWN0KTsgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gX19tYWtlVGVtcGxhdGVPYmplY3QoY29va2VkLCByYXcpIHtcbiAgaWYgKE9iamVjdC5kZWZpbmVQcm9wZXJ0eSkgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkoY29va2VkLCBcInJhd1wiLCB7IHZhbHVlOiByYXcgfSk7IH0gZWxzZSB7IGNvb2tlZC5yYXcgPSByYXc7IH1cbiAgcmV0dXJuIGNvb2tlZDtcbn07XG5cbnZhciBfX3NldE1vZHVsZURlZmF1bHQgPSBPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIHYpIHtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIFwiZGVmYXVsdFwiLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2IH0pO1xufSkgOiBmdW5jdGlvbihvLCB2KSB7XG4gIG9bXCJkZWZhdWx0XCJdID0gdjtcbn07XG5cbnZhciBvd25LZXlzID0gZnVuY3Rpb24obykge1xuICBvd25LZXlzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMgfHwgZnVuY3Rpb24gKG8pIHtcbiAgICB2YXIgYXIgPSBbXTtcbiAgICBmb3IgKHZhciBrIGluIG8pIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwobywgaykpIGFyW2FyLmxlbmd0aF0gPSBrO1xuICAgIHJldHVybiBhcjtcbiAgfTtcbiAgcmV0dXJuIG93bktleXMobyk7XG59O1xuXG5leHBvcnQgZnVuY3Rpb24gX19pbXBvcnRTdGFyKG1vZCkge1xuICBpZiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSByZXR1cm4gbW9kO1xuICB2YXIgcmVzdWx0ID0ge307XG4gIGlmIChtb2QgIT0gbnVsbCkgZm9yICh2YXIgayA9IG93bktleXMobW9kKSwgaSA9IDA7IGkgPCBrLmxlbmd0aDsgaSsrKSBpZiAoa1tpXSAhPT0gXCJkZWZhdWx0XCIpIF9fY3JlYXRlQmluZGluZyhyZXN1bHQsIG1vZCwga1tpXSk7XG4gIF9fc2V0TW9kdWxlRGVmYXVsdChyZXN1bHQsIG1vZCk7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBfX2ltcG9ydERlZmF1bHQobW9kKSB7XG4gIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgZGVmYXVsdDogbW9kIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHJlY2VpdmVyLCBzdGF0ZSwga2luZCwgZikge1xuICBpZiAoa2luZCA9PT0gXCJhXCIgJiYgIWYpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJQcml2YXRlIGFjY2Vzc29yIHdhcyBkZWZpbmVkIHdpdGhvdXQgYSBnZXR0ZXJcIik7XG4gIGlmICh0eXBlb2Ygc3RhdGUgPT09IFwiZnVuY3Rpb25cIiA/IHJlY2VpdmVyICE9PSBzdGF0ZSB8fCAhZiA6ICFzdGF0ZS5oYXMocmVjZWl2ZXIpKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IHJlYWQgcHJpdmF0ZSBtZW1iZXIgZnJvbSBhbiBvYmplY3Qgd2hvc2UgY2xhc3MgZGlkIG5vdCBkZWNsYXJlIGl0XCIpO1xuICByZXR1cm4ga2luZCA9PT0gXCJtXCIgPyBmIDoga2luZCA9PT0gXCJhXCIgPyBmLmNhbGwocmVjZWl2ZXIpIDogZiA/IGYudmFsdWUgOiBzdGF0ZS5nZXQocmVjZWl2ZXIpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gX19jbGFzc1ByaXZhdGVGaWVsZFNldChyZWNlaXZlciwgc3RhdGUsIHZhbHVlLCBraW5kLCBmKSB7XG4gIGlmIChraW5kID09PSBcIm1cIikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlByaXZhdGUgbWV0aG9kIGlzIG5vdCB3cml0YWJsZVwiKTtcbiAgaWYgKGtpbmQgPT09IFwiYVwiICYmICFmKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiUHJpdmF0ZSBhY2Nlc3NvciB3YXMgZGVmaW5lZCB3aXRob3V0IGEgc2V0dGVyXCIpO1xuICBpZiAodHlwZW9mIHN0YXRlID09PSBcImZ1bmN0aW9uXCIgPyByZWNlaXZlciAhPT0gc3RhdGUgfHwgIWYgOiAhc3RhdGUuaGFzKHJlY2VpdmVyKSkgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCB3cml0ZSBwcml2YXRlIG1lbWJlciB0byBhbiBvYmplY3Qgd2hvc2UgY2xhc3MgZGlkIG5vdCBkZWNsYXJlIGl0XCIpO1xuICByZXR1cm4gKGtpbmQgPT09IFwiYVwiID8gZi5jYWxsKHJlY2VpdmVyLCB2YWx1ZSkgOiBmID8gZi52YWx1ZSA9IHZhbHVlIDogc3RhdGUuc2V0KHJlY2VpdmVyLCB2YWx1ZSkpLCB2YWx1ZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIF9fY2xhc3NQcml2YXRlRmllbGRJbihzdGF0ZSwgcmVjZWl2ZXIpIHtcbiAgaWYgKHJlY2VpdmVyID09PSBudWxsIHx8ICh0eXBlb2YgcmVjZWl2ZXIgIT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIHJlY2VpdmVyICE9PSBcImZ1bmN0aW9uXCIpKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IHVzZSAnaW4nIG9wZXJhdG9yIG9uIG5vbi1vYmplY3RcIik7XG4gIHJldHVybiB0eXBlb2Ygc3RhdGUgPT09IFwiZnVuY3Rpb25cIiA/IHJlY2VpdmVyID09PSBzdGF0ZSA6IHN0YXRlLmhhcyhyZWNlaXZlcik7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBfX2FkZERpc3Bvc2FibGVSZXNvdXJjZShlbnYsIHZhbHVlLCBhc3luYykge1xuICBpZiAodmFsdWUgIT09IG51bGwgJiYgdmFsdWUgIT09IHZvaWQgMCkge1xuICAgIGlmICh0eXBlb2YgdmFsdWUgIT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIHZhbHVlICE9PSBcImZ1bmN0aW9uXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJPYmplY3QgZXhwZWN0ZWQuXCIpO1xuICAgIHZhciBkaXNwb3NlLCBpbm5lcjtcbiAgICBpZiAoYXN5bmMpIHtcbiAgICAgIGlmICghU3ltYm9sLmFzeW5jRGlzcG9zZSkgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN5bWJvbC5hc3luY0Rpc3Bvc2UgaXMgbm90IGRlZmluZWQuXCIpO1xuICAgICAgZGlzcG9zZSA9IHZhbHVlW1N5bWJvbC5hc3luY0Rpc3Bvc2VdO1xuICAgIH1cbiAgICBpZiAoZGlzcG9zZSA9PT0gdm9pZCAwKSB7XG4gICAgICBpZiAoIVN5bWJvbC5kaXNwb3NlKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3ltYm9sLmRpc3Bvc2UgaXMgbm90IGRlZmluZWQuXCIpO1xuICAgICAgZGlzcG9zZSA9IHZhbHVlW1N5bWJvbC5kaXNwb3NlXTtcbiAgICAgIGlmIChhc3luYykgaW5uZXIgPSBkaXNwb3NlO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIGRpc3Bvc2UgIT09IFwiZnVuY3Rpb25cIikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIk9iamVjdCBub3QgZGlzcG9zYWJsZS5cIik7XG4gICAgaWYgKGlubmVyKSBkaXNwb3NlID0gZnVuY3Rpb24oKSB7IHRyeSB7IGlubmVyLmNhbGwodGhpcyk7IH0gY2F0Y2ggKGUpIHsgcmV0dXJuIFByb21pc2UucmVqZWN0KGUpOyB9IH07XG4gICAgZW52LnN0YWNrLnB1c2goeyB2YWx1ZTogdmFsdWUsIGRpc3Bvc2U6IGRpc3Bvc2UsIGFzeW5jOiBhc3luYyB9KTtcbiAgfVxuICBlbHNlIGlmIChhc3luYykge1xuICAgIGVudi5zdGFjay5wdXNoKHsgYXN5bmM6IHRydWUgfSk7XG4gIH1cbiAgcmV0dXJuIHZhbHVlO1xufVxuXG52YXIgX1N1cHByZXNzZWRFcnJvciA9IHR5cGVvZiBTdXBwcmVzc2VkRXJyb3IgPT09IFwiZnVuY3Rpb25cIiA/IFN1cHByZXNzZWRFcnJvciA6IGZ1bmN0aW9uIChlcnJvciwgc3VwcHJlc3NlZCwgbWVzc2FnZSkge1xuICB2YXIgZSA9IG5ldyBFcnJvcihtZXNzYWdlKTtcbiAgcmV0dXJuIGUubmFtZSA9IFwiU3VwcHJlc3NlZEVycm9yXCIsIGUuZXJyb3IgPSBlcnJvciwgZS5zdXBwcmVzc2VkID0gc3VwcHJlc3NlZCwgZTtcbn07XG5cbmV4cG9ydCBmdW5jdGlvbiBfX2Rpc3Bvc2VSZXNvdXJjZXMoZW52KSB7XG4gIGZ1bmN0aW9uIGZhaWwoZSkge1xuICAgIGVudi5lcnJvciA9IGVudi5oYXNFcnJvciA/IG5ldyBfU3VwcHJlc3NlZEVycm9yKGUsIGVudi5lcnJvciwgXCJBbiBlcnJvciB3YXMgc3VwcHJlc3NlZCBkdXJpbmcgZGlzcG9zYWwuXCIpIDogZTtcbiAgICBlbnYuaGFzRXJyb3IgPSB0cnVlO1xuICB9XG4gIHZhciByLCBzID0gMDtcbiAgZnVuY3Rpb24gbmV4dCgpIHtcbiAgICB3aGlsZSAociA9IGVudi5zdGFjay5wb3AoKSkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgaWYgKCFyLmFzeW5jICYmIHMgPT09IDEpIHJldHVybiBzID0gMCwgZW52LnN0YWNrLnB1c2gociksIFByb21pc2UucmVzb2x2ZSgpLnRoZW4obmV4dCk7XG4gICAgICAgIGlmIChyLmRpc3Bvc2UpIHtcbiAgICAgICAgICB2YXIgcmVzdWx0ID0gci5kaXNwb3NlLmNhbGwoci52YWx1ZSk7XG4gICAgICAgICAgaWYgKHIuYXN5bmMpIHJldHVybiBzIHw9IDIsIFByb21pc2UucmVzb2x2ZShyZXN1bHQpLnRoZW4obmV4dCwgZnVuY3Rpb24oZSkgeyBmYWlsKGUpOyByZXR1cm4gbmV4dCgpOyB9KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHMgfD0gMTtcbiAgICAgIH1cbiAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgIGZhaWwoZSk7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChzID09PSAxKSByZXR1cm4gZW52Lmhhc0Vycm9yID8gUHJvbWlzZS5yZWplY3QoZW52LmVycm9yKSA6IFByb21pc2UucmVzb2x2ZSgpO1xuICAgIGlmIChlbnYuaGFzRXJyb3IpIHRocm93IGVudi5lcnJvcjtcbiAgfVxuICByZXR1cm4gbmV4dCgpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gX19yZXdyaXRlUmVsYXRpdmVJbXBvcnRFeHRlbnNpb24ocGF0aCwgcHJlc2VydmVKc3gpIHtcbiAgaWYgKHR5cGVvZiBwYXRoID09PSBcInN0cmluZ1wiICYmIC9eXFwuXFwuP1xcLy8udGVzdChwYXRoKSkge1xuICAgICAgcmV0dXJuIHBhdGgucmVwbGFjZSgvXFwuKHRzeCkkfCgoPzpcXC5kKT8pKCg/OlxcLlteLi9dKz8pPylcXC4oW2NtXT8pdHMkL2ksIGZ1bmN0aW9uIChtLCB0c3gsIGQsIGV4dCwgY20pIHtcbiAgICAgICAgICByZXR1cm4gdHN4ID8gcHJlc2VydmVKc3ggPyBcIi5qc3hcIiA6IFwiLmpzXCIgOiBkICYmICghZXh0IHx8ICFjbSkgPyBtIDogKGQgKyBleHQgKyBcIi5cIiArIGNtLnRvTG93ZXJDYXNlKCkgKyBcImpzXCIpO1xuICAgICAgfSk7XG4gIH1cbiAgcmV0dXJuIHBhdGg7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgX19leHRlbmRzLFxuICBfX2Fzc2lnbixcbiAgX19yZXN0LFxuICBfX2RlY29yYXRlLFxuICBfX3BhcmFtLFxuICBfX2VzRGVjb3JhdGUsXG4gIF9fcnVuSW5pdGlhbGl6ZXJzLFxuICBfX3Byb3BLZXksXG4gIF9fc2V0RnVuY3Rpb25OYW1lLFxuICBfX21ldGFkYXRhLFxuICBfX2F3YWl0ZXIsXG4gIF9fZ2VuZXJhdG9yLFxuICBfX2NyZWF0ZUJpbmRpbmcsXG4gIF9fZXhwb3J0U3RhcixcbiAgX192YWx1ZXMsXG4gIF9fcmVhZCxcbiAgX19zcHJlYWQsXG4gIF9fc3ByZWFkQXJyYXlzLFxuICBfX3NwcmVhZEFycmF5LFxuICBfX2F3YWl0LFxuICBfX2FzeW5jR2VuZXJhdG9yLFxuICBfX2FzeW5jRGVsZWdhdG9yLFxuICBfX2FzeW5jVmFsdWVzLFxuICBfX21ha2VUZW1wbGF0ZU9iamVjdCxcbiAgX19pbXBvcnRTdGFyLFxuICBfX2ltcG9ydERlZmF1bHQsXG4gIF9fY2xhc3NQcml2YXRlRmllbGRHZXQsXG4gIF9fY2xhc3NQcml2YXRlRmllbGRTZXQsXG4gIF9fY2xhc3NQcml2YXRlRmllbGRJbixcbiAgX19hZGREaXNwb3NhYmxlUmVzb3VyY2UsXG4gIF9fZGlzcG9zZVJlc291cmNlcyxcbiAgX19yZXdyaXRlUmVsYXRpdmVJbXBvcnRFeHRlbnNpb24sXG59O1xuIiwgIjxzY3JpcHQgbGFuZz1cInRzXCI+XHJcbiAgaW1wb3J0IHsgb25Nb3VudCB9IGZyb20gJ3N2ZWx0ZSdcclxuICBpbXBvcnQgeyBBcHAsIE1hcmtkb3duUmVuZGVyZXIgfSBmcm9tICdvYnNpZGlhbidcclxuICBleHBvcnQgbGV0IHNlbnRlbmNlOiBzdHJpbmdbXVxyXG4gIGV4cG9ydCBsZXQgc291cmNlUGF0aDogc3RyaW5nXHJcbiAgZXhwb3J0IGxldCBhcHA6IEFwcFxyXG4gIGV4cG9ydCBsZXQgbGluZTogbnVtYmVyXHJcbiAgaW1wb3J0IHsganVtcFRvU2VsZWN0aW9uLCBvcGVuT3JTd2l0Y2ggfSBmcm9tICdzcmMvVXRpbGl0eSdcclxuXHJcbiAgbGV0IHJlbmRlcmVkU2VudGVuY2UgPSBzZW50ZW5jZVswXSArICc9PScgKyBzZW50ZW5jZVsxXSArICc9PScgKyBzZW50ZW5jZVsyXVxyXG4gIGlmIChzZW50ZW5jZS5sZW5ndGggPT09IDUpIHtcclxuICAgIHJlbmRlcmVkU2VudGVuY2UgPVxyXG4gICAgICByZW5kZXJlZFNlbnRlbmNlICsgJz09JyArIHNlbnRlbmNlWzNdICsgJz09JyArIHNlbnRlbmNlWzRdXHJcbiAgfVxyXG4gIHJlbmRlcmVkU2VudGVuY2UgPSByZW5kZXJlZFNlbnRlbmNlLnRyaW0oKVxyXG5cclxuICBsZXQgZWw6IEhUTUxFbGVtZW50XHJcbiAgb25Nb3VudChhc3luYyAoKSA9PiB7XHJcbiAgICBNYXJrZG93blJlbmRlcmVyLnJlbmRlck1hcmtkb3duKHJlbmRlcmVkU2VudGVuY2UsIGVsLCBzb3VyY2VQYXRoLCBudWxsKVxyXG4gICAgZm9yIChsZXQgbWFya2VkRWwgb2YgZWwuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ21hcmsnKSkge1xyXG4gICAgICBtYXJrZWRFbC5jbGFzc0xpc3QuYWRkKCdDQy1tYXJrJylcclxuICAgIH1cclxuICAgIGZvcihsZXQgbWFya2VkRWw6SFRNTEVsZW1lbnQgb2YgZWwuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJvbFwiKSkge1xyXG4gICAgICBtYXJrZWRFbC5jbGFzc0xpc3QuYWRkKFwiQ0MtZWRpdFwiKVxyXG4gICAgfVxyXG4gICAgZm9yKGxldCBtYXJrZWRFbDpIVE1MRWxlbWVudCBvZiBlbC5nZXRFbGVtZW50c0J5VGFnTmFtZShcImhyXCIpKSB7XHJcbiAgICAgIG1hcmtlZEVsLmNsYXNzTGlzdC5hZGQoXCJDQy1oclwiKVxyXG4gICAgfVxyXG4gIH0pXHJcbjwvc2NyaXB0PlxyXG5cclxuPGRpdlxyXG4gIGNsYXNzPVwiQ0Mtc2VudGVuY2VcIlxyXG4gIGJpbmQ6dGhpcz17ZWx9XHJcbiAgb246Y2xpY2s9e2FzeW5jIChlKSA9PiB7XHJcbiAgICBhd2FpdCBvcGVuT3JTd2l0Y2goYXBwLCBzb3VyY2VQYXRoLCBlKVxyXG4gICAganVtcFRvU2VsZWN0aW9uKGFwcCwgbGluZSwgc2VudGVuY2Uuam9pbignJykpXHJcbiAgfX1cclxuLz5cclxuXHJcbjxzdHlsZT5cclxuICAuQ0Mtc2VudGVuY2Uge1xyXG4gICAgcGFkZGluZy1sZWZ0OiA0MHB4O1xyXG4gICAgY29sb3I6IHZhcigtLXRleHQtbXV0ZWQpO1xyXG4gIH1cclxuPC9zdHlsZT5cclxuIiwgIjxzY3JpcHQgbGFuZz1cInRzXCI+XHJcbiAgaW1wb3J0IHR5cGUgeyBBcHAgfSBmcm9tICdvYnNpZGlhbidcclxuICBpbXBvcnQgdHlwZSBBbmFseXNpc1ZpZXcgZnJvbSAnc3JjL0FuYWx5c2lzVmlldydcclxuICBpbXBvcnQge1xyXG4gICAgQU5BTFlTSVNfVFlQRVMsXHJcbiAgICBJQ09OLFxyXG4gICAgTElOS0VELFxyXG4gICAgTUVBU1VSRSxcclxuICAgIE5PREUsXHJcbiAgICBOT1RfTElOS0VELFxyXG4gIH0gZnJvbSAnc3JjL0NvbnN0YW50cydcclxuICBpbXBvcnQgdHlwZSB7XHJcbiAgICBDb0NpdGF0aW9uLFxyXG4gICAgQ29DaXRhdGlvbk1hcCxcclxuICAgIENvQ2l0YXRpb25SZXMsXHJcbiAgICBHcmFwaEFuYWx5c2lzU2V0dGluZ3MsXHJcbiAgICBTdWJ0eXBlLFxyXG4gIH0gZnJvbSAnc3JjL0ludGVyZmFjZXMnXHJcbiAgaW1wb3J0IHR5cGUgR3JhcGhBbmFseXNpc1BsdWdpbiBmcm9tICdzcmMvbWFpbidcclxuICBpbXBvcnQge1xyXG4gICAgY2xhc3NFeHQsXHJcbiAgICBkZWJ1ZyxcclxuICAgIGRyb3BQYXRoLFxyXG4gICAgZ2V0SW1nQnVmZmVyUHJvbWlzZSxcclxuICAgIGhvdmVyUHJldmlldyxcclxuICAgIGlzSW1nLFxyXG4gICAganVtcFRvU2VsZWN0aW9uLFxyXG4gICAgbG9vc2VySXNMaW5rZWQsXHJcbiAgICBvcGVuTWVudSxcclxuICAgIG9wZW5PclN3aXRjaCxcclxuICAgIHByZXNlbnRQYXRoLFxyXG4gICAgcm91bmROdW1iZXIsXHJcbiAgfSBmcm9tICdzcmMvVXRpbGl0eSdcclxuICBpbXBvcnQgeyBvbk1vdW50IH0gZnJvbSAnc3ZlbHRlJ1xyXG4gIGltcG9ydCBGYUxpbmsgZnJvbSAnc3ZlbHRlLWljb25zL2ZhL0ZhTGluay5zdmVsdGUnXHJcbiAgaW1wb3J0IEluZmluaXRlU2Nyb2xsIGZyb20gJ3N2ZWx0ZS1pbmZpbml0ZS1zY3JvbGwnXHJcbiAgaW1wb3J0IEV4dGVuc2lvbkljb24gZnJvbSAnLi9FeHRlbnNpb25JY29uLnN2ZWx0ZSdcclxuICBpbXBvcnQgSW1nVGh1bWJuYWlsIGZyb20gJy4vSW1nVGh1bWJuYWlsLnN2ZWx0ZSdcclxuICBpbXBvcnQgU3VidHlwZU9wdGlvbnMgZnJvbSAnLi9TdWJ0eXBlT3B0aW9ucy5zdmVsdGUnXHJcbiAgaW1wb3J0IFJlbmRlcmVkTWFya2Rvd24gZnJvbSAnLi9SZW5kZXJlZE1hcmtkb3duLnN2ZWx0ZSdcclxuXHJcbiAgZXhwb3J0IGxldCBhcHA6IEFwcFxyXG4gIGV4cG9ydCBsZXQgcGx1Z2luOiBHcmFwaEFuYWx5c2lzUGx1Z2luXHJcbiAgZXhwb3J0IGxldCBzZXR0aW5nczogR3JhcGhBbmFseXNpc1NldHRpbmdzXHJcbiAgZXhwb3J0IGxldCB2aWV3OiBBbmFseXNpc1ZpZXdcclxuICBleHBvcnQgbGV0IGN1cnJTdWJ0eXBlOiBTdWJ0eXBlXHJcblxyXG4gICQ6IGN1cnJTdWJ0eXBlSW5mbyA9IEFOQUxZU0lTX1RZUEVTLmZpbmQoKHN1YikgPT4gc3ViLnN1YnR5cGUgPT09IGN1cnJTdWJ0eXBlKVxyXG5cclxuICBpbnRlcmZhY2UgQ29DaXRlQ29tcCB7XHJcbiAgICBtZWFzdXJlOiBudW1iZXJcclxuICAgIGNvQ2l0YXRpb25zOiBDb0NpdGF0aW9uW11cclxuICAgIGxpbmtlZDogYm9vbGVhblxyXG4gICAgcmVzb2x2ZWQ6IGJvb2xlYW5cclxuICAgIHRvOiBzdHJpbmdcclxuICB9XHJcblxyXG4gIGxldCBmcm96ZW4gPSBmYWxzZVxyXG4gIGxldCBzaXplID0gNTBcclxuXHJcbiAgbGV0IGN1cnJOb2RlOiBzdHJpbmdcclxuICBsZXQgY3VycmVudF9jb21wb25lbnQ6IEhUTUxFbGVtZW50XHJcbiAgbGV0IG5ld0JhdGNoOiBDb0NpdGVDb21wW10gPSBbXVxyXG4gIGxldCB2aXNpYmxlRGF0YTogQ29DaXRlQ29tcFtdID0gW11cclxuICBsZXQgcGFnZSA9IDBcclxuICBsZXQgYmxvY2tTd2l0Y2ggPSBmYWxzZVxyXG5cclxuICBsZXQgY3VyckZpbGUgPSBhcHAud29ya3NwYWNlLmdldEFjdGl2ZUZpbGUoKVxyXG4gICQ6IGN1cnJOb2RlID0gY3VyckZpbGU/LnBhdGhcclxuICBhcHAud29ya3NwYWNlLm9uKCdhY3RpdmUtbGVhZi1jaGFuZ2UnLCAoKSA9PiB7XHJcbiAgICBpZiAoIWZyb3plbikge1xyXG4gICAgICBibG9ja1N3aXRjaCA9IHRydWVcclxuICAgICAgbmV3QmF0Y2ggPSBbXVxyXG4gICAgICB2aXNpYmxlRGF0YSA9IFtdXHJcbiAgICAgIHByb21pc2VTb3J0ZWRSZXN1bHRzID0gbnVsbFxyXG4gICAgICBwYWdlID0gMFxyXG5cclxuICAgICAgc2V0VGltZW91dCgoKSA9PiAoY3VyckZpbGUgPSBhcHAud29ya3NwYWNlLmdldEFjdGl2ZUZpbGUoKSksIDEwMClcclxuICAgIH1cclxuICB9KVxyXG5cclxuICBsZXQgYXNjT3JkZXIgPSBmYWxzZVxyXG4gICQ6IHByb21pc2VTb3J0ZWRSZXN1bHRzID1cclxuICAgICFjdXJyTm9kZSB8fCAhcGx1Z2luLmdcclxuICAgICAgPyBudWxsXHJcbiAgICAgIDogcGx1Z2luLmcuYWxnc1snQ28tQ2l0YXRpb25zJ10oY3Vyck5vZGUpXHJcbiAgICAgICAgLnRoZW4oKGNjTWFwOiBDb0NpdGF0aW9uTWFwKSA9PiB7XHJcbiAgICAgICAgICBPYmplY3QudmFsdWVzKGNjTWFwKS5mb3JFYWNoKCh2YWx1ZTogQ29DaXRhdGlvblJlcykgPT4ge1xyXG4gICAgICAgICAgICB2YWx1ZS5jb0NpdGF0aW9ucyA9IHZhbHVlLmNvQ2l0YXRpb25zLnNvcnQoKGEsIGIpID0+IHtcclxuICAgICAgICAgICAgICByZXR1cm4gYS5tZWFzdXJlID4gYi5tZWFzdXJlID8gLTEgOiAxXHJcbiAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgKVxyXG4gICAgICAgICAgfSlcclxuICAgICAgICAgIGNvbnN0IGdyZWF0ZXIgPSBhc2NPcmRlciA/IDEgOiAtMVxyXG4gICAgICAgICAgY29uc3QgbGVzc2VyID0gYXNjT3JkZXIgPyAtMSA6IDFcclxuICAgICAgICAgIGNvbnN0IHNvcnRlZENpdGVzOiBDb0NpdGVDb21wW10gPSBbXVxyXG4gICAgICAgICAgT2JqZWN0LmtleXMoY2NNYXApLmZvckVhY2goKHRvKSA9PiB7XHJcbiAgICAgICAgICAgIGxldCB7IGNvQ2l0YXRpb25zLCBtZWFzdXJlLCByZXNvbHZlZCB9ID0gY2NNYXBbXHJcbiAgICAgICAgICAgICAgdG9cclxuICAgICAgICAgICAgICBdIGFzIENvQ2l0YXRpb25SZXNcclxuICAgICAgICAgICAgaWYgKG1lYXN1cmUgIT09IDAgJiYgbWVhc3VyZSAhPT0gSW5maW5pdHkpIHtcclxuICAgICAgICAgICAgICBzb3J0ZWRDaXRlcy5wdXNoKHtcclxuICAgICAgICAgICAgICAgIG1lYXN1cmUsXHJcbiAgICAgICAgICAgICAgICBjb0NpdGF0aW9ucyxcclxuICAgICAgICAgICAgICAgIGxpbmtlZDogbG9vc2VySXNMaW5rZWQoYXBwLCB0bywgY3Vyck5vZGUsIGZhbHNlKSxcclxuICAgICAgICAgICAgICAgIHJlc29sdmVkLFxyXG4gICAgICAgICAgICAgICAgdG8sXHJcbiAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfSlcclxuICAgICAgICAgIHNvcnRlZENpdGVzLnNvcnQoKGEsIGIpID0+IHtcclxuICAgICAgICAgICAgcmV0dXJuIGEubWVhc3VyZSA+IGIubWVhc3VyZSA/IGdyZWF0ZXIgOlxyXG4gICAgICAgICAgICAgICAgYS5tZWFzdXJlICE9PSBiLm1lYXN1cmUgfHxcclxuICAgICAgICAgICAgICAgIHByZXNlbnRQYXRoKGEudG8pLnRvTG93ZXJDYXNlKCkgPiBwcmVzZW50UGF0aChiLnRvKS50b0xvd2VyQ2FzZSgpID8gbGVzc2VyIDogZ3JlYXRlclxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICApXHJcbiAgICAgICAgICByZXR1cm4gc29ydGVkQ2l0ZXNcclxuICAgICAgICB9KVxyXG4gICAgICAgIC50aGVuKChyZXMpID0+IHtcclxuICAgICAgICAgIG5ld0JhdGNoID0gcmVzLnNsaWNlKDAsIHNpemUpXHJcbiAgICAgICAgICBkZWJ1ZyhzZXR0aW5ncywgeyByZXMgfSlcclxuICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgICAgICBibG9ja1N3aXRjaCA9IGZhbHNlXHJcbiAgICAgICAgICB9LCAxMDApXHJcbiAgICAgICAgICByZXR1cm4gcmVzXHJcbiAgICAgICAgfSlcclxuXHJcbiAgJDogdmlzaWJsZURhdGEgPSBbLi4udmlzaWJsZURhdGEsIC4uLm5ld0JhdGNoXVxyXG5cclxuICBvbk1vdW50KCgpID0+IHtcclxuICAgIGN1cnJGaWxlID0gYXBwLndvcmtzcGFjZS5nZXRBY3RpdmVGaWxlKClcclxuICAgIGRlYnVnKHNldHRpbmdzLCB7IHByb21pc2VTb3J0ZWRSZXN1bHRzIH0pXHJcbiAgfSlcclxuPC9zY3JpcHQ+XHJcblxyXG48U3VidHlwZU9wdGlvbnNcclxuICBiaW5kOmFzY09yZGVyXHJcbiAgYmluZDpmcm96ZW5cclxuICBiaW5kOmN1cnJGaWxlXHJcbiAge2N1cnJTdWJ0eXBlSW5mb31cclxuICB7YXBwfVxyXG4gIHtwbHVnaW59XHJcbiAge3ZpZXd9XHJcbiAgYmluZDpibG9ja1N3aXRjaFxyXG4gIGJpbmQ6bmV3QmF0Y2hcclxuICBiaW5kOnZpc2libGVEYXRhXHJcbiAgYmluZDpwcm9taXNlU29ydGVkUmVzdWx0c1xyXG4gIGJpbmQ6cGFnZVxyXG4vPlxyXG5cclxuPGRpdiBjbGFzcz1cIkdBLUNDc1wiIGJpbmQ6dGhpcz17Y3VycmVudF9jb21wb25lbnR9PlxyXG4gIHsjaWYgcHJvbWlzZVNvcnRlZFJlc3VsdHN9XHJcbiAgICB7I2F3YWl0IHByb21pc2VTb3J0ZWRSZXN1bHRzIHRoZW4gc29ydGVkUmVzdWx0c31cclxuICAgICAgeyNrZXkgc29ydGVkUmVzdWx0c31cclxuICAgICAgICB7I2VhY2ggdmlzaWJsZURhdGEgYXMgbm9kZX1cclxuICAgICAgICAgIHsjaWYgbm9kZS50byAhPT0gY3Vyck5vZGUgJiYgbm9kZSAhPT0gdW5kZWZpbmVkfVxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwiR0EtQ0NcIj5cclxuICAgICAgICAgICAgICA8ZGV0YWlscz5cclxuICAgICAgICAgICAgICAgIDxzdW1tYXJ5PlxyXG4gICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cInRvcC1yb3dcIj5cclxuICAgICAgICAgICAgICAgICAgICA8c3BhblxyXG4gICAgICAgICAgICAgICAgICAgICAgY2xhc3M9XCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtjbGFzc0V4dChub2RlLnRvKX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtub2RlLmxpbmtlZCA/IExJTktFRCA6IE5PVF9MSU5LRUR9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7Tk9ERX1cIlxyXG4gICAgICAgICAgICAgICAgICAgICAgb246Y2xpY2s9e2FzeW5jIChlKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChub2RlLnRvWzBdICE9PSAnIycpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICBhd2FpdCBvcGVuT3JTd2l0Y2goYXBwLCBub2RlLnRvLCBlKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICB9fVxyXG4gICAgICAgICAgICAgICAgICAgICAgb246Y29udGV4dG1lbnU9eyhlKSA9PiBvcGVuTWVudShlLCBhcHApfVxyXG4gICAgICAgICAgICAgICAgICAgICAgb246bW91c2VvdmVyPXsoZSkgPT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaG92ZXJQcmV2aWV3KGUsIHZpZXcsIGRyb3BQYXRoKG5vZGUudG8pKX1cclxuICAgICAgICAgICAgICAgICAgICA+XHJcbiAgICAgICAgICAgICAgICAgICAgICB7I2lmIG5vZGUudG9bMF0gPT09ICcjJ31cclxuICAgICAgICAgICAgICAgICAgICAgICAgPCEtLSBzdmVsdGUtaWdub3JlIGExMXktbWlzc2luZy1hdHRyaWJ1dGUgLS0+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPVwidGFnXCI+e25vZGUudG99PC9hPlxyXG4gICAgICAgICAgICAgICAgICAgICAgezplbHNlfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB7I2lmIG5vZGUubGlua2VkfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPXtJQ09OfT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxGYUxpbmsgLz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHsvaWZ9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxFeHRlbnNpb25JY29uIHBhdGg9e25vZGUudG99IC8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9XCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGludGVybmFsLWxpbmtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtub2RlLnJlc29sdmVkID8gJycgOiAnaXMtdW5yZXNvbHZlZCd9XCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHtwcmVzZW50UGF0aChub2RlLnRvKX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB7I2lmIHBsdWdpbi5zZXR0aW5ncy5zaG93SW1nVGh1bWJuYWlscyAmJiBpc0ltZyhub2RlLnRvKX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICA8SW1nVGh1bWJuYWlsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbWc9e2dldEltZ0J1ZmZlclByb21pc2UoYXBwLCBub2RlLnRvKX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAvPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB7L2lmfVxyXG4gICAgICAgICAgICAgICAgICAgICAgey9pZn1cclxuICAgICAgICAgICAgICAgICAgICA8L3NwYW4+XHJcbiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9e01FQVNVUkV9Pntyb3VuZE51bWJlcihub2RlLm1lYXN1cmUsIDMpfTwvc3Bhbj5cclxuICAgICAgICAgICAgICAgICAgPC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgPC9zdW1tYXJ5PlxyXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cIkdBLWRldGFpbHNcIj5cclxuICAgICAgICAgICAgICAgICAgeyNlYWNoIG5vZGUuY29DaXRhdGlvbnMgYXMgY29DaXRlfVxyXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJDQy1pdGVtXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICA8c3BhblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz1cImludGVybmFsLWxpbmsge05PREV9XCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgb246Y2xpY2s9e2FzeW5jIChlKSA9PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGF3YWl0IG9wZW5PclN3aXRjaChhcHAsIGNvQ2l0ZS5zb3VyY2UsIGUpfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBvbjpjb250ZXh0bWVudT17KGUpID0+IG9wZW5NZW51KGUsIGFwcCl9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG9uOm1vdXNlb3Zlcj17KGUpID0+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgaG92ZXJQcmV2aWV3KGUsIHZpZXcsIGRyb3BQYXRoKGNvQ2l0ZS5zb3VyY2UpKX1cclxuICAgICAgICAgICAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICAgICAgICAgICAge3ByZXNlbnRQYXRoKGNvQ2l0ZS5zb3VyY2UpfVxyXG4gICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9e01FQVNVUkV9PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB7cm91bmROdW1iZXIoY29DaXRlLm1lYXN1cmUsIDMpfVxyXG4gICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgIDxSZW5kZXJlZE1hcmtkb3duXHJcbiAgICAgICAgICAgICAgICAgICAgICBzZW50ZW5jZT17Y29DaXRlLnNlbnRlbmNlfVxyXG4gICAgICAgICAgICAgICAgICAgICAgc291cmNlUGF0aD17Y29DaXRlLnNvdXJjZX1cclxuICAgICAgICAgICAgICAgICAgICAgIGFwcD17YXBwfVxyXG4gICAgICAgICAgICAgICAgICAgICAgbGluZT17Y29DaXRlLmxpbmV9XHJcbiAgICAgICAgICAgICAgICAgICAgLz5cclxuICAgICAgICAgICAgICAgICAgey9lYWNofVxyXG4gICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgPC9kZXRhaWxzPlxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgIHsvaWZ9XHJcbiAgICAgICAgey9lYWNofVxyXG5cclxuICAgICAgICA8SW5maW5pdGVTY3JvbGxcclxuICAgICAgICAgIGhhc01vcmU9e3NvcnRlZFJlc3VsdHMubGVuZ3RoID4gdmlzaWJsZURhdGEubGVuZ3RofVxyXG4gICAgICAgICAgdGhyZXNob2xkPXsxMDB9XHJcbiAgICAgICAgICBlbGVtZW50U2Nyb2xsPXtjdXJyZW50X2NvbXBvbmVudC5wYXJlbnROb2RlfVxyXG4gICAgICAgICAgb246bG9hZE1vcmU9eygpID0+IHtcclxuICAgICAgICAgICAgaWYgKCFibG9ja1N3aXRjaCkge1xyXG4gICAgICAgICAgICAgIHBhZ2UrK1xyXG4gICAgICAgICAgICAgIG5ld0JhdGNoID0gc29ydGVkUmVzdWx0cy5zbGljZShzaXplICogcGFnZSwgc2l6ZSAqIChwYWdlICsgMSkgLSAxKVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9fVxyXG4gICAgICAgIC8+XHJcbiAgICAgICAge3Zpc2libGVEYXRhLmxlbmd0aH0gLyB7c29ydGVkUmVzdWx0cy5sZW5ndGh9XHJcbiAgICAgIHsva2V5fVxyXG4gICAgey9hd2FpdH1cclxuICB7L2lmfVxyXG48L2Rpdj5cclxuXHJcbjxzdHlsZT5cclxuICAuR0EtQ0NzIHtcclxuICAgIGRpc3BsYXk6IGZsZXg7XHJcbiAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xyXG4gICAgcGFkZGluZy1sZWZ0OiAxMHB4O1xyXG4gIH1cclxuXHJcbiAgLyogLkdBLUNDIHtcclxuICAgIGJvcmRlcjogMXB4IHNvbGlkIHZhcigtLWJhY2tncm91bmQtbW9kaWZpZXItYm9yZGVyKTtcclxuICAgIGJvcmRlci1yYWRpdXM6IDNweDsgXHJcbiAgICBwYWRkaW5nOiA1cHg7IFxyXG4gIH0gKi9cclxuXHJcbiAgLmlzLXVucmVzb2x2ZWQge1xyXG4gICAgY29sb3I6IHZhcigtLXRleHQtbXV0ZWQpO1xyXG4gIH1cclxuXHJcbiAgLnRhZyB7XHJcbiAgICBib3JkZXItcmFkaXVzOiAxNXB4ICFpbXBvcnRhbnQ7XHJcbiAgfVxyXG5cclxuICAuR0Etbm9kZSxcclxuICAuQ0Mtc2VudGVuY2Uge1xyXG4gICAgZm9udC1zaXplOiB2YXIoLS1mb250LXNpemUtc2Vjb25kYXJ5KTtcclxuICAgIGJvcmRlcjogMXB4IHNvbGlkIHRyYW5zcGFyZW50O1xyXG4gICAgYm9yZGVyLXJhZGl1czogNXB4O1xyXG4gIH1cclxuXHJcbiAgLkNDLXNlbnRlbmNlOmhvdmVyIHtcclxuICAgIGJhY2tncm91bmQtY29sb3I6IHZhcigtLWJhY2tncm91bmQtc2Vjb25kYXJ5LWFsdCk7XHJcbiAgfVxyXG4gIHNwYW4uR0EtbWVhc3VyZSB7XHJcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1iYWNrZ3JvdW5kLXNlY29uZGFyeS1hbHQpO1xyXG4gICAgcGFkZGluZzogMnB4IDRweDtcclxuICAgIGJvcmRlci1yYWRpdXM6IDNweDtcclxuICAgIGZvbnQtc2l6ZTogMTJweDtcclxuICAgIGxpbmUtaGVpZ2h0OiAxMnB4O1xyXG4gIH1cclxuICBzcGFuLkdBLW1lYXN1cmU6aG92ZXIge1xyXG4gICAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0taW50ZXJhY3RpdmUtYWNjZW50KTtcclxuICB9XHJcblxyXG4gIC5DQy1pdGVtIHtcclxuICAgIHBhZGRpbmctbGVmdDogMzBweDtcclxuICAgIGZvbnQtd2VpZ2h0OiA2MDA7XHJcbiAgfVxyXG5cclxuXHJcbiAgLnRvcC1yb3cgPiBzcGFuICsgc3BhbiB7XHJcbiAgICBmbG9hdDogcmlnaHQ7XHJcbiAgfVxyXG5cclxuXHJcbjwvc3R5bGU+XHJcbiIsICI8c2NyaXB0IGxhbmc9XCJ0c1wiPlxyXG4gIGltcG9ydCB0eXBlIHsgQXBwIH0gZnJvbSAnb2JzaWRpYW4nXHJcbiAgaW1wb3J0IHsgaG92ZXJQcmV2aWV3LCBpc0xpbmtlZCB9IGZyb20gJ29ic2lkaWFuLWNvbW11bml0eS1saWInXHJcbiAgaW1wb3J0IHR5cGUgQW5hbHlzaXNWaWV3IGZyb20gJ3NyYy9BbmFseXNpc1ZpZXcnXHJcbiAgaW1wb3J0IHsgQU5BTFlTSVNfVFlQRVMsIElDT04sIE1FQVNVUkUsIE5PREUgfSBmcm9tICdzcmMvQ29uc3RhbnRzJ1xyXG4gIGltcG9ydCB0eXBlIHtcclxuICAgIENvbW11bml0aWVzLFxyXG4gICAgR3JhcGhBbmFseXNpc1NldHRpbmdzLFxyXG4gICAgU3VidHlwZSxcclxuICB9IGZyb20gJ3NyYy9JbnRlcmZhY2VzJ1xyXG4gIGltcG9ydCB0eXBlIEdyYXBoQW5hbHlzaXNQbHVnaW4gZnJvbSAnc3JjL21haW4nXHJcbiAgaW1wb3J0IHtcclxuICAgIGNsYXNzRXh0LFxyXG4gICAgY2xhc3NMaW5rZWQsXHJcbiAgICBjbGFzc1Jlc29sdmVkLFxyXG4gICAgZ2V0SW1nQnVmZmVyUHJvbWlzZSxcclxuICAgIGlzSW1nLFxyXG4gICAgb3Blbk1lbnUsXHJcbiAgICBvcGVuT3JTd2l0Y2gsXHJcbiAgICBwcmVzZW50UGF0aCxcclxuICB9IGZyb20gJ3NyYy9VdGlsaXR5J1xyXG4gIGltcG9ydCB7IG9uTW91bnQgfSBmcm9tICdzdmVsdGUnXHJcbiAgaW1wb3J0IEZhTGluayBmcm9tICdzdmVsdGUtaWNvbnMvZmEvRmFMaW5rLnN2ZWx0ZSdcclxuICBpbXBvcnQgSW5maW5pdGVTY3JvbGwgZnJvbSAnc3ZlbHRlLWluZmluaXRlLXNjcm9sbCdcclxuICBpbXBvcnQgRXh0ZW5zaW9uSWNvbiBmcm9tICcuL0V4dGVuc2lvbkljb24uc3ZlbHRlJ1xyXG4gIGltcG9ydCBJbWdUaHVtYm5haWwgZnJvbSAnLi9JbWdUaHVtYm5haWwuc3ZlbHRlJ1xyXG4gIGltcG9ydCBTdWJ0eXBlT3B0aW9ucyBmcm9tICcuL1N1YnR5cGVPcHRpb25zLnN2ZWx0ZSdcclxuXHJcbiAgZXhwb3J0IGxldCBhcHA6IEFwcFxyXG4gIGV4cG9ydCBsZXQgcGx1Z2luOiBHcmFwaEFuYWx5c2lzUGx1Z2luXHJcbiAgZXhwb3J0IGxldCBzZXR0aW5nczogR3JhcGhBbmFseXNpc1NldHRpbmdzXHJcbiAgZXhwb3J0IGxldCB2aWV3OiBBbmFseXNpc1ZpZXdcclxuICBleHBvcnQgbGV0IGN1cnJTdWJ0eXBlOiBTdWJ0eXBlXHJcblxyXG4gIGludGVyZmFjZSBDb21wb25lbnRSZXN1bHRzIHtcclxuICAgIGxhYmVsOiBzdHJpbmdcclxuICAgIGNvbW06IHN0cmluZ1tdXHJcbiAgfVxyXG5cclxuICBsZXQgeyByZXNvbHZlZExpbmtzIH0gPSBhcHAubWV0YWRhdGFDYWNoZVxyXG5cclxuICAkOiBjdXJyU3VidHlwZUluZm8gPSBBTkFMWVNJU19UWVBFUy5maW5kKChzdWIpID0+IHN1Yi5zdWJ0eXBlID09PSBjdXJyU3VidHlwZSlcclxuICBsZXQgYXNjT3JkZXIgPSBmYWxzZVxyXG4gIGxldCBzaXplID0gNTBcclxuICBsZXQgY3VycmVudF9jb21wb25lbnQ6IEhUTUxFbGVtZW50XHJcbiAgbGV0IG5ld0JhdGNoOiBDb21wb25lbnRSZXN1bHRzW10gPSBbXVxyXG4gIGxldCB2aXNpYmxlRGF0YTogQ29tcG9uZW50UmVzdWx0c1tdID0gW11cclxuICBsZXQgcGFnZSA9IDBcclxuICBsZXQgYmxvY2tTd2l0Y2ggPSBmYWxzZVxyXG5cclxuICBsZXQgY3VyckZpbGUgPSBhcHAud29ya3NwYWNlLmdldEFjdGl2ZUZpbGUoKVxyXG4gICQ6IGN1cnJOb2RlID0gY3VyckZpbGU/LnBhdGhcclxuICBhcHAud29ya3NwYWNlLm9uKCdhY3RpdmUtbGVhZi1jaGFuZ2UnLCAoKSA9PiB7XHJcbiAgICBibG9ja1N3aXRjaCA9IHRydWVcclxuICAgIHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICBibG9ja1N3aXRjaCA9IGZhbHNlXHJcbiAgICAgIGN1cnJGaWxlID0gYXBwLndvcmtzcGFjZS5nZXRBY3RpdmVGaWxlKClcclxuICAgIH0sIDEwMClcclxuICAgIG5ld0JhdGNoID0gW11cclxuICB9KVxyXG5cclxuICBsZXQgaXRzID0gMjBcclxuICBjb25zdCBpdGVyYXRpb25zQXJyID0gQXJyYXkoNTApXHJcbiAgICAuZmlsbCgwKVxyXG4gICAgLm1hcCgoaSwgaikgPT4gaiArIDEpXHJcblxyXG4gICQ6IHByb21pc2VTb3J0ZWRSZXN1bHRzID0gIXBsdWdpbi5nXHJcbiAgICA/IG51bGxcclxuICAgIDogcGx1Z2luLmcuYWxnc1tjdXJyU3VidHlwZV0oJycsIHsgaXRlcmF0aW9uczogaXRzIH0pXHJcbiAgICAgICAgLnRoZW4oKGNvbW1zOiBDb21tdW5pdGllcykgPT4ge1xyXG4gICAgICAgICAgY29uc3QgZ3JlYXRlciA9IGFzY09yZGVyID8gMSA6IC0xXHJcbiAgICAgICAgICBjb25zdCBsZXNzZXIgPSBhc2NPcmRlciA/IC0xIDogMVxyXG5cclxuICAgICAgICAgIGNvbnN0IGNvbXBvbmVudFJlc3VsdHM6IENvbXBvbmVudFJlc3VsdHNbXSA9IFtdXHJcbiAgICAgICAgICBPYmplY3Qua2V5cyhjb21tcykuZm9yRWFjaCgobGFiZWwpID0+IHtcclxuICAgICAgICAgICAgbGV0IGNvbW0gPSBjb21tc1tsYWJlbF1cclxuICAgICAgICAgICAgaWYgKGNvbW0ubGVuZ3RoID4gMSkge1xyXG4gICAgICAgICAgICAgIGNvbXBvbmVudFJlc3VsdHMucHVzaCh7XHJcbiAgICAgICAgICAgICAgICBsYWJlbCxcclxuICAgICAgICAgICAgICAgIGNvbW0sXHJcbiAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfSlcclxuICAgICAgICAgIGNvbXBvbmVudFJlc3VsdHMuc29ydCgoYSwgYikgPT5cclxuICAgICAgICAgICAgYS5jb21tLmxlbmd0aCA+IGIuY29tbS5sZW5ndGggPyBncmVhdGVyIDogbGVzc2VyXHJcbiAgICAgICAgICApXHJcbiAgICAgICAgICByZXR1cm4gY29tcG9uZW50UmVzdWx0c1xyXG4gICAgICAgIH0pXHJcbiAgICAgICAgLnRoZW4oKHJlcykgPT4ge1xyXG4gICAgICAgICAgbmV3QmF0Y2ggPSByZXMuc2xpY2UoMCwgc2l6ZSlcclxuICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgICAgICBibG9ja1N3aXRjaCA9IGZhbHNlXHJcbiAgICAgICAgICB9LCAxMDApXHJcbiAgICAgICAgICByZXR1cm4gcmVzXHJcbiAgICAgICAgfSlcclxuXHJcbiAgJDogdmlzaWJsZURhdGEgPSBbLi4udmlzaWJsZURhdGEsIC4uLm5ld0JhdGNoXVxyXG5cclxuICBvbk1vdW50KCgpID0+IHtcclxuICAgIGN1cnJGaWxlID0gYXBwLndvcmtzcGFjZS5nZXRBY3RpdmVGaWxlKClcclxuICB9KVxyXG48L3NjcmlwdD5cclxuXHJcbjxkaXYgY2xhc3M9XCJHQS1DQ3NcIiBiaW5kOnRoaXM9e2N1cnJlbnRfY29tcG9uZW50fT5cclxuICA8ZGl2PlxyXG4gICAgPHNwYW4+XHJcbiAgICAgIDxTdWJ0eXBlT3B0aW9uc1xyXG4gICAgICAgIGJpbmQ6Y3VyclN1YnR5cGVJbmZvXHJcbiAgICAgICAgYmluZDphc2NPcmRlclxyXG4gICAgICAgIGJpbmQ6YmxvY2tTd2l0Y2hcclxuICAgICAgICBiaW5kOm5ld0JhdGNoXHJcbiAgICAgICAgYmluZDp2aXNpYmxlRGF0YVxyXG4gICAgICAgIGJpbmQ6cHJvbWlzZVNvcnRlZFJlc3VsdHNcclxuICAgICAgICBiaW5kOnBhZ2VcclxuICAgICAgICB7cGx1Z2lufVxyXG4gICAgICAgIHt2aWV3fVxyXG4gICAgICAgIHthcHB9XHJcbiAgICAgIC8+XHJcblxyXG4gICAgICA8bGFiZWwgZm9yPVwiaXRlcmF0aW9uc1wiPkl0ZXJhdGlvbnM6IDwvbGFiZWw+XHJcbiAgICAgIDxpbnB1dFxyXG4gICAgICAgIG5hbWU9XCJpdGVyYXRpb25zXCJcclxuICAgICAgICB0eXBlPVwicmFuZ2VcIlxyXG4gICAgICAgIG1pbj1cIjFcIlxyXG4gICAgICAgIG1heD1cIjMwXCJcclxuICAgICAgICB2YWx1ZT17aXRzfVxyXG4gICAgICAgIG9uOmNoYW5nZT17KGUpID0+IHtcclxuICAgICAgICAgIGNvbnN0IHZhbHVlID0gTnVtYmVyLnBhcnNlSW50KGUudGFyZ2V0LnZhbHVlKVxyXG4gICAgICAgICAgYmxvY2tTd2l0Y2ggPSB0cnVlXHJcbiAgICAgICAgICB2aXNpYmxlRGF0YSA9IFtdXHJcbiAgICAgICAgICBwcm9taXNlU29ydGVkUmVzdWx0cyA9IG51bGxcclxuICAgICAgICAgIHBhZ2UgPSAwXHJcbiAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgICAgICAgYmxvY2tTd2l0Y2ggPSBmYWxzZVxyXG4gICAgICAgICAgfSwgMTAwKVxyXG4gICAgICAgICAgbmV3QmF0Y2ggPSBbXVxyXG5cclxuICAgICAgICAgIGl0cyA9IHZhbHVlXHJcbiAgICAgICAgfX1cclxuICAgICAgLz5cclxuICAgIDwvc3Bhbj5cclxuICA8L2Rpdj5cclxuICB7I2lmIHByb21pc2VTb3J0ZWRSZXN1bHRzfVxyXG4gICAgeyNhd2FpdCBwcm9taXNlU29ydGVkUmVzdWx0cyB0aGVuIHNvcnRlZFJlc3VsdHN9XHJcbiAgICAgIHsja2V5IHNvcnRlZFJlc3VsdHN9XHJcbiAgICAgICAgeyNlYWNoIHZpc2libGVEYXRhIGFzIGNvbW19XHJcbiAgICAgICAgICA8ZGl2IGNsYXNzPVwiR0EtQ0NcIj5cclxuICAgICAgICAgICAgPGRldGFpbHMgY2xhc3M9XCJ0cmVlLWl0ZW0tc2VsZlwiPlxyXG4gICAgICAgICAgICAgIDxzdW1tYXJ5XHJcbiAgICAgICAgICAgICAgICBjbGFzcz1cInRyZWUtaXRlbS1pbm5lclwiXHJcbiAgICAgICAgICAgICAgICBvbjpjb250ZXh0bWVudT17KGUpID0+XHJcbiAgICAgICAgICAgICAgICAgIG9wZW5NZW51KGUsIGFwcCwgeyB0b0NvcHk6IGNvbW0uY29tbS5qb2luKCdcXG4nKSB9KX1cclxuICAgICAgICAgICAgICA+XHJcbiAgICAgICAgICAgICAgICA8c3BhblxyXG4gICAgICAgICAgICAgICAgICBjbGFzcz1cInRvcC1yb3cgXHJcbiAgICAgICAgICAgICAgICAgIHtjb21tLmNvbW0uaW5jbHVkZXMoY3Vyck5vZGUpID8gJ2N1cnJDb21tJyA6ICcnfVwiXHJcbiAgICAgICAgICAgICAgICA+XHJcbiAgICAgICAgICAgICAgICAgIDxzcGFuPlxyXG4gICAgICAgICAgICAgICAgICAgIDwhLS0gVW5lY2Vzc2FyeSBzcGFuPyAtLT5cclxuICAgICAgICAgICAgICAgICAgICB7cHJlc2VudFBhdGgoY29tbS5sYWJlbCl9XHJcbiAgICAgICAgICAgICAgICAgIDwvc3Bhbj5cclxuICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9e01FQVNVUkV9Pntjb21tLmNvbW0ubGVuZ3RofTwvc3Bhbj5cclxuICAgICAgICAgICAgICAgIDwvc3Bhbj5cclxuICAgICAgICAgICAgICA8L3N1bW1hcnk+XHJcbiAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cIkdBLWRldGFpbHMgXCI+XHJcbiAgICAgICAgICAgICAgICB7I2VhY2ggY29tbS5jb21tIGFzIG1lbWJlcn1cclxuICAgICAgICAgICAgICAgICAgPGRpdlxyXG4gICAgICAgICAgICAgICAgICAgIGNsYXNzPVwiXHJcbiAgICAgICAgICAgICAgICAgICAge05PREV9IFxyXG4gICAgICAgICAgICAgICAgICAgIHtjbGFzc0xpbmtlZChyZXNvbHZlZExpbmtzLCBjb21tLmxhYmVsLCBtZW1iZXIpfVxyXG4gICAgICAgICAgICAgICAgICAgIHtjbGFzc1Jlc29sdmVkKGFwcCwgbWVtYmVyKX0gXHJcbiAgICAgICAgICAgICAgICAgICAge2NsYXNzRXh0KG1lbWJlcil9XHJcbiAgICAgICAgICAgICAgICAgICAgICBcIlxyXG4gICAgICAgICAgICAgICAgICAgIG9uOmNsaWNrPXthc3luYyAoZSkgPT4gYXdhaXQgb3Blbk9yU3dpdGNoKGFwcCwgbWVtYmVyLCBlKX1cclxuICAgICAgICAgICAgICAgICAgICBvbjptb3VzZW92ZXI9eyhlKSA9PiBob3ZlclByZXZpZXcoZSwgdmlldywgbWVtYmVyKX1cclxuICAgICAgICAgICAgICAgICAgPlxyXG4gICAgICAgICAgICAgICAgICAgIHsjaWYgaXNMaW5rZWQocmVzb2x2ZWRMaW5rcywgY29tbS5sYWJlbCwgbWVtYmVyLCBmYWxzZSl9XHJcbiAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz17SUNPTn0+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxGYUxpbmsgLz5cclxuICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj5cclxuICAgICAgICAgICAgICAgICAgICB7L2lmfVxyXG4gICAgICAgICAgICAgICAgICAgIDxFeHRlbnNpb25JY29uIHBhdGg9e21lbWJlcn0gLz5cclxuICAgICAgICAgICAgICAgICAgICA8c3BhblxyXG4gICAgICAgICAgICAgICAgICAgICAgY2xhc3M9XCJpbnRlcm5hbC1saW5rIHtjdXJyTm9kZSA9PT0gbWVtYmVyXHJcbiAgICAgICAgICAgICAgICAgICAgICAgID8gJ2N1cnJOb2RlJ1xyXG4gICAgICAgICAgICAgICAgICAgICAgICA6ICcnfVwiPntwcmVzZW50UGF0aChtZW1iZXIpfTwvc3BhblxyXG4gICAgICAgICAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICAgICAgICB7I2lmIHBsdWdpbi5zZXR0aW5ncy5zaG93SW1nVGh1bWJuYWlscyAmJiBpc0ltZyhtZW1iZXIpfVxyXG4gICAgICAgICAgICAgICAgICAgICAgPEltZ1RodW1ibmFpbCBpbWc9e2dldEltZ0J1ZmZlclByb21pc2UoYXBwLCBtZW1iZXIpfSAvPlxyXG4gICAgICAgICAgICAgICAgICAgIHsvaWZ9XHJcbiAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgey9lYWNofVxyXG4gICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICA8L2RldGFpbHM+XHJcbiAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICB7L2VhY2h9XHJcblxyXG4gICAgICAgIDxJbmZpbml0ZVNjcm9sbFxyXG4gICAgICAgICAgaGFzTW9yZT17c29ydGVkUmVzdWx0cy5sZW5ndGggPiB2aXNpYmxlRGF0YS5sZW5ndGh9XHJcbiAgICAgICAgICB0aHJlc2hvbGQ9ezEwMH1cclxuICAgICAgICAgIGVsZW1lbnRTY3JvbGw9e2N1cnJlbnRfY29tcG9uZW50LnBhcmVudE5vZGV9XHJcbiAgICAgICAgICBvbjpsb2FkTW9yZT17KCkgPT4ge1xyXG4gICAgICAgICAgICBpZiAoIWJsb2NrU3dpdGNoKSB7XHJcbiAgICAgICAgICAgICAgcGFnZSsrXHJcbiAgICAgICAgICAgICAgbmV3QmF0Y2ggPSBzb3J0ZWRSZXN1bHRzLnNsaWNlKHNpemUgKiBwYWdlLCBzaXplICogKHBhZ2UgKyAxKSAtIDEpXHJcbiAgICAgICAgICAgICAgY29uc29sZS5sb2coeyBuZXdCYXRjaCB9KVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9fVxyXG4gICAgICAgIC8+XHJcbiAgICAgICAge3Zpc2libGVEYXRhLmxlbmd0aH0gLyB7c29ydGVkUmVzdWx0cy5sZW5ndGh9XHJcbiAgICAgIHsva2V5fVxyXG4gICAgey9hd2FpdH1cclxuICB7L2lmfVxyXG48L2Rpdj5cclxuXHJcbjxzdHlsZT5cclxuICAuR0EtQ0NzIHtcclxuICAgIGRpc3BsYXk6IGZsZXg7XHJcbiAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xyXG4gICAgcGFkZGluZy1sZWZ0OiAxMHB4O1xyXG4gIH1cclxuXHJcbiAgLmlzLXVucmVzb2x2ZWQge1xyXG4gICAgY29sb3I6IHZhcigtLXRleHQtbXV0ZWQpO1xyXG4gIH1cclxuICAvKiAuR0EtQ0Mge1xyXG4gICAgICAgIGJvcmRlcjogMXB4IHNvbGlkIHZhcigtLWJhY2tncm91bmQtbW9kaWZpZXItYm9yZGVyKTtcclxuICAgICAgICBib3JkZXItcmFkaXVzOiAzcHg7IFxyXG4gICAgICAgIHBhZGRpbmc6IDVweDsgXHJcbiAgICAgIH0gKi9cclxuXHJcbiAgLkdBLWRldGFpbHMge1xyXG4gICAgcGFkZGluZy1sZWZ0OiAyMHB4O1xyXG4gIH1cclxuICAuR0Etbm9kZSxcclxuICAuQ0Mtc2VudGVuY2Uge1xyXG4gICAgZm9udC1zaXplOiB2YXIoLS1mb250LXNpemUtc2Vjb25kYXJ5KTtcclxuICAgIGJvcmRlcjogMXB4IHNvbGlkIHRyYW5zcGFyZW50O1xyXG4gICAgYm9yZGVyLXJhZGl1czogNXB4O1xyXG4gIH1cclxuXHJcbiAgLkNDLXNlbnRlbmNlOmhvdmVyIHtcclxuICAgIGJhY2tncm91bmQtY29sb3I6IHZhcigtLWJhY2tncm91bmQtc2Vjb25kYXJ5LWFsdCk7XHJcbiAgfVxyXG5cclxuICAuQ0MtaXRlbSB7XHJcbiAgICBwYWRkaW5nLWxlZnQ6IDMwcHg7XHJcbiAgICBmb250LXdlaWdodDogNjAwO1xyXG4gIH1cclxuXHJcbiAgLkNDLXNlbnRlbmNlIHtcclxuICAgIHBhZGRpbmctbGVmdDogNDBweDtcclxuICAgIGNvbG9yOiB2YXIoLS10ZXh0LW11dGVkKTtcclxuICB9XHJcbiAgLnRvcC1yb3cgc3BhbiArIHNwYW4ge1xyXG4gICAgZmxvYXQ6IHJpZ2h0O1xyXG4gIH1cclxuXHJcbiAgc3Bhbi5HQS1tZWFzdXJlIHtcclxuICAgIGJhY2tncm91bmQtY29sb3I6IHZhcigtLWJhY2tncm91bmQtc2Vjb25kYXJ5LWFsdCk7XHJcbiAgICBwYWRkaW5nOiAycHggNHB4O1xyXG4gICAgYm9yZGVyLXJhZGl1czogM3B4O1xyXG4gICAgZm9udC1zaXplOiAxMnB4O1xyXG4gICAgbGluZS1oZWlnaHQ6IDEycHg7XHJcbiAgfVxyXG4gIHNwYW4uR0EtbWVhc3VyZTpob3ZlciB7XHJcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1pbnRlcmFjdGl2ZS1hY2NlbnQpO1xyXG4gIH1cclxuXHJcbiAgLmN1cnJDb21tIHtcclxuICAgIGNvbG9yOiB2YXIoLS10ZXh0LWFjY2VudCk7XHJcbiAgfVxyXG5cclxuICAuY3Vyck5vZGUge1xyXG4gICAgZm9udC13ZWlnaHQ6IGJvbGQ7XHJcbiAgfVxyXG48L3N0eWxlPlxyXG4iLCAiPHNjcmlwdD5cbiAgICAgICAgaW1wb3J0IEljb25CYXNlIGZyb20gJy4uL2NvbXBvbmVudHMvSWNvbkJhc2Uuc3ZlbHRlJztcbiAgICAgICAgPC9zY3JpcHQ+XG4gICAgICAgIDxJY29uQmFzZSB2aWV3Qm94PVwiMCAwIDQ5NiA1MTJcIiB7Li4uJCRwcm9wc30+XG4gICAgICAgICAgPHBhdGggZD1cIk0yNDggOEMxMTEuMDMgOCAwIDExOS4wMyAwIDI1NnMxMTEuMDMgMjQ4IDI0OCAyNDggMjQ4LTExMS4wMyAyNDgtMjQ4UzM4NC45NyA4IDI0OCA4em0xNjAgMjE1LjV2Ni45M2MwIDUuODctMy4zMiAxMS4yNC04LjU3IDEzLjg2bC0xNS4zOSA3LjdhMTUuNDg1IDE1LjQ4NSAwIDAgMS0xNS41My0uOTdsLTE4LjIxLTEyLjE0YTE1LjUyIDE1LjUyIDAgMCAwLTEzLjUtMS44MWwtMi42NS44OGMtOS43IDMuMjMtMTMuNjYgMTQuNzktNy45OSAyMy4zbDEzLjI0IDE5Ljg2YzIuODcgNC4zMSA3LjcxIDYuOSAxMi44OSA2LjloOC4yMWM4LjU2IDAgMTUuNSA2Ljk0IDE1LjUgMTUuNXYxMS4zNGMwIDMuMzUtMS4wOSA2LjYyLTMuMSA5LjNsLTE4Ljc0IDI0Ljk4Yy0xLjQyIDEuOS0yLjM5IDQuMS0yLjgzIDYuNDNsLTQuMyAyMi44M2MtLjYyIDMuMjktMi4yOSA2LjI5LTQuNzYgOC41NmExNTkuNjA4IDE1OS42MDggMCAwIDAtMjUgMjkuMTZsLTEzLjAzIDE5LjU1YTI3Ljc1NiAyNy43NTYgMCAwIDEtMjMuMDkgMTIuMzZjLTEwLjUxIDAtMjAuMTItNS45NC0yNC44Mi0xNS4zNGE3OC45MDIgNzguOTAyIDAgMCAxLTguMzMtMzUuMjlWMzY3LjVjMC04LjU2LTYuOTQtMTUuNS0xNS41LTE1LjVoLTI1Ljg4Yy0xNC40OSAwLTI4LjM4LTUuNzYtMzguNjMtMTZhNTQuNjU5IDU0LjY1OSAwIDAgMS0xNi0zOC42M3YtMTQuMDZjMC0xNy4xOSA4LjEtMzMuMzggMjEuODUtNDMuN2wyNy41OC0yMC42OWE1NC42NjMgNTQuNjYzIDAgMCAxIDMyLjc4LTEwLjkzaC44OWM4LjQ4IDAgMTYuODUgMS45NyAyNC40MyA1Ljc3bDE0LjcyIDcuMzZjMy42OCAxLjg0IDcuOTMgMi4xNCAxMS44My44NGw0Ny4zMS0xNS43N2M2LjMzLTIuMTEgMTAuNi04LjAzIDEwLjYtMTQuNyAwLTguNTYtNi45NC0xNS41LTE1LjUtMTUuNWgtMTAuMDljLTQuMTEgMC04LjA1LTEuNjMtMTAuOTYtNC41NGwtNi45Mi02LjkyYTE1LjQ5MyAxNS40OTMgMCAwIDAtMTAuOTYtNC41NEgxOTkuNWMtOC41NiAwLTE1LjUtNi45NC0xNS41LTE1LjV2LTQuNGMwLTcuMTEgNC44NC0xMy4zMSAxMS43NC0xNS4wNGwxNC40NS0zLjYxYzMuNzQtLjk0IDctMy4yMyA5LjE0LTYuNDRsOC4wOC0xMi4xMWMyLjg3LTQuMzEgNy43MS02LjkgMTIuODktNi45aDI0LjIxYzguNTYgMCAxNS41LTYuOTQgMTUuNS0xNS41di0yMS43QzM1OS4yMyA3MS42MyA0MjIuODYgMTMxLjAyIDQ0MS45MyAyMDhINDIzLjVjLTguNTYgMC0xNS41IDYuOTQtMTUuNSAxNS41elwiIC8+XG4gICAgICAgIDwvSWNvbkJhc2U+XG4gICAgICAiLCAiPHNjcmlwdD5cbiAgICAgICAgaW1wb3J0IEljb25CYXNlIGZyb20gJy4uL2NvbXBvbmVudHMvSWNvbkJhc2Uuc3ZlbHRlJztcbiAgICAgICAgPC9zY3JpcHQ+XG4gICAgICAgIDxJY29uQmFzZSB2aWV3Qm94PVwiMCAwIDUxMiA1MTJcIiB7Li4uJCRwcm9wc30+XG4gICAgICAgICAgPHBhdGggZD1cIk00MzEgMzIwLjZjMC00LjQgMS4yLTguNiAzLjMtMTIuMi42LTEuMSAxLjQtMi4xIDIuMS0zLjEgMTcuNC0yNiAyNy42LTU3LjEgMjcuNi05MC4zLjMtOTIuMi03Ny41LTE2Ny0xNzMuNy0xNjctODMuOSAwLTE1My45IDU3LjEtMTcwLjMgMTMyLjktMi40IDExLjEtMy43IDIyLjQtMy43IDM0LjIgMCA5Mi4zIDc0LjggMTY5LjEgMTcxIDE2OS4xIDE1LjMgMCAzNS45LTQuNiA0Ny4yLTcuNyAxMS4zLTMuMSAyMi41LTcuMiAyNS40LTguMyAyLjktMS4xIDYuMS0xLjcgOS4zLTEuNyAzLjYgMCA3IC43IDEwLjEgMmw1Ni43IDIwLjFzMi40IDEgMy45IDFjNC40IDAgOC0zLjUgOC04IDAtMS0uNS0yLjctLjUtMi43TDQzMSAzMjAuNnpcIiAvPlxuPHBhdGggZD1cIk0zMTguNSAzOTIuNWMtMy42IDEtOC4yIDIuMS0xMy4yIDMuMi0xMC41IDIuMi0yMy45IDQuNS0zNCA0LjUtOTYuMiAwLTE3MS03Ni44LTE3MS0xNjkuMSAwLTYuNi43LTE1IDEuNS0yMS40LjYtNC4zIDEuMy04LjYgMi4zLTEyLjggMS00LjUgMi4yLTkgMy41LTEzLjRsLTggNy4xQzY2LjggMjE5LjIgNDggMjYwIDQ4IDMwMi41YzAgMjkuMyA4LjUgNTcuNSAyNC44IDgyIDIuMyAzLjUgMy42IDYuMiAzLjIgOC0uNCAxLjgtMTEuOSA2Mi0xMS45IDYyLS42IDIuOS41IDUuOCAyLjcgNy43IDEuNSAxLjIgMy4zIDEuOCA1LjEgMS44IDEgMCAyLS4yIDIuOS0uNmw1Ni4xLTIyLjFjMS44LS43IDMuNy0xLjEgNS43LTEuMSAwIDAgMi40LS4yIDYuMyAxLjMgMTguOSA3LjQgMzkuOCAxMiA2MC43IDEyIDQ2LjYgMCA5MC40LTIwLjEgMTIwLjEtNTUuMSAwIDAgMy4yLTQuNCA2LjktOS42LTMuNyAxLjMtNy45IDIuNi0xMi4xIDMuN3pcIiAvPlxuICAgICAgICA8L0ljb25CYXNlPlxuICAgICAgIiwgIjxzY3JpcHQgbGFuZz1cInRzXCI+XHJcbiAgaW1wb3J0IHR5cGUgQW5hbHlzaXNWaWV3IGZyb20gJ3NyYy9BbmFseXNpc1ZpZXcnXHJcbiAgaW1wb3J0IHsgQU5BTFlTSVNfVFlQRVMsIElDT04gfSBmcm9tICdzcmMvQ29uc3RhbnRzJ1xyXG4gIGltcG9ydCB0eXBlIHsgU3VidHlwZSB9IGZyb20gJ3NyYy9JbnRlcmZhY2VzJ1xyXG4gIGltcG9ydCBGYUdsb2JlQWZyaWNhIGZyb20gJ3N2ZWx0ZS1pY29ucy9mYS9GYUdsb2JlQWZyaWNhLnN2ZWx0ZSdcclxuICBpbXBvcnQgSW9Jb3NDaGF0YnViYmxlcyBmcm9tICdzdmVsdGUtaWNvbnMvaW8vSW9Jb3NDaGF0YnViYmxlcy5zdmVsdGUnXHJcblxyXG4gIGV4cG9ydCBsZXQgY3VyclN1YnR5cGU6IFN1YnR5cGVcclxuICBleHBvcnQgbGV0IHZpZXc6IEFuYWx5c2lzVmlld1xyXG48L3NjcmlwdD5cclxuXHJcbnsjaWYgdmlldy5wbHVnaW4uc2V0dGluZ3MuYWxnc1RvU2hvdy5sZW5ndGggPiAxfVxyXG4gIHsja2V5IHZpZXcucGx1Z2luLnNldHRpbmdzLmFsZ3NUb1Nob3d9XHJcbiAgICA8ZGl2XHJcbiAgICAgIGNsYXNzPVwic2Nyb2xsQ29udGFpbmVyXCJcclxuICAgICAgb246bW91c2VvdmVyPXtmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdGhpcy5hcmlhTGFiZWwgPSAnYFNoaWZ0ICsgU2Nyb2xsYCB0byBzY3JvbGwgc2lkZXdheXMnXHJcbiAgICAgIH19XHJcbiAgICA+XHJcbiAgICAgIDxkaXYgY2xhc3M9XCJjb250YWluZXJcIj5cclxuICAgICAgICB7I2VhY2ggQU5BTFlTSVNfVFlQRVMgYXMgc3VifVxyXG4gICAgICAgICAgeyNpZiB2aWV3LnBsdWdpbi5zZXR0aW5ncy5hbGdzVG9TaG93LmluY2x1ZGVzKHN1Yi5zdWJ0eXBlKX1cclxuICAgICAgICAgICAgPGJ1dHRvblxyXG4gICAgICAgICAgICAgIGNsYXNzPVwiaXRlbSBHQS1CdXR0b24ge2N1cnJTdWJ0eXBlID09PSBzdWIuc3VidHlwZVxyXG4gICAgICAgICAgICAgICAgPyAnY3VyclN1YnR5cGUnXHJcbiAgICAgICAgICAgICAgICA6ICcnfVwiXHJcbiAgICAgICAgICAgICAgb246Y2xpY2s9eygpID0+IHtcclxuICAgICAgICAgICAgICAgIGN1cnJTdWJ0eXBlID0gc3ViLnN1YnR5cGVcclxuICAgICAgICAgICAgICAgIHZpZXcuY3VyclN1YnR5cGUgPSBzdWIuc3VidHlwZVxyXG4gICAgICAgICAgICAgIH19XHJcbiAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICB7I2lmIHN1Yi5nbG9iYWx9XHJcbiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz17SUNPTn0+XHJcbiAgICAgICAgICAgICAgICAgIDxGYUdsb2JlQWZyaWNhIC8+XHJcbiAgICAgICAgICAgICAgICA8L3NwYW4+XHJcbiAgICAgICAgICAgICAgey9pZn1cclxuICAgICAgICAgICAgICB7I2lmIHN1Yi5ubHB9XHJcbiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz17SUNPTn0+XHJcbiAgICAgICAgICAgICAgICAgIDxJb0lvc0NoYXRidWJibGVzIC8+XHJcbiAgICAgICAgICAgICAgICA8L3NwYW4+XHJcbiAgICAgICAgICAgICAgey9pZn1cclxuICAgICAgICAgICAgICB7c3ViLnN1YnR5cGV9XHJcbiAgICAgICAgICAgIDwvYnV0dG9uPlxyXG4gICAgICAgICAgey9pZn1cclxuICAgICAgICB7L2VhY2h9XHJcbiAgICAgIDwvZGl2PlxyXG4gICAgPC9kaXY+XHJcbiAgey9rZXl9XHJcbnsvaWZ9XHJcblxyXG48c3R5bGU+XHJcbiAgLmNvbnRhaW5lciB7XHJcbiAgICBvdmVyZmxvdzogYXV0bztcclxuICAgIHdoaXRlLXNwYWNlOiBub3dyYXA7XHJcbiAgfVxyXG5cclxuICAuR0EtQnV0dG9uIHtcclxuICAgIHdpZHRoOiBmaXQtY29udGVudCAhaW1wb3J0YW50O1xyXG4gICAgcGFkZGluZzogOHB4IDVweCAhaW1wb3J0YW50O1xyXG4gICAgbWFyZ2luLXJpZ2h0OiAwcHg7XHJcbiAgfVxyXG5cclxuICAuaXRlbSB7XHJcbiAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XHJcbiAgICBib3JkZXI6IDFweCBzb2xpZCB0cmFuc3BhcmVudDtcclxuICAgIGJhY2tncm91bmQtY29sb3I6IHZhcigtLWJhY2tncm91bmQtcHJpbWFyeS1hbHQpO1xyXG4gICAgYm9yZGVyLXJhZGl1czogMTBweDtcclxuICAgIGNvbG9yOiB2YXIoLS10ZXh0LW5vcm1hbCk7XHJcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XHJcbiAgICBwYWRkaW5nOiAwcHggNHB4O1xyXG4gICAgbWFyZ2luOiAwcHggM3B4O1xyXG4gICAgd2lkdGg6IGZpdC1jb250ZW50O1xyXG4gICAgZm9udC1zaXplOiBzbWFsbDtcclxuICB9XHJcblxyXG4gIC5jdXJyU3VidHlwZSB7XHJcbiAgICBmb250LXdlaWdodDogODAwICFpbXBvcnRhbnQ7XHJcbiAgICBjb2xvcjogdmFyKC0tdGV4dC1hY2NlbnQpICFpbXBvcnRhbnQ7XHJcbiAgfVxyXG5cclxuICAuY29udGFpbmVyID4gYnV0dG9uOmxhc3QtY2hpbGQge1xyXG4gICAgbWFyZ2luLXJpZ2h0OiAxMHB4O1xyXG4gIH1cclxuICAuY29udGFpbmVyID4gYnV0dG9uOmZpcnN0LWNoaWxkIHtcclxuICAgIG1hcmdpbi1sZWZ0OiAxMHB4O1xyXG4gIH1cclxuXHJcbiAgLml0ZW06aG92ZXIge1xyXG4gICAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0taW50ZXJhY3RpdmUtYWNjZW50KTtcclxuICB9XHJcbjwvc3R5bGU+XHJcbiIsICI8c2NyaXB0IGxhbmc9XCJ0c1wiPlxyXG4gIGltcG9ydCB0eXBlIHsgQXBwIH0gZnJvbSAnb2JzaWRpYW4nXHJcbiAgaW1wb3J0IHsgaG92ZXJQcmV2aWV3LCBpc0luVmF1bHQsIGlzTGlua2VkIH0gZnJvbSAnb2JzaWRpYW4tY29tbXVuaXR5LWxpYidcclxuICBpbXBvcnQgdHlwZSBBbmFseXNpc1ZpZXcgZnJvbSAnc3JjL0FuYWx5c2lzVmlldydcclxuICBpbXBvcnQge1xyXG4gICAgQU5BTFlTSVNfVFlQRVMsXHJcbiAgICBJQ09OLFxyXG4gICAgTElOS0VELFxyXG4gICAgTUVBU1VSRSxcclxuICAgIE5PVF9MSU5LRUQsXHJcbiAgfSBmcm9tICdzcmMvQ29uc3RhbnRzJ1xyXG4gIGltcG9ydCB0eXBlIHtcclxuICAgIEdyYXBoQW5hbHlzaXNTZXR0aW5ncyxcclxuICAgIFJlc3VsdE1hcCxcclxuICAgIFN1YnR5cGUsXHJcbiAgfSBmcm9tICdzcmMvSW50ZXJmYWNlcydcclxuICBpbXBvcnQgdHlwZSBHcmFwaEFuYWx5c2lzUGx1Z2luIGZyb20gJ3NyYy9tYWluJ1xyXG4gIGltcG9ydCB7XHJcbiAgICBjbGFzc0V4dCxcclxuICAgIGRyb3BQYXRoLFxyXG4gICAgZ2V0SW1nQnVmZmVyUHJvbWlzZSxcclxuICAgIGlzSW1nLFxyXG4gICAgb3Blbk1lbnUsXHJcbiAgICBvcGVuT3JTd2l0Y2gsXHJcbiAgICBwcmVzZW50UGF0aCxcclxuICB9IGZyb20gJ3NyYy9VdGlsaXR5J1xyXG4gIGltcG9ydCB7IG9uTW91bnQgfSBmcm9tICdzdmVsdGUnXHJcbiAgaW1wb3J0IEZhTGluayBmcm9tICdzdmVsdGUtaWNvbnMvZmEvRmFMaW5rLnN2ZWx0ZSdcclxuICBpbXBvcnQgSW5maW5pdGVTY3JvbGwgZnJvbSAnc3ZlbHRlLWluZmluaXRlLXNjcm9sbCdcclxuICBpbXBvcnQgRXh0ZW5zaW9uSWNvbiBmcm9tICcuL0V4dGVuc2lvbkljb24uc3ZlbHRlJ1xyXG4gIGltcG9ydCBJbWdUaHVtYm5haWwgZnJvbSAnLi9JbWdUaHVtYm5haWwuc3ZlbHRlJ1xyXG4gIGltcG9ydCBTdWJ0eXBlT3B0aW9ucyBmcm9tICcuL1N1YnR5cGVPcHRpb25zLnN2ZWx0ZSdcclxuXHJcbiAgZXhwb3J0IGxldCBhcHA6IEFwcFxyXG4gIGV4cG9ydCBsZXQgcGx1Z2luOiBHcmFwaEFuYWx5c2lzUGx1Z2luXHJcbiAgZXhwb3J0IGxldCBzZXR0aW5nczogR3JhcGhBbmFseXNpc1NldHRpbmdzXHJcbiAgZXhwb3J0IGxldCB2aWV3OiBBbmFseXNpc1ZpZXdcclxuICBleHBvcnQgbGV0IGN1cnJTdWJ0eXBlOiBTdWJ0eXBlXHJcblxyXG4gICQ6IGN1cnJTdWJ0eXBlSW5mbyA9IEFOQUxZU0lTX1RZUEVTLmZpbmQoKHN1YikgPT4gc3ViLnN1YnR5cGUgPT09IGN1cnJTdWJ0eXBlKVxyXG4gIGxldCBmcm96ZW4gPSBmYWxzZVxyXG4gIGxldCBhc2NPcmRlciA9IGZhbHNlXHJcbiAgbGV0IHsgbm9JbmZpbml0eSwgbm9aZXJvIH0gPSBzZXR0aW5nc1xyXG4gIGxldCBjdXJyRmlsZSA9IGFwcC53b3Jrc3BhY2UuZ2V0QWN0aXZlRmlsZSgpXHJcblxyXG4gIGludGVyZmFjZSBDb21wb25lbnRSZXN1bHRzIHtcclxuICAgIG1lYXN1cmU6IG51bWJlclxyXG4gICAgbGlua2VkOiBib29sZWFuXHJcbiAgICB0bzogc3RyaW5nXHJcbiAgICByZXNvbHZlZDogYm9vbGVhblxyXG4gICAgZXh0cmE6IHN0cmluZ1tdXHJcbiAgICBpbWc6IFByb21pc2U8QXJyYXlCdWZmZXI+IHwgbnVsbFxyXG4gIH1cclxuXHJcbiAgJDogY3Vyck5vZGUgPSBjdXJyRmlsZT8ucGF0aFxyXG4gIGxldCBzaXplID0gNTBcclxuICBsZXQgY3VycmVudF9jb21wb25lbnQ6IEhUTUxFbGVtZW50XHJcbiAgbGV0IG5ld0JhdGNoOiBDb21wb25lbnRSZXN1bHRzW10gPSBbXVxyXG4gIGxldCB2aXNpYmxlRGF0YTogQ29tcG9uZW50UmVzdWx0c1tdID0gW11cclxuICBsZXQgcGFnZSA9IDBcclxuICBsZXQgYmxvY2tTd2l0Y2ggPSBmYWxzZVxyXG5cclxuICBsZXQgeyByZXNvbHZlZExpbmtzIH0gPSBhcHAubWV0YWRhdGFDYWNoZVxyXG5cclxuICBhcHAud29ya3NwYWNlLm9uKCdhY3RpdmUtbGVhZi1jaGFuZ2UnLCAoKSA9PiB7XHJcbiAgICBpZiAoIWZyb3plbiAmJiAhY3VyclN1YnR5cGVJbmZvLmdsb2JhbCkge1xyXG4gICAgICBibG9ja1N3aXRjaCA9IHRydWVcclxuICAgICAgbmV3QmF0Y2ggPSBbXVxyXG4gICAgICB2aXNpYmxlRGF0YSA9IFtdXHJcbiAgICAgIHByb21pc2VTb3J0ZWRSZXN1bHRzID0gbnVsbFxyXG4gICAgICBwYWdlID0gMFxyXG5cclxuICAgICAgc2V0VGltZW91dCgoKSA9PiAoY3VyckZpbGUgPSBhcHAud29ya3NwYWNlLmdldEFjdGl2ZUZpbGUoKSksIDEwMClcclxuICAgIH1cclxuICB9KVxyXG5cclxuICBvbk1vdW50KCgpID0+IHtcclxuICAgIGN1cnJOb2RlID0gY3VyckZpbGU/LnBhdGhcclxuICB9KVxyXG5cclxuICAkOiBwcm9taXNlU29ydGVkUmVzdWx0cyA9XHJcbiAgICAhcGx1Z2luLmcgfHwgIWN1cnJOb2RlXHJcbiAgICAgID8gbnVsbFxyXG4gICAgICA6IHBsdWdpbi5nLmFsZ3NbY3VyclN1YnR5cGVdKGN1cnJOb2RlKVxyXG4gICAgICAgICAgLnRoZW4oKHJlc3VsdHM6IFJlc3VsdE1hcCkgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCBncmVhdGVyID0gYXNjT3JkZXIgPyAxIDogLTFcclxuICAgICAgICAgICAgY29uc3QgbGVzc2VyID0gYXNjT3JkZXIgPyAtMSA6IDFcclxuICAgICAgICAgICAgY29uc3QgY29tcG9uZW50UmVzdWx0czogQ29tcG9uZW50UmVzdWx0c1tdID0gW11cclxuXHJcbiAgICAgICAgICAgIHBsdWdpbi5nLmZvckVhY2hOb2RlKCh0bykgPT4ge1xyXG4gICAgICAgICAgICAgIGNvbnN0IHsgbWVhc3VyZSwgZXh0cmEgfSA9IChyZXN1bHRzIGFzIFJlc3VsdE1hcClbdG9dXHJcbiAgICAgICAgICAgICAgaWYgKFxyXG4gICAgICAgICAgICAgICAgIShub0luZmluaXR5ICYmIG1lYXN1cmUgPT09IEluZmluaXR5KSAmJlxyXG4gICAgICAgICAgICAgICAgIShub1plcm8gJiYgbWVhc3VyZSA9PT0gMClcclxuICAgICAgICAgICAgICApIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHJlc29sdmVkID0gIXRvLmVuZHNXaXRoKCcubWQnKSB8fCBpc0luVmF1bHQoYXBwLCB0bylcclxuICAgICAgICAgICAgICAgIGNvbnN0IGxpbmtlZCA9IGlzTGlua2VkKHJlc29sdmVkTGlua3MsIGN1cnJOb2RlLCB0bywgZmFsc2UpXHJcbiAgICAgICAgICAgICAgICBjb25zdCBpbWcgPVxyXG4gICAgICAgICAgICAgICAgICBwbHVnaW4uc2V0dGluZ3Muc2hvd0ltZ1RodW1ibmFpbHMgJiYgaXNJbWcodG8pXHJcbiAgICAgICAgICAgICAgICAgICAgPyBnZXRJbWdCdWZmZXJQcm9taXNlKGFwcCwgdG8pXHJcbiAgICAgICAgICAgICAgICAgICAgOiBudWxsXHJcbiAgICAgICAgICAgICAgICBjb21wb25lbnRSZXN1bHRzLnB1c2goe1xyXG4gICAgICAgICAgICAgICAgICBtZWFzdXJlLFxyXG4gICAgICAgICAgICAgICAgICBsaW5rZWQsXHJcbiAgICAgICAgICAgICAgICAgIHRvLFxyXG4gICAgICAgICAgICAgICAgICByZXNvbHZlZCxcclxuICAgICAgICAgICAgICAgICAgZXh0cmEsXHJcbiAgICAgICAgICAgICAgICAgIGltZyxcclxuICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICBjb21wb25lbnRSZXN1bHRzLnNvcnQoKGEsIGIpID0+IHtcclxuICAgICAgICAgICAgICByZXR1cm4gYS5tZWFzdXJlID09PSBiLm1lYXN1cmVcclxuICAgICAgICAgICAgICAgID8gYS5leHRyYT8ubGVuZ3RoID4gYi5leHRyYT8ubGVuZ3RoXHJcbiAgICAgICAgICAgICAgICAgID8gZ3JlYXRlclxyXG4gICAgICAgICAgICAgICAgICA6IGxlc3NlclxyXG4gICAgICAgICAgICAgICAgOiBhLm1lYXN1cmUgPiBiLm1lYXN1cmVcclxuICAgICAgICAgICAgICAgID8gZ3JlYXRlclxyXG4gICAgICAgICAgICAgICAgOiBsZXNzZXJcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgcmV0dXJuIGNvbXBvbmVudFJlc3VsdHNcclxuICAgICAgICAgIH0pXHJcbiAgICAgICAgICAudGhlbigocmVzKSA9PiB7XHJcbiAgICAgICAgICAgIG5ld0JhdGNoID0gcmVzLnNsaWNlKDAsIHNpemUpXHJcbiAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgICAgICAgIGJsb2NrU3dpdGNoID0gZmFsc2VcclxuICAgICAgICAgICAgfSwgMTAwKVxyXG4gICAgICAgICAgICByZXR1cm4gcmVzXHJcbiAgICAgICAgICB9KVxyXG5cclxuICAkOiB2aXNpYmxlRGF0YSA9IFsuLi52aXNpYmxlRGF0YSwgLi4ubmV3QmF0Y2hdXHJcblxyXG4gIG9uTW91bnQoKCkgPT4ge1xyXG4gICAgY3VyckZpbGUgPSBhcHAud29ya3NwYWNlLmdldEFjdGl2ZUZpbGUoKVxyXG4gIH0pXHJcbjwvc2NyaXB0PlxyXG5cclxuPFN1YnR5cGVPcHRpb25zXHJcbiAgYmluZDpjdXJyU3VidHlwZUluZm9cclxuICBiaW5kOm5vWmVyb1xyXG4gIGJpbmQ6YXNjT3JkZXJcclxuICBiaW5kOmN1cnJGaWxlXHJcbiAgYmluZDpmcm96ZW5cclxuICB7YXBwfVxyXG4gIHtwbHVnaW59XHJcbiAge3ZpZXd9XHJcbiAgYmluZDpibG9ja1N3aXRjaFxyXG4gIGJpbmQ6bmV3QmF0Y2hcclxuICBiaW5kOnZpc2libGVEYXRhXHJcbiAgYmluZDpwcm9taXNlU29ydGVkUmVzdWx0c1xyXG4gIGJpbmQ6cGFnZVxyXG4vPlxyXG5cclxuPHRhYmxlIGNsYXNzPVwiR0EtdGFibGUgbWFya2Rvd24tcHJldmlldy12aWV3XCIgYmluZDp0aGlzPXtjdXJyZW50X2NvbXBvbmVudH0+XHJcbiAgPHRoZWFkPlxyXG4gICAgPHRyPlxyXG4gICAgICA8dGggc2NvcGU9XCJjb2xcIj5Ob3RlPC90aD5cclxuICAgICAgPHRoIHNjb3BlPVwiY29sXCI+VmFsdWU8L3RoPlxyXG4gICAgPC90cj5cclxuICA8L3RoZWFkPlxyXG4gIHsjaWYgcHJvbWlzZVNvcnRlZFJlc3VsdHN9XHJcbiAgICB7I2F3YWl0IHByb21pc2VTb3J0ZWRSZXN1bHRzIHRoZW4gc29ydGVkUmVzdWx0c31cclxuICAgICAgeyNrZXkgc29ydGVkUmVzdWx0c31cclxuICAgICAgICB7I2VhY2ggdmlzaWJsZURhdGEgYXMgbm9kZX1cclxuICAgICAgICAgIHsjaWYgKGN1cnJTdWJ0eXBlSW5mby5nbG9iYWwgfHwgbm9kZS50byAhPT0gY3Vyck5vZGUpICYmIG5vZGUgIT09IHVuZGVmaW5lZH1cclxuICAgICAgICAgICAgPCEtLSBzdmVsdGUtaWdub3JlIGExMXktdW5rbm93bi1hcmlhLWF0dHJpYnV0ZSAtLT5cclxuICAgICAgICAgICAgPHRyXHJcbiAgICAgICAgICAgICAgY2xhc3M9XCJ7bm9kZS5saW5rZWQgPyBMSU5LRUQgOiBOT1RfTElOS0VEfSBcclxuICAgICAgICAgICAge2NsYXNzRXh0KG5vZGUudG8pfVwiXHJcbiAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICA8dGRcclxuICAgICAgICAgICAgICAgIGFyaWEtbGFiZWw9e25vZGUuZXh0cmEubWFwKHByZXNlbnRQYXRoKS5qb2luKCdcXG4nKX1cclxuICAgICAgICAgICAgICAgIGFyaWEtbGFiZWwtcG9zaXRpb249XCJsZWZ0XCJcclxuICAgICAgICAgICAgICAgIG9uOmNsaWNrPXthc3luYyAoZSkgPT4gYXdhaXQgb3Blbk9yU3dpdGNoKGFwcCwgbm9kZS50bywgZSl9XHJcbiAgICAgICAgICAgICAgICBvbjpjb250ZXh0bWVudT17KGUpID0+IG9wZW5NZW51KGUsIGFwcCl9XHJcbiAgICAgICAgICAgICAgICBvbjptb3VzZW92ZXI9eyhlKSA9PiBob3ZlclByZXZpZXcoZSwgdmlldywgZHJvcFBhdGgobm9kZS50bykpfVxyXG4gICAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICAgIHsjaWYgbm9kZS5saW5rZWR9XHJcbiAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPXtJQ09OfT5cclxuICAgICAgICAgICAgICAgICAgICA8RmFMaW5rIC8+XHJcbiAgICAgICAgICAgICAgICAgIDwvc3Bhbj5cclxuICAgICAgICAgICAgICAgIHsvaWZ9XHJcblxyXG4gICAgICAgICAgICAgICAgPEV4dGVuc2lvbkljb24gcGF0aD17bm9kZS50b30gLz5cclxuXHJcbiAgICAgICAgICAgICAgICA8c3BhblxyXG4gICAgICAgICAgICAgICAgICBjbGFzcz1cImludGVybmFsLWxpbmsge25vZGUucmVzb2x2ZWQgPyAnJyA6ICdpcy11bnJlc29sdmVkJ31cIlxyXG4gICAgICAgICAgICAgICAgPlxyXG4gICAgICAgICAgICAgICAgICB7cHJlc2VudFBhdGgobm9kZS50byl9XHJcbiAgICAgICAgICAgICAgICA8L3NwYW4+XHJcbiAgICAgICAgICAgICAgICB7I2lmIGlzSW1nKG5vZGUudG8pfVxyXG4gICAgICAgICAgICAgICAgICA8SW1nVGh1bWJuYWlsIGltZz17bm9kZS5pbWd9IC8+XHJcbiAgICAgICAgICAgICAgICB7L2lmfVxyXG4gICAgICAgICAgICAgIDwvdGQ+XHJcbiAgICAgICAgICAgICAgPHRkIGNsYXNzPXtNRUFTVVJFfT57bm9kZS5tZWFzdXJlfTwvdGQ+XHJcbiAgICAgICAgICAgIDwvdHI+XHJcbiAgICAgICAgICB7L2lmfVxyXG4gICAgICAgIHsvZWFjaH1cclxuXHJcbiAgICAgICAgPEluZmluaXRlU2Nyb2xsXHJcbiAgICAgICAgICBoYXNNb3JlPXtzb3J0ZWRSZXN1bHRzLmxlbmd0aCA+IHZpc2libGVEYXRhLmxlbmd0aH1cclxuICAgICAgICAgIHRocmVzaG9sZD17MTAwfVxyXG4gICAgICAgICAgZWxlbWVudFNjcm9sbD17Y3VycmVudF9jb21wb25lbnQucGFyZW50Tm9kZX1cclxuICAgICAgICAgIG9uOmxvYWRNb3JlPXsoKSA9PiB7XHJcbiAgICAgICAgICAgIGlmICghYmxvY2tTd2l0Y2gpIHtcclxuICAgICAgICAgICAgICBwYWdlKytcclxuICAgICAgICAgICAgICBuZXdCYXRjaCA9IHNvcnRlZFJlc3VsdHMuc2xpY2Uoc2l6ZSAqIHBhZ2UsIHNpemUgKiAocGFnZSArIDEpIC0gMSlcclxuICAgICAgICAgICAgICBjb25zb2xlLmxvZyh7IG5ld0JhdGNoIH0pXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH19XHJcbiAgICAgICAgLz5cclxuICAgICAgICB7dmlzaWJsZURhdGEubGVuZ3RofSAvIHtzb3J0ZWRSZXN1bHRzLmxlbmd0aH1cclxuICAgICAgey9rZXl9XHJcbiAgICB7L2F3YWl0fVxyXG4gIHsvaWZ9XHJcbjwvdGFibGU+XHJcblxyXG48c3R5bGU+XHJcbiAgdGFibGUuR0EtdGFibGUge1xyXG4gICAgYm9yZGVyLWNvbGxhcHNlOiBjb2xsYXBzZTtcclxuICB9XHJcbiAgdGFibGUuR0EtdGFibGUsXHJcbiAgdGFibGUuR0EtdGFibGUgdHIsXHJcbiAgdGFibGUuR0EtdGFibGUgdGQge1xyXG4gICAgYm9yZGVyOiAxcHggc29saWQgdmFyKC0tYmFja2dyb3VuZC1tb2RpZmllci1ib3JkZXIpO1xyXG4gIH1cclxuXHJcbiAgdGFibGUuR0EtdGFibGUgdGQge1xyXG4gICAgcGFkZGluZzogMnB4O1xyXG4gICAgLyogZm9udC1zaXplOiB2YXIoLS1mb250LXNpemUtc2Vjb25kYXJ5KTsgKi9cclxuICB9XHJcblxyXG4gIC5pcy11bnJlc29sdmVkIHtcclxuICAgIGNvbG9yOiB2YXIoLS10ZXh0LW11dGVkKTtcclxuICB9XHJcblxyXG4gIC5HQS1ub2RlIHtcclxuICAgIG92ZXJmbG93OiBoaWRkZW47XHJcbiAgfVxyXG48L3N0eWxlPlxyXG4iLCAiPHNjcmlwdCBsYW5nPVwidHNcIj5cclxuICBpbXBvcnQgdHlwZSB7IEFwcCB9IGZyb20gJ29ic2lkaWFuJ1xyXG4gIGltcG9ydCB7IGhvdmVyUHJldmlldywgaXNJblZhdWx0LCBpc0xpbmtlZCB9IGZyb20gJ29ic2lkaWFuLWNvbW11bml0eS1saWInXHJcbiAgaW1wb3J0IHR5cGUgQW5hbHlzaXNWaWV3IGZyb20gJ3NyYy9BbmFseXNpc1ZpZXcnXHJcbiAgaW1wb3J0IHtcclxuICAgIEFOQUxZU0lTX1RZUEVTLFxyXG4gICAgSUNPTixcclxuICAgIExJTktFRCxcclxuICAgIE1FQVNVUkUsXHJcbiAgICBOT1RfTElOS0VELFxyXG4gIH0gZnJvbSAnc3JjL0NvbnN0YW50cydcclxuICBpbXBvcnQgdHlwZSB7XHJcbiAgICBHcmFwaEFuYWx5c2lzU2V0dGluZ3MsXHJcbiAgICBISVRTUmVzdWx0LFxyXG4gICAgU3VidHlwZSxcclxuICB9IGZyb20gJ3NyYy9JbnRlcmZhY2VzJ1xyXG4gIGltcG9ydCB0eXBlIEdyYXBoQW5hbHlzaXNQbHVnaW4gZnJvbSAnc3JjL21haW4nXHJcbiAgaW1wb3J0IHtcclxuICAgIGNsYXNzRXh0LFxyXG4gICAgZHJvcFBhdGgsXHJcbiAgICBnZXRJbWdCdWZmZXJQcm9taXNlLFxyXG4gICAgaXNJbWcsXHJcbiAgICBvcGVuTWVudSxcclxuICAgIG9wZW5PclN3aXRjaCxcclxuICAgIHByZXNlbnRQYXRoLFxyXG4gICAgcm91bmROdW1iZXIsXHJcbiAgfSBmcm9tICdzcmMvVXRpbGl0eSdcclxuICBpbXBvcnQgeyBvbk1vdW50IH0gZnJvbSAnc3ZlbHRlJ1xyXG4gIGltcG9ydCBGYUxpbmsgZnJvbSAnc3ZlbHRlLWljb25zL2ZhL0ZhTGluay5zdmVsdGUnXHJcbiAgaW1wb3J0IEluZmluaXRlU2Nyb2xsIGZyb20gJ3N2ZWx0ZS1pbmZpbml0ZS1zY3JvbGwnXHJcbiAgaW1wb3J0IEV4dGVuc2lvbkljb24gZnJvbSAnLi9FeHRlbnNpb25JY29uLnN2ZWx0ZSdcclxuICBpbXBvcnQgSW1nVGh1bWJuYWlsIGZyb20gJy4vSW1nVGh1bWJuYWlsLnN2ZWx0ZSdcclxuICBpbXBvcnQgU3VidHlwZU9wdGlvbnMgZnJvbSAnLi9TdWJ0eXBlT3B0aW9ucy5zdmVsdGUnXHJcblxyXG4gIGV4cG9ydCBsZXQgYXBwOiBBcHBcclxuICBleHBvcnQgbGV0IHBsdWdpbjogR3JhcGhBbmFseXNpc1BsdWdpblxyXG4gIGV4cG9ydCBsZXQgc2V0dGluZ3M6IEdyYXBoQW5hbHlzaXNTZXR0aW5nc1xyXG4gIGV4cG9ydCBsZXQgdmlldzogQW5hbHlzaXNWaWV3XHJcbiAgZXhwb3J0IGxldCBjdXJyU3VidHlwZTogU3VidHlwZVxyXG5cclxuICAkOiBjdXJyU3VidHlwZUluZm8gPSBBTkFMWVNJU19UWVBFUy5maW5kKChzdWIpID0+IHN1Yi5zdWJ0eXBlID09PSBjdXJyU3VidHlwZSlcclxuXHJcbiAgbGV0IHNvcnRCeSA9IHRydWVcclxuICBsZXQgYXNjT3JkZXIgPSBmYWxzZVxyXG4gIGxldCB7IG5vSW5maW5pdHksIG5vWmVybyB9ID0gc2V0dGluZ3NcclxuICBsZXQgY3VyckZpbGUgPSBhcHAud29ya3NwYWNlLmdldEFjdGl2ZUZpbGUoKVxyXG5cclxuICBpbnRlcmZhY2UgQ29tcG9uZW50UmVzdWx0cyB7XHJcbiAgICBhdXRob3JpdHk6IG51bWJlclxyXG4gICAgaHViOiBudW1iZXJcclxuICAgIHRvOiBzdHJpbmdcclxuICAgIHJlc29sdmVkOiBib29sZWFuXHJcbiAgICBpbWc6IFByb21pc2U8QXJyYXlCdWZmZXI+IHwgbnVsbFxyXG4gIH1cclxuXHJcbiAgJDogY3Vyck5vZGUgPSBjdXJyRmlsZT8ucGF0aFxyXG4gIGxldCBzaXplID0gNTBcclxuICBsZXQgY3VycmVudF9jb21wb25lbnQ6IEhUTUxFbGVtZW50XHJcbiAgbGV0IG5ld0JhdGNoOiBDb21wb25lbnRSZXN1bHRzW10gPSBbXVxyXG4gIGxldCB2aXNpYmxlRGF0YTogQ29tcG9uZW50UmVzdWx0c1tdID0gW11cclxuICBsZXQgcGFnZSA9IDBcclxuICBsZXQgYmxvY2tTd2l0Y2ggPSBmYWxzZVxyXG5cclxuICBhcHAud29ya3NwYWNlLm9uKCdhY3RpdmUtbGVhZi1jaGFuZ2UnLCAoKSA9PiB7XHJcbiAgICBibG9ja1N3aXRjaCA9IHRydWVcclxuICAgIHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICBibG9ja1N3aXRjaCA9IGZhbHNlXHJcbiAgICAgIGN1cnJGaWxlID0gYXBwLndvcmtzcGFjZS5nZXRBY3RpdmVGaWxlKClcclxuICAgIH0sIDEwMClcclxuICAgIG5ld0JhdGNoID0gW11cclxuICB9KVxyXG5cclxuICBvbk1vdW50KCgpID0+IHt9KVxyXG5cclxuICAkOiBwcm9taXNlU29ydGVkUmVzdWx0cyA9ICFwbHVnaW4uZ1xyXG4gICAgPyBudWxsXHJcbiAgICA6IHBsdWdpbi5nLmFsZ3NbJ0hJVFMnXSgnJylcclxuICAgICAgICAudGhlbigocmVzdWx0czogSElUU1Jlc3VsdCkgPT4ge1xyXG4gICAgICAgICAgY29uc29sZS5sb2coJ2hpdHMnKVxyXG4gICAgICAgICAgY29uc3QgY29tcG9uZW50UmVzdWx0czogQ29tcG9uZW50UmVzdWx0c1tdID0gW11cclxuXHJcbiAgICAgICAgICBwbHVnaW4uZy5mb3JFYWNoTm9kZSgodG8pID0+IHtcclxuICAgICAgICAgICAgY29uc3QgYXV0aG9yaXR5ID0gcm91bmROdW1iZXIocmVzdWx0cy5hdXRob3JpdGllc1t0b10pXHJcbiAgICAgICAgICAgIGNvbnN0IGh1YiA9IHJvdW5kTnVtYmVyKHJlc3VsdHMuaHVic1t0b10pXHJcbiAgICAgICAgICAgIGlmICghKGF1dGhvcml0eSA9PT0gMCAmJiBodWIgPT09IDApKSB7XHJcbiAgICAgICAgICAgICAgY29uc3QgcmVzb2x2ZWQgPSAhdG8uZW5kc1dpdGgoJy5tZCcpIHx8IGlzSW5WYXVsdChhcHAsIHRvKVxyXG5cclxuICAgICAgICAgICAgICBjb25zdCBpbWcgPVxyXG4gICAgICAgICAgICAgICAgcGx1Z2luLnNldHRpbmdzLnNob3dJbWdUaHVtYm5haWxzICYmIGlzSW1nKHRvKVxyXG4gICAgICAgICAgICAgICAgICA/IGdldEltZ0J1ZmZlclByb21pc2UoYXBwLCB0bylcclxuICAgICAgICAgICAgICAgICAgOiBudWxsXHJcblxyXG4gICAgICAgICAgICAgIGNvbXBvbmVudFJlc3VsdHMucHVzaCh7XHJcbiAgICAgICAgICAgICAgICBhdXRob3JpdHksXHJcbiAgICAgICAgICAgICAgICBodWIsXHJcbiAgICAgICAgICAgICAgICB0byxcclxuICAgICAgICAgICAgICAgIHJlc29sdmVkLFxyXG4gICAgICAgICAgICAgICAgaW1nLFxyXG4gICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH0pXHJcbiAgICAgICAgICBjb25zdCBncmVhdGVyID0gYXNjT3JkZXIgPyAxIDogLTFcclxuICAgICAgICAgIGNvbnN0IGxlc3NlciA9IGFzY09yZGVyID8gLTEgOiAxXHJcbiAgICAgICAgICBjb21wb25lbnRSZXN1bHRzLnNvcnQoKGEsIGIpID0+IHtcclxuICAgICAgICAgICAgcmV0dXJuIHNvcnRCeVxyXG4gICAgICAgICAgICAgID8gYS5hdXRob3JpdHkgPiBiLmF1dGhvcml0eVxyXG4gICAgICAgICAgICAgICAgPyBncmVhdGVyXHJcbiAgICAgICAgICAgICAgICA6IGxlc3NlclxyXG4gICAgICAgICAgICAgIDogYS5odWIgPiBiLmh1YlxyXG4gICAgICAgICAgICAgID8gZ3JlYXRlclxyXG4gICAgICAgICAgICAgIDogbGVzc2VyXHJcbiAgICAgICAgICB9KVxyXG4gICAgICAgICAgcmV0dXJuIGNvbXBvbmVudFJlc3VsdHNcclxuICAgICAgICB9KVxyXG4gICAgICAgIC50aGVuKChyZXMpID0+IHtcclxuICAgICAgICAgIG5ld0JhdGNoID0gcmVzLnNsaWNlKDAsIHNpemUpXHJcbiAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgICAgICAgYmxvY2tTd2l0Y2ggPSBmYWxzZVxyXG4gICAgICAgICAgfSwgMTAwKVxyXG4gICAgICAgICAgcmV0dXJuIHJlc1xyXG4gICAgICAgIH0pXHJcblxyXG4gICQ6IHZpc2libGVEYXRhID0gWy4uLnZpc2libGVEYXRhLCAuLi5uZXdCYXRjaF1cclxuXHJcbiAgb25Nb3VudCgoKSA9PiB7XHJcbiAgICBjdXJyRmlsZSA9IGFwcC53b3Jrc3BhY2UuZ2V0QWN0aXZlRmlsZSgpXHJcbiAgfSlcclxuPC9zY3JpcHQ+XHJcblxyXG48U3VidHlwZU9wdGlvbnNcclxuICBiaW5kOmN1cnJTdWJ0eXBlSW5mb1xyXG4gIGJpbmQ6bm9aZXJvXHJcbiAgYmluZDphc2NPcmRlclxyXG4gIGJpbmQ6c29ydEJ5XHJcbiAgYmluZDpjdXJyRmlsZVxyXG4gIHthcHB9XHJcbiAge3BsdWdpbn1cclxuICB7dmlld31cclxuICBiaW5kOmJsb2NrU3dpdGNoXHJcbiAgYmluZDpuZXdCYXRjaFxyXG4gIGJpbmQ6dmlzaWJsZURhdGFcclxuICBiaW5kOnByb21pc2VTb3J0ZWRSZXN1bHRzXHJcbiAgYmluZDpwYWdlXHJcbi8+XHJcblxyXG48dGFibGUgY2xhc3M9XCJHQS10YWJsZSBtYXJrZG93bi1wcmV2aWV3LXZpZXdcIiBiaW5kOnRoaXM9e2N1cnJlbnRfY29tcG9uZW50fT5cclxuICA8dGhlYWQ+XHJcbiAgICA8dHI+XHJcbiAgICAgIDx0aCBzY29wZT1cImNvbFwiPk5vdGU8L3RoPlxyXG4gICAgICA8dGggc2NvcGU9XCJjb2xcIj5BdXRob3JpdHk8L3RoPlxyXG4gICAgICA8dGggc2NvcGU9XCJjb2xcIj5IdWI8L3RoPlxyXG4gICAgPC90cj5cclxuICA8L3RoZWFkPlxyXG4gIHsjaWYgcHJvbWlzZVNvcnRlZFJlc3VsdHN9XHJcbiAgICB7I2F3YWl0IHByb21pc2VTb3J0ZWRSZXN1bHRzIHRoZW4gc29ydGVkUmVzdWx0c31cclxuICAgICAgeyNrZXkgc29ydGVkUmVzdWx0c31cclxuICAgICAgICB7I2VhY2ggdmlzaWJsZURhdGEgYXMgbm9kZX1cclxuICAgICAgICAgIHsjaWYgbm9kZSAhPT0gdW5kZWZpbmVkfVxyXG4gICAgICAgICAgICA8IS0tIHN2ZWx0ZS1pZ25vcmUgYTExeS11bmtub3duLWFyaWEtYXR0cmlidXRlIC0tPlxyXG4gICAgICAgICAgICA8dHJcclxuICAgICAgICAgICAgICBjbGFzcz1cIlxyXG4gICAgICAgICAgICAgIHtjbGFzc0V4dChub2RlLnRvKX1cIlxyXG4gICAgICAgICAgICA+XHJcbiAgICAgICAgICAgICAgPHRkXHJcbiAgICAgICAgICAgICAgICBvbjpjbGljaz17YXN5bmMgKGUpID0+IGF3YWl0IG9wZW5PclN3aXRjaChhcHAsIG5vZGUudG8sIGUpfVxyXG4gICAgICAgICAgICAgICAgb246Y29udGV4dG1lbnU9eyhlKSA9PiBvcGVuTWVudShlLCBhcHApfVxyXG4gICAgICAgICAgICAgICAgb246bW91c2VvdmVyPXsoZSkgPT4gaG92ZXJQcmV2aWV3KGUsIHZpZXcsIGRyb3BQYXRoKG5vZGUudG8pKX1cclxuICAgICAgICAgICAgICA+XHJcbiAgICAgICAgICAgICAgICA8RXh0ZW5zaW9uSWNvbiBwYXRoPXtub2RlLnRvfSAvPlxyXG5cclxuICAgICAgICAgICAgICAgIDxzcGFuXHJcbiAgICAgICAgICAgICAgICAgIGNsYXNzPVwiaW50ZXJuYWwtbGluayBcclxuICAgICAgICAgICAgICAgICAge25vZGUucmVzb2x2ZWQgPyAnJyA6ICdpcy11bnJlc29sdmVkJ30gXHJcbiAgICAgICAgICAgICAgICAgICAge2N1cnJOb2RlID09PSBub2RlLnRvID8gJ2N1cnJOb2RlJyA6ICcnfVwiXHJcbiAgICAgICAgICAgICAgICA+XHJcbiAgICAgICAgICAgICAgICAgIHtwcmVzZW50UGF0aChub2RlLnRvKX1cclxuICAgICAgICAgICAgICAgIDwvc3Bhbj5cclxuICAgICAgICAgICAgICAgIHsjaWYgaXNJbWcobm9kZS50byl9XHJcbiAgICAgICAgICAgICAgICAgIDxJbWdUaHVtYm5haWwgaW1nPXtub2RlLmltZ30gLz5cclxuICAgICAgICAgICAgICAgIHsvaWZ9XHJcbiAgICAgICAgICAgICAgPC90ZD5cclxuICAgICAgICAgICAgICA8dGQgY2xhc3M9e01FQVNVUkV9Pntub2RlLmF1dGhvcml0eX08L3RkPlxyXG4gICAgICAgICAgICAgIDx0ZCBjbGFzcz17TUVBU1VSRX0+e25vZGUuaHVifTwvdGQ+XHJcbiAgICAgICAgICAgIDwvdHI+XHJcbiAgICAgICAgICB7L2lmfVxyXG4gICAgICAgIHsvZWFjaH1cclxuXHJcbiAgICAgICAgPEluZmluaXRlU2Nyb2xsXHJcbiAgICAgICAgICBoYXNNb3JlPXtzb3J0ZWRSZXN1bHRzLmxlbmd0aCA+IHZpc2libGVEYXRhLmxlbmd0aH1cclxuICAgICAgICAgIHRocmVzaG9sZD17MTAwfVxyXG4gICAgICAgICAgZWxlbWVudFNjcm9sbD17Y3VycmVudF9jb21wb25lbnQucGFyZW50Tm9kZX1cclxuICAgICAgICAgIG9uOmxvYWRNb3JlPXsoKSA9PiB7XHJcbiAgICAgICAgICAgIGlmICghYmxvY2tTd2l0Y2gpIHtcclxuICAgICAgICAgICAgICBwYWdlKytcclxuICAgICAgICAgICAgICBuZXdCYXRjaCA9IHNvcnRlZFJlc3VsdHMuc2xpY2Uoc2l6ZSAqIHBhZ2UsIHNpemUgKiAocGFnZSArIDEpIC0gMSlcclxuICAgICAgICAgICAgICBjb25zb2xlLmxvZyh7IG5ld0JhdGNoIH0pXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH19XHJcbiAgICAgICAgLz5cclxuICAgICAgICB7dmlzaWJsZURhdGEubGVuZ3RofSAvIHtzb3J0ZWRSZXN1bHRzLmxlbmd0aH1cclxuICAgICAgey9rZXl9XHJcbiAgICB7L2F3YWl0fVxyXG4gIHsvaWZ9XHJcbjwvdGFibGU+XHJcblxyXG48c3R5bGU+XHJcbiAgdGFibGUuR0EtdGFibGUge1xyXG4gICAgYm9yZGVyLWNvbGxhcHNlOiBjb2xsYXBzZTtcclxuICB9XHJcbiAgdGFibGUuR0EtdGFibGUsXHJcbiAgdGFibGUuR0EtdGFibGUgdHIsXHJcbiAgdGFibGUuR0EtdGFibGUgdGQge1xyXG4gICAgYm9yZGVyOiAxcHggc29saWQgdmFyKC0tYmFja2dyb3VuZC1tb2RpZmllci1ib3JkZXIpO1xyXG4gIH1cclxuXHJcbiAgdGFibGUuR0EtdGFibGUgdGQge1xyXG4gICAgcGFkZGluZzogMnB4O1xyXG4gICAgLyogZm9udC1zaXplOiB2YXIoLS1mb250LXNpemUtc2Vjb25kYXJ5KTsgKi9cclxuICB9XHJcblxyXG4gIC5pcy11bnJlc29sdmVkIHtcclxuICAgIGNvbG9yOiB2YXIoLS10ZXh0LW11dGVkKTtcclxuICB9XHJcblxyXG4gIC5HQS1ub2RlIHtcclxuICAgIG92ZXJmbG93OiBoaWRkZW47XHJcbiAgfVxyXG5cclxuICAuY3Vyck5vZGUge1xyXG4gICAgZm9udC13ZWlnaHQ6IGJvbGQ7XHJcbiAgfVxyXG48L3N0eWxlPlxyXG4iLCAiPHNjcmlwdCBsYW5nPVwidHNcIj5cclxuICBpbXBvcnQgdHlwZSB7IEFwcCB9IGZyb20gJ29ic2lkaWFuJ1xyXG4gIGltcG9ydCBMb3V2YWluIGZyb20gJy4vTG91dmFpbi5zdmVsdGUnXHJcbiAgaW1wb3J0IHR5cGUgQW5hbHlzaXNWaWV3IGZyb20gJ3NyYy9BbmFseXNpc1ZpZXcnXHJcbiAgaW1wb3J0IHR5cGUgeyBHcmFwaEFuYWx5c2lzU2V0dGluZ3MsIFN1YnR5cGUgfSBmcm9tICdzcmMvSW50ZXJmYWNlcydcclxuICBpbXBvcnQgdHlwZSBHcmFwaEFuYWx5c2lzUGx1Z2luIGZyb20gJ3NyYy9tYWluJ1xyXG4gIGltcG9ydCBDb0NpdGF0aW9ucyBmcm9tICcuL0NvQ2l0YXRpb25zLnN2ZWx0ZSdcclxuICBpbXBvcnQgTGFiZWxQcm9wYWdhdGlvbiBmcm9tICcuL0xhYmVsUHJvcGFnYXRpb24uc3ZlbHRlJ1xyXG4gIGltcG9ydCBTY3JvbGxTZWxlY3RvciBmcm9tICcuL1Njcm9sbFNlbGVjdG9yLnN2ZWx0ZSdcclxuICBpbXBvcnQgVGFibGVDb21wb25lbnQgZnJvbSAnLi9UYWJsZUNvbXBvbmVudC5zdmVsdGUnXHJcbiAgaW1wb3J0IEhJVFMgZnJvbSAnLi9ISVRTLnN2ZWx0ZSdcclxuXHJcbiAgZXhwb3J0IGxldCBhcHA6IEFwcFxyXG4gIGV4cG9ydCBsZXQgcGx1Z2luOiBHcmFwaEFuYWx5c2lzUGx1Z2luXHJcbiAgZXhwb3J0IGxldCBzZXR0aW5nczogR3JhcGhBbmFseXNpc1NldHRpbmdzXHJcbiAgZXhwb3J0IGxldCB2aWV3OiBBbmFseXNpc1ZpZXdcclxuICBleHBvcnQgbGV0IGN1cnJTdWJ0eXBlOiBTdWJ0eXBlXHJcblxyXG4gICQ6IHByb3BzID0ge1xyXG4gICAgYXBwLFxyXG4gICAgcGx1Z2luLFxyXG4gICAgc2V0dGluZ3MsXHJcbiAgICB2aWV3LFxyXG4gICAgY3VyclN1YnR5cGUsXHJcbiAgfVxyXG48L3NjcmlwdD5cclxuXHJcbjxTY3JvbGxTZWxlY3RvciBiaW5kOmN1cnJTdWJ0eXBlIHt2aWV3fSAvPlxyXG5cclxueyNpZiBjdXJyU3VidHlwZSA9PT0gJ0FkYW1pYyBBZGFyJ31cclxuICA8VGFibGVDb21wb25lbnQgey4uLnByb3BzfSAvPlxyXG48IS0tIHs6ZWxzZSBpZiBjdXJyU3VidHlwZSA9PT0gJ0NvbW1vbiBOZWlnaGJvdXJzJ31cclxuICA8VGFibGVDb21wb25lbnQgey4uLnByb3BzfSAvPiAtLT5cclxuezplbHNlIGlmIGN1cnJTdWJ0eXBlID09PSAnSmFjY2FyZCd9XHJcbiAgPFRhYmxlQ29tcG9uZW50IHsuLi5wcm9wc30gLz5cclxuezplbHNlIGlmIGN1cnJTdWJ0eXBlID09PSAnQ28tQ2l0YXRpb25zJ31cclxuICA8Q29DaXRhdGlvbnMgey4uLnByb3BzfSAvPlxyXG57OmVsc2UgaWYgY3VyclN1YnR5cGUgPT09ICdMYWJlbCBQcm9wYWdhdGlvbid9XHJcbiAgPExhYmVsUHJvcGFnYXRpb24gey4uLnByb3BzfSAvPlxyXG57OmVsc2UgaWYgY3VyclN1YnR5cGUgPT09ICdPdmVybGFwJ31cclxuICA8VGFibGVDb21wb25lbnQgey4uLnByb3BzfSAvPlxyXG57OmVsc2UgaWYgY3VyclN1YnR5cGUgPT09ICdDbHVzdGVyaW5nIENvZWZmaWNpZW50J31cclxuICA8VGFibGVDb21wb25lbnQgey4uLnByb3BzfSAvPlxyXG57OmVsc2UgaWYgY3VyclN1YnR5cGUgPT09ICdCb1cnfVxyXG4gIDxUYWJsZUNvbXBvbmVudCB7Li4ucHJvcHN9IC8+XHJcbns6ZWxzZSBpZiBjdXJyU3VidHlwZSA9PT0gJ090c3VrYS1DaGlhaSd9XHJcbiAgPFRhYmxlQ29tcG9uZW50IHsuLi5wcm9wc30gLz5cclxuICA8IS0tIHs6ZWxzZSBpZiBjdXJyU3VidHlwZSA9PT0gJ1R2ZXJza3knfVxyXG4gIDxUYWJsZUNvbXBvbmVudCB7Li4ucHJvcHN9IC8+IC0tPlxyXG57OmVsc2UgaWYgY3VyclN1YnR5cGUgPT09ICdTZW50aW1lbnQnfVxyXG4gIDxUYWJsZUNvbXBvbmVudCB7Li4ucHJvcHN9IC8+XHJcbns6ZWxzZSBpZiBjdXJyU3VidHlwZSA9PT0gJ0xvdXZhaW4nfVxyXG4gIDxMb3V2YWluIHsuLi5wcm9wc30gLz5cclxuezplbHNlIGlmIGN1cnJTdWJ0eXBlID09PSAnSElUUyd9XHJcbiAgPEhJVFMgey4uLnByb3BzfSAvPlxyXG57L2lmfVxyXG4iLCAiaW1wb3J0IEdyYXBoIGZyb20gJ2dyYXBob2xvZ3knXHJcbmltcG9ydCBsb3V2YWluIGZyb20gJ2dyYXBob2xvZ3ktY29tbXVuaXRpZXMtbG91dmFpbidcclxuaW1wb3J0IGhpdHMgZnJvbSAnZ3JhcGhvbG9neS1tZXRyaWNzL2NlbnRyYWxpdHkvaGl0cydcclxuXHJcbmltcG9ydCB7XHJcbiAgQXBwLFxyXG4gIENhY2hlSXRlbSxcclxuICBIZWFkaW5nQ2FjaGUsIExpc3RJdGVtQ2FjaGUsXHJcbiAgTm90aWNlLFxyXG4gIFJlZmVyZW5jZUNhY2hlLFxyXG4gIFRhZ0NhY2hlLFxyXG59IGZyb20gJ29ic2lkaWFuJ1xyXG5pbXBvcnQgeyBnZXRBbGxUYWdzLCBnZXRMaW5rcGF0aCB9IGZyb20gJ29ic2lkaWFuJ1xyXG5pbXBvcnQgdG9rZW5pemVyIGZyb20gJ3NiZCdcclxuaW1wb3J0IHtcclxuICBjbHVzdGVyaW5nQ29lZmZpY2llbnQsXHJcbiAgZ2F0aGVyQ29tbXVuaXRpZXMsXHJcbiAgaW50ZXJzZWN0aW9uLFxyXG59IGZyb20gJ3NyYy9HZW5lcmFsR3JhcGhGbidcclxuaW1wb3J0IHR5cGUge1xyXG4gIEFuYWx5c2lzQWxnLFxyXG4gIENvQ2l0YXRpb24sXHJcbiAgQ29DaXRhdGlvbk1hcCwgQ29DaXRhdGlvblJlcyxcclxuICBDb21tdW5pdGllcyxcclxuICBHcmFwaEFuYWx5c2lzU2V0dGluZ3MsXHJcbiAgSElUU1Jlc3VsdCwgTGluZVNlbnRlbmNlcyxcclxuICBOTFBQbHVnaW4sXHJcbiAgUmVzdWx0TWFwLFxyXG4gIFN1YnR5cGUsXHJcbn0gZnJvbSAnc3JjL0ludGVyZmFjZXMnXHJcbmltcG9ydCB7IGFkZFByZUNvY2l0YXRpb24sIGZpbmRTZW50ZW5jZSwgZ2V0Q291bnRzLCBnZXRNYXhLZXksIHJvdW5kTnVtYmVyLCBzdW0gfSBmcm9tICdzcmMvVXRpbGl0eSdcclxuaW1wb3J0ICogYXMgc2ltaWxhcml0eSBmcm9tICd3aW5rLW5scC91dGlsaXRpZXMvc2ltaWxhcml0eSdcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE15R3JhcGggZXh0ZW5kcyBHcmFwaCB7XHJcbiAgYXBwOiBBcHBcclxuICBzZXR0aW5nczogR3JhcGhBbmFseXNpc1NldHRpbmdzXHJcblxyXG4gIGNvbnN0cnVjdG9yKGFwcDogQXBwLCBzZXR0aW5nczogR3JhcGhBbmFseXNpc1NldHRpbmdzKSB7XHJcbiAgICBzdXBlcigpXHJcbiAgICB0aGlzLmFwcCA9IGFwcFxyXG4gICAgdGhpcy5zZXR0aW5ncyA9IHNldHRpbmdzXHJcbiAgfVxyXG5cclxuICBhc3luYyBpbml0R3JhcGgoKTogUHJvbWlzZTxNeUdyYXBoPiB7XHJcbiAgICBjb25zdCB7IHJlc29sdmVkTGlua3MsIHVucmVzb2x2ZWRMaW5rcyB9ID0gdGhpcy5hcHAubWV0YWRhdGFDYWNoZVxyXG4gICAgY29uc3QgeyBleGNsdXNpb25SZWdleCwgZXhjbHVzaW9uVGFncywgYWxsRmlsZUV4dGVuc2lvbnMsIGFkZFVucmVzb2x2ZWQgfSA9XHJcbiAgICAgIHRoaXMuc2V0dGluZ3NcclxuICAgIGNvbnN0IHJlZ2V4ID0gbmV3IFJlZ0V4cChleGNsdXNpb25SZWdleCwgJ2knKVxyXG4gICAgbGV0IGkgPSAwXHJcblxyXG4gICAgY29uc3QgaW5jbHVkZVRhZyA9ICh0YWdzOiBUYWdDYWNoZVtdIHwgdW5kZWZpbmVkKSA9PlxyXG4gICAgICBleGNsdXNpb25UYWdzLmxlbmd0aCA9PT0gMCB8fFxyXG4gICAgICAhdGFncyB8fFxyXG4gICAgICB0YWdzLmZpbmRJbmRleCgodCkgPT4gZXhjbHVzaW9uVGFncy5pbmNsdWRlcyh0LnRhZykpID09PSAtMVxyXG4gICAgY29uc3QgaW5jbHVkZVJlZ2V4ID0gKG5vZGU6IHN0cmluZykgPT5cclxuICAgICAgZXhjbHVzaW9uUmVnZXggPT09ICcnIHx8ICFyZWdleC50ZXN0KG5vZGUpXHJcbiAgICBjb25zdCBpbmNsdWRlRXh0ID0gKG5vZGU6IHN0cmluZykgPT5cclxuICAgICAgYWxsRmlsZUV4dGVuc2lvbnMgfHwgbm9kZS5lbmRzV2l0aCgnbWQnKVxyXG5cclxuICAgIGZvciAoY29uc3Qgc291cmNlIGluIHJlc29sdmVkTGlua3MpIHtcclxuICAgICAgY29uc3QgdGFncyA9IHRoaXMuYXBwLm1ldGFkYXRhQ2FjaGUuZ2V0Q2FjaGUoc291cmNlKT8udGFnc1xyXG4gICAgICBpZiAoaW5jbHVkZVRhZyh0YWdzKSAmJiBpbmNsdWRlUmVnZXgoc291cmNlKSAmJiBpbmNsdWRlRXh0KHNvdXJjZSkpIHtcclxuICAgICAgICBpZiAoIXRoaXMuaGFzTm9kZShzb3VyY2UpKSB7XHJcbiAgICAgICAgICB0aGlzLmFkZE5vZGUoc291cmNlLCB7IGkgfSlcclxuICAgICAgICAgIGkrK1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZm9yIChjb25zdCBkZXN0IGluIHJlc29sdmVkTGlua3Nbc291cmNlXSkge1xyXG4gICAgICAgICAgY29uc3QgdGFncyA9IHRoaXMuYXBwLm1ldGFkYXRhQ2FjaGUuZ2V0Q2FjaGUoZGVzdCk/LnRhZ3NcclxuICAgICAgICAgIGlmIChpbmNsdWRlVGFnKHRhZ3MpICYmIGluY2x1ZGVSZWdleChkZXN0KSAmJiBpbmNsdWRlRXh0KGRlc3QpKSB7XHJcbiAgICAgICAgICAgIGlmICghdGhpcy5oYXNOb2RlKGRlc3QpKSB7XHJcbiAgICAgICAgICAgICAgdGhpcy5hZGROb2RlKGRlc3QsIHsgaSB9KVxyXG4gICAgICAgICAgICAgIGkrK1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMuYWRkRWRnZShzb3VyY2UsIGRlc3QsIHsgcmVzb2x2ZWQ6IHRydWUgfSlcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBpZiAoYWRkVW5yZXNvbHZlZCkge1xyXG4gICAgICBmb3IgKGNvbnN0IHNvdXJjZSBpbiB1bnJlc29sdmVkTGlua3MpIHtcclxuICAgICAgICBpZiAoaW5jbHVkZVJlZ2V4KHNvdXJjZSkpIHtcclxuICAgICAgICAgIGlmICghdGhpcy5oYXNOb2RlKHNvdXJjZSkpIHtcclxuICAgICAgICAgICAgdGhpcy5hZGROb2RlKHNvdXJjZSwgeyBpIH0pXHJcbiAgICAgICAgICAgIGkrK1xyXG4gICAgICAgICAgfVxyXG5cclxuICAgICAgICAgIGZvciAoY29uc3QgZGVzdCBpbiB1bnJlc29sdmVkTGlua3Nbc291cmNlXSkge1xyXG4gICAgICAgICAgICBjb25zdCBkZXN0TUQgPSBkZXN0ICsgJy5tZCdcclxuICAgICAgICAgICAgaWYgKGluY2x1ZGVSZWdleChkZXN0TUQpKSB7XHJcbiAgICAgICAgICAgICAgaWYgKCF0aGlzLmhhc05vZGUoZGVzdE1EKSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5hZGROb2RlKGRlc3RNRCwgeyBpIH0pXHJcbiAgICAgICAgICAgICAgICBpKytcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgdGhpcy5hZGRFZGdlKHNvdXJjZSwgZGVzdE1ELCB7IHJlc29sdmVkOiBmYWxzZSB9KVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdGhpc1xyXG4gIH1cclxuXHJcbiAgYWxnczoge1xyXG4gICAgW3N1YnR5cGUgaW4gU3VidHlwZV06IEFuYWx5c2lzQWxnPFxyXG4gICAgICBSZXN1bHRNYXAgfCBDb0NpdGF0aW9uTWFwIHwgQ29tbXVuaXRpZXMgfCBzdHJpbmdbXSB8IEhJVFNSZXN1bHRcclxuICAgID5cclxuICB9ID0ge1xyXG4gICAgSmFjY2FyZDogYXN5bmMgKGE6IHN0cmluZyk6IFByb21pc2U8UmVzdWx0TWFwPiA9PiB7XHJcbiAgICAgIGNvbnN0IE5hID0gdGhpcy5uZWlnaGJvcnMoYSlcclxuICAgICAgY29uc3QgcmVzdWx0czogUmVzdWx0TWFwID0ge31cclxuICAgICAgdGhpcy5mb3JFYWNoTm9kZSgodG8pID0+IHtcclxuICAgICAgICBjb25zdCBOYiA9IHRoaXMubmVpZ2hib3JzKHRvKVxyXG4gICAgICAgIGNvbnN0IE5hYiA9IGludGVyc2VjdGlvbihOYSwgTmIpXHJcbiAgICAgICAgY29uc3QgZGVub20gPSBOYS5sZW5ndGggKyBOYi5sZW5ndGggLSBOYWIubGVuZ3RoXHJcbiAgICAgICAgbGV0IG1lYXN1cmUgPSBkZW5vbSAhPT0gMCA/IHJvdW5kTnVtYmVyKE5hYi5sZW5ndGggLyBkZW5vbSkgOiBJbmZpbml0eVxyXG5cclxuICAgICAgICByZXN1bHRzW3RvXSA9IHsgbWVhc3VyZSwgZXh0cmE6IE5hYiB9XHJcbiAgICAgIH0pXHJcbiAgICAgIHJldHVybiByZXN1bHRzXHJcbiAgICB9LFxyXG5cclxuICAgIEhJVFM6IGFzeW5jIChhOiBzdHJpbmcpID0+IHtcclxuICAgICAgcmV0dXJuIGhpdHModGhpcylcclxuICAgIH0sXHJcblxyXG4gICAgT3ZlcmxhcDogYXN5bmMgKGE6IHN0cmluZyk6IFByb21pc2U8UmVzdWx0TWFwPiA9PiB7XHJcbiAgICAgIGNvbnN0IHJlc3VsdHM6IFJlc3VsdE1hcCA9IHt9XHJcbiAgICAgIGNvbnN0IE5hID0gdGhpcy5uZWlnaGJvcnMoYSlcclxuICAgICAgdGhpcy5mb3JFYWNoTm9kZSgodG8pID0+IHtcclxuICAgICAgICBjb25zdCBOYiA9IHRoaXMubmVpZ2hib3JzKHRvKVxyXG4gICAgICAgIGNvbnN0IE5hYiA9IGludGVyc2VjdGlvbihOYSwgTmIpXHJcbiAgICAgICAgbGV0IG1lYXN1cmUgPVxyXG4gICAgICAgICAgTmEubGVuZ3RoICE9PSAwICYmIE5iLmxlbmd0aCAhPT0gMFxyXG4gICAgICAgICAgICA/IC8vIFRoZSBzcXVhcmUgd2VpZ2h0cyB0aGUgZmluYWwgcmVzdWx0IGJ5IHRoZSBudW1iZXIgb2Ygbm9kZXMgaW4gdGhlIG92ZXJsYXBcclxuICAgICAgICAgICAgICByb3VuZE51bWJlcihOYWIubGVuZ3RoICoqIDIgLyBNYXRoLm1pbihOYS5sZW5ndGgsIE5iLmxlbmd0aCkpXHJcbiAgICAgICAgICAgIDogSW5maW5pdHlcclxuXHJcbiAgICAgICAgcmVzdWx0c1t0b10gPSB7IG1lYXN1cmUsIGV4dHJhOiBOYWIgfVxyXG4gICAgICB9KVxyXG4gICAgICByZXR1cm4gcmVzdWx0c1xyXG4gICAgfSxcclxuXHJcbiAgICAnQWRhbWljIEFkYXInOiBhc3luYyAoYTogc3RyaW5nKTogUHJvbWlzZTxSZXN1bHRNYXA+ID0+IHtcclxuICAgICAgY29uc3QgcmVzdWx0czogUmVzdWx0TWFwID0ge31cclxuICAgICAgY29uc3QgTmEgPSB0aGlzLm5laWdoYm9ycyhhKVxyXG5cclxuICAgICAgdGhpcy5mb3JFYWNoTm9kZSgodG8pID0+IHtcclxuICAgICAgICBjb25zdCBOYiA9IHRoaXMubmVpZ2hib3JzKHRvKVxyXG4gICAgICAgIGNvbnN0IE5hYiA9IGludGVyc2VjdGlvbihOYSwgTmIpXHJcbiAgICAgICAgbGV0IG1lYXN1cmUgPSBJbmZpbml0eVxyXG4gICAgICAgIGlmIChOYWIubGVuZ3RoKSB7XHJcbiAgICAgICAgICBjb25zdCBuZWlnaGJvdXJzOiBudW1iZXJbXSA9IE5hYi5tYXAoXHJcbiAgICAgICAgICAgIChuKSA9PiB0aGlzLm91dE5laWdoYm9ycyhuKS5sZW5ndGhcclxuICAgICAgICAgIClcclxuICAgICAgICAgIG1lYXN1cmUgPSByb3VuZE51bWJlcihcclxuICAgICAgICAgICAgc3VtKG5laWdoYm91cnMubWFwKChuZWlnaGJvdXIpID0+IDEgLyBNYXRoLmxvZyhuZWlnaGJvdXIpKSlcclxuICAgICAgICAgIClcclxuICAgICAgICB9XHJcbiAgICAgICAgcmVzdWx0c1t0b10gPSB7IG1lYXN1cmUsIGV4dHJhOiBOYWIgfVxyXG4gICAgICB9KVxyXG4gICAgICByZXR1cm4gcmVzdWx0c1xyXG4gICAgfSxcclxuXHJcbiAgICAvLyAnQ29tbW9uIE5laWdoYm91cnMnOiBhc3luYyAoYTogc3RyaW5nKTogUHJvbWlzZTxSZXN1bHRNYXA+ID0+IHtcclxuICAgIC8vICAgY29uc3QgTmEgPSB0aGlzLm5laWdoYm9ycyhhKVxyXG4gICAgLy8gICBjb25zdCByZXN1bHRzOiBSZXN1bHRNYXAgPSB7fVxyXG5cclxuICAgIC8vICAgdGhpcy5mb3JFYWNoTm9kZSgodG8pID0+IHtcclxuICAgIC8vICAgICBjb25zdCBOYiA9IHRoaXMubmVpZ2hib3JzKHRvKVxyXG4gICAgLy8gICAgIGNvbnN0IE5hYiA9IGludGVyc2VjdGlvbihOYSwgTmIpXHJcbiAgICAvLyAgICAgY29uc3QgbWVhc3VyZSA9IE5hYi5sZW5ndGhcclxuICAgIC8vICAgICByZXN1bHRzW3RvXSA9IHsgbWVhc3VyZSwgZXh0cmE6IE5hYiB9XHJcbiAgICAvLyAgIH0pXHJcbiAgICAvLyAgIHJldHVybiByZXN1bHRzXHJcbiAgICAvLyB9LFxyXG5cclxuICAgICdDby1DaXRhdGlvbnMnOiBhc3luYyAoYTogc3RyaW5nKTogUHJvbWlzZTxDb0NpdGF0aW9uTWFwPiA9PiB7XHJcbiAgICAgIGNvbnN0IG1kQ2FjaGUgPSB0aGlzLmFwcC5tZXRhZGF0YUNhY2hlXHJcbiAgICAgIGNvbnN0IHJlc3VsdHMgPSB7fSBhcyBDb0NpdGF0aW9uTWFwXHJcbiAgICAgIGNvbnN0IHsgc2V0dGluZ3MgfSA9IHRoaXNcclxuXHJcbiAgICAgIC8vIGNvbnN0IHByZXMgPSB0aGlzLmluTmVpZ2hib3JzKGEpXHJcbiAgICAgIC8vIGZvciAoY29uc3QgcHJlSSBpbiBwcmVzKSB7XHJcbiAgICAgIC8vICAgY29uc3QgcHJlID0gcHJlc1twcmVJXVxyXG4gICAgICB0aGlzLmZvckVhY2hJbk5laWdoYm9yKGEsIGFzeW5jIChwcmUpID0+IHtcclxuICAgICAgICBjb25zdCBmaWxlID0gbWRDYWNoZS5nZXRGaXJzdExpbmtwYXRoRGVzdChwcmUsICcnKVxyXG4gICAgICAgIGlmICghZmlsZSkgcmV0dXJuXHJcblxyXG4gICAgICAgIGNvbnN0IGNhY2hlID0gbWRDYWNoZS5nZXRGaWxlQ2FjaGUoZmlsZSlcclxuXHJcbiAgICAgICAgY29uc3QgcHJlQ29jaXRhdGlvbnM6IHsgW25hbWU6IHN0cmluZ106IFtudW1iZXIsIENvQ2l0YXRpb25bXV0gfSA9IHt9XHJcbiAgICAgICAgY29uc3QgYWxsTGlua3MgPSBbLi4uY2FjaGUubGlua3NdXHJcbiAgICAgICAgaWYgKGNhY2hlLmVtYmVkcykge1xyXG4gICAgICAgICAgYWxsTGlua3MucHVzaCguLi5jYWNoZS5lbWJlZHMpXHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IG93bkxpbmtzID0gYWxsTGlua3MuZmlsdGVyKChsaW5rKSA9PiB7XHJcbiAgICAgICAgICBjb25zdCBsaW5rRmlsZSA9IG1kQ2FjaGUuZ2V0Rmlyc3RMaW5rcGF0aERlc3QoXHJcbiAgICAgICAgICAgIGdldExpbmtwYXRoKGxpbmsubGluayksXHJcbiAgICAgICAgICAgIGZpbGUucGF0aFxyXG4gICAgICAgICAgKVxyXG4gICAgICAgICAgaWYgKCFsaW5rRmlsZSkgcmV0dXJuIGZhbHNlXHJcblxyXG4gICAgICAgICAgY29uc3QgZXh0ZW5zaW9uUSA9XHJcbiAgICAgICAgICAgIHNldHRpbmdzLmFsbEZpbGVFeHRlbnNpb25zIHx8IGxpbmtGaWxlLmV4dGVuc2lvbiA9PT0gJ21kJ1xyXG4gICAgICAgICAgcmV0dXJuIGxpbmtGaWxlLnBhdGggPT09IGEgJiYgZXh0ZW5zaW9uUVxyXG4gICAgICAgIH0pXHJcblxyXG4gICAgICAgIGNvbnN0IGNhY2hlZFJlYWQgPSBhd2FpdCB0aGlzLmFwcC52YXVsdC5jYWNoZWRSZWFkKGZpbGUpXHJcbiAgICAgICAgY29uc3QgbGluZXMgPSBjYWNoZWRSZWFkLnNwbGl0KCdcXG4nKVxyXG5cclxuICAgICAgICAvLyBGaW5kIHRoZSBzZW50ZW5jZSB0aGUgbGluayBpcyBpblxyXG4gICAgICAgIGNvbnN0IG93blNlbnRlbmNlczogTGluZVNlbnRlbmNlc1tdID1cclxuICAgICAgICAgIG93bkxpbmtzLm1hcCgobGluaykgPT4ge1xyXG4gICAgICAgICAgICBsZXQgbGluZSA9IGxpbmVzW2xpbmsucG9zaXRpb24uZW5kLmxpbmVdXHJcbiAgICAgICAgICAgIGNvbnN0IHNlbnRlbmNlcyA9IHRva2VuaXplci5zZW50ZW5jZXMobGluZSwge1xyXG4gICAgICAgICAgICAgIHByZXNlcnZlX3doaXRlc3BhY2U6IHRydWUsXHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIGxldCBbbGlua1NlbnRlbmNlLCBsaW5rU2VudGVuY2VTdGFydCwgbGlua1NlbnRlbmNlRW5kXSA9IGZpbmRTZW50ZW5jZShzZW50ZW5jZXMsIGxpbmspXHJcbiAgICAgICAgICAgIHJldHVybiB7c2VudGVuY2VzLCBsaW5rLCBsaW5lOiBsaW5rLnBvc2l0aW9uLmVuZC5saW5lLCBsaW5rU2VudGVuY2UsIGxpbmtTZW50ZW5jZVN0YXJ0LCBsaW5rU2VudGVuY2VFbmR9XHJcblxyXG4gICAgICAgICAgfSlcclxuXHJcbiAgICAgICAgY29uc3Qgb3duTGlzdEl0ZW1zOiBMaXN0SXRlbUNhY2hlW10gPSBjYWNoZS5saXN0SXRlbXMgP1xyXG4gICAgICAgICAgY2FjaGUubGlzdEl0ZW1zLmZpbHRlcigobGlzdEl0ZW0pID0+IHtcclxuICAgICAgICAgICAgcmV0dXJuIG93bkxpbmtzLmZpbmQoKGxpbmspID0+XHJcbiAgICAgICAgICAgICAgbGluay5wb3NpdGlvbi5zdGFydC5saW5lID49IGxpc3RJdGVtLnBvc2l0aW9uLnN0YXJ0LmxpbmUgJiZcclxuICAgICAgICAgICAgICBsaW5rLnBvc2l0aW9uLmVuZC5saW5lIDw9IGxpc3RJdGVtLnBvc2l0aW9uLmVuZC5saW5lKVxyXG4gICAgICAgICAgICB9KSA6IFtdXHJcblxyXG4gICAgICAgIC8vIEZpbmQgdGhlIHNlY3Rpb24gdGhlIGxpbmsgaXMgaW5cclxuICAgICAgICBjb25zdCBvd25TZWN0aW9ucyA9IG93bkxpbmtzLm1hcCgobGluaykgPT5cclxuICAgICAgICAgIGNhY2hlLnNlY3Rpb25zLmZpbmQoXHJcbiAgICAgICAgICAgIChzZWN0aW9uKSA9PlxyXG4gICAgICAgICAgICAgIHNlY3Rpb24ucG9zaXRpb24uc3RhcnQubGluZSA8PSBsaW5rLnBvc2l0aW9uLnN0YXJ0LmxpbmUgJiZcclxuICAgICAgICAgICAgICBzZWN0aW9uLnBvc2l0aW9uLmVuZC5saW5lID49IGxpbmsucG9zaXRpb24uZW5kLmxpbmVcclxuICAgICAgICAgIClcclxuICAgICAgICApXHJcblxyXG4gICAgICAgIC8vIEZpbmQgdGhlIGhlYWRpbmdzIHRoZSBsaW5rIGlzIHVuZGVyXHJcbiAgICAgICAgbGV0IG1pbkhlYWRpbmdMZXZlbCA9IDdcclxuICAgICAgICBsZXQgbWF4SGVhZGluZ0xldmVsID0gMFxyXG4gICAgICAgIGNvbnN0IG93bkhlYWRpbmdzOiBbSGVhZGluZ0NhY2hlLCBudW1iZXJdW10gPSBbXVxyXG4gICAgICAgIG93bkxpbmtzLmZvckVhY2goKGxpbmspID0+IHtcclxuICAgICAgICAgIGlmICghY2FjaGUuaGVhZGluZ3MpIHJldHVyblxyXG4gICAgICAgICAgY2FjaGUuaGVhZGluZ3MuZm9yRWFjaCgoaGVhZGluZywgaW5kZXgpID0+IHtcclxuICAgICAgICAgICAgbWluSGVhZGluZ0xldmVsID0gTWF0aC5taW4obWluSGVhZGluZ0xldmVsLCBoZWFkaW5nLmxldmVsKVxyXG4gICAgICAgICAgICBtYXhIZWFkaW5nTGV2ZWwgPSBNYXRoLm1heChtYXhIZWFkaW5nTGV2ZWwsIGhlYWRpbmcubGV2ZWwpXHJcbiAgICAgICAgICAgIC8vIFRoZSBsaW5rIGZhbGxzIHVuZGVyIHRoaXMgaGVhZGVyIVxyXG4gICAgICAgICAgICBpZiAoaGVhZGluZy5wb3NpdGlvbi5zdGFydC5saW5lIDw9IGxpbmsucG9zaXRpb24uc3RhcnQubGluZSkge1xyXG4gICAgICAgICAgICAgIGZvciAoY29uc3QgaiBvZiBBcnJheShjYWNoZS5oZWFkaW5ncy5sZW5ndGggLSBpbmRleCAtIDEpLmtleXMoKSkge1xyXG4gICAgICAgICAgICAgICAgbGV0IG5leHRIZWFkaW5nID0gY2FjaGUuaGVhZGluZ3NbaiArIGluZGV4ICsgMV1cclxuICAgICAgICAgICAgICAgIC8vIFNjYW4gZm9yIHRoZSBuZXh0IGhlYWRlciB3aXRoIGF0IGxlYXN0IGFzIGxvdyBvZiBhIGxldmVsXHJcbiAgICAgICAgICAgICAgICBpZiAobmV4dEhlYWRpbmcubGV2ZWwgPj0gaGVhZGluZy5sZXZlbCkge1xyXG4gICAgICAgICAgICAgICAgICBpZiAoXHJcbiAgICAgICAgICAgICAgICAgICAgbmV4dEhlYWRpbmcucG9zaXRpb24uc3RhcnQubGluZSA8PSBsaW5rLnBvc2l0aW9uLnN0YXJ0LmxpbmVcclxuICAgICAgICAgICAgICAgICAgKVxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVyblxyXG4gICAgICAgICAgICAgICAgICBvd25IZWFkaW5ncy5wdXNoKFtoZWFkaW5nLCBuZXh0SGVhZGluZy5wb3NpdGlvbi5zdGFydC5saW5lXSlcclxuICAgICAgICAgICAgICAgICAgcmV0dXJuXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgIC8vIE5vIG1vcmUgaGVhZGVycyBhZnRlciB0aGlzIG9uZS4gVXNlIGFyYml0cmFyaWx5IG51bWJlciBmb3IgbGVuZ3RoIHRvIGtlZXAgdGhpbmdzIHNpbXBsZS4uLlxyXG4gICAgICAgICAgICAgIG93bkhlYWRpbmdzLnB1c2goW2hlYWRpbmcsIDEwMDAwMDAwMDAwMF0pXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH0pXHJcbiAgICAgICAgfSlcclxuICAgICAgICBtaW5IZWFkaW5nTGV2ZWwgPVxyXG4gICAgICAgICAgY2FjaGUuaGVhZGluZ3MgJiYgY2FjaGUuaGVhZGluZ3MubGVuZ3RoID4gMCA/IG1pbkhlYWRpbmdMZXZlbCA6IDBcclxuICAgICAgICBtYXhIZWFkaW5nTGV2ZWwgPVxyXG4gICAgICAgICAgY2FjaGUuaGVhZGluZ3MgJiYgY2FjaGUuaGVhZGluZ3MubGVuZ3RoID4gMCA/IG1heEhlYWRpbmdMZXZlbCA6IDBcclxuXHJcbiAgICAgICAgLy8gSW50dWl0aW9uIG9mIHdlaWdodDogVGhlIGxlYXN0IHNwZWNpZmljIGhlYWRpbmcgd2lsbCBnaXZlIHRoZSB3ZWlnaHQgMiArIG1heEhlYWRpbmdMZXZlbCAtIG1pbkhlYWRpbmdMZXZlbFxyXG4gICAgICAgIC8vIFdlIHdhbnQgdG8gd2VpZ2h0IGl0IDEgZmFjdG9yIGxlc3MuXHJcbiAgICAgICAgY29uc3QgbWluU2NvcmUgPSAxIC8gTWF0aC5wb3coMiwgNCArIG1heEhlYWRpbmdMZXZlbCAtIG1pbkhlYWRpbmdMZXZlbClcclxuXHJcbiAgICAgICAgY29uc3QgY29DaXRlQ2FuZGlkYXRlczogQ2FjaGVJdGVtW10gPSBbLi4uYWxsTGlua3NdXHJcbiAgICAgICAgaWYgKGNhY2hlLnRhZ3MgJiYgc2V0dGluZ3MuY29UYWdzKSB7XHJcbiAgICAgICAgICBjb0NpdGVDYW5kaWRhdGVzLnB1c2goLi4uY2FjaGUudGFncylcclxuICAgICAgICB9XHJcbiAgICAgICAgY29DaXRlQ2FuZGlkYXRlcy5mb3JFYWNoKChpdGVtKSA9PiB7XHJcbiAgICAgICAgICBsZXQgbGlua1BhdGg6IHN0cmluZyA9IG51bGxcclxuICAgICAgICAgIGlmICgnbGluaycgaW4gaXRlbSkge1xyXG4gICAgICAgICAgICBjb25zdCBsaW5rRmlsZSA9IG1kQ2FjaGUuZ2V0Rmlyc3RMaW5rcGF0aERlc3QoXHJcbiAgICAgICAgICAgICAgZ2V0TGlua3BhdGgoKGl0ZW0gYXMgUmVmZXJlbmNlQ2FjaGUpPy5saW5rID8/ICcnKSA/PyAnJyxcclxuICAgICAgICAgICAgICBmaWxlLnBhdGhcclxuICAgICAgICAgICAgKVxyXG4gICAgICAgICAgICBpZiAoIWxpbmtGaWxlKSB7XHJcbiAgICAgICAgICAgICAgbGlua1BhdGggPSAoaXRlbSBhcyBSZWZlcmVuY2VDYWNoZSkubGlua1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8vIElmIHlvdSBkb24ndCB3YW50IHRvIGNoZWNrIGFsbCBleHRlbnNpb25zIEFORCB0aGUgZXh0ZW5zaW9uIGlzIG5vdCAubWQsIHJldHVyblxyXG4gICAgICAgICAgICAvLyBUaGUgbmVnYXRpb24gaXMsIGlmIHlvdSB3YW50IHRvIGNoZWNrIGFsbCBmaWxlcywgT1IgdGhlIGV4dGVuc2lvbiBpcyAubWQsIHRoZW4gZG9uJ3QgcmV0dXJuIHlldFxyXG4gICAgICAgICAgICBlbHNlIGlmIChcclxuICAgICAgICAgICAgICAhc2V0dGluZ3MuYWxsRmlsZUV4dGVuc2lvbnMgJiZcclxuICAgICAgICAgICAgICBsaW5rRmlsZS5leHRlbnNpb24gIT09ICdtZCdcclxuICAgICAgICAgICAgKSB7XHJcbiAgICAgICAgICAgICAgcmV0dXJuXHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgLy8gU29tZXRoaW5nIGlzIGhhcHBlbmluZyBoZXJlIHdoZXJlIGltZ3MgYXJlbid0IGJlaW5nIGFkZGVkIHRvIHByZUNvY2l0YXRpb25zLi4uXHJcbiAgICAgICAgICAgICAgLy8gSSB0aGluayBpdCdzIGJlY2F1c2Ugb25seSB0aGUgYmFzZW5hbWUgaXMgYmVpbmcgYWRkZWQgYXMgYSBrZXksIGJ1dCB0aGUgd2hvbGUgcGF0aCBpcyBuZWVkZWQgd2hlbiBhY2Nlc3NpbmcgaXQgZm9yIGByZXN1bHRzYFxyXG4gICAgICAgICAgICAgIGxpbmtQYXRoID0gbGlua0ZpbGUucGF0aFxyXG4gICAgICAgICAgICAgIGlmIChsaW5rUGF0aCA9PT0gYSkgcmV0dXJuXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH0gZWxzZSBpZiAoJ3RhZycgaW4gaXRlbSkge1xyXG4gICAgICAgICAgICBsaW5rUGF0aCA9IChpdGVtIGFzIFRhZ0NhY2hlKS50YWdcclxuICAgICAgICAgIH0gZWxzZSByZXR1cm5cclxuXHJcbiAgICAgICAgICAvLyBJbml0aWFsaXplIHRvIDAgaWYgbm90IHNldCB5ZXRcclxuICAgICAgICAgIGlmICghKGxpbmtQYXRoIGluIHByZUNvY2l0YXRpb25zKSkge1xyXG4gICAgICAgICAgICBwcmVDb2NpdGF0aW9uc1tsaW5rUGF0aF0gPSBbMCwgW11dXHJcbiAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgY29uc3QgbGluZUNvbnRlbnQgPSBsaW5lc1tpdGVtLnBvc2l0aW9uLnN0YXJ0LmxpbmVdXHJcbiAgICAgICAgICAvLyBDaGVjayBpZiB0aGUgbGluayBpcyBvbiB0aGUgc2FtZSBsaW5lXHJcbiAgICAgICAgICBsZXQgaGFzT3duTGluZSA9IGZhbHNlXHJcbiAgICAgICAgICBvd25TZW50ZW5jZXMuZm9yRWFjaCgobGluZVNlbnRlbmNlKSA9PiB7XHJcbiAgICAgICAgICAgIC8vIE9uIHRoZSBzYW1lIGxpbmVcclxuICAgICAgICAgICAgaWYgKGl0ZW0ucG9zaXRpb24uc3RhcnQubGluZSA9PT0gbGluZVNlbnRlbmNlLmxpbmUpIHtcclxuICAgICAgICAgICAgICBjb25zdCBbaXRlbVNlbnRlbmNlLCBpdGVtU2VudGVuY2VTdGFydCwgaXRlbVNlbnRlbmNlRW5kXSA9IGZpbmRTZW50ZW5jZShsaW5lU2VudGVuY2Uuc2VudGVuY2VzLCBpdGVtKVxyXG4gICAgICAgICAgICAgIGNvbnN0IG93bkxpbmsgPSBsaW5lU2VudGVuY2UubGlua1xyXG4gICAgICAgICAgICAgIGNvbnN0IG0xU3RhcnQgPSBNYXRoLm1pbihcclxuICAgICAgICAgICAgICAgIGl0ZW0ucG9zaXRpb24uc3RhcnQuY29sLFxyXG4gICAgICAgICAgICAgICAgb3duTGluay5wb3NpdGlvbi5zdGFydC5jb2xcclxuICAgICAgICAgICAgICApXHJcbiAgICAgICAgICAgICAgY29uc3QgbTFFbmQgPSBNYXRoLm1pbihcclxuICAgICAgICAgICAgICAgIGl0ZW0ucG9zaXRpb24uZW5kLmNvbCxcclxuICAgICAgICAgICAgICAgIG93bkxpbmsucG9zaXRpb24uZW5kLmNvbFxyXG4gICAgICAgICAgICAgIClcclxuICAgICAgICAgICAgICBjb25zdCBtMlN0YXJ0ID0gTWF0aC5tYXgoXHJcbiAgICAgICAgICAgICAgICBpdGVtLnBvc2l0aW9uLnN0YXJ0LmNvbCxcclxuICAgICAgICAgICAgICAgIG93bkxpbmsucG9zaXRpb24uc3RhcnQuY29sXHJcbiAgICAgICAgICAgICAgKVxyXG4gICAgICAgICAgICAgIGNvbnN0IG0yRW5kID0gTWF0aC5tYXgoXHJcbiAgICAgICAgICAgICAgICBpdGVtLnBvc2l0aW9uLmVuZC5jb2wsXHJcbiAgICAgICAgICAgICAgICBvd25MaW5rLnBvc2l0aW9uLmVuZC5jb2xcclxuICAgICAgICAgICAgICApXHJcbiAgICAgICAgICAgICAgLy8gQnJlYWsgc2VudGVuY2UgdXAgYmV0d2VlbiB0aGUgdHdvIGxpbmtzLiBVc2VkIGZvciByZW5kZXJpbmdcclxuICAgICAgICAgICAgICBjb25zdCBzbGljZWRTZW50ZW5jZSA9IFtcclxuICAgICAgICAgICAgICAgIGxpbmVDb250ZW50LnNsaWNlKE1hdGgubWluKGl0ZW1TZW50ZW5jZVN0YXJ0LCBsaW5lU2VudGVuY2UubGlua1NlbnRlbmNlU3RhcnQpLCBtMVN0YXJ0KSxcclxuICAgICAgICAgICAgICAgIGxpbmVDb250ZW50LnNsaWNlKG0xU3RhcnQsIG0xRW5kKSxcclxuICAgICAgICAgICAgICAgIGxpbmVDb250ZW50LnNsaWNlKG0xRW5kLCBtMlN0YXJ0KSxcclxuICAgICAgICAgICAgICAgIGxpbmVDb250ZW50LnNsaWNlKG0yU3RhcnQsIG0yRW5kKSxcclxuICAgICAgICAgICAgICAgIGxpbmVDb250ZW50LnNsaWNlKG0yRW5kLCBNYXRoLm1heChpdGVtU2VudGVuY2VFbmQsIGxpbmVTZW50ZW5jZS5saW5rU2VudGVuY2VFbmQpKSxcclxuICAgICAgICAgICAgICBdXHJcblxyXG4gICAgICAgICAgICAgIGxldCBtZWFzdXJlID0gMSAvIDJcclxuICAgICAgICAgICAgICBjb25zdCBzZW50ZW5jZURpc3QgPSBNYXRoLmFicyhpdGVtU2VudGVuY2UgLSBsaW5lU2VudGVuY2UubGlua1NlbnRlbmNlKVxyXG5cclxuICAgICAgICAgICAgICAvLyBHcmFudWxhcml0eSBvZiBzZW50ZW5jZSBkaXN0YW5jZSBzY29yZXNcclxuICAgICAgICAgICAgICBpZiAoc2VudGVuY2VEaXN0ID09PSAwKSB7XHJcbiAgICAgICAgICAgICAgICBtZWFzdXJlID0gMVxyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICBlbHNlIGlmIChzZW50ZW5jZURpc3QgPT09IDEpIHtcclxuICAgICAgICAgICAgICAgIG1lYXN1cmUgPSAwLjg1XHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgIGVsc2UgaWYgKHNlbnRlbmNlRGlzdCA9PT0gMikge1xyXG4gICAgICAgICAgICAgICAgbWVhc3VyZSA9IDAuN1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICBlbHNlIGlmIChzZW50ZW5jZURpc3QgPT09IDMpIHtcclxuICAgICAgICAgICAgICAgIG1lYXN1cmUgPSAwLjZcclxuICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgIHByZUNvY2l0YXRpb25zW2xpbmtQYXRoXVswXSA9IE1hdGgubWF4KG1lYXN1cmUsIHByZUNvY2l0YXRpb25zW2xpbmtQYXRoXVswXSlcclxuICAgICAgICAgICAgICBwcmVDb2NpdGF0aW9uc1tsaW5rUGF0aF1bMV0ucHVzaCh7XHJcbiAgICAgICAgICAgICAgICBzZW50ZW5jZTogc2xpY2VkU2VudGVuY2UsXHJcbiAgICAgICAgICAgICAgICBtZWFzdXJlLFxyXG4gICAgICAgICAgICAgICAgc291cmNlOiBwcmUsXHJcbiAgICAgICAgICAgICAgICBsaW5lOiBsaW5lU2VudGVuY2UubGluZSxcclxuICAgICAgICAgICAgICB9KVxyXG5cclxuICAgICAgICAgICAgICAvLyBXZSBoYXZlIHRvIHJ1biB0aGlzIGZvciBldmVyeSBPd25TZW50ZW5jZSBzaW5jZSB0aGVyZSBtaWdodCBiZSBtdWx0aXBsZSBvbiB0aGUgc2FtZSBsaW5lXHJcbiAgICAgICAgICAgICAgaGFzT3duTGluZSA9IHRydWVcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfSlcclxuICAgICAgICAgIGlmIChoYXNPd25MaW5lKSByZXR1cm5cclxuXHJcbiAgICAgICAgICBjb25zdCBzZW50ZW5jZSA9IFtcclxuICAgICAgICAgICAgbGluZUNvbnRlbnQuc2xpY2UoMCwgaXRlbS5wb3NpdGlvbi5zdGFydC5jb2wpLFxyXG4gICAgICAgICAgICBsaW5lQ29udGVudC5zbGljZShpdGVtLnBvc2l0aW9uLnN0YXJ0LmNvbCwgaXRlbS5wb3NpdGlvbi5lbmQuY29sKSxcclxuICAgICAgICAgICAgbGluZUNvbnRlbnQuc2xpY2UoaXRlbS5wb3NpdGlvbi5lbmQuY29sLCBsaW5lQ29udGVudC5sZW5ndGgpLFxyXG4gICAgICAgICAgXVxyXG5cclxuICAgICAgICAgIC8vIENoZWNrIGlmIGluIGFuIG91dGxpbmUgaGllcmFyY2h5XHJcbiAgICAgICAgICBjb25zdCBsaXN0SXRlbTogTGlzdEl0ZW1DYWNoZSA9XHJcbiAgICAgICAgICAgIGNhY2hlPy5saXN0SXRlbXM/LmZpbmQoKGxpc3RJdGVtKSA9PlxyXG4gICAgICAgICAgICAgICAgaXRlbS5wb3NpdGlvbi5zdGFydC5saW5lID49IGxpc3RJdGVtLnBvc2l0aW9uLnN0YXJ0LmxpbmUgJiZcclxuICAgICAgICAgICAgICAgIGl0ZW0ucG9zaXRpb24uZW5kLmxpbmUgPD0gbGlzdEl0ZW0ucG9zaXRpb24uZW5kLmxpbmVcclxuICAgICAgICAgICAgKVxyXG4gICAgICAgICAgbGV0IGZvdW5kSGllcmFyY2h5ID0gZmFsc2VcclxuICAgICAgICAgIGlmIChsaXN0SXRlbSkge1xyXG4gICAgICAgICAgICBvd25MaXN0SXRlbXMuZm9yRWFjaCgob3duTGlzdEl0ZW0pID0+IHtcclxuICAgICAgICAgICAgICAvLyBTaGFyZWQgcGFyZW50IGlzIGdvb2QhXHJcbiAgICAgICAgICAgICAgaWYgKG93bkxpc3RJdGVtLnBhcmVudCA9PT0gbGlzdEl0ZW0ucGFyZW50KSB7XHJcbiAgICAgICAgICAgICAgICBhZGRQcmVDb2NpdGF0aW9uKHByZUNvY2l0YXRpb25zLCBsaW5rUGF0aCwgMC40LCBzZW50ZW5jZSwgcHJlLCBpdGVtLnBvc2l0aW9uLnN0YXJ0LmxpbmUpXHJcbiAgICAgICAgICAgICAgICBmb3VuZEhpZXJhcmNoeSA9IHRydWVcclxuICAgICAgICAgICAgICAgIHJldHVyblxyXG4gICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgLy8gSWYgb25lIG9mIHRoZSBhcHBlYXJhbmNlcyBpcyBmdXJ0aGVyIGRvd24gdGhlIGhpZXJhY2h5LFxyXG4gICAgICAgICAgICAgIC8vICAgYnV0IGluIHRoZSBzYW1lIG9uZSxcclxuICAgICAgICAgICAgICAvLyAgIHRoYXQgaXMgYWxzbyBuaWNlISBCdXQgaGFzIHRvIGJlIGRvbmUgaW4gYm90aCBkaXJlY3Rpb25zXHJcbiAgICAgICAgICAgICAgLy8gRmlyc3QsIHVwIGZyb20gb3duTGlzdEl0ZW1cclxuICAgICAgICAgICAgICBjb25zdCBmaW5kSW5IaWVyYXJjaHkgPSBmdW5jdGlvbihmcm9tOiBMaXN0SXRlbUNhY2hlLCB0bzogTGlzdEl0ZW1DYWNoZSk6IGJvb2xlYW4ge1xyXG4gICAgICAgICAgICAgICAgbGV0IGl0ZXJMaXN0SXRlbTogTGlzdEl0ZW1DYWNoZSA9IGZyb21cclxuICAgICAgICAgICAgICAgIGxldCBkaXN0YW5jZSA9IDFcclxuICAgICAgICAgICAgICAgIC8vIE5lZ2F0aXZlIHBhcmVudHMgZGVub3RlIHRvcC1sZXZlbCBsaXN0IGl0ZW1zXHJcbiAgICAgICAgICAgICAgICB3aGlsZSAoaXRlckxpc3RJdGVtLnBhcmVudCA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgaWYgKGl0ZXJMaXN0SXRlbS5wYXJlbnQgPT09IHRvLnBvc2l0aW9uLnN0YXJ0LmxpbmUpIHtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgbWVhc3VyZSA9IDAuM1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChkaXN0YW5jZSA9PT0gMSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgbWVhc3VyZSA9IDAuNlxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChkaXN0YW5jZSA9PT0gMikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgbWVhc3VyZSA9IDAuNVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChkaXN0YW5jZSA9PT0gMykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgbWVhc3VyZSA9IDAuNFxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChkaXN0YW5jZSA9PT0gNCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgbWVhc3VyZSA9IDAuMzVcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgYWRkUHJlQ29jaXRhdGlvbihwcmVDb2NpdGF0aW9ucywgbGlua1BhdGgsIG1lYXN1cmUsIHNlbnRlbmNlLCBwcmUsIGl0ZW0ucG9zaXRpb24uc3RhcnQubGluZSlcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZVxyXG4gICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgIGRpc3RhbmNlICs9IDFcclxuICAgICAgICAgICAgICAgICAgLy8gTW92ZSB0byB0aGUgcGFyZW50XHJcbiAgICAgICAgICAgICAgICAgIGl0ZXJMaXN0SXRlbSA9IGNhY2hlLmxpc3RJdGVtcy5maW5kKChsaXRlbSkgPT5cclxuICAgICAgICAgICAgICAgICAgICBpdGVyTGlzdEl0ZW0ucGFyZW50ID09PSBsaXRlbS5wb3NpdGlvbi5zdGFydC5saW5lKVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlXHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgIGlmIChmaW5kSW5IaWVyYXJjaHkob3duTGlzdEl0ZW0sIGxpc3RJdGVtKSB8fCBmaW5kSW5IaWVyYXJjaHkobGlzdEl0ZW0sIG93bkxpc3RJdGVtKSkge1xyXG4gICAgICAgICAgICAgICAgZm91bmRIaWVyYXJjaHkgPSB0cnVlXHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgaWYgKGZvdW5kSGllcmFyY2h5KSByZXR1cm5cclxuXHJcblxyXG4gICAgICAgICAgLy8gQ2hlY2sgaWYgaXQgaXMgaW4gdGhlIHNhbWUgcGFyYWdyYXBoXHJcbiAgICAgICAgICBjb25zdCBzYW1lUGFyYWdyYXBoID0gb3duU2VjdGlvbnMuZmluZChcclxuICAgICAgICAgICAgKHNlY3Rpb24pID0+XHJcbiAgICAgICAgICAgICAgc2VjdGlvbi5wb3NpdGlvbi5zdGFydC5saW5lIDw9IGl0ZW0ucG9zaXRpb24uc3RhcnQubGluZSAmJlxyXG4gICAgICAgICAgICAgIHNlY3Rpb24ucG9zaXRpb24uZW5kLmxpbmUgPj0gaXRlbS5wb3NpdGlvbi5lbmQubGluZVxyXG4gICAgICAgICAgKVxyXG4gICAgICAgICAgaWYgKHNhbWVQYXJhZ3JhcGgpIHtcclxuICAgICAgICAgICAgYWRkUHJlQ29jaXRhdGlvbihwcmVDb2NpdGF0aW9ucywgbGlua1BhdGgsIDEgLyA0LCBzZW50ZW5jZSwgcHJlLCBpdGVtLnBvc2l0aW9uLnN0YXJ0LmxpbmUpXHJcbiAgICAgICAgICAgIHJldHVyblxyXG4gICAgICAgICAgfVxyXG5cclxuICAgICAgICAgIC8vIEZpbmQgdGhlIGJlc3QgY29ycmVzcG9uZGluZyBoZWFkaW5nXHJcbiAgICAgICAgICBjb25zdCBoZWFkaW5nTWF0Y2hlcyA9IG93bkhlYWRpbmdzLmZpbHRlcihcclxuICAgICAgICAgICAgKFtoZWFkaW5nLCBlbmRdKSA9PlxyXG4gICAgICAgICAgICAgIGhlYWRpbmcucG9zaXRpb24uc3RhcnQubGluZSA8PSBpdGVtLnBvc2l0aW9uLnN0YXJ0LmxpbmUgJiZcclxuICAgICAgICAgICAgICBlbmQgPiBpdGVtLnBvc2l0aW9uLmVuZC5saW5lXHJcbiAgICAgICAgICApXHJcbiAgICAgICAgICBpZiAoaGVhZGluZ01hdGNoZXMubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICBjb25zdCBiZXN0TGV2ZWwgPSBNYXRoLm1heChcclxuICAgICAgICAgICAgICAuLi5oZWFkaW5nTWF0Y2hlcy5tYXAoKFtoZWFkaW5nLCBfXSkgPT4gaGVhZGluZy5sZXZlbClcclxuICAgICAgICAgICAgKVxyXG4gICAgICAgICAgICAvLyBJbnR1aXRpb246IElmIHRoZXkgYXJlIGJvdGggdW5kZXIgdGhlIHNhbWUgJ2hpZ2hlc3QnLWxldmVsIGhlYWRpbmcsIHRoZXkgZ2V0IHdlaWdodCAxLzRcclxuICAgICAgICAgICAgLy8gVGhlbiwgbWF4SGVhZGluZ0xldmVsIC0gYmVzdExldmVsID0gMCwgc28gd2UgZ2V0IDEvKDJeMik9MS80LiBJZiB0aGUgbGluayBhcHBlYXJzIG9ubHkgdW5kZXJcclxuICAgICAgICAgICAgLy8gbGVzcyBzcGVjaWZpYyBoZWFkaW5ncywgdGhlIHdlaWdodCB3aWxsIGRlY3JlYXNlLlxyXG4gICAgICAgICAgICBjb25zdCBzY29yZSA9IDEgLyBNYXRoLnBvdygyLCAzICsgbWF4SGVhZGluZ0xldmVsIC0gYmVzdExldmVsKVxyXG4gICAgICAgICAgICBhZGRQcmVDb2NpdGF0aW9uKHByZUNvY2l0YXRpb25zLCBsaW5rUGF0aCwgc2NvcmUsIHNlbnRlbmNlLCBwcmUsIGl0ZW0ucG9zaXRpb24uc3RhcnQubGluZSlcclxuICAgICAgICAgICAgcmV0dXJuXHJcbiAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgLy8gVGhlIGxpbmtzIGFwcGVhciB0b2dldGhlciBpbiB0aGUgc2FtZSBkb2N1bWVudCwgYnV0IG5vdCB1bmRlciBhIHNoYXJlZCBoZWFkaW5nXHJcbiAgICAgICAgICBhZGRQcmVDb2NpdGF0aW9uKHByZUNvY2l0YXRpb25zLCBsaW5rUGF0aCwgbWluU2NvcmUsIHNlbnRlbmNlLCBwcmUsIGl0ZW0ucG9zaXRpb24uc3RhcnQubGluZSlcclxuICAgICAgICB9KVxyXG5cclxuICAgICAgICBpZiAoc2V0dGluZ3MuY29UYWdzKSB7XHJcbiAgICAgICAgICBnZXRBbGxUYWdzKGNhY2hlKS5mb3JFYWNoKCh0YWcpID0+IHtcclxuICAgICAgICAgICAgaWYgKCEodGFnIGluIHByZUNvY2l0YXRpb25zKSkge1xyXG4gICAgICAgICAgICAgIC8vIFRhZyBkZWZpbmVkIGluIFlBTUwuIEdldHMgdGhlIGxvd2VzdCBzY29yZSAoaGFzIG5vIHBhcnRpY3VsYXIgcG9zaXRpb24pXHJcblxyXG4gICAgICAgICAgICAgIHByZUNvY2l0YXRpb25zW3RhZ10gPSBbXHJcbiAgICAgICAgICAgICAgICBtaW5TY29yZSxcclxuICAgICAgICAgICAgICAgIFtcclxuICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIG1lYXN1cmU6IG1pblNjb3JlLFxyXG4gICAgICAgICAgICAgICAgICAgIHNlbnRlbmNlOiBbJycsICcnLCAnJ10sXHJcbiAgICAgICAgICAgICAgICAgICAgc291cmNlOiBwcmUsXHJcbiAgICAgICAgICAgICAgICAgICAgbGluZTogMCxcclxuICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIF0sXHJcbiAgICAgICAgICAgICAgXVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9KVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gQWRkIHRoZSBmb3VuZCB3ZWlnaHRzIHRvIHRoZSByZXN1bHRzXHJcbiAgICAgICAgZm9yIChsZXQga2V5IGluIHByZUNvY2l0YXRpb25zKSB7XHJcbiAgICAgICAgICBjb25zdCBmaWxlID0gbWRDYWNoZS5nZXRGaXJzdExpbmtwYXRoRGVzdChrZXksICcnKVxyXG4gICAgICAgICAgbGV0IG5hbWUgPSBudWxsXHJcbiAgICAgICAgICBsZXQgcmVzb2x2ZWQgPSB0cnVlXHJcbiAgICAgICAgICBpZiAoZmlsZSkge1xyXG4gICAgICAgICAgICBuYW1lID0gZmlsZS5wYXRoXHJcbiAgICAgICAgICB9IGVsc2UgaWYgKGtleVswXSA9PT0gJyMnKSB7XHJcbiAgICAgICAgICAgIG5hbWUgPSBrZXlcclxuICAgICAgICAgIH0gZWxzZSBpZiAoc2V0dGluZ3MuYWRkVW5yZXNvbHZlZCkge1xyXG4gICAgICAgICAgICBuYW1lID0ga2V5ICsgJy5tZCdcclxuICAgICAgICAgICAgcmVzb2x2ZWQgPSBmYWxzZVxyXG4gICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgY29udGludWVcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIGxldCBjb2NpdGF0aW9uID0gcHJlQ29jaXRhdGlvbnNba2V5XVxyXG4gICAgICAgICAgaWYgKG5hbWUgaW4gcmVzdWx0cykge1xyXG4gICAgICAgICAgICByZXN1bHRzW25hbWVdLm1lYXN1cmUgKz0gY29jaXRhdGlvblswXVxyXG4gICAgICAgICAgICByZXN1bHRzW25hbWVdLmNvQ2l0YXRpb25zLnB1c2goLi4uY29jaXRhdGlvblsxXSlcclxuICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHJlc3VsdHNbbmFtZV0gPSB7XHJcbiAgICAgICAgICAgICAgbWVhc3VyZTogY29jaXRhdGlvblswXSxcclxuICAgICAgICAgICAgICBjb0NpdGF0aW9uczogY29jaXRhdGlvblsxXSxcclxuICAgICAgICAgICAgICByZXNvbHZlZFxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgfSlcclxuICAgICAgcmVzdWx0c1thXSA9IHsgbWVhc3VyZTogMCwgY29DaXRhdGlvbnM6IFtdLCByZXNvbHZlZDogdHJ1ZSB9O1xyXG5cclxuICAgICAgcmV0dXJuIHJlc3VsdHNcclxuICAgIH0sXHJcblxyXG4gICAgJ0xhYmVsIFByb3BhZ2F0aW9uJzogYXN5bmMgKFxyXG4gICAgICBhOiBzdHJpbmcsXHJcbiAgICAgIG9wdGlvbnM6IHsgaXRlcmF0aW9uczogbnVtYmVyIH1cclxuICAgICk6IFByb21pc2U8Q29tbXVuaXRpZXM+ID0+IHtcclxuICAgICAgbGV0IGxhYmVsZWROb2RlczogeyBbbm9kZTogc3RyaW5nXTogc3RyaW5nIH0gPSB7fVxyXG4gICAgICB0aGlzLmZvckVhY2hOb2RlKChub2RlKSA9PiB7XHJcbiAgICAgICAgbGFiZWxlZE5vZGVzW25vZGVdID0gbm9kZVxyXG4gICAgICB9KVxyXG5cclxuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBvcHRpb25zLml0ZXJhdGlvbnM7IGkrKykge1xyXG4gICAgICAgIGNvbnN0IG5ld0xhYmVsZWROb2RlczogeyBbbm9kZTogc3RyaW5nXTogc3RyaW5nIH0gPSB7fVxyXG4gICAgICAgIHRoaXMuZm9yRWFjaE5vZGUoKG5vZGUpID0+IHtcclxuICAgICAgICAgIGNvbnN0IG5laWdoYm91cnMgPSB0aGlzLm5laWdoYm9ycyhub2RlKVxyXG4gICAgICAgICAgaWYgKG5laWdoYm91cnMubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IG5laWdoYm91ckxhYmVscyA9IG5laWdoYm91cnMubWFwKFxyXG4gICAgICAgICAgICAgIC8vIFRha2UgdGhlIGxhYmVsIGZyb20gdGhlIG5vdC15ZXQtdXBkYXRlZC1sYWJlbHNcclxuICAgICAgICAgICAgICAobmVpZ2hib3VyKSA9PiBsYWJlbGVkTm9kZXNbbmVpZ2hib3VyXVxyXG4gICAgICAgICAgICApXHJcbiAgICAgICAgICAgIGNvbnN0IGNvdW50cyA9IGdldENvdW50cyhuZWlnaGJvdXJMYWJlbHMpXHJcbiAgICAgICAgICAgIG5ld0xhYmVsZWROb2Rlc1tub2RlXSA9IGdldE1heEtleShjb3VudHMpXHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSlcclxuICAgICAgICAvLyBVcGRhdGUgdGhlIGxhYmVsc1xyXG4gICAgICAgIGxhYmVsZWROb2RlcyA9IG5ld0xhYmVsZWROb2Rlc1xyXG4gICAgICB9XHJcblxyXG4gICAgICAvLyBDcmVhdGUgdGhlIGNvbW11bml0aWVzXHJcbiAgICAgIHJldHVybiBnYXRoZXJDb21tdW5pdGllcyhsYWJlbGVkTm9kZXMpXHJcbiAgICB9LFxyXG5cclxuICAgIExvdXZhaW46IGFzeW5jIChcclxuICAgICAgYTogc3RyaW5nLFxyXG4gICAgICBvcHRpb25zOiB7IHJlc29sdXRpb246IG51bWJlciB9ID0geyByZXNvbHV0aW9uOiAxMCB9XHJcbiAgICApOiBQcm9taXNlPHN0cmluZ1tdPiA9PiB7XHJcbiAgICAgIGNvbnN0IGxhYmVsbGVkTm9kZXMgPSBsb3V2YWluKHRoaXMsIG9wdGlvbnMpXHJcbiAgICAgIGNvbnN0IGxhYmVsT2ZBID0gbGFiZWxsZWROb2Rlc1thXVxyXG4gICAgICBjb25zdCBjdXJyQ29tbTogc3RyaW5nW10gPSBbXVxyXG4gICAgICB0aGlzLmZvckVhY2hOb2RlKChub2RlKSA9PiB7XHJcbiAgICAgICAgaWYgKGxhYmVsbGVkTm9kZXNbbm9kZV0gPT09IGxhYmVsT2ZBKSB7XHJcbiAgICAgICAgICBjdXJyQ29tbS5wdXNoKG5vZGUpXHJcbiAgICAgICAgfVxyXG4gICAgICB9KVxyXG4gICAgICByZXR1cm4gY3VyckNvbW1cclxuICAgIH0sXHJcblxyXG4gICAgJ0NsdXN0ZXJpbmcgQ29lZmZpY2llbnQnOiBhc3luYyAoYTogc3RyaW5nKTogUHJvbWlzZTxSZXN1bHRNYXA+ID0+IHtcclxuICAgICAgY29uc3QgcmVzdWx0czogUmVzdWx0TWFwID0ge31cclxuXHJcbiAgICAgIHRoaXMuZm9yRWFjaE5vZGUoKHRvOiBzdHJpbmcpID0+IHtcclxuICAgICAgICBjb25zdCB7IGNvZWZmLCB0cmlhbmdsZXMgfSA9IGNsdXN0ZXJpbmdDb2VmZmljaWVudCh0aGlzLCB0bylcclxuICAgICAgICByZXN1bHRzW3RvXSA9IHtcclxuICAgICAgICAgIG1lYXN1cmU6IHJvdW5kTnVtYmVyKGNvZWZmKSxcclxuICAgICAgICAgIGV4dHJhOiB0cmlhbmdsZXMubWFwKChncm91cCkgPT4gZ3JvdXAuam9pbignLCAnKSksXHJcbiAgICAgICAgfVxyXG4gICAgICB9KVxyXG4gICAgICByZXR1cm4gcmVzdWx0c1xyXG4gICAgfSxcclxuXHJcbiAgICBCb1c6IGFzeW5jIChhOiBzdHJpbmcpOiBQcm9taXNlPFJlc3VsdE1hcD4gPT4ge1xyXG4gICAgICBjb25zdCByZXN1bHRzOiBSZXN1bHRNYXAgPSB7fVxyXG4gICAgICBjb25zdCBubHAgPSBnZXROTFBQbHVnaW4odGhpcy5hcHApXHJcbiAgICAgIGlmICghbmxwKSByZXR1cm4gcmVzdWx0c1xyXG5cclxuICAgICAgY29uc3QgeyBEb2NzIH0gPSBubHBcclxuICAgICAgY29uc3Qgc291cmNlQm9XID0gbmxwLmdldE5vU3RvcEJvVyhEb2NzW2FdKVxyXG5cclxuICAgICAgdGhpcy5mb3JFYWNoTm9kZShhc3luYyAodG86IHN0cmluZykgPT4ge1xyXG4gICAgICAgIGNvbnN0IHRhcmdldERvYyA9IERvY3NbdG9dXHJcbiAgICAgICAgaWYgKCF0YXJnZXREb2MpIHtcclxuICAgICAgICAgIHJlc3VsdHNbdG9dID0geyBtZWFzdXJlOiAwLCBleHRyYTogW10gfVxyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCB0YXJnZXRCb1cgPSBubHAuZ2V0Tm9TdG9wQm9XKERvY3NbdG9dKVxyXG5cclxuICAgICAgICBjb25zdCBtZWFzdXJlID0gc2ltaWxhcml0eS5ib3cuY29zaW5lKHNvdXJjZUJvVywgdGFyZ2V0Qm9XKVxyXG4gICAgICAgIHJlc3VsdHNbdG9dID0ge1xyXG4gICAgICAgICAgbWVhc3VyZSxcclxuICAgICAgICAgIGV4dHJhOiBbXSxcclxuICAgICAgICB9XHJcbiAgICAgIH0pXHJcbiAgICAgIHJldHVybiByZXN1bHRzXHJcbiAgICB9LFxyXG5cclxuICAgIC8vIFR2ZXJza3k6IGFzeW5jIChhOiBzdHJpbmcpOiBQcm9taXNlPFJlc3VsdE1hcD4gPT4ge1xyXG4gICAgLy8gICBjb25zdCByZXN1bHRzOiBSZXN1bHRNYXAgPSB7fVxyXG4gICAgLy8gICBjb25zdCBubHAgPSBnZXROTFBQbHVnaW4odGhpcy5hcHApXHJcbiAgICAvLyAgIGlmICghbmxwKSByZXR1cm4gcmVzdWx0c1xyXG5cclxuICAgIC8vICAgY29uc3QgeyBEb2NzIH0gPSBubHBcclxuICAgIC8vICAgY29uc3Qgc291cmNlU2V0ID0gbmxwLmdldE5vU3RvcFNldChEb2NzW2FdKVxyXG5cclxuICAgIC8vICAgdGhpcy5mb3JFYWNoTm9kZShhc3luYyAodG86IHN0cmluZykgPT4ge1xyXG4gICAgLy8gICAgIGNvbnN0IHRhcmdldERvYyA9IERvY3NbdG9dXHJcbiAgICAvLyAgICAgaWYgKCF0YXJnZXREb2MpIHtcclxuICAgIC8vICAgICAgIHJlc3VsdHNbdG9dID0geyBtZWFzdXJlOiAwLCBleHRyYTogW10gfVxyXG4gICAgLy8gICAgIH1cclxuICAgIC8vICAgICBjb25zdCB0YXJnZXRTZXQgPSBubHAuZ2V0Tm9TdG9wU2V0KERvY3NbdG9dKVxyXG5cclxuICAgIC8vICAgICBjb25zdCBtZWFzdXJlID0gc2ltaWxhcml0eS5zZXQudHZlcnNreShzb3VyY2VTZXQsIHRhcmdldFNldClcclxuICAgIC8vICAgICByZXN1bHRzW3RvXSA9IHtcclxuICAgIC8vICAgICAgIG1lYXN1cmUsXHJcbiAgICAvLyAgICAgICBleHRyYTogW10sXHJcbiAgICAvLyAgICAgfVxyXG4gICAgLy8gICB9KVxyXG4gICAgLy8gICByZXR1cm4gcmVzdWx0c1xyXG4gICAgLy8gfSxcclxuXHJcbiAgICAnT3RzdWthLUNoaWFpJzogYXN5bmMgKGE6IHN0cmluZyk6IFByb21pc2U8UmVzdWx0TWFwPiA9PiB7XHJcbiAgICAgIGNvbnN0IHJlc3VsdHM6IFJlc3VsdE1hcCA9IHt9XHJcbiAgICAgIGNvbnN0IG5scCA9IGdldE5MUFBsdWdpbih0aGlzLmFwcClcclxuICAgICAgaWYgKCFubHApIHJldHVybiByZXN1bHRzXHJcblxyXG4gICAgICBjb25zdCB7IERvY3MgfSA9IG5scFxyXG4gICAgICBjb25zdCBzb3VyY2VTZXQgPSBubHAuZ2V0Tm9TdG9wU2V0KERvY3NbYV0pXHJcblxyXG4gICAgICB0aGlzLmZvckVhY2hOb2RlKGFzeW5jICh0bzogc3RyaW5nKSA9PiB7XHJcbiAgICAgICAgY29uc3QgdGFyZ2V0RG9jID0gRG9jc1t0b11cclxuICAgICAgICBpZiAoIXRhcmdldERvYykge1xyXG4gICAgICAgICAgcmVzdWx0c1t0b10gPSB7IG1lYXN1cmU6IDAsIGV4dHJhOiBbXSB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IHRhcmdldFNldCA9IG5scC5nZXROb1N0b3BTZXQoRG9jc1t0b10pXHJcblxyXG4gICAgICAgIGNvbnN0IG1lYXN1cmUgPSBzaW1pbGFyaXR5LnNldC5vbyhzb3VyY2VTZXQsIHRhcmdldFNldClcclxuICAgICAgICByZXN1bHRzW3RvXSA9IHtcclxuICAgICAgICAgIG1lYXN1cmUsXHJcbiAgICAgICAgICBleHRyYTogW10sXHJcbiAgICAgICAgfVxyXG4gICAgICB9KVxyXG4gICAgICByZXR1cm4gcmVzdWx0c1xyXG4gICAgfSxcclxuXHJcbiAgICBTZW50aW1lbnQ6IGFzeW5jIChhOiBzdHJpbmcpOiBQcm9taXNlPFJlc3VsdE1hcD4gPT4ge1xyXG4gICAgICBjb25zdCByZXN1bHRzOiBSZXN1bHRNYXAgPSB7fVxyXG4gICAgICBjb25zdCBubHAgPSBnZXROTFBQbHVnaW4odGhpcy5hcHApXHJcbiAgICAgIGlmICghbmxwKSByZXR1cm4gcmVzdWx0c1xyXG5cclxuICAgICAgY29uc3QgeyBEb2NzIH0gPSBubHBcclxuICAgICAgdGhpcy5mb3JFYWNoTm9kZSgobm9kZSkgPT4ge1xyXG4gICAgICAgIGNvbnN0IGRvYyA9IERvY3Nbbm9kZV1cclxuICAgICAgICBpZiAoIWRvYykge1xyXG4gICAgICAgICAgcmVzdWx0c1tub2RlXSA9IHsgbWVhc3VyZTogMCwgZXh0cmE6IFtdIH1cclxuICAgICAgICAgIHJldHVyblxyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBtZWFzdXJlID0gbmxwLmdldEF2Z1NlbnRpbWVudEZyb21Eb2MoZG9jKVxyXG4gICAgICAgIHJlc3VsdHNbbm9kZV0gPSB7IG1lYXN1cmUsIGV4dHJhOiBbXSB9XHJcbiAgICAgIH0pXHJcbiAgICAgIHJldHVybiByZXN1bHRzXHJcbiAgICB9LFxyXG5cclxuICAgIC8vICdDbG9zZW5lc3MnOiAoYTogc3RyaW5nKSA9PiB7XHJcbiAgICAvLyAgICAgY29uc3QgcGF0aHMgPSBncmFwaGxpYi5hbGcuZGlqa3N0cmEodGhpcywgYSk7XHJcbiAgICAvLyAgICAgY29uc3QgcmVzdWx0czogbnVtYmVyW10gPSBbXVxyXG4gICAgLy8gICAgIGNvbnN0IG5Ob2RlcyA9IHRoaXMubm9kZXMoKS5sZW5ndGhcclxuXHJcbiAgICAvLyAgICAgY29uc3QgZGlzdGFuY2VzID0gW107XHJcbiAgICAvLyAgICAgZm9yIChjb25zdCB0byBpbiBwYXRocykge1xyXG4gICAgLy8gICAgICAgICBjb25zdCBkaXN0ID0gcGF0aHNbdG9dLmRpc3RhbmNlO1xyXG4gICAgLy8gICAgICAgICBpZiAoZGlzdCA8IEluZmluaXR5KSB7XHJcbiAgICAvLyAgICAgICAgICAgICBkaXN0YW5jZXMucHVzaChkaXN0KTtcclxuICAgIC8vICAgICAgICAgfVxyXG4gICAgLy8gICAgIH1cclxuXHJcbiAgICAvLyAgICAgaWYgKGRpc3RhbmNlcy5sZW5ndGggPiAwKSB7XHJcbiAgICAvLyAgICAgICAgIGNsb3NlbmVzcyA9IHJvdW5kTnVtYmVyKChuTm9kZXMgLSAxKSAvIHN1bShkaXN0YW5jZXMpKTtcclxuICAgIC8vICAgICB9IGVsc2Uge1xyXG4gICAgLy8gICAgICAgICBjbG9zZW5lc3MgPSAwO1xyXG4gICAgLy8gICAgIH1cclxuICAgIC8vICAgICByZXR1cm4gcmVzdWx0c1xyXG4gICAgLy8gfSxcclxuICB9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGdldE5MUFBsdWdpbihhcHA6IEFwcCk6IE5MUFBsdWdpbiB8IG51bGwge1xyXG4gIGNvbnN0IHsgbmxwIH0gPSBhcHAucGx1Z2lucy5wbHVnaW5zXHJcbiAgaWYgKCFubHApIHtcclxuICAgIG5ldyBOb3RpY2UoXHJcbiAgICAgICdUaGUgTkxQIHBsdWdpbiBtdXN0IGJlIGluc3RhbGxlZCAmIGVuYWJsZWQgdG8gdXNlIHRoZSBcdUQ4M0RcdURDQUMgYWxnb3JpdGhtcy4nXHJcbiAgICApXHJcbiAgICByZXR1cm4gbnVsbFxyXG4gIH0gZWxzZSBpZiAoIW5scD8uc2V0dGluZ3M/LnJlZnJlc2hEb2NzT25Mb2FkKSB7XHJcbiAgICBuZXcgTm90aWNlKCdJbiB0aGUgTkxQIHBsdWdpbiwgZW5hYmxlIHRoZSBzZXR0aW5nIFwiUmVmcmVzaCBEb2NzIG9uIGxvYWRcIi4nKVxyXG4gICAgcmV0dXJuIG51bGxcclxuICB9IGVsc2UgcmV0dXJuIG5scFxyXG59XHJcbiIsICJpbXBvcnQgdHlwZSB7IENvbW11bml0aWVzIH0gZnJvbSAnc3JjL0ludGVyZmFjZXMnXHJcbmltcG9ydCB0eXBlIE15R3JhcGggZnJvbSAnc3JjL015R3JhcGgnXHJcblxyXG5leHBvcnQgZnVuY3Rpb24gaW50ZXJzZWN0aW9uKG5vZGVzMTogc3RyaW5nW10sIG5vZGVzMjogc3RyaW5nW10pIHtcclxuICByZXR1cm4gbm9kZXMxPy5maWx0ZXIoKG5vZGUxKSA9PiBub2RlczIuaW5jbHVkZXMobm9kZTEpKSA/PyBbXVxyXG59XHJcblxyXG4vLyBleHBvcnQgZnVuY3Rpb24gZWNjZW50cmljaXR5KGc6IE15R3JhcGgsIGE6IHN0cmluZykge1xyXG4vLyAgIGNvbnN0IHBhdGhzID0gZ3JhcGhsaWIuYWxnLmRpamtzdHJhKGcsIGEpXHJcbi8vICAgY29uc3QgcGF0aHNBcnI6IFtzdHJpbmcsIGdyYXBobGliLlBhdGhdW10gPSBPYmplY3QuZW50cmllcyhwYXRocylcclxuLy8gICBjb25zdCBzb3J0ZWRQYXRocyA9IHBhdGhzQXJyLnNvcnQoKHAsIHEpID0+XHJcbi8vICAgICBwWzFdLmRpc3RhbmNlID4gcVsxXS5kaXN0YW5jZSA/IDEgOiAtMVxyXG4vLyAgIClcclxuLy8gICByZXR1cm4gc29ydGVkUGF0aHNcclxuLy8gfVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGNsdXN0ZXJpbmdDb2VmZmljaWVudChnOiBNeUdyYXBoLCB1OiBzdHJpbmcpIHtcclxuICBjb25zdCB0cmlhbmdsZXMgPSBmaW5kVHJpYW5nbGVzRm9yTm9kZShnLCB1KVxyXG4gIGNvbnN0IGRlZyA9IChnLm5laWdoYm9ycyh1KSBhcyBzdHJpbmdbXSkubGVuZ3RoXHJcbiAgaWYgKGRlZyA9PT0gMCB8fCBkZWcgPT09IDEpIHJldHVybiB7IGNvZWZmOiAwLCB0cmlhbmdsZXMgfVxyXG5cclxuICBjb25zdCBjb2VmZiA9ICgyICogdHJpYW5nbGVzLmxlbmd0aCkgLyAoZGVnICogKGRlZyAtIDEpKVxyXG4gIHJldHVybiB7IGNvZWZmLCB0cmlhbmdsZXMgfVxyXG59XHJcblxyXG4vKipcclxuICogRmluZCBhbGwgdHJpYW5nbGVzIHRoYXQgbm9kZSB1IGlzIHBhcnQgb2ZcclxuICogQHBhcmFtICB7TXlHcmFwaH0gZ1xyXG4gKiBAcGFyYW0gIHtzdHJpbmd9IHVcclxuICogQHJldHVybnMge1tzdHJpbmcsIHN0cmluZ11bXX1cclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBmaW5kVHJpYW5nbGVzRm9yTm9kZShcclxuICBnOiBNeUdyYXBoLFxyXG4gIHU6IHN0cmluZ1xyXG4pOiBbc3RyaW5nLCBzdHJpbmddW10ge1xyXG4gIGNvbnN0IHRyaWFuZ2xlczogW3N0cmluZywgc3RyaW5nXVtdID0gW11cclxuICA7KGcubmVpZ2hib3JzKHUpIGFzIHN0cmluZ1tdKS5mb3JFYWNoKCh2KSA9PiB7XHJcbiAgICA7KGcubmVpZ2hib3JzKHYpIGFzIHN0cmluZ1tdKS5mb3JFYWNoKCh3KSA9PiB7XHJcbiAgICAgIGlmIChnLmhhc0VkZ2UodSwgdikgJiYgZy5oYXNFZGdlKHUsIHcpICYmIGcuaGFzRWRnZSh2LCB3KSkge1xyXG4gICAgICAgIHRyaWFuZ2xlcy5wdXNoKFt2LCB3XSlcclxuICAgICAgfVxyXG4gICAgfSlcclxuICB9KVxyXG4gIHJldHVybiB0cmlhbmdsZXNcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGdhdGhlckNvbW11bml0aWVzKGxhYmVsZWROb2Rlczoge1xyXG4gIFtub2RlOiBzdHJpbmddOiBzdHJpbmcgfCBudW1iZXJcclxufSkge1xyXG4gIGNvbnN0IGNvbW11bml0aWVzOiBDb21tdW5pdGllcyA9IHt9XHJcbiAgT2JqZWN0LmVudHJpZXMobGFiZWxlZE5vZGVzKS5mb3JFYWNoKFxyXG4gICAgKGxhYmVsZWROb2RlOiBbc3RyaW5nLCBzdHJpbmcgfCBudW1iZXJdKSA9PiB7XHJcbiAgICAgIGNvbnN0IFtub2RlLCBsYWJlbF0gPSBsYWJlbGVkTm9kZVxyXG4gICAgICBpZiAoY29tbXVuaXRpZXNbbGFiZWxdID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICBjb21tdW5pdGllc1tsYWJlbF0gPSBbbm9kZV1cclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBjb21tdW5pdGllc1tsYWJlbF0ucHVzaChub2RlKVxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgKVxyXG4gIHJldHVybiBjb21tdW5pdGllc1xyXG59XHJcbiIsICJpbXBvcnQgeyBBcHAsIE5vdGljZSwgUGx1Z2luU2V0dGluZ1RhYiwgU2V0dGluZyB9IGZyb20gJ29ic2lkaWFuJ1xyXG5pbXBvcnQgeyBBTkFMWVNJU19UWVBFUyB9IGZyb20gJ3NyYy9Db25zdGFudHMnXHJcbmltcG9ydCB0eXBlIHsgU3VidHlwZSB9IGZyb20gJ3NyYy9JbnRlcmZhY2VzJ1xyXG5pbXBvcnQgdHlwZSBHcmFwaEFuYWx5c2lzUGx1Z2luIGZyb20gJ3NyYy9tYWluJ1xyXG5pbXBvcnQgQ2hlY2tib3hlcyBmcm9tICcuL0NvbXBvbmVudHMvQ2hlY2tib3hlcy5zdmVsdGUnXHJcblxyXG5leHBvcnQgY2xhc3MgU2FtcGxlU2V0dGluZ1RhYiBleHRlbmRzIFBsdWdpblNldHRpbmdUYWIge1xyXG4gIHBsdWdpbjogR3JhcGhBbmFseXNpc1BsdWdpblxyXG5cclxuICBjb25zdHJ1Y3RvcihhcHA6IEFwcCwgcGx1Z2luOiBHcmFwaEFuYWx5c2lzUGx1Z2luKSB7XHJcbiAgICBzdXBlcihhcHAsIHBsdWdpbilcclxuICAgIHRoaXMucGx1Z2luID0gcGx1Z2luXHJcbiAgfVxyXG5cclxuICBkaXNwbGF5KCk6IHZvaWQge1xyXG4gICAgY29uc3QgcGx1Z2luID0gdGhpcy5wbHVnaW5cclxuICAgIGxldCB7IGNvbnRhaW5lckVsIH0gPSB0aGlzXHJcbiAgICBjb25zdCB7IHNldHRpbmdzIH0gPSBwbHVnaW5cclxuXHJcbiAgICBjb250YWluZXJFbC5lbXB0eSgpXHJcblxyXG4gICAgY29udGFpbmVyRWwuY3JlYXRlRWwoJ2gzJywgeyB0ZXh0OiAnQW5hbHlzaXMgRGVmYXVsdHMnIH0pXHJcblxyXG4gICAgbmV3IFNldHRpbmcoY29udGFpbmVyRWwpXHJcbiAgICAgIC5zZXROYW1lKCdEZWZhdWx0IEFuYWx5c2lzIFR5cGUnKVxyXG4gICAgICAuc2V0RGVzYygnV2hpY2ggYW5hbHlzaXMgdHlwZSB0byBzaG93IG9uIHN0YXJ0dXAnKVxyXG4gICAgICAuYWRkRHJvcGRvd24oKGRkKSA9PiB7XHJcbiAgICAgICAgZGQuc2V0VmFsdWUoc2V0dGluZ3MuZGVmYXVsdFN1YnR5cGVUeXBlKVxyXG4gICAgICAgIGNvbnN0IGRpY3QgPSB7fVxyXG4gICAgICAgIHNldHRpbmdzLmFsZ3NUb1Nob3cuZm9yRWFjaCgoc3VidHlwZSkgPT4ge1xyXG4gICAgICAgICAgZGljdFtzdWJ0eXBlXSA9IHN1YnR5cGVcclxuICAgICAgICB9KVxyXG4gICAgICAgIGRkLmFkZE9wdGlvbnMoZGljdCkub25DaGFuZ2UoYXN5bmMgKG9wdGlvbikgPT4ge1xyXG4gICAgICAgICAgc2V0dGluZ3MuZGVmYXVsdFN1YnR5cGVUeXBlID0gb3B0aW9uIGFzIFN1YnR5cGVcclxuICAgICAgICAgIGF3YWl0IHBsdWdpbi5zYXZlU2V0dGluZ3MoKVxyXG4gICAgICAgIH0pXHJcbiAgICAgIH0pXHJcblxyXG4gICAgY29udGFpbmVyRWwuY3JlYXRlRWwoJ2gzJywgeyB0ZXh0OiAnQWxnb3JpdGhtcyB0byBTaG93JyB9KVxyXG4gICAgbmV3IENoZWNrYm94ZXMoe1xyXG4gICAgICB0YXJnZXQ6IGNvbnRhaW5lckVsLFxyXG4gICAgICBwcm9wczoge1xyXG4gICAgICAgIG9wdGlvbnM6IEFOQUxZU0lTX1RZUEVTLm1hcCgodHlwZSkgPT4gdHlwZS5zdWJ0eXBlKSxcclxuICAgICAgICBwbHVnaW4sXHJcbiAgICAgICAgc2V0dGluZ05hbWU6ICdhbGdzVG9TaG93JyxcclxuICAgICAgfSxcclxuICAgIH0pXHJcblxyXG4gICAgbmV3IFNldHRpbmcoY29udGFpbmVyRWwpXHJcbiAgICAgIC5zZXROYW1lKCdFeGNsdWRlIEluZmluaXR5JylcclxuICAgICAgLnNldERlc2MoJ1doZXRoZXIgdG8gZXhjbHVkZSBJbmZpbml0ZSB2YWx1ZXMgYnkgZGVmYXVsdCcpXHJcbiAgICAgIC5hZGRUb2dnbGUoKHRvZ2dsZSkgPT5cclxuICAgICAgICB0b2dnbGUuc2V0VmFsdWUoc2V0dGluZ3Mubm9JbmZpbml0eSkub25DaGFuZ2UoYXN5bmMgKHZhbHVlKSA9PiB7XHJcbiAgICAgICAgICBzZXR0aW5ncy5ub0luZmluaXR5ID0gdmFsdWVcclxuICAgICAgICAgIGF3YWl0IHBsdWdpbi5zYXZlU2V0dGluZ3MoKVxyXG4gICAgICAgIH0pXHJcbiAgICAgIClcclxuXHJcbiAgICBuZXcgU2V0dGluZyhjb250YWluZXJFbClcclxuICAgICAgLnNldE5hbWUoJ0V4Y2x1ZGUgWmVybycpXHJcbiAgICAgIC5zZXREZXNjKCdXaGV0aGVyIHRvIGV4Y2x1ZGUgWmVybyBieSBkZWZhdWx0JylcclxuICAgICAgLmFkZFRvZ2dsZSgodG9nZ2xlKSA9PlxyXG4gICAgICAgIHRvZ2dsZS5zZXRWYWx1ZShzZXR0aW5ncy5ub1plcm8pLm9uQ2hhbmdlKGFzeW5jICh2YWx1ZSkgPT4ge1xyXG4gICAgICAgICAgc2V0dGluZ3Mubm9aZXJvID0gdmFsdWVcclxuICAgICAgICAgIGF3YWl0IHBsdWdpbi5zYXZlU2V0dGluZ3MoKVxyXG4gICAgICAgIH0pXHJcbiAgICAgIClcclxuXHJcbiAgICBuZXcgU2V0dGluZyhjb250YWluZXJFbClcclxuICAgICAgLnNldE5hbWUoJ0luY2x1ZGUgQWxsIEZpbGUgRXh0ZW5zaW9ucycpXHJcbiAgICAgIC5zZXREZXNjKFxyXG4gICAgICAgICdXaGV0aGVyIHRvIGFsc28gc2hvdyBmaWxlcyB3aXRoIG5vbi1tZCBleHRlbnNpb25zIGluIHRoZSBhbmFseXNlcy4nXHJcbiAgICAgIClcclxuICAgICAgLmFkZFRvZ2dsZSgodG9nZ2xlKSA9PlxyXG4gICAgICAgIHRvZ2dsZS5zZXRWYWx1ZShzZXR0aW5ncy5hbGxGaWxlRXh0ZW5zaW9ucykub25DaGFuZ2UoYXN5bmMgKHZhbHVlKSA9PiB7XHJcbiAgICAgICAgICBzZXR0aW5ncy5hbGxGaWxlRXh0ZW5zaW9ucyA9IHZhbHVlXHJcbiAgICAgICAgICBhd2FpdCBwbHVnaW4uc2F2ZVNldHRpbmdzKClcclxuICAgICAgICB9KVxyXG4gICAgICApXHJcblxyXG4gICAgbmV3IFNldHRpbmcoY29udGFpbmVyRWwpXHJcbiAgICAgIC5zZXROYW1lKCdTaG93IFRodW1ibmFpbHMgZm9yIEltYWdlcycpXHJcbiAgICAgIC5zZXREZXNjKFxyXG4gICAgICAgICdXaGV0aGVyIHRvIHNob3cgc21hbGwgdGh1bWJuYWlscyBmb3IgaW1hZ2VzIChpZiBhbGwgZmlsZSBleHRlbnNpb25zIGFyZSBpbmNsdWRlZCkuJ1xyXG4gICAgICApXHJcbiAgICAgIC5hZGRUb2dnbGUoKHRvZ2dsZSkgPT5cclxuICAgICAgICB0b2dnbGUuc2V0VmFsdWUoc2V0dGluZ3Muc2hvd0ltZ1RodW1ibmFpbHMpLm9uQ2hhbmdlKGFzeW5jICh2YWx1ZSkgPT4ge1xyXG4gICAgICAgICAgc2V0dGluZ3Muc2hvd0ltZ1RodW1ibmFpbHMgPSB2YWx1ZVxyXG4gICAgICAgICAgYXdhaXQgcGx1Z2luLnNhdmVTZXR0aW5ncygpXHJcbiAgICAgICAgfSlcclxuICAgICAgKVxyXG5cclxuICAgIG5ldyBTZXR0aW5nKGNvbnRhaW5lckVsKVxyXG4gICAgICAuc2V0TmFtZSgnSW5jbHVkZSB0YWdzIChDby1DaXRhdGlvbnMpJylcclxuICAgICAgLnNldERlc2MoXHJcbiAgICAgICAgJ1doZXRoZXIgdG8gYWxzbyBzaG93IHRoZSB0YWdzIHRoYXQgYXJlIGNvLWNpdGVkIGluIHRoZSBjby1jaXRhdGlvbnMgYWxnb3JpdGhtLidcclxuICAgICAgKVxyXG4gICAgICAuYWRkVG9nZ2xlKCh0b2dnbGUpID0+XHJcbiAgICAgICAgdG9nZ2xlLnNldFZhbHVlKHNldHRpbmdzLmNvVGFncykub25DaGFuZ2UoYXN5bmMgKHZhbHVlKSA9PiB7XHJcbiAgICAgICAgICBzZXR0aW5ncy5jb1RhZ3MgPSB2YWx1ZVxyXG4gICAgICAgICAgYXdhaXQgcGx1Z2luLnNhdmVTZXR0aW5ncygpXHJcbiAgICAgICAgfSlcclxuICAgICAgKVxyXG5cclxuICAgIG5ldyBTZXR0aW5nKGNvbnRhaW5lckVsKVxyXG4gICAgICAuc2V0TmFtZSgnSW5jbHVkZSBVbnJlc29sdmVkIExpbmtzJylcclxuICAgICAgLnNldERlc2MoJ1doZXRoZXIgdG8gYWxzbyBzaG93IGxpbmtzIHRoYXQgaGF2ZSBub3QgeWV0IGJlZW4gY3JlYXRlZC4nKVxyXG4gICAgICAuYWRkVG9nZ2xlKCh0b2dnbGUpID0+XHJcbiAgICAgICAgdG9nZ2xlLnNldFZhbHVlKHNldHRpbmdzLmFkZFVucmVzb2x2ZWQpLm9uQ2hhbmdlKGFzeW5jICh2YWx1ZSkgPT4ge1xyXG4gICAgICAgICAgc2V0dGluZ3MuYWRkVW5yZXNvbHZlZCA9IHZhbHVlXHJcbiAgICAgICAgICBhd2FpdCBwbHVnaW4uc2F2ZVNldHRpbmdzKClcclxuICAgICAgICB9KVxyXG4gICAgICApXHJcblxyXG4gICAgbmV3IFNldHRpbmcoY29udGFpbmVyRWwpXHJcbiAgICAgIC5zZXROYW1lKCdFeGNsdXNpb24gVGFncycpXHJcbiAgICAgIC5zZXREZXNjKFxyXG4gICAgICAgIFwiQSBjb21tYS1zZXBhcmF0ZWQgbGlzdCBvZiB0YWdzLiBBbnkgbm90ZSB3aXRoIGFueSBvZiB0aGVzZSB0YWdzIHdvbid0IGJlIGluY2x1ZGVkIGluIHRoZSBncmFwaC4gSW5jbHVkZSB0aGUgYCNgIGluIGVhY2ggdGFnXCJcclxuICAgICAgKVxyXG4gICAgICAuYWRkVGV4dCgodGMpID0+IHtcclxuICAgICAgICB0Yy5zZXRWYWx1ZShzZXR0aW5ncy5leGNsdXNpb25UYWdzLmpvaW4oJywgJykpXHJcbiAgICAgICAgdGMuaW5wdXRFbC5vbmJsdXIgPSBhc3luYyAoKSA9PiB7XHJcbiAgICAgICAgICBjb25zdCB7IHZhbHVlIH0gPSB0Yy5pbnB1dEVsXHJcbiAgICAgICAgICBjb25zdCBzcGxpdHMgPSB2YWx1ZS5zcGxpdCgnLCcpLm1hcCgocykgPT4gcy50cmltKCkpXHJcbiAgICAgICAgICBpZiAodmFsdWUgIT09ICcnICYmICFzcGxpdHMuZXZlcnkoKHQpID0+IHQuc3RhcnRzV2l0aCgnIycpKSkge1xyXG4gICAgICAgICAgICBuZXcgTm90aWNlKFwiRXZlcnkgdGFnIG11c3Qgc3RhcnQgd2l0aCAnIydcIilcclxuICAgICAgICAgICAgcmV0dXJuXHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBzZXR0aW5ncy5leGNsdXNpb25UYWdzID0gc3BsaXRzXHJcbiAgICAgICAgICBhd2FpdCBwbHVnaW4uc2F2ZVNldHRpbmdzKClcclxuICAgICAgICB9XHJcbiAgICAgIH0pXHJcblxyXG4gICAgbmV3IFNldHRpbmcoY29udGFpbmVyRWwpXHJcbiAgICAgIC5zZXROYW1lKCdFeGNsdXNpb24gUmVnZXgnKVxyXG4gICAgICAuc2V0RGVzYyhcclxuICAgICAgICBjcmVhdGVGcmFnbWVudCgoZWwpID0+IHtcclxuICAgICAgICAgIGVsLmNyZWF0ZUVsKCdwJywge1xyXG4gICAgICAgICAgICB0ZXh0OiBcIlJlZ2V4IHRvIGV4Y2x1ZGUgdmFsdWVzIGZyb20gYW5hbHlzaXMuIElmIGEgZmlsZSBuYW1lIG1hdGNoZXMgdGhpcyByZWdleCwgaXQgd29uJ3QgYmUgYWRkZWQgdG8gdGhlIGdyYXBoLlwiLFxyXG4gICAgICAgICAgfSlcclxuICAgICAgICAgIGNvbnN0IHNwYW4gPSBlbC5jcmVhdGVTcGFuKClcclxuICAgICAgICAgIHNwYW4uY3JlYXRlU3Bhbih7IHRleHQ6ICdEZWZhdWx0IGlzICcgfSlcclxuICAgICAgICAgIHNwYW4uY3JlYXRlRWwoJ2NvZGUnLCB7IHRleHQ6ICcoPzopJyB9KVxyXG4gICAgICAgICAgc3Bhbi5jcmVhdGVTcGFuKHsgdGV4dDogJyBvciAnIH0pXHJcbiAgICAgICAgICBzcGFuLmNyZWF0ZUVsKCdjb2RlJywgeyB0ZXh0OiBcIicnXCIgfSlcclxuICAgICAgICAgIHNwYW4uY3JlYXRlU3Bhbih7XHJcbiAgICAgICAgICAgIHRleHQ6ICcgKGVtcHR5IHN0cmluZykuIEVpdGhlciBvcHRpb24gd2lsbCBhbGxvdyBhbGwgbm90ZXMgdGhyb3VnaCB0aGUgZmlsdGVyIChyZWd1bGFyIEdyYXBoIEFubGF5c2lzIGJlaGF2aW91cikuJyxcclxuICAgICAgICAgIH0pXHJcblxyXG4gICAgICAgICAgZWwuY3JlYXRlRWwoJ3AnLCB7XHJcbiAgICAgICAgICAgIHRleHQ6ICdSZW1lYmVyIHRoYXQgdGhlIHJlZ2V4IHdpbGwgYmUgdGVzdGVkIGFnYWluc3QgdGhlIGZ1bGwgZmlsZSBwYXRoIG9mIGVhY2ggbm90ZSAobm90IGp1c3QgdGhlIGJhc2VuYW1lKS4gU28geW91IG1heSBuZWVkIHRvIGluY2x1ZGUgXCJmb2xkZXJzL1wiIGFuZCBcIi5tZFwiIGZvciBzb21lIHJlZ2V4ZXMuJyxcclxuICAgICAgICAgIH0pXHJcbiAgICAgICAgfSlcclxuICAgICAgKVxyXG4gICAgICAuYWRkVGV4dCgodGV4dENvbXApID0+IHtcclxuICAgICAgICB0ZXh0Q29tcC5zZXRWYWx1ZShzZXR0aW5ncy5leGNsdXNpb25SZWdleClcclxuICAgICAgICB0ZXh0Q29tcC5pbnB1dEVsLm9uYmx1ciA9IGFzeW5jICgpID0+IHtcclxuICAgICAgICAgIGNvbnN0IHZhbHVlID0gdGV4dENvbXAuZ2V0VmFsdWUoKVxyXG4gICAgICAgICAgLy8gVGVzdCBpZiB2YWxpZCByZWdleCBhbmQgc2F2ZVxyXG4gICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgbmV3IFJlZ0V4cCh2YWx1ZSlcclxuICAgICAgICAgICAgc2V0dGluZ3MuZXhjbHVzaW9uUmVnZXggPSB2YWx1ZVxyXG4gICAgICAgICAgICBhd2FpdCBwbHVnaW4uc2F2ZVNldHRpbmdzKClcclxuICAgICAgICAgICAgYXdhaXQgdGhpcy5wbHVnaW4ucmVmcmVzaEdyYXBoKClcclxuICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcclxuICAgICAgICAgICAgLy8gSW52YWxpZCByZWdleFxyXG4gICAgICAgICAgICBuZXcgTm90aWNlKFxyXG4gICAgICAgICAgICAgIGAke3ZhbHVlfSBpcyBub3QgYSB2YWxpZCByZWd1bGFyIGV4cHJlc3Npb24uIE1ha2Ugc3VyZSB5b3UgaGF2ZSBjbG9zZWQgYWxsIGJyYWNrZXRzLCBhbmQgZXNjYXBlZCBhbnkgY2hhcmFjdGVycyB3aGVyZSBuZWNlc3NhcnkuYFxyXG4gICAgICAgICAgICApXHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICB9KVxyXG5cclxuICAgIGNvbnRhaW5lckVsLmNyZWF0ZUVsKCdoMycsIHsgdGV4dDogJ0RlYnVnZ2luZyBPcHRpb25zJyB9KVxyXG5cclxuICAgIG5ldyBTZXR0aW5nKGNvbnRhaW5lckVsKVxyXG4gICAgICAuc2V0TmFtZSgnRGVidWcgTW9kZScpXHJcbiAgICAgIC5zZXREZXNjKFxyXG4gICAgICAgICdUb2dnbGluZyB0aGlzIG9uIHdpbGwgZW5hYmxlIGEgZmV3IGNvbnNvbGUgbG9ncyB0byBhcHBlYXIgd2hlbiB1c2luZyB0aGUgZ3JhcGggYW5hbHlzaXMgdmlldy4nXHJcbiAgICAgIClcclxuICAgICAgLmFkZFRvZ2dsZSgodG9nZ2xlKSA9PlxyXG4gICAgICAgIHRvZ2dsZS5zZXRWYWx1ZShzZXR0aW5ncy5kZWJ1Z01vZGUpLm9uQ2hhbmdlKGFzeW5jICh2YWx1ZSkgPT4ge1xyXG4gICAgICAgICAgc2V0dGluZ3MuZGVidWdNb2RlID0gdmFsdWVcclxuICAgICAgICAgIGF3YWl0IHBsdWdpbi5zYXZlU2V0dGluZ3MoKVxyXG4gICAgICAgIH0pXHJcbiAgICAgIClcclxuXHJcbiAgICBuZXcgU2V0dGluZyhjb250YWluZXJFbClcclxuICAgICAgLnNldE5hbWUoJ1N1cGVyIERlYnVnIE1vZGUnKVxyXG4gICAgICAuc2V0RGVzYygnVG9nZ2xpbmcgdGhpcyBvbiB3aWxsIGVuYWJsZSBBTE9UIG9mIGNvbnNvbGUgbG9ncycpXHJcbiAgICAgIC5hZGRUb2dnbGUoKHRvZ2dsZSkgPT5cclxuICAgICAgICB0b2dnbGUuc2V0VmFsdWUoc2V0dGluZ3Muc3VwZXJEZWJ1Z01vZGUpLm9uQ2hhbmdlKGFzeW5jICh2YWx1ZSkgPT4ge1xyXG4gICAgICAgICAgc2V0dGluZ3Muc3VwZXJEZWJ1Z01vZGUgPSB2YWx1ZVxyXG4gICAgICAgICAgYXdhaXQgcGx1Z2luLnNhdmVTZXR0aW5ncygpXHJcbiAgICAgICAgfSlcclxuICAgICAgKVxyXG4gIH1cclxufVxyXG4iLCAiPHNjcmlwdCBsYW5nPVwidHNcIj5cclxuICBpbXBvcnQgQW5hbHlzaXNWaWV3IGZyb20gJy4uL0FuYWx5c2lzVmlldydcclxuXHJcbiAgaW1wb3J0IHR5cGUgR3JhcGhBbmFseXNpc1BsdWdpbiBmcm9tICcuLi9tYWluJ1xyXG5cclxuICBleHBvcnQgbGV0IHBsdWdpbjogR3JhcGhBbmFseXNpc1BsdWdpblxyXG4gIGV4cG9ydCBsZXQgc2V0dGluZ05hbWU6IHN0cmluZ1xyXG4gIGV4cG9ydCBsZXQgb3B0aW9uczogc3RyaW5nW11cclxuICBsZXQgc2VsZWN0ZWQgPSBwbHVnaW4uc2V0dGluZ3Nbc2V0dGluZ05hbWVdIGFzIHN0cmluZ1tdXHJcblxyXG4gIGxldCB0b05vbmUgPSBzZWxlY3RlZC5sZW5ndGggPT09IDAgPyBmYWxzZSA6IHRydWVcclxuICAkOiB0b05vbmUgPSBzZWxlY3RlZC5sZW5ndGggPT09IDAgPyBmYWxzZSA6IHRydWVcclxuXHJcbiAgYXN5bmMgZnVuY3Rpb24gc2F2ZSgpIHtcclxuICAgIGlmIChwbHVnaW4uc2V0dGluZ3Nbc2V0dGluZ05hbWVdID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgcmV0dXJuIGNvbnNvbGUubG9nKHNldHRpbmdOYW1lICsgJyBub3QgZm91bmQgaW4gQkMgc2V0dGluZ3MnKVxyXG4gICAgfVxyXG5cclxuICAgIHBsdWdpbi5zZXR0aW5nc1tzZXR0aW5nTmFtZV0gPSBzZWxlY3RlZFxyXG4gICAgYXdhaXQgcGx1Z2luLnNhdmVTZXR0aW5ncygpXHJcbiAgfVxyXG48L3NjcmlwdD5cclxuXHJcbjxkaXY+XHJcbiAgPGJ1dHRvblxyXG4gICAgb246Y2xpY2s9e2FzeW5jICgpID0+IHtcclxuICAgICAgaWYgKHRvTm9uZSkgc2VsZWN0ZWQgPSBbXVxyXG4gICAgICBlbHNlIHNlbGVjdGVkID0gb3B0aW9uc1xyXG5cclxuICAgICAgYXdhaXQgc2F2ZSgpXHJcbiAgICB9fVxyXG4gID5cclxuICAgIFNlbGVjdCB7dG9Ob25lID8gJ05vbmUnIDogJ0FsbCd9XHJcbiAgPC9idXR0b24+XHJcbjwvZGl2PlxyXG5cclxuPGRpdiBjbGFzcz1cImdyaWRcIj5cclxuICB7I2VhY2ggb3B0aW9ucyBhcyBvcHRpb259XHJcbiAgICA8ZGl2PlxyXG4gICAgICA8bGFiZWw+XHJcbiAgICAgICAgPGlucHV0XHJcbiAgICAgICAgICB0eXBlPVwiY2hlY2tib3hcIlxyXG4gICAgICAgICAgdmFsdWU9e29wdGlvbn1cclxuICAgICAgICAgIGJpbmQ6Z3JvdXA9e3NlbGVjdGVkfVxyXG4gICAgICAgICAgb246Y2hhbmdlPXthc3luYyAoKSA9PiBzYXZlKCl9XHJcbiAgICAgICAgLz5cclxuICAgICAgICB7b3B0aW9ufVxyXG4gICAgICA8L2xhYmVsPlxyXG4gICAgPC9kaXY+XHJcbiAgey9lYWNofVxyXG48L2Rpdj5cclxuXHJcbjxzdHlsZT5cclxuICAuZ3JpZCB7XHJcbiAgICBkaXNwbGF5OiBncmlkO1xyXG4gICAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiAxZnIgMWZyIDFmcjtcclxuICAgIC8qIGdyaWQtZ2FwOiAxMHB4OyAqL1xyXG4gIH1cclxuPC9zdHlsZT5cclxuIl0sCiAgIm1hcHBpbmdzIjogIjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7Z0dBQUFBLFNBQUE7S0FBQSxTQUFBLGlDQUFBLE1BQUEsU0FBQTtBQUNBLFVBQUEsT0FBQSxZQUFBLFlBQUEsT0FBQUEs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V0FBSyxJQUFJLElBQUksUUFBUSxLQUFLLEtBQUssS0FBSyxRQUFRO0FBQzVDLFlBQU0sS0FBSyxFQUFFLFVBQVU7QUFFdkIsWUFBTSxLQUFLLFVBQVUsRUFBRSxHQUFHLEtBQUssRUFBRSxDQUFDO0FBQ2xDLGNBQVEsUUFBUSxrQkFBa0I7QUFDbEMsVUFBSSx3QkFBTyxpQkFBaUI7QUFBQSxJQUM5QixTQUFTLE9BQU87QUFDZCxjQUFRLElBQUksS0FBSztBQUNqQixVQUFJO0FBQUEsUUFDRjtBQUFBLE1BQ0Y7QUFBQSxJQUNGO0FBQUEsRUFDRjtBQUFBLEVBRUEsV0FBVztBQUNULFlBQVEsSUFBSSxpQ0FBaUM7QUFDN0MsU0FBSyxJQUFJLFVBQ04sZ0JBQWdCLHdCQUF3QixFQUN4QyxRQUFRLENBQUMsU0FBUztBQUNqQixXQUFLLEtBQUssT0FBTztBQUNqQixXQUFLLE9BQU87QUFBQSxJQUNkLENBQUM7QUFBQSxFQUNMO0FBQUEsRUFFQSxNQUFNLGVBQWU7QUFDbkIsU0FBSyxXQUFXLE9BQU8sT0FBTyxDQUFDLEdBQUcsa0JBQWtCLE1BQU0sS0FBSyxTQUFTLENBQUM7QUFBQSxFQUMzRTtBQUFBLEVBRUEsTUFBTSxlQUFlO0FBQ25CLFVBQU0sS0FBSyxTQUFTLEtBQUssUUFBUTtBQUFBLEVBQ25DO0FBQ0Y7IiwKICAibmFtZXMiOiBbIm1vZHVsZSIsICJleHBvcnRzIiwgImJpbmQiLCAiZ2xvYmFsIiwgImRvY3VtZW50IiwgIldlYWtNYXAiLCAic2V0IiwgIlJlZmxlY3QiLCAic2l6ZSIsICJTeW1ib2wiLCAiSWNvbiIsICJuYW1lIiwgImNvbnRlbnRzIiwgInRhZ3MiLCAiYXR0cnMiLCAiREVGQVVMVF9BVFRSUyIsICJjbGFzcyIsICJjb21iaW5lZEF0dHJzIiwgImF0dHJzVG9TdHJpbmciLCAiT2JqZWN0IiwgImtleXMiLCAibWFwIiwgImtleSIsICJqb2luIiwgImljb25zIiwgInJlZHVjZSIsICJvYmplY3QiLCAiaWNvbiIsICJ0b1N2ZyIsICJyZXBsYWNlIiwgIkVycm9yIiwgImVsZW1lbnRzVG9SZXBsYWNlIiwgInF1ZXJ5U2VsZWN0b3JBbGwiLCAiQXJyYXkiLCAiZnJvbSIsICJmb3JFYWNoIiwgImVsZW1lbnQiLCAicmVwbGFjZUVsZW1lbnQiLCAiZWxlbWVudEF0dHJzIiwgImdldEF0dHJzIiwgInVuZGVmaW5lZCIsICJjb25zb2xlIiwgIndhcm4iLCAic3ZnU3RyaW5nIiwgInN2Z0RvY3VtZW50IiwgIkRPTVBhcnNlciIsICJwYXJzZUZyb21TdHJpbmciLCAic3ZnRWxlbWVudCIsICJxdWVyeVNlbGVjdG9yIiwgInBhcmVudE5vZGUiLCAicmVwbGFjZUNoaWxkIiwgImF0dHJpYnV0ZXMiLCAiYXR0ciIsICJ2YWx1ZSIsICJtb2R1bGUiLCAiZSIsICJ0IiwgIm4iLCAiaSIsICJvIiwgImEiLCAiciIsICJ1IiwgImMiLCAiZCIsICJzIiwgImgiLCAiZiIsICJwIiwgImwiLCAiZyIsICJ5IiwgInYiLCAiYiIsICJ3IiwgIm0iLCAibW9kdWxlIiwgIm1vZHVsZSIsICJtb2R1bGUiLCAibW9kdWxlIiwgIkl0ZXJhdG9yIiwgInNpemUiLCAibW9kdWxlIiwgIkl0ZXJhdG9yIiwgInNpemUiLCAibW9kdWxlIiwgIkl0ZXJhdG9yIiwgIm1vZHVsZSIsICJyZXF1aXJlX3R5cGVkX2FycmF5cyIsICJzaXplIiwgInNpemUiLCAic2VsZiIsICJhdHRyIiwgIm1vZHVsZSIsICJsb3V2YWluIiwgImFzc2lnbiIsICJmbiIsICJtb2R1bGUiLCAic3VtIiwgImhpdHMiLCAiYXNzaWduIiwgInNpemUiLCAibW9kdWxlIiwgInRleHQiLCAidGV4dCIsICJtb2R1bGUiLCAic2ltaWxhcml0eSIsICJlbGVtZW50IiwgImltcG9ydF9vYnNpZGlhbiIsICJpbXBvcnRfb2JzaWRpYW4iLCAiZWxlbWVudCIsICJfYSIsICJlbGVtZW50IiwgInRleHQiLCAiZWxlbWVudCIsICJkZXRhY2giLCAidXBkYXRlIiwgImJsb2NrIiwgImN1cnJlbnRfY29tcG9uZW50IiwgInVwZGF0ZSIsICJpbnN0YW5jZSIsICJjcmVhdGVfZnJhZ21lbnQiLCAiY3JlYXRlX3Nsb3QiLCAiYXR0ciIsICJpbXBvcnRfb2JzaWRpYW4iLCAiaW1wb3J0X29ic2lkaWFuIiwgImhvdmVyUHJldmlldyIsICJvcGVuT3JTd2l0Y2giLCAiY3R4IiwgImN0eCIsICJjcmVhdGVfaWZfYmxvY2siLCAiY3JlYXRlX2ZyYWdtZW50IiwgImN0eCIsICJpbnN0YW5jZSIsICJ3aW5kb3ciLCAiZWxlbWVudCIsICJyZXZlcnNlIiwgImhvcml6b250YWwiLCAiJCRwcm9wcyIsICJjdHgiLCAiY3R4IiwgImN0eCIsICJjdHgiLCAiY3R4IiwgImN0eCIsICJjdHgiLCAiY3R4IiwgImN0eCIsICJjdHgiLCAiY3R4IiwgImN0eCIsICJjdHgiLCAiY3R4IiwgImN0eCIsICJjdHgiLCAiY3R4IiwgImN0eCIsICJjdHgiLCAiY3R4IiwgImN0eCIsICJjdHgiLCAiY3R4IiwgImN0eCIsICJjdHgiLCAiY3JlYXRlX2lmX2Jsb2NrXzYiLCAiY3JlYXRlX2lmX2Jsb2NrXzQiLCAiY3JlYXRlX2lmX2Jsb2NrXzIiLCAiY3JlYXRlX2lmX2Jsb2NrIiwgImN0eCIsICJjcmVhdGVfaWZfYmxvY2tfMyIsICJjcmVhdGVfaWZfYmxvY2tfMSIsICJjcmVhdGVfaWZfYmxvY2siLCAiY3VycmVudF9jb21wb25lbnQiLCAib3Blbk9yU3dpdGNoIiwgIm9wZW5PclN3aXRjaCIsICJjdHgiLCAiY3JlYXRlX2lmX2Jsb2NrXzQiLCAiY3JlYXRlX2lmX2Jsb2NrXzEiLCAiY3JlYXRlX2lmX2Jsb2NrIiwgInNpemUiLCAiY3VycmVudF9jb21wb25lbnQiLCAib3Blbk9yU3dpdGNoIiwgImhvdmVyUHJldmlldyIsICJjdHgiLCAiY3JlYXRlX2lmX2Jsb2NrIiwgInNpemUiLCAiY3VycmVudF9jb21wb25lbnQiLCAib3Blbk9yU3dpdGNoIiwgImN0eCIsICJjdHgiLCAiY3R4IiwgImNyZWF0ZV9pZl9ibG9ja18zIiwgImNyZWF0ZV9pZl9ibG9ja18yIiwgImNyZWF0ZV9pZl9ibG9jayIsICJjdHgiLCAiY3JlYXRlX2lmX2Jsb2NrXzMiLCAiY3JlYXRlX2lmX2Jsb2NrXzEiLCAiY3JlYXRlX2lmX2Jsb2NrIiwgInNpemUiLCAiY3VycmVudF9jb21wb25lbnQiLCAib3Blbk9yU3dpdGNoIiwgImN0eCIsICJjcmVhdGVfaWZfYmxvY2tfMSIsICJjcmVhdGVfaWZfYmxvY2siLCAic2l6ZSIsICJjdXJyZW50X2NvbXBvbmVudCIsICJvcGVuT3JTd2l0Y2giLCAiY3R4IiwgImltcG9ydF9vYnNpZGlhbiIsICJHcmFwaCIsICJoaXRzIiwgInRva2VuaXplciIsICJsaXN0SXRlbSIsICJmaWxlIiwgImxvdXZhaW4iLCAidGFncyIsICJpbXBvcnRfb2JzaWRpYW4iLCAiY3R4Il0KfQo=
